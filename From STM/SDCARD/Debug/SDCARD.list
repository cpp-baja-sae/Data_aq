
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d168  0800d168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800d178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800d1ec  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800d24c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  24000134  0800d2ac  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24000848  0800d2ac  00020848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca60  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004397  00000000  00000000  0004cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00050f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00052318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000350dd  00000000  00000000  00053578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc57  00000000  00000000  00088655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014f414  00000000  00000000  000a42ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f36c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  001f3714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000134 	.word	0x24000134
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cdb0 	.word	0x0800cdb0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000138 	.word	0x24000138
 800030c:	0800cdb0 	.word	0x0800cdb0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 80006be:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res;
	uint32_t byteswritten, bytesread;
	char wtext[] = "this is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 charactersthis is 512 characters\n";
 80006c0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006c4:	4ac9      	ldr	r2, [pc, #804]	; (80009ec <main+0x334>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	4611      	mov	r1, r2
 80006ca:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80006ce:	461a      	mov	r2, r3
 80006d0:	f00b ff38 	bl	800c544 <memcpy>
	char text[] = "empty place holder that needs length";
 80006d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80006d8:	4ac5      	ldr	r2, [pc, #788]	; (80009f0 <main+0x338>)
 80006da:	461c      	mov	r4, r3
 80006dc:	4615      	mov	r5, r2
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ea:	6020      	str	r0, [r4, #0]
 80006ec:	3404      	adds	r4, #4
 80006ee:	7021      	strb	r1, [r4, #0]
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006f0:	4bc0      	ldr	r3, [pc, #768]	; (80009f4 <main+0x33c>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11b      	bne.n	8000734 <main+0x7c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006fc:	f3bf 8f4f 	dsb	sy
}
 8000700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000702:	f3bf 8f6f 	isb	sy
}
 8000706:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000708:	4bba      	ldr	r3, [pc, #744]	; (80009f4 <main+0x33c>)
 800070a:	2200      	movs	r2, #0
 800070c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000710:	f3bf 8f4f 	dsb	sy
}
 8000714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000716:	f3bf 8f6f 	isb	sy
}
 800071a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800071c:	4bb5      	ldr	r3, [pc, #724]	; (80009f4 <main+0x33c>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4ab4      	ldr	r2, [pc, #720]	; (80009f4 <main+0x33c>)
 8000722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000726:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000728:	f3bf 8f4f 	dsb	sy
}
 800072c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800072e:	f3bf 8f6f 	isb	sy
}
 8000732:	e000      	b.n	8000736 <main+0x7e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000734:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000736:	4baf      	ldr	r3, [pc, #700]	; (80009f4 <main+0x33c>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d143      	bne.n	80007ca <main+0x112>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000742:	4bac      	ldr	r3, [pc, #688]	; (80009f4 <main+0x33c>)
 8000744:	2200      	movs	r2, #0
 8000746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000750:	4ba8      	ldr	r3, [pc, #672]	; (80009f4 <main+0x33c>)
 8000752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000756:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800075e:	0b5b      	lsrs	r3, r3, #13
 8000760:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000764:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000768:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000772:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000776:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800077a:	015a      	lsls	r2, r3, #5
 800077c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000780:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000782:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8000786:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000788:	499a      	ldr	r1, [pc, #616]	; (80009f4 <main+0x33c>)
 800078a:	4313      	orrs	r3, r2
 800078c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000790:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1eb      	bne.n	8000776 <main+0xbe>
    } while(sets-- != 0U);
 800079e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1dd      	bne.n	8000768 <main+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80007ac:	f3bf 8f4f 	dsb	sy
}
 80007b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007b2:	4b90      	ldr	r3, [pc, #576]	; (80009f4 <main+0x33c>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a8f      	ldr	r2, [pc, #572]	; (80009f4 <main+0x33c>)
 80007b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007be:	f3bf 8f4f 	dsb	sy
}
 80007c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c4:	f3bf 8f6f 	isb	sy
}
 80007c8:	e000      	b.n	80007cc <main+0x114>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 ff18 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f988 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 fb1a 	bl	8000e0c <MX_GPIO_Init>
  MX_ETH_Init();
 80007d8:	f000 f9f4 	bl	8000bc4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007dc:	f000 fa5e 	bl	8000c9c <MX_USART3_UART_Init>
  MX_MDMA_Init();
 80007e0:	f000 fab0 	bl	8000d44 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 80007e4:	f000 fa3a 	bl	8000c5c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007e8:	f008 fed2 	bl	8009590 <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 80007ec:	f000 faa2 	bl	8000d34 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	4880      	ldr	r0, [pc, #512]	; (80009f8 <main+0x340>)
 80007f6:	f001 feb3 	bl	8002560 <HAL_GPIO_WritePin>
      if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80007fa:	2200      	movs	r2, #0
 80007fc:	497f      	ldr	r1, [pc, #508]	; (80009fc <main+0x344>)
 80007fe:	4880      	ldr	r0, [pc, #512]	; (8000a00 <main+0x348>)
 8000800:	f00a fdcc 	bl	800b39c <f_mount>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <main+0x158>
      {
          Error_Handler();
 800080a:	f000 fbfb 	bl	8001004 <Error_Handler>
 800080e:	e03a      	b.n	8000886 <main+0x1ce>
      }
      else
      {
          if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000816:	9200      	str	r2, [sp, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	2107      	movs	r1, #7
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <main+0x344>)
 800081e:	f00b f9df 	bl	800bbe0 <f_mkfs>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <main+0x176>
          {
              Error_Handler();
 8000828:	f000 fbec 	bl	8001004 <Error_Handler>
 800082c:	e028      	b.n	8000880 <main+0x1c8>
          }
          else
          {
              //Open file for writing (Create)
              if(f_open(&SDFile, "STM32.TXT", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK)
 800082e:	2212      	movs	r2, #18
 8000830:	4974      	ldr	r1, [pc, #464]	; (8000a04 <main+0x34c>)
 8000832:	4875      	ldr	r0, [pc, #468]	; (8000a08 <main+0x350>)
 8000834:	f00a fdf8 	bl	800b428 <f_open>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <main+0x18c>
              {
                  Error_Handler();
 800083e:	f000 fbe1 	bl	8001004 <Error_Handler>
 8000842:	e01d      	b.n	8000880 <main+0x1c8>
              }
              else
              {
                  //Write to the text file
                  res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000844:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fd61 	bl	8000310 <strlen>
 800084e:	4602      	mov	r2, r0
 8000850:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000854:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000858:	486b      	ldr	r0, [pc, #428]	; (8000a08 <main+0x350>)
 800085a:	f00a ffa3 	bl	800b7a4 <f_write>
 800085e:	4603      	mov	r3, r0
 8000860:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
                  if((byteswritten == 0) || (res != FR_OK))
 8000864:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000868:	2b00      	cmp	r3, #0
 800086a:	d003      	beq.n	8000874 <main+0x1bc>
 800086c:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <main+0x1c2>
                  {
                      Error_Handler();
 8000874:	f000 fbc6 	bl	8001004 <Error_Handler>
 8000878:	e002      	b.n	8000880 <main+0x1c8>
                  }
                  else
                  {
                      f_close(&SDFile);
 800087a:	4863      	ldr	r0, [pc, #396]	; (8000a08 <main+0x350>)
 800087c:	f00b f985 	bl	800bb8a <f_close>
                  }
              }
          }
          f_close(&SDFile);
 8000880:	4861      	ldr	r0, [pc, #388]	; (8000a08 <main+0x350>)
 8000882:	f00b f982 	bl	800bb8a <f_close>
      }

      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	485b      	ldr	r0, [pc, #364]	; (80009f8 <main+0x340>)
 800088c:	f001 fe68 	bl	8002560 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000894:	4858      	ldr	r0, [pc, #352]	; (80009f8 <main+0x340>)
 8000896:	f001 fe7c 	bl	8002592 <HAL_GPIO_TogglePin>
	  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 800089a:	2232      	movs	r2, #50	; 0x32
 800089c:	4959      	ldr	r1, [pc, #356]	; (8000a04 <main+0x34c>)
 800089e:	485a      	ldr	r0, [pc, #360]	; (8000a08 <main+0x350>)
 80008a0:	f00a fdc2 	bl	800b428 <f_open>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <main+0x1f6>
		{
		  Error_Handler();
 80008aa:	f000 fbab 	bl	8001004 <Error_Handler>
		}
	  	sprintf(text, "\n%u\n",HAL_GetTick());
 80008ae:	f000 ff2d 	bl	800170c <HAL_GetTick>
 80008b2:	4602      	mov	r2, r0
 80008b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008b8:	4954      	ldr	r1, [pc, #336]	; (8000a0c <main+0x354>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00b fe58 	bl	800c570 <siprintf>
		res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 80008c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fd23 	bl	8000310 <strlen>
 80008ca:	4602      	mov	r2, r0
 80008cc:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80008d0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80008d4:	484c      	ldr	r0, [pc, #304]	; (8000a08 <main+0x350>)
 80008d6:	f00a ff65 	bl	800b7a4 <f_write>
 80008da:	4603      	mov	r3, r0
 80008dc:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
		if((byteswritten == 0) || (res != FR_OK))
 80008e0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <main+0x238>
 80008e8:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <main+0x23e>
		{
			Error_Handler();
 80008f0:	f000 fb88 	bl	8001004 <Error_Handler>
 80008f4:	e002      	b.n	80008fc <main+0x244>
		}
		else
		{
			f_close(&SDFile);
 80008f6:	4844      	ldr	r0, [pc, #272]	; (8000a08 <main+0x350>)
 80008f8:	f00b f947 	bl	800bb8a <f_close>
		}




 int looper = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
      while (1)
  {
    	  looper++;
 8000902:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8000906:	3301      	adds	r3, #1
 8000908:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
  	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2102      	movs	r1, #2
 8000910:	483f      	ldr	r0, [pc, #252]	; (8000a10 <main+0x358>)
 8000912:	f001 fe25 	bl	8002560 <HAL_GPIO_WritePin>

	for(int a = 0 ; a<100;a++){
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800091c:	e031      	b.n	8000982 <main+0x2ca>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 800091e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <main+0x340>)
 8000924:	f001 fe35 	bl	8002592 <HAL_GPIO_TogglePin>
	  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000928:	2232      	movs	r2, #50	; 0x32
 800092a:	4936      	ldr	r1, [pc, #216]	; (8000a04 <main+0x34c>)
 800092c:	4836      	ldr	r0, [pc, #216]	; (8000a08 <main+0x350>)
 800092e:	f00a fd7b 	bl	800b428 <f_open>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <main+0x284>
		{
		  Error_Handler();
 8000938:	f000 fb64 	bl	8001004 <Error_Handler>
		}
	  	//sprintf(wtext, "%d",a);
		res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800093c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fce5 	bl	8000310 <strlen>
 8000946:	4602      	mov	r2, r0
 8000948:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800094c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000950:	482d      	ldr	r0, [pc, #180]	; (8000a08 <main+0x350>)
 8000952:	f00a ff27 	bl	800b7a4 <f_write>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
		if((byteswritten == 0) || (res != FR_OK))
 800095c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <main+0x2b4>
 8000964:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <main+0x2ba>
		{
			Error_Handler();
 800096c:	f000 fb4a 	bl	8001004 <Error_Handler>
 8000970:	e002      	b.n	8000978 <main+0x2c0>
		}
		else
		{
			f_close(&SDFile);
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <main+0x350>)
 8000974:	f00b f909 	bl	800bb8a <f_close>
	for(int a = 0 ; a<100;a++){
 8000978:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800097c:	3301      	adds	r3, #1
 800097e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8000982:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8000986:	2b63      	cmp	r3, #99	; 0x63
 8000988:	ddc9      	ble.n	800091e <main+0x266>
		}
	}


	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 800098a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098e:	481a      	ldr	r0, [pc, #104]	; (80009f8 <main+0x340>)
 8000990:	f001 fdff 	bl	8002592 <HAL_GPIO_TogglePin>
		  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000994:	2232      	movs	r2, #50	; 0x32
 8000996:	491b      	ldr	r1, [pc, #108]	; (8000a04 <main+0x34c>)
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <main+0x350>)
 800099a:	f00a fd45 	bl	800b428 <f_open>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <main+0x2f0>
			{
			  Error_Handler();
 80009a4:	f000 fb2e 	bl	8001004 <Error_Handler>
			}
		  	sprintf(text, "\n");
 80009a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009ac:	4919      	ldr	r1, [pc, #100]	; (8000a14 <main+0x35c>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00b fdde 	bl	800c570 <siprintf>
			res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 80009b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fca9 	bl	8000310 <strlen>
 80009be:	4602      	mov	r2, r0
 80009c0:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80009c4:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80009c8:	480f      	ldr	r0, [pc, #60]	; (8000a08 <main+0x350>)
 80009ca:	f00a feeb 	bl	800b7a4 <f_write>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
			if((byteswritten == 0) || (res != FR_OK))
 80009d4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <main+0x32c>
 80009dc:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d019      	beq.n	8000a18 <main+0x360>
			{
				Error_Handler();
 80009e4:	f000 fb0e 	bl	8001004 <Error_Handler>
 80009e8:	e019      	b.n	8000a1e <main+0x366>
 80009ea:	bf00      	nop
 80009ec:	0800cde0 	.word	0x0800cde0
 80009f0:	0800cfdc 	.word	0x0800cfdc
 80009f4:	e000ed00 	.word	0xe000ed00
 80009f8:	58020400 	.word	0x58020400
 80009fc:	240003d4 	.word	0x240003d4
 8000a00:	24000608 	.word	0x24000608
 8000a04:	0800cdc8 	.word	0x0800cdc8
 8000a08:	240003d8 	.word	0x240003d8
 8000a0c:	0800cdd4 	.word	0x0800cdd4
 8000a10:	58021000 	.word	0x58021000
 8000a14:	0800cddc 	.word	0x0800cddc
			}
			else
			{
				f_close(&SDFile);
 8000a18:	482c      	ldr	r0, [pc, #176]	; (8000acc <main+0x414>)
 8000a1a:	f00b f8b6 	bl	800bb8a <f_close>
			}

	f_close(&SDFile);
 8000a1e:	482b      	ldr	r0, [pc, #172]	; (8000acc <main+0x414>)
 8000a20:	f00b f8b3 	bl	800bb8a <f_close>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2102      	movs	r1, #2
 8000a28:	4829      	ldr	r0, [pc, #164]	; (8000ad0 <main+0x418>)
 8000a2a:	f001 fd99 	bl	8002560 <HAL_GPIO_WritePin>
	if(looper == 100){
 8000a2e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8000a32:	2b64      	cmp	r3, #100	; 0x64
 8000a34:	f47f af65 	bne.w	8000902 <main+0x24a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3c:	4825      	ldr	r0, [pc, #148]	; (8000ad4 <main+0x41c>)
 8000a3e:	f001 fda8 	bl	8002592 <HAL_GPIO_TogglePin>
			  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000a42:	2232      	movs	r2, #50	; 0x32
 8000a44:	4924      	ldr	r1, [pc, #144]	; (8000ad8 <main+0x420>)
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <main+0x414>)
 8000a48:	f00a fcee 	bl	800b428 <f_open>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <main+0x39e>
				{
				  Error_Handler();
 8000a52:	f000 fad7 	bl	8001004 <Error_Handler>
				}
			  	sprintf(text, "\n%u\n",HAL_GetTick());
 8000a56:	f000 fe59 	bl	800170c <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a60:	491e      	ldr	r1, [pc, #120]	; (8000adc <main+0x424>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00b fd84 	bl	800c570 <siprintf>
				res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc4f 	bl	8000310 <strlen>
 8000a72:	4602      	mov	r2, r0
 8000a74:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000a78:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <main+0x414>)
 8000a7e:	f00a fe91 	bl	800b7a4 <f_write>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
				if((byteswritten == 0) || (res != FR_OK))
 8000a88:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <main+0x3e0>
 8000a90:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <main+0x3e6>
				{
					Error_Handler();
 8000a98:	f000 fab4 	bl	8001004 <Error_Handler>
 8000a9c:	e002      	b.n	8000aa4 <main+0x3ec>
				}
				else
				{
					f_close(&SDFile);
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <main+0x414>)
 8000aa0:	f00b f873 	bl	800bb8a <f_close>
				}
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <main+0x41c>)
 8000aaa:	f001 fd59 	bl	8002560 <HAL_GPIO_WritePin>
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <main+0x428>)
 8000ab4:	f00a fc72 	bl	800b39c <f_mount>
		while(1){
			HAL_Delay(100);
 8000ab8:	2064      	movs	r0, #100	; 0x64
 8000aba:	f000 fe33 	bl	8001724 <HAL_Delay>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <main+0x41c>)
 8000ac4:	f001 fd65 	bl	8002592 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000ac8:	e7f6      	b.n	8000ab8 <main+0x400>
 8000aca:	bf00      	nop
 8000acc:	240003d8 	.word	0x240003d8
 8000ad0:	58021000 	.word	0x58021000
 8000ad4:	58020400 	.word	0x58020400
 8000ad8:	0800cdc8 	.word	0x0800cdc8
 8000adc:	0800cdd4 	.word	0x0800cdd4
 8000ae0:	24000608 	.word	0x24000608

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	224c      	movs	r2, #76	; 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00b fd34 	bl	800c560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00b fd2e 	bl	800c560 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f001 ffeb 	bl	8002ae0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <SystemClock_Config+0xdc>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a2b      	ldr	r2, [pc, #172]	; (8000bc0 <SystemClock_Config+0xdc>)
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <SystemClock_Config+0xdc>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b26:	bf00      	nop
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemClock_Config+0xdc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b34:	d1f8      	bne.n	8000b28 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b36:	2321      	movs	r3, #33	; 0x21
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b3a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b50:	f240 1313 	movw	r3, #275	; 0x113
 8000b54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b62:	2304      	movs	r3, #4
 8000b64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 ffee 	bl	8002b54 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b7e:	f000 fa41 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	233f      	movs	r3, #63	; 0x3f
 8000b84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2303      	movs	r3, #3
 8000b88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fb7f 	bl	80032ac <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bb4:	f000 fa26 	bl	8001004 <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3770      	adds	r7, #112	; 0x70
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024800 	.word	0x58024800

08000bc4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_ETH_Init+0x80>)
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <MX_ETH_Init+0x84>)
 8000bcc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_ETH_Init+0x88>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_ETH_Init+0x88>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_ETH_Init+0x88>)
 8000bdc:	22e1      	movs	r2, #225	; 0xe1
 8000bde:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_ETH_Init+0x88>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_ETH_Init+0x88>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_ETH_Init+0x88>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_ETH_Init+0x80>)
 8000bf4:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MX_ETH_Init+0x88>)
 8000bf6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_ETH_Init+0x80>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_ETH_Init+0x80>)
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <MX_ETH_Init+0x8c>)
 8000c02:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_ETH_Init+0x80>)
 8000c06:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c08:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_ETH_Init+0x80>)
 8000c0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c10:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_ETH_Init+0x80>)
 8000c14:	f000 fece 	bl	80019b4 <HAL_ETH_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c1e:	f000 f9f1 	bl	8001004 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c22:	2234      	movs	r2, #52	; 0x34
 8000c24:	2100      	movs	r1, #0
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_ETH_Init+0x94>)
 8000c28:	f00b fc9a 	bl	800c560 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_ETH_Init+0x94>)
 8000c2e:	2221      	movs	r2, #33	; 0x21
 8000c30:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_ETH_Init+0x94>)
 8000c34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c38:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_ETH_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	24000310 	.word	0x24000310
 8000c48:	40028000 	.word	0x40028000
 8000c4c:	24000150 	.word	0x24000150
 8000c50:	240000d4 	.word	0x240000d4
 8000c54:	24000074 	.word	0x24000074
 8000c58:	24000398 	.word	0x24000398

08000c5c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SDMMC1_SD_Init+0x38>)
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <MX_SDMMC1_SD_Init+0x3c>)
 8000c64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_SDMMC1_SD_Init+0x38>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SDMMC1_SD_Init+0x38>)
 8000c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c72:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_SDMMC1_SD_Init+0x38>)
 8000c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <MX_SDMMC1_SD_Init+0x38>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <MX_SDMMC1_SD_Init+0x38>)
 8000c84:	2205      	movs	r2, #5
 8000c86:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	24000228 	.word	0x24000228
 8000c98:	52007000 	.word	0x52007000

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <MX_USART3_UART_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ce6:	f006 fd23 	bl	8007730 <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f988 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cf8:	f007 fdb6 	bl	8008868 <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d02:	f000 f97f 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000d0a:	f007 fdeb 	bl	80088e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d14:	f000 f976 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_USART3_UART_Init+0x90>)
 8000d1a:	f007 fd6c 	bl	80087f6 <HAL_UARTEx_DisableFifoMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 f96e 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000198 	.word	0x24000198
 8000d30:	40004800 	.word	0x40004800

08000d34 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_MDMA_Init+0xbc>)
 8000d4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d50:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <MX_MDMA_Init+0xbc>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <MX_MDMA_Init+0xbc>)
 8000d5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d6a:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <MX_MDMA_Init+0xc4>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d70:	221d      	movs	r2, #29
 8000d72:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000dc6:	f001 fbfe 	bl	80025c6 <HAL_MDMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f000 f918 	bl	8001004 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <MX_MDMA_Init+0xc0>)
 8000dda:	f001 fc40 	bl	800265e <HAL_MDMA_ConfigPostRequestMask>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000de4:	f000 f90e 	bl	8001004 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	207a      	movs	r0, #122	; 0x7a
 8000dee:	f000 fdac 	bl	800194a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000df2:	207a      	movs	r0, #122	; 0x7a
 8000df4:	f000 fdc3 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	58024400 	.word	0x58024400
 8000e04:	240002a4 	.word	0x240002a4
 8000e08:	52000040 	.word	0x52000040

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a6f      	ldr	r2, [pc, #444]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b6d      	ldr	r3, [pc, #436]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e40:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a68      	ldr	r2, [pc, #416]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b65      	ldr	r3, [pc, #404]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a60      	ldr	r2, [pc, #384]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a59      	ldr	r2, [pc, #356]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a42      	ldr	r2, [pc, #264]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000efa:	483c      	ldr	r0, [pc, #240]	; (8000fec <MX_GPIO_Init+0x1e0>)
 8000efc:	f001 fb30 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f06:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <MX_GPIO_Init+0x1e4>)
 8000f08:	f001 fb2a 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <MX_GPIO_Init+0x1e8>)
 8000f12:	f001 fb25 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4833      	ldr	r0, [pc, #204]	; (8000ff8 <MX_GPIO_Init+0x1ec>)
 8000f2c:	f001 f958 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000f30:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4828      	ldr	r0, [pc, #160]	; (8000fec <MX_GPIO_Init+0x1e0>)
 8000f4a:	f001 f949 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <MX_GPIO_Init+0x1e4>)
 8000f68:	f001 f93a 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481e      	ldr	r0, [pc, #120]	; (8000ffc <MX_GPIO_Init+0x1f0>)
 8000f82:	f001 f92d 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4819      	ldr	r0, [pc, #100]	; (8001000 <MX_GPIO_Init+0x1f4>)
 8000f9c:	f001 f920 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <MX_GPIO_Init+0x1f4>)
 8000fbe:	f001 f90f 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_GPIO_Init+0x1e8>)
 8000fda:	f001 f901 	bl	80021e0 <HAL_GPIO_Init>

}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	58020400 	.word	0x58020400
 8000ff0:	58020c00 	.word	0x58020c00
 8000ff4:	58021000 	.word	0x58021000
 8000ff8:	58020800 	.word	0x58020800
 8000ffc:	58021800 	.word	0x58021800
 8001000:	58020000 	.word	0x58020000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a59      	ldr	r2, [pc, #356]	; (80011c8 <HAL_ETH_MspInit+0x184>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 80ab 	bne.w	80011be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800106a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800106e:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001074:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001078:	4b54      	ldr	r3, [pc, #336]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800107e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001082:	623b      	str	r3, [r7, #32]
 8001084:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001086:	4b51      	ldr	r3, [pc, #324]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108c:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010a4:	4b49      	ldr	r3, [pc, #292]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010aa:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d2:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a2a      	ldr	r2, [pc, #168]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800113a:	2332      	movs	r3, #50	; 0x32
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114a:	230b      	movs	r3, #11
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	481e      	ldr	r0, [pc, #120]	; (80011d0 <HAL_ETH_MspInit+0x18c>)
 8001156:	f001 f843 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800115a:	2386      	movs	r3, #134	; 0x86
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4817      	ldr	r0, [pc, #92]	; (80011d4 <HAL_ETH_MspInit+0x190>)
 8001176:	f001 f833 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4810      	ldr	r0, [pc, #64]	; (80011d8 <HAL_ETH_MspInit+0x194>)
 8001198:	f001 f822 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800119c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ae:	230b      	movs	r3, #11
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <HAL_ETH_MspInit+0x198>)
 80011ba:	f001 f811 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	; 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40028000 	.word	0x40028000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020800 	.word	0x58020800
 80011d4:	58020000 	.word	0x58020000
 80011d8:	58020400 	.word	0x58020400
 80011dc:	58021800 	.word	0x58021800

080011e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0b8      	sub	sp, #224	; 0xe0
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	22b4      	movs	r2, #180	; 0xb4
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00b f9ad 	bl	800c560 <memset>
  if(hsd->Instance==SDMMC1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <HAL_SD_MspInit+0x118>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d16e      	bne.n	80012ee <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001214:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001216:	2300      	movs	r3, #0
 8001218:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fbd0 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800122a:	f7ff feeb 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_SD_MspInit+0x11c>)
 8001230:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001234:	4a31      	ldr	r2, [pc, #196]	; (80012fc <HAL_SD_MspInit+0x11c>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_SD_MspInit+0x11c>)
 8001240:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_SD_MspInit+0x11c>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <HAL_SD_MspInit+0x11c>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_SD_MspInit+0x11c>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_SD_MspInit+0x11c>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <HAL_SD_MspInit+0x11c>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_SD_MspInit+0x11c>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001288:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800128c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012a2:	230c      	movs	r3, #12
 80012a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ac:	4619      	mov	r1, r3
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <HAL_SD_MspInit+0x120>)
 80012b0:	f000 ff96 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012cc:	230c      	movs	r3, #12
 80012ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d6:	4619      	mov	r1, r3
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <HAL_SD_MspInit+0x124>)
 80012da:	f000 ff81 	bl	80021e0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2031      	movs	r0, #49	; 0x31
 80012e4:	f000 fb31 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012e8:	2031      	movs	r0, #49	; 0x31
 80012ea:	f000 fb48 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	37e0      	adds	r7, #224	; 0xe0
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	52007000 	.word	0x52007000
 80012fc:	58024400 	.word	0x58024400
 8001300:	58020800 	.word	0x58020800
 8001304:	58020c00 	.word	0x58020c00

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0b6      	sub	sp, #216	; 0xd8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	22b4      	movs	r2, #180	; 0xb4
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00b f919 	bl	800c560 <memset>
  if(huart->Instance==USART3)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_UART_MspInit+0xc0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d142      	bne.n	80013be <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fb3c 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001352:	f7ff fe57 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_UART_MspInit+0xc4>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_UART_MspInit+0xc4>)
 800135e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001362:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_UART_MspInit+0xc4>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0xc4>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_UART_MspInit+0xc4>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_UART_MspInit+0xc4>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ac:	2307      	movs	r3, #7
 80013ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_UART_MspInit+0xc8>)
 80013ba:	f000 ff11 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	37d8      	adds	r7, #216	; 0xd8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40004800 	.word	0x40004800
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020c00 	.word	0x58020c00

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f960 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <SDMMC1_IRQHandler+0x10>)
 800142e:	f004 ff8d 	bl	800634c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000228 	.word	0x24000228

0800143c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <MDMA_IRQHandler+0x10>)
 8001442:	f001 f95f 	bl	8002704 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	240002a4 	.word	0x240002a4

08001450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <_sbrk+0x5c>)
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <_sbrk+0x60>)
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <_sbrk+0x64>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <_sbrk+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	d207      	bcs.n	8001490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001480:	f00b f836 	bl	800c4f0 <__errno>
 8001484:	4603      	mov	r3, r0
 8001486:	220c      	movs	r2, #12
 8001488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	e009      	b.n	80014a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <_sbrk+0x64>)
 80014a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	24050000 	.word	0x24050000
 80014b0:	00000800 	.word	0x00000800
 80014b4:	24000158 	.word	0x24000158
 80014b8:	24000848 	.word	0x24000848

080014bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <SystemInit+0xd0>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c6:	4a31      	ldr	r2, [pc, #196]	; (800158c <SystemInit+0xd0>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <SystemInit+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	2b06      	cmp	r3, #6
 80014da:	d807      	bhi.n	80014ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <SystemInit+0xd4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 030f 	bic.w	r3, r3, #15
 80014e4:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <SystemInit+0xd4>)
 80014e6:	f043 0307 	orr.w	r3, r3, #7
 80014ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <SystemInit+0xd8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <SystemInit+0xd8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <SystemInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SystemInit+0xd8>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4924      	ldr	r1, [pc, #144]	; (8001594 <SystemInit+0xd8>)
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemInit+0xdc>)
 8001506:	4013      	ands	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <SystemInit+0xd4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <SystemInit+0xd4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 030f 	bic.w	r3, r3, #15
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <SystemInit+0xd4>)
 8001520:	f043 0307 	orr.w	r3, r3, #7
 8001524:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <SystemInit+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <SystemInit+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <SystemInit+0xd8>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <SystemInit+0xd8>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <SystemInit+0xe0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <SystemInit+0xd8>)
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <SystemInit+0xe4>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <SystemInit+0xd8>)
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <SystemInit+0xe8>)
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <SystemInit+0xd8>)
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <SystemInit+0xe8>)
 8001554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SystemInit+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <SystemInit+0xd8>)
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <SystemInit+0xe8>)
 8001560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SystemInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SystemInit+0xd8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <SystemInit+0xd8>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SystemInit+0xec>)
 800157c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001580:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	52002000 	.word	0x52002000
 8001594:	58024400 	.word	0x58024400
 8001598:	eaf6ed7f 	.word	0xeaf6ed7f
 800159c:	02020200 	.word	0x02020200
 80015a0:	01ff0000 	.word	0x01ff0000
 80015a4:	01010280 	.word	0x01010280
 80015a8:	52004000 	.word	0x52004000

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b0:	f7ff ff84 	bl	80014bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f00a ff8f 	bl	800c4fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff f86b 	bl	80006b8 <main>
  bx  lr
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015ec:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80015f0:	0800d178 	.word	0x0800d178
  ldr r2, =_sbss
 80015f4:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80015f8:	24000848 	.word	0x24000848

080015fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC3_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001606:	2003      	movs	r0, #3
 8001608:	f000 f994 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800160c:	f002 f804 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_Init+0x68>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	4913      	ldr	r1, [pc, #76]	; (800166c <HAL_Init+0x6c>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_Init+0x6c>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x70>)
 8001642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_Init+0x74>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f814 	bl	8001678 <HAL_InitTick>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e002      	b.n	8001660 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800165a:	f7ff fcd9 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400
 800166c:	0800d048 	.word	0x0800d048
 8001670:	24000004 	.word	0x24000004
 8001674:	24000000 	.word	0x24000000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_InitTick+0x60>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e021      	b.n	80016d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_InitTick+0x64>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_InitTick+0x60>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f979 	bl	800199a <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f943 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x68>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2400000c 	.word	0x2400000c
 80016dc:	24000000 	.word	0x24000000
 80016e0:	24000008 	.word	0x24000008

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2400000c 	.word	0x2400000c
 8001708:	240003cc 	.word	0x240003cc

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	240003cc 	.word	0x240003cc

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2400000c 	.word	0x2400000c

0800176c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58000400 	.word	0x58000400

08001794 <__NVIC_SetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	05fa0000 	.word	0x05fa0000

080017dc <__NVIC_GetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff40 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff33 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa4 	bl	80018f0 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0c6      	b.n	8001b54 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fb38 	bl	8001044 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2223      	movs	r2, #35	; 0x23
 80019d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <HAL_ETH_Init+0x1a8>)
 80019dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019e0:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <HAL_ETH_Init+0x1a8>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ea:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_ETH_Init+0x1a8>)
 80019ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7a1b      	ldrb	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff feb3 	bl	800176c <HAL_SYSCFG_ETHInterfaceSelect>
 8001a06:	e003      	b.n	8001a10 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a0c:	f7ff feae 	bl	800176c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff fe70 	bl	800170c <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a2e:	e00f      	b.n	8001a50 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a30:	f7ff fe6c 	bl	800170c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a3e:	d907      	bls.n	8001a50 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	22e0      	movs	r2, #224	; 0xe0
 8001a4a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e081      	b.n	8001b54 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e6      	bne.n	8001a30 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fac0 	bl	8001fe8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a68:	f001 ff50 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <HAL_ETH_Init+0x1ac>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fa13 	bl	8001eac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	22e0      	movs	r2, #224	; 0xe0
 8001ab8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e04a      	b.n	8001b54 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_ETH_Init+0x1b0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6952      	ldr	r2, [r2, #20]
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ade:	440b      	add	r3, r1
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fad8 	bl	8002098 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fb1c 	bl	8002126 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	3305      	adds	r3, #5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021a      	lsls	r2, r3, #8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	3303      	adds	r3, #3
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	061a      	lsls	r2, r3, #24
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b3a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2210      	movs	r2, #16
 8001b50:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	ffff8001 	.word	0xffff8001

08001b68 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b7a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	791b      	ldrb	r3, [r3, #4]
 8001b80:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b82:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	7b1b      	ldrb	r3, [r3, #12]
 8001b88:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b8a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7b5b      	ldrb	r3, [r3, #13]
 8001b90:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b92:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7b9b      	ldrb	r3, [r3, #14]
 8001b98:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	7bdb      	ldrb	r3, [r3, #15]
 8001ba0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ba2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	7c12      	ldrb	r2, [r2, #16]
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d102      	bne.n	8001bb2 <ETH_SetMACConfig+0x4a>
 8001bac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x4c>
 8001bb2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bb4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	7c52      	ldrb	r2, [r2, #17]
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d102      	bne.n	8001bc4 <ETH_SetMACConfig+0x5c>
 8001bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bc2:	e000      	b.n	8001bc6 <ETH_SetMACConfig+0x5e>
 8001bc4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bc6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7c9b      	ldrb	r3, [r3, #18]
 8001bcc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bce:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bd4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001bda:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7f1b      	ldrb	r3, [r3, #28]
 8001be0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001be2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7f5b      	ldrb	r3, [r3, #29]
 8001be8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bea:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	7f92      	ldrb	r2, [r2, #30]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d102      	bne.n	8001bfa <ETH_SetMACConfig+0x92>
 8001bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf8:	e000      	b.n	8001bfc <ETH_SetMACConfig+0x94>
 8001bfa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bfc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7fdb      	ldrb	r3, [r3, #31]
 8001c02:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c04:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c0c:	2a00      	cmp	r2, #0
 8001c0e:	d102      	bne.n	8001c16 <ETH_SetMACConfig+0xae>
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	e000      	b.n	8001c18 <ETH_SetMACConfig+0xb0>
 8001c16:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c18:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c1e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c26:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c28:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <ETH_SetMACConfig+0x22c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c54:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c5e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c66:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c68:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d102      	bne.n	8001c7a <ETH_SetMACConfig+0x112>
 8001c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c78:	e000      	b.n	8001c7c <ETH_SetMACConfig+0x114>
 8001c7a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c7c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <ETH_SetMACConfig+0x230>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	430b      	orrs	r3, r1
 8001c98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <ETH_SetMACConfig+0x234>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cca:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d101      	bne.n	8001cda <ETH_SetMACConfig+0x172>
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	e000      	b.n	8001cdc <ETH_SetMACConfig+0x174>
 8001cda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001cdc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d04:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d0c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f023 0103 	bic.w	r1, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d32:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d101      	bne.n	8001d56 <ETH_SetMACConfig+0x1ee>
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	e000      	b.n	8001d58 <ETH_SetMACConfig+0x1f0>
 8001d56:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d58:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d60:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d62:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d6a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d78:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	00048083 	.word	0x00048083
 8001d98:	c0f88000 	.word	0xc0f88000
 8001d9c:	fffffef0 	.word	0xfffffef0

08001da0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <ETH_SetDMAConfig+0xf8>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6809      	ldr	r1, [r1, #0]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001dc6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dd2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001de6:	4413      	add	r3, r2
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <ETH_SetDMAConfig+0xfc>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6811      	ldr	r1, [r2, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dfa:	440b      	add	r3, r1
 8001dfc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	7b5b      	ldrb	r3, [r3, #13]
 8001e02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <ETH_SetDMAConfig+0x100>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e26:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	7d1b      	ldrb	r3, [r3, #20]
 8001e30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e32:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7f5b      	ldrb	r3, [r3, #29]
 8001e38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e46:	4413      	add	r3, r2
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <ETH_SetDMAConfig+0x104>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6811      	ldr	r1, [r2, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e5a:	440b      	add	r3, r1
 8001e5c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7f1b      	ldrb	r3, [r3, #28]
 8001e62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e74:	4413      	add	r3, r2
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <ETH_SetDMAConfig+0x108>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6811      	ldr	r1, [r2, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e88:	440b      	add	r3, r1
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	ffff87fd 	.word	0xffff87fd
 8001e9c:	ffff2ffe 	.word	0xffff2ffe
 8001ea0:	fffec000 	.word	0xfffec000
 8001ea4:	ffc0efef 	.word	0xffc0efef
 8001ea8:	7fc0ffff 	.word	0x7fc0ffff

08001eac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0a4      	sub	sp, #144	; 0x90
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f04:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f08:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f26:	2300      	movs	r3, #0
 8001f28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f44:	2320      	movs	r3, #32
 8001f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f60:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f86:	2300      	movs	r3, #0
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fde6 	bl	8001b68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001fcc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fee1 	bl	8001da0 <ETH_SetDMAConfig>
}
 8001fde:	bf00      	nop
 8001fe0:	3790      	adds	r7, #144	; 0x90
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002000:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002002:	f001 fc83 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8002006:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d908      	bls.n	8002022 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d804      	bhi.n	8002022 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e027      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d908      	bls.n	800203c <ETH_MAC_MDIO_ClkConfig+0x54>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d204      	bcs.n	800203c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e01a      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d303      	bcc.n	800204c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d911      	bls.n	8002070 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d908      	bls.n	8002066 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d804      	bhi.n	8002066 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e005      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e000      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002070:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	01312cff 	.word	0x01312cff
 8002088:	02160ebf 	.word	0x02160ebf
 800208c:	03938700 	.word	0x03938700
 8002090:	05f5e0ff 	.word	0x05f5e0ff
 8002094:	08f0d17f 	.word	0x08f0d17f

08002098 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e01d      	b.n	80020e2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	3206      	adds	r2, #6
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d9de      	bls.n	80020a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f241 132c 	movw	r3, #4396	; 0x112c
 80020f6:	4413      	add	r3, r2
 80020f8:	2203      	movs	r2, #3
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68d9      	ldr	r1, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f241 1314 	movw	r3, #4372	; 0x1114
 8002108:	4413      	add	r3, r2
 800210a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e024      	b.n	800217e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6919      	ldr	r1, [r3, #16]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3310      	adds	r3, #16
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d9d7      	bls.n	8002134 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f241 1330 	movw	r3, #4400	; 0x1130
 80021aa:	4413      	add	r3, r2
 80021ac:	2203      	movs	r2, #3
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6919      	ldr	r1, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80021bc:	4413      	add	r3, r2
 80021be:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f241 1328 	movw	r3, #4392	; 0x1128
 80021d0:	4413      	add	r3, r2
 80021d2:	6019      	str	r1, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021ee:	4b86      	ldr	r3, [pc, #536]	; (8002408 <HAL_GPIO_Init+0x228>)
 80021f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f2:	e18c      	b.n	800250e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 817e 	beq.w	8002508 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d005      	beq.n	8002224 <HAL_GPIO_Init+0x44>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d130      	bne.n	8002286 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225a:	2201      	movs	r2, #1
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 0201 	and.w	r2, r3, #1
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b03      	cmp	r3, #3
 8002290:	d017      	beq.n	80022c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d123      	bne.n	8002316 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	69b9      	ldr	r1, [r7, #24]
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80d8 	beq.w	8002508 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_GPIO_Init+0x22c>)
 800235a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235e:	4a2b      	ldr	r2, [pc, #172]	; (800240c <HAL_GPIO_Init+0x22c>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_GPIO_Init+0x22c>)
 800236a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_GPIO_Init+0x230>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_GPIO_Init+0x234>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d04a      	beq.n	8002438 <HAL_GPIO_Init+0x258>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_GPIO_Init+0x238>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02b      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_GPIO_Init+0x23c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d025      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_GPIO_Init+0x240>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_GPIO_Init+0x244>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_GPIO_Init+0x248>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_GPIO_Init+0x24c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_GPIO_Init+0x250>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x20a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_GPIO_Init+0x254>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x206>
 80023e2:	2309      	movs	r3, #9
 80023e4:	e029      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023e6:	230a      	movs	r3, #10
 80023e8:	e027      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e025      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e023      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e021      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e01f      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e01d      	b.n	800243a <HAL_GPIO_Init+0x25a>
 80023fe:	2302      	movs	r3, #2
 8002400:	e01b      	b.n	800243a <HAL_GPIO_Init+0x25a>
 8002402:	2301      	movs	r3, #1
 8002404:	e019      	b.n	800243a <HAL_GPIO_Init+0x25a>
 8002406:	bf00      	nop
 8002408:	58000080 	.word	0x58000080
 800240c:	58024400 	.word	0x58024400
 8002410:	58000400 	.word	0x58000400
 8002414:	58020000 	.word	0x58020000
 8002418:	58020400 	.word	0x58020400
 800241c:	58020800 	.word	0x58020800
 8002420:	58020c00 	.word	0x58020c00
 8002424:	58021000 	.word	0x58021000
 8002428:	58021400 	.word	0x58021400
 800242c:	58021800 	.word	0x58021800
 8002430:	58021c00 	.word	0x58021c00
 8002434:	58022400 	.word	0x58022400
 8002438:	2300      	movs	r3, #0
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244a:	4938      	ldr	r1, [pc, #224]	; (800252c <HAL_GPIO_Init+0x34c>)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800247e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f ae6b 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	3724      	adds	r7, #36	; 0x24
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	58000400 	.word	0x58000400

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ce:	f7ff f89d 	bl	800170c <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e03b      	b.n	8002656 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80025fe:	e00f      	b.n	8002620 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8002600:	f7ff f884 	bl	800170c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b05      	cmp	r3, #5
 800260c:	d908      	bls.n	8002620 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e01a      	b.n	8002656 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e8      	bne.n	8002600 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9be 	bl	80029b0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e03e      	b.n	80026f6 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8002682:	2302      	movs	r3, #2
 8002684:	e037      	b.n	80026f6 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d126      	bne.n	80026e8 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d11c      	bne.n	80026e2 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	e00d      	b.n	80026ec <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026de:	611a      	str	r2, [r3, #16]
 80026e0:	e004      	b.n	80026ec <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	e001      	b.n	80026ec <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002710:	4b9a      	ldr	r3, [pc, #616]	; (800297c <HAL_MDMA_IRQHandler+0x278>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a9a      	ldr	r2, [pc, #616]	; (8002980 <HAL_MDMA_IRQHandler+0x27c>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	0a9b      	lsrs	r3, r3, #10
 800271c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	4b97      	ldr	r3, [pc, #604]	; (8002984 <HAL_MDMA_IRQHandler+0x280>)
 8002726:	4413      	add	r3, r2
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2201      	movs	r2, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8002736:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 812e 	beq.w	80029a2 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d054      	beq.n	80027fe <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d04d      	beq.n	80027fe <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0202 	bic.w	r2, r2, #2
 8002770:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	669a      	str	r2, [r3, #104]	; 0x68
 8002790:	e005      	b.n	800279e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2210      	movs	r2, #16
 8002820:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2208      	movs	r2, #8
 8002854:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2204      	movs	r2, #4
 8002888:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d039      	beq.n	800291c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d032      	beq.n	800291c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80028c4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d110      	bne.n	80028f4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d05d      	beq.n	80029a6 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
        }
        return;
 80028f2:	e058      	b.n	80029a6 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2202      	movs	r2, #2
 80028fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002920:	2b00      	cmp	r3, #0
 8002922:	d041      	beq.n	80029a8 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3301      	adds	r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	d307      	bcc.n	8002958 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f2      	bne.n	800293c <HAL_MDMA_IRQHandler+0x238>
 8002956:	e000      	b.n	800295a <HAL_MDMA_IRQHandler+0x256>
        break;
 8002958:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2203      	movs	r2, #3
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002978:	e00a      	b.n	8002990 <HAL_MDMA_IRQHandler+0x28c>
 800297a:	bf00      	nop
 800297c:	24000000 	.word	0x24000000
 8002980:	1b4e81b5 	.word	0x1b4e81b5
 8002984:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e002      	b.n	80029a8 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80029a6:	bf00      	nop
    }
  }
}
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop

080029b0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68d9      	ldr	r1, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029d6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029e2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029ee:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80029f8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002a04:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002a06:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d107      	bne.n	8002a22 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002a20:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da11      	bge.n	8002a56 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a40:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	425b      	negs	r3, r3
 8002a48:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	b292      	uxth	r2, r2
 8002a52:	621a      	str	r2, [r3, #32]
 8002a54:	e006      	b.n	8002a64 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b292      	uxth	r2, r2
 8002a62:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da15      	bge.n	8002a98 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002a7a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	425b      	negs	r3, r3
 8002a82:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6a19      	ldr	r1, [r3, #32]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	621a      	str	r2, [r3, #32]
 8002a96:	e009      	b.n	8002aac <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a19      	ldr	r1, [r3, #32]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	041a      	lsls	r2, r3, #16
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d006      	beq.n	8002ac4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac2:	e003      	b.n	8002acc <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00a      	beq.n	8002b0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01f      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e01d      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	490f      	ldr	r1, [pc, #60]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b1a:	f7fe fdf7 	bl	800170c <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b20:	e009      	b.n	8002b36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b22:	f7fe fdf3 	bl	800170c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b30:	d901      	bls.n	8002b36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e007      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b42:	d1ee      	bne.n	8002b22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	58024800 	.word	0x58024800

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e397      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b74:	4b9e      	ldr	r3, [pc, #632]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b7e:	4b9c      	ldr	r3, [pc, #624]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d007      	beq.n	8002b9a <HAL_RCC_OscConfig+0x46>
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	2b18      	cmp	r3, #24
 8002b8e:	d110      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b95      	ldr	r3, [pc, #596]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x12c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e371      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x76>
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a8b      	ldr	r2, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a86      	ldr	r2, [pc, #536]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b84      	ldr	r3, [pc, #528]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a83      	ldr	r2, [pc, #524]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xbc>
 8002bf6:	4b7e      	ldr	r3, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7a      	ldr	r2, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002c10:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a76      	ldr	r2, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b74      	ldr	r3, [pc, #464]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a73      	ldr	r2, [pc, #460]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fd6c 	bl	800170c <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fd68 	bl	800170c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e325      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c4a:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe4>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fd58 	bl	800170c <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fd54 	bl	800170c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e311      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c72:	4b5f      	ldr	r3, [pc, #380]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x10c>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 808a 	beq.w	8002da4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c90:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c9a:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x162>
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b18      	cmp	r3, #24
 8002caa:	d137      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c8>
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d132      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x17a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e2e3      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cce:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0219 	bic.w	r2, r3, #25
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4945      	ldr	r1, [pc, #276]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce0:	f7fe fd14 	bl	800170c <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fd10 	bl	800170c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e2cd      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	4936      	ldr	r1, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1a:	e043      	b.n	8002da4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d026      	beq.n	8002d72 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d24:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 0219 	bic.w	r2, r3, #25
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	492f      	ldr	r1, [pc, #188]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fce9 	bl	800170c <HAL_GetTick>
 8002d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fce5 	bl	800170c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e2a2      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d50:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	4921      	ldr	r1, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
 8002d70:	e018      	b.n	8002da4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fcc5 	bl	800170c <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fcc1 	bl	800170c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e27e      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d06d      	beq.n	8002e8c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d007      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x282>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b18      	cmp	r3, #24
 8002dca:	d11e      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2b6>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2a0>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d004      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e253      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
 8002dee:	bf00      	nop
 8002df0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df4:	4ba3      	ldr	r3, [pc, #652]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	49a0      	ldr	r1, [pc, #640]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e08:	e040      	b.n	8002e8c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d023      	beq.n	8002e5a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e12:	4b9c      	ldr	r3, [pc, #624]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a9b      	ldr	r2, [pc, #620]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fc75 	bl	800170c <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e26:	f7fe fc71 	bl	800170c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e22e      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e38:	4b92      	ldr	r3, [pc, #584]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e44:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	498c      	ldr	r1, [pc, #560]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e018      	b.n	8002e8c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e5a:	4b8a      	ldr	r3, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a89      	ldr	r2, [pc, #548]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fc51 	bl	800170c <HAL_GetTick>
 8002e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fc4d 	bl	800170c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e20a      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e80:	4b80      	ldr	r3, [pc, #512]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d036      	beq.n	8002f06 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d019      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fc2e 	bl	800170c <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fc2a 	bl	800170c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1e7      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x360>
 8002ed2:	e018      	b.n	8002f06 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fc14 	bl	800170c <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fc10 	bl	800170c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1cd      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d036      	beq.n	8002f80 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d019      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a59      	ldr	r2, [pc, #356]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fbf1 	bl	800170c <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f2e:	f7fe fbed 	bl	800170c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1aa      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3da>
 8002f4c:	e018      	b.n	8002f80 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f4e:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a4c      	ldr	r2, [pc, #304]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fbd7 	bl	800170c <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f62:	f7fe fbd3 	bl	800170c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e190      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8085 	beq.w	8003098 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x534>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x534>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe fbb7 	bl	800170c <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fe fbb3 	bl	800170c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e170      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb4:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x534>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x482>
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e02d      	b.n	8003032 <HAL_RCC_OscConfig+0x4de>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4a4>
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a25      	ldr	r2, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	e01c      	b.n	8003032 <HAL_RCC_OscConfig+0x4de>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x4c6>
 8003000:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e00b      	b.n	8003032 <HAL_RCC_OscConfig+0x4de>
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a16      	ldr	r2, [pc, #88]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d015      	beq.n	8003066 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fe fb67 	bl	800170c <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fe fb63 	bl	800170c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e11e      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_OscConfig+0x530>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ee      	beq.n	8003042 <HAL_RCC_OscConfig+0x4ee>
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe fb51 	bl	800170c <HAL_GetTick>
 800306a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800306c:	e00e      	b.n	800308c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fb4d 	bl	800170c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d905      	bls.n	800308c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e108      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
 8003084:	58024400 	.word	0x58024400
 8003088:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800308c:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ea      	bne.n	800306e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80f9 	beq.w	8003294 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030a2:	4b7f      	ldr	r3, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030aa:	2b18      	cmp	r3, #24
 80030ac:	f000 80b4 	beq.w	8003218 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f040 8095 	bne.w	80031e4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a78      	ldr	r2, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80030c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fb21 	bl	800170c <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe fb1d 	bl	800170c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0da      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e0:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ec:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80030ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x750>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	430a      	orrs	r2, r1
 8003100:	4967      	ldr	r1, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003102:	4313      	orrs	r3, r2
 8003104:	628b      	str	r3, [r1, #40]	; 0x28
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	3b01      	subs	r3, #1
 800310c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	3b01      	subs	r3, #1
 8003116:	025b      	lsls	r3, r3, #9
 8003118:	b29b      	uxth	r3, r3
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	3b01      	subs	r3, #1
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003136:	495a      	ldr	r1, [pc, #360]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800314a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314c:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <HAL_RCC_OscConfig+0x754>)
 800314e:	4013      	ands	r3, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003154:	00d2      	lsls	r2, r2, #3
 8003156:	4952      	ldr	r1, [pc, #328]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003158:	4313      	orrs	r3, r2
 800315a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800315c:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	f023 020c 	bic.w	r2, r3, #12
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	494d      	ldr	r1, [pc, #308]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f023 0202 	bic.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4949      	ldr	r1, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	4a46      	ldr	r2, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318c:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a43      	ldr	r2, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800319e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	4a3d      	ldr	r2, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b0:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3a      	ldr	r2, [pc, #232]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe faa6 	bl	800170c <HAL_GetTick>
 80031c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe faa2 	bl	800170c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e05f      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x670>
 80031e2:	e057      	b.n	8003294 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 80031ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fa8c 	bl	800170c <HAL_GetTick>
 80031f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe fa88 	bl	800170c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e045      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800320a:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x6a4>
 8003216:	e03d      	b.n	8003294 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_OscConfig+0x74c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b01      	cmp	r3, #1
 800322a:	d031      	beq.n	8003290 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f003 0203 	and.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d12a      	bne.n	8003290 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d122      	bne.n	8003290 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d11a      	bne.n	8003290 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0a5b      	lsrs	r3, r3, #9
 800325e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d111      	bne.n	8003290 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d108      	bne.n	8003290 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0e1b      	lsrs	r3, r3, #24
 8003282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3730      	adds	r7, #48	; 0x30
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	58024400 	.word	0x58024400
 80032a4:	fffffc0c 	.word	0xfffffc0c
 80032a8:	ffff0007 	.word	0xffff0007

080032ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e19c      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d910      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b87      	ldr	r3, [pc, #540]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 020f 	bic.w	r2, r3, #15
 80032d6:	4985      	ldr	r1, [pc, #532]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b83      	ldr	r3, [pc, #524]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e184      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d010      	beq.n	800331e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003308:	429a      	cmp	r2, r3
 800330a:	d908      	bls.n	800331e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800330c:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	4975      	ldr	r1, [pc, #468]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800331a:	4313      	orrs	r3, r2
 800331c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	4b70      	ldr	r3, [pc, #448]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003336:	429a      	cmp	r2, r3
 8003338:	d908      	bls.n	800334c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800333a:	4b6d      	ldr	r3, [pc, #436]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	496a      	ldr	r1, [pc, #424]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 8003348:	4313      	orrs	r3, r2
 800334a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	4b64      	ldr	r3, [pc, #400]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003364:	429a      	cmp	r2, r3
 8003366:	d908      	bls.n	800337a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	495e      	ldr	r1, [pc, #376]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 8003376:	4313      	orrs	r3, r2
 8003378:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003392:	429a      	cmp	r2, r3
 8003394:	d908      	bls.n	80033a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003396:	4b56      	ldr	r3, [pc, #344]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4953      	ldr	r1, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4b4d      	ldr	r3, [pc, #308]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d908      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b4a      	ldr	r3, [pc, #296]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f023 020f 	bic.w	r2, r3, #15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4947      	ldr	r1, [pc, #284]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d055      	beq.n	800348e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4940      	ldr	r1, [pc, #256]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d107      	bne.n	800340c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d121      	bne.n	800344c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0f6      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d115      	bne.n	800344c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0ea      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d107      	bne.n	800343c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0de      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0d6      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800344c:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f023 0207 	bic.w	r2, r3, #7
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4925      	ldr	r1, [pc, #148]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800345a:	4313      	orrs	r3, r2
 800345c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fe f955 	bl	800170c <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003464:	e00a      	b.n	800347c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003466:	f7fe f951 	bl	800170c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0be      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	429a      	cmp	r2, r3
 800348c:	d1eb      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d010      	beq.n	80034bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d208      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f023 020f 	bic.w	r2, r3, #15
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d214      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	4906      	ldr	r1, [pc, #24]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCC_ClockConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e086      	b.n	80035fa <HAL_RCC_ClockConfig+0x34e>
 80034ec:	52002000 	.word	0x52002000
 80034f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350c:	429a      	cmp	r2, r3
 800350e:	d208      	bcs.n	8003522 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003510:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	4939      	ldr	r1, [pc, #228]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 800351e:	4313      	orrs	r3, r2
 8003520:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800353a:	429a      	cmp	r2, r3
 800353c:	d208      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	492e      	ldr	r1, [pc, #184]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 800354c:	4313      	orrs	r3, r2
 800354e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003568:	429a      	cmp	r2, r3
 800356a:	d208      	bcs.n	800357e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4922      	ldr	r1, [pc, #136]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 800357a:	4313      	orrs	r3, r2
 800357c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003596:	429a      	cmp	r2, r3
 8003598:	d208      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	4917      	ldr	r1, [pc, #92]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035ac:	f000 f834 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	4912      	ldr	r1, [pc, #72]	; (8003608 <HAL_RCC_ClockConfig+0x35c>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x358>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_RCC_ClockConfig+0x35c>)
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x360>)
 80035e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x364>)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x368>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe f842 	bl	8001678 <HAL_InitTick>
 80035f4:	4603      	mov	r3, r0
 80035f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
 8003608:	0800d048 	.word	0x0800d048
 800360c:	24000004 	.word	0x24000004
 8003610:	24000000 	.word	0x24000000
 8003614:	24000008 	.word	0x24000008

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800361e:	4bb3      	ldr	r3, [pc, #716]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003626:	2b18      	cmp	r3, #24
 8003628:	f200 8155 	bhi.w	80038d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <HAL_RCC_GetSysClockFreq+0x1c>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003699 	.word	0x08003699
 8003638:	080038d7 	.word	0x080038d7
 800363c:	080038d7 	.word	0x080038d7
 8003640:	080038d7 	.word	0x080038d7
 8003644:	080038d7 	.word	0x080038d7
 8003648:	080038d7 	.word	0x080038d7
 800364c:	080038d7 	.word	0x080038d7
 8003650:	080038d7 	.word	0x080038d7
 8003654:	080036bf 	.word	0x080036bf
 8003658:	080038d7 	.word	0x080038d7
 800365c:	080038d7 	.word	0x080038d7
 8003660:	080038d7 	.word	0x080038d7
 8003664:	080038d7 	.word	0x080038d7
 8003668:	080038d7 	.word	0x080038d7
 800366c:	080038d7 	.word	0x080038d7
 8003670:	080038d7 	.word	0x080038d7
 8003674:	080036c5 	.word	0x080036c5
 8003678:	080038d7 	.word	0x080038d7
 800367c:	080038d7 	.word	0x080038d7
 8003680:	080038d7 	.word	0x080038d7
 8003684:	080038d7 	.word	0x080038d7
 8003688:	080038d7 	.word	0x080038d7
 800368c:	080038d7 	.word	0x080038d7
 8003690:	080038d7 	.word	0x080038d7
 8003694:	080036cb 	.word	0x080036cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003698:	4b94      	ldr	r3, [pc, #592]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036a4:	4b91      	ldr	r3, [pc, #580]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	08db      	lsrs	r3, r3, #3
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	4a90      	ldr	r2, [pc, #576]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80036b6:	e111      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036b8:	4b8d      	ldr	r3, [pc, #564]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036ba:	61bb      	str	r3, [r7, #24]
    break;
 80036bc:	e10e      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036be:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036c0:	61bb      	str	r3, [r7, #24]
    break;
 80036c2:	e10b      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80036c4:	4b8c      	ldr	r3, [pc, #560]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036c6:	61bb      	str	r3, [r7, #24]
    break;
 80036c8:	e108      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ca:	4b88      	ldr	r3, [pc, #544]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036d4:	4b85      	ldr	r3, [pc, #532]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036e0:	4b82      	ldr	r3, [pc, #520]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036ea:	4b80      	ldr	r3, [pc, #512]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	08db      	lsrs	r3, r3, #3
 80036f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80e1 	beq.w	80038d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b02      	cmp	r3, #2
 8003712:	f000 8083 	beq.w	800381c <HAL_RCC_GetSysClockFreq+0x204>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b02      	cmp	r3, #2
 800371a:	f200 80a1 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x248>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x114>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d056      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800372a:	e099      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800372c:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d02d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003738:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	08db      	lsrs	r3, r3, #3
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	4a6b      	ldr	r2, [pc, #428]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
 8003748:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	ee07 3a90 	vmov	s15, r3
 8003750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003762:	4b62      	ldr	r3, [pc, #392]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003772:	ed97 6a02 	vldr	s12, [r7, #8]
 8003776:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800377a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003792:	e087      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80037be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037d6:	e065      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003904 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ea:	4b40      	ldr	r3, [pc, #256]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80037fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800380a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800381a:	e043      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003908 <HAL_RCC_GetSysClockFreq+0x2f0>
 800382a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003842:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800385e:	e021      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003904 <HAL_RCC_GetSysClockFreq+0x2ec>
 800386e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003882:	ed97 6a02 	vldr	s12, [r7, #8]
 8003886:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800388a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	0a5b      	lsrs	r3, r3, #9
 80038aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ae:	3301      	adds	r3, #1
 80038b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 3a90 	vmov	r3, s15
 80038cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80038ce:	e005      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    break;
 80038d4:	e002      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038d8:	61bb      	str	r3, [r7, #24]
    break;
 80038da:	bf00      	nop
  }

  return sysclockfreq;
 80038dc:	69bb      	ldr	r3, [r7, #24]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	58024400 	.word	0x58024400
 80038f0:	03d09000 	.word	0x03d09000
 80038f4:	003d0900 	.word	0x003d0900
 80038f8:	007a1200 	.word	0x007a1200
 80038fc:	46000000 	.word	0x46000000
 8003900:	4c742400 	.word	0x4c742400
 8003904:	4a742400 	.word	0x4a742400
 8003908:	4af42400 	.word	0x4af42400

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003912:	f7ff fe81 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_RCC_GetHCLKFreq+0x50>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490f      	ldr	r1, [pc, #60]	; (8003960 <HAL_RCC_GetHCLKFreq+0x54>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_RCC_GetHCLKFreq+0x50>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_RCC_GetHCLKFreq+0x54>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_RCC_GetHCLKFreq+0x58>)
 8003948:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_RCC_GetHCLKFreq+0x5c>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <HAL_RCC_GetHCLKFreq+0x58>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	58024400 	.word	0x58024400
 8003960:	0800d048 	.word	0x0800d048
 8003964:	24000004 	.word	0x24000004
 8003968:	24000000 	.word	0x24000000

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003970:	f7ff ffcc 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4904      	ldr	r1, [pc, #16]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	58024400 	.word	0x58024400
 8003994:	0800d048 	.word	0x0800d048

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800399c:	f7ff ffb6 	bl	800390c <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4904      	ldr	r1, [pc, #16]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	58024400 	.word	0x58024400
 80039c0:	0800d048 	.word	0x0800d048

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d0:	2300      	movs	r3, #0
 80039d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039e8:	d02a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039ee:	d824      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f4:	d018      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039fa:	d81e      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a04:	d007      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a06:	e018      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4bab      	ldr	r3, [pc, #684]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4aaa      	ldr	r2, [pc, #680]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a14:	e015      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 feff 	bl	8005820 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a26:	e00c      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3324      	adds	r3, #36	; 0x24
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 ffa8 	bl	8005984 <RCCEx_PLL3_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a48:	4b9b      	ldr	r3, [pc, #620]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	4998      	ldr	r1, [pc, #608]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	650b      	str	r3, [r1, #80]	; 0x50
 8003a5a:	e001      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d03d      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d826      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003a9f 	.word	0x08003a9f
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ac9 	.word	0x08003ac9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a90:	4b89      	ldr	r3, [pc, #548]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	4a88      	ldr	r2, [pc, #544]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 febb 	bl	8005820 <RCCEx_PLL2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aae:	e00c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3324      	adds	r3, #36	; 0x24
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 ff64 	bl	8005984 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad0:	4b79      	ldr	r3, [pc, #484]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	f023 0207 	bic.w	r2, r3, #7
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	4976      	ldr	r1, [pc, #472]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ae2:	e001      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d051      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003afa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003afe:	d036      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b00:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003b04:	d830      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b0a:	d032      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003b0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b10:	d82a      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b16:	d02e      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003b18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b1c:	d824      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b22:	d018      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b28:	d81e      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b32:	d007      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b34:	e018      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b36:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	4a5f      	ldr	r2, [pc, #380]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b42:	e019      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fe68 	bl	8005820 <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b54:	e010      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3324      	adds	r3, #36	; 0x24
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 ff11 	bl	8005984 <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b66:	e007      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6c:	e004      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b8c:	494a      	ldr	r1, [pc, #296]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	658b      	str	r3, [r1, #88]	; 0x58
 8003b92:	e001      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d051      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003baa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bae:	d036      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003bb0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bb4:	d830      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bba:	d032      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc0:	d82a      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bc6:	d02e      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bcc:	d824      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd2:	d018      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd8:	d81e      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003bde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be2:	d007      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003be4:	e018      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	4a33      	ldr	r2, [pc, #204]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bf2:	e019      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fe10 	bl	8005820 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c04:	e010      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3324      	adds	r3, #36	; 0x24
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 feb9 	bl	8005984 <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c16:	e007      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e004      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c3c:	491e      	ldr	r1, [pc, #120]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	658b      	str	r3, [r1, #88]	; 0x58
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d035      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d01c      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d817      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d00c      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d813      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d10f      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c7c:	e00e      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2102      	movs	r1, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fdcb 	bl	8005820 <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c8e:	e005      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
      break;
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	4902      	ldr	r1, [pc, #8]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cb4:	e004      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d047      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd4:	d030      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cda:	d82a      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce0:	d02c      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce6:	d824      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cec:	d018      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	d81e      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d007      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cfe:	e018      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d00:	4bac      	ldr	r3, [pc, #688]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4aab      	ldr	r2, [pc, #684]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e017      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 fd83 	bl	8005820 <RCCEx_PLL2_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e00e      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3324      	adds	r3, #36	; 0x24
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 fe2c 	bl	8005984 <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d30:	e005      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d44:	4b9b      	ldr	r3, [pc, #620]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	4998      	ldr	r1, [pc, #608]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	650b      	str	r3, [r1, #80]	; 0x50
 8003d56:	e001      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d049      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d02e      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d76:	d828      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d7c:	d02a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d82:	d822      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d88:	d026      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d8e:	d81c      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d94:	d010      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d9a:	d816      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01d      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d111      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fd37 	bl	8005820 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003db6:	e012      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3324      	adds	r3, #36	; 0x24
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fde0 	bl	8005984 <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dc8:	e009      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dce:	e006      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dd4:	bf00      	nop
 8003dd6:	e002      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003de4:	4b73      	ldr	r3, [pc, #460]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	4970      	ldr	r1, [pc, #448]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	650b      	str	r3, [r1, #80]	; 0x50
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e12:	d02e      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e18:	d828      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d02a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d822      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e2a:	d026      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e30:	d81c      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d816      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01d      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e46:	d111      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 fce6 	bl	8005820 <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e58:	e012      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 fd8f 	bl	8005984 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e6a:	e009      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e86:	4b4b      	ldr	r3, [pc, #300]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e94:	4947      	ldr	r1, [pc, #284]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	658b      	str	r3, [r1, #88]	; 0x58
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eba:	d814      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ed2:	e00c      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fca0 	bl	8005820 <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f00:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	650b      	str	r3, [r1, #80]	; 0x50
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d032      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d81b      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f39 	.word	0x08003f39
 8003f30:	08003f47 	.word	0x08003f47
 8003f34:	08003f5f 	.word	0x08003f5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f44:	e00c      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fc67 	bl	8005820 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f56:	e003      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	4910      	ldr	r1, [pc, #64]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f78:	e001      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 808a 	beq.w	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f98:	f7fd fbb8 	bl	800170c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9e:	e00d      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa0:	f7fd fbb4 	bl	800170c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d906      	bls.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8003fb2:	e009      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbc:	4bb9      	ldr	r3, [pc, #740]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0eb      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d166      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fce:	4bb6      	ldr	r3, [pc, #728]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fd8:	4053      	eors	r3, r2
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d013      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe2:	4bb1      	ldr	r3, [pc, #708]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fec:	4bae      	ldr	r3, [pc, #696]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4aad      	ldr	r2, [pc, #692]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff8:	4bab      	ldr	r3, [pc, #684]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4aaa      	ldr	r2, [pc, #680]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004004:	4aa8      	ldr	r2, [pc, #672]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004014:	d115      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fd fb79 	bl	800170c <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800401c:	e00b      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fb75 	bl	800170c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d902      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	75fb      	strb	r3, [r7, #23]
            break;
 8004034:	e005      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004036:	4b9c      	ldr	r3, [pc, #624]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ed      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d126      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004056:	d10d      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004058:	4b93      	ldr	r3, [pc, #588]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004066:	0919      	lsrs	r1, r3, #4
 8004068:	4b90      	ldr	r3, [pc, #576]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800406a:	400b      	ands	r3, r1
 800406c:	498e      	ldr	r1, [pc, #568]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004074:	4b8c      	ldr	r3, [pc, #560]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	4a8b      	ldr	r2, [pc, #556]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800407a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800407e:	6113      	str	r3, [r2, #16]
 8004080:	4b89      	ldr	r3, [pc, #548]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004082:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408e:	4986      	ldr	r1, [pc, #536]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	670b      	str	r3, [r1, #112]	; 0x70
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	75bb      	strb	r3, [r7, #22]
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d07e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d867      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	0800418b 	.word	0x0800418b
 80040c0:	08004185 	.word	0x08004185
 80040c4:	08004185 	.word	0x08004185
 80040c8:	08004185 	.word	0x08004185
 80040cc:	08004185 	.word	0x08004185
 80040d0:	08004185 	.word	0x08004185
 80040d4:	08004185 	.word	0x08004185
 80040d8:	08004185 	.word	0x08004185
 80040dc:	08004161 	.word	0x08004161
 80040e0:	08004185 	.word	0x08004185
 80040e4:	08004185 	.word	0x08004185
 80040e8:	08004185 	.word	0x08004185
 80040ec:	08004185 	.word	0x08004185
 80040f0:	08004185 	.word	0x08004185
 80040f4:	08004185 	.word	0x08004185
 80040f8:	08004185 	.word	0x08004185
 80040fc:	08004173 	.word	0x08004173
 8004100:	08004185 	.word	0x08004185
 8004104:	08004185 	.word	0x08004185
 8004108:	08004185 	.word	0x08004185
 800410c:	08004185 	.word	0x08004185
 8004110:	08004185 	.word	0x08004185
 8004114:	08004185 	.word	0x08004185
 8004118:	08004185 	.word	0x08004185
 800411c:	0800418b 	.word	0x0800418b
 8004120:	08004185 	.word	0x08004185
 8004124:	08004185 	.word	0x08004185
 8004128:	08004185 	.word	0x08004185
 800412c:	08004185 	.word	0x08004185
 8004130:	08004185 	.word	0x08004185
 8004134:	08004185 	.word	0x08004185
 8004138:	08004185 	.word	0x08004185
 800413c:	0800418b 	.word	0x0800418b
 8004140:	08004185 	.word	0x08004185
 8004144:	08004185 	.word	0x08004185
 8004148:	08004185 	.word	0x08004185
 800414c:	08004185 	.word	0x08004185
 8004150:	08004185 	.word	0x08004185
 8004154:	08004185 	.word	0x08004185
 8004158:	08004185 	.word	0x08004185
 800415c:	0800418b 	.word	0x0800418b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fb5a 	bl	8005820 <RCCEx_PLL2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004170:	e00c      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fc03 	bl	8005984 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      break;
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800418a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004192:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419e:	4942      	ldr	r1, [pc, #264]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	654b      	str	r3, [r1, #84]	; 0x54
 80041a4:	e001      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d037      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d820      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	08004207 	.word	0x08004207
 80041c8:	080041dd 	.word	0x080041dd
 80041cc:	080041ef 	.word	0x080041ef
 80041d0:	08004207 	.word	0x08004207
 80041d4:	08004207 	.word	0x08004207
 80041d8:	08004207 	.word	0x08004207
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	2101      	movs	r1, #1
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 fb1c 	bl	8005820 <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041ec:	e00c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 fbc5 	bl	8005984 <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041fe:	e003      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4923      	ldr	r1, [pc, #140]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	654b      	str	r3, [r1, #84]	; 0x54
 8004220:	e001      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d040      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004238:	2b05      	cmp	r3, #5
 800423a:	d821      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004287 	.word	0x08004287
 8004248:	0800425d 	.word	0x0800425d
 800424c:	0800426f 	.word	0x0800426f
 8004250:	08004287 	.word	0x08004287
 8004254:	08004287 	.word	0x08004287
 8004258:	08004287 	.word	0x08004287
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fadc 	bl	8005820 <RCCEx_PLL2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800426c:	e00c      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	2101      	movs	r1, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fb85 	bl	8005984 <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d110      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f023 0207 	bic.w	r2, r3, #7
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800429c:	4902      	ldr	r1, [pc, #8]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	658b      	str	r3, [r1, #88]	; 0x58
 80042a2:	e007      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80042a4:	58024800 	.word	0x58024800
 80042a8:	58024400 	.word	0x58024400
 80042ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d04b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ca:	d02e      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80042cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042d0:	d828      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d02a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d822      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e2:	d026      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80042e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e8:	d81c      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ee:	d010      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f4:	d816      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01d      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fe:	d111      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fa8a 	bl	8005820 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004310:	e012      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3324      	adds	r3, #36	; 0x24
 8004316:	2102      	movs	r1, #2
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fb33 	bl	8005984 <RCCEx_PLL3_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004322:	e009      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	75fb      	strb	r3, [r7, #23]
      break;
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800432a:	bf00      	nop
 800432c:	e004      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800432e:	bf00      	nop
 8004330:	e002      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004332:	bf00      	nop
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800433e:	4bb2      	ldr	r3, [pc, #712]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	49ae      	ldr	r1, [pc, #696]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800434e:	4313      	orrs	r3, r2
 8004350:	654b      	str	r3, [r1, #84]	; 0x54
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d04b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800436e:	d02e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004370:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004374:	d828      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	d02a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d822      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004386:	d026      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800438c:	d81c      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	d010      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d816      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01d      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d111      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 fa38 	bl	8005820 <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043b4:	e012      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3324      	adds	r3, #36	; 0x24
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fae1 	bl	8005984 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043c6:	e009      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
      break;
 80043cc:	e006      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043ce:	bf00      	nop
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e2:	4b89      	ldr	r3, [pc, #548]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f0:	4985      	ldr	r1, [pc, #532]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	658b      	str	r3, [r1, #88]	; 0x58
 80043f6:	e001      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d04b      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800440e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004412:	d02e      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004418:	d828      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d02a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	d822      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800442a:	d026      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800442c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004430:	d81c      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004436:	d010      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443c:	d816      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01d      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004446:	d111      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f9e6 	bl	8005820 <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004458:	e012      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3324      	adds	r3, #36	; 0x24
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fa8f 	bl	8005984 <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800446a:	e009      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
      break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004472:	bf00      	nop
 8004474:	e004      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004476:	bf00      	nop
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800447e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004486:	4b60      	ldr	r3, [pc, #384]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004494:	495c      	ldr	r1, [pc, #368]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004496:	4313      	orrs	r3, r2
 8004498:	658b      	str	r3, [r1, #88]	; 0x58
 800449a:	e001      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d018      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d10a      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3324      	adds	r3, #36	; 0x24
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 fa61 	bl	8005984 <RCCEx_PLL3_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80044cc:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d8:	494b      	ldr	r1, [pc, #300]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d10a      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3324      	adds	r3, #36	; 0x24
 80044fa:	2102      	movs	r1, #2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f001 fa41 	bl	8005984 <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800450c:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	493b      	ldr	r1, [pc, #236]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800451c:	4313      	orrs	r3, r2
 800451e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d034      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004536:	d01d      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453c:	d817      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d009      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004548:	e011      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f001 f965 	bl	8005820 <RCCEx_PLL2_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800455a:	e00c      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3324      	adds	r3, #36	; 0x24
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f001 fa0e 	bl	8005984 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800456c:	e003      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
      break;
 8004572:	e000      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800457c:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800458a:	491f      	ldr	r1, [pc, #124]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800458c:	4313      	orrs	r3, r2
 800458e:	658b      	str	r3, [r1, #88]	; 0x58
 8004590:	e001      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d036      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045ac:	d01c      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80045ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045b2:	d816      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b8:	d003      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80045ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045be:	d007      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80045c0:	e00f      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045ce:	e00c      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	2101      	movs	r1, #1
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f9d4 	bl	8005984 <RCCEx_PLL3_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
      break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80045e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fe:	4902      	ldr	r1, [pc, #8]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004600:	4313      	orrs	r3, r2
 8004602:	654b      	str	r3, [r1, #84]	; 0x54
 8004604:	e004      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004606:	bf00      	nop
 8004608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d029      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d007      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800462a:	e00f      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462c:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	4a60      	ldr	r2, [pc, #384]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004638:	e00b      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f8ed 	bl	8005820 <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800464a:	e002      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
      break;
 8004650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004658:	4b56      	ldr	r3, [pc, #344]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	4953      	ldr	r1, [pc, #332]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	64cb      	str	r3, [r1, #76]	; 0x4c
 800466a:	e001      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3324      	adds	r3, #36	; 0x24
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f97e 	bl	8005984 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d030      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a6:	d017      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ac:	d811      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b2:	d013      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b8:	d80b      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d010      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d106      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046d0:	e007      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
      break;
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e8:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f4:	492f      	ldr	r1, [pc, #188]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	654b      	str	r3, [r1, #84]	; 0x54
 80046fa:	e001      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800470c:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004718:	4926      	ldr	r1, [pc, #152]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004736:	491f      	ldr	r1, [pc, #124]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004748:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800474e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004752:	6113      	str	r3, [r2, #16]
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800475e:	4915      	ldr	r1, [pc, #84]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004760:	4313      	orrs	r3, r2
 8004762:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da08      	bge.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	490e      	ldr	r1, [pc, #56]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800477a:	4313      	orrs	r3, r2
 800477c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	4906      	ldr	r1, [pc, #24]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800479e:	7dbb      	ldrb	r3, [r7, #22]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400

080047b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b090      	sub	sp, #64	; 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c6:	f040 8089 	bne.w	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80047ca:	4b95      	ldr	r3, [pc, #596]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d87d      	bhi.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	080047f5 	.word	0x080047f5
 80047e4:	08004819 	.word	0x08004819
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	080048d1 	.word	0x080048d1
 80047f0:	08004861 	.word	0x08004861

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047f4:	4b8a      	ldr	r3, [pc, #552]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004800:	d107      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004806:	4618      	mov	r0, r3
 8004808:	f000 feb8 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004810:	e3ed      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004816:	e3ea      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004818:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004824:	d107      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004826:	f107 0318 	add.w	r3, r7, #24
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fbfe 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004834:	e3db      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800483a:	e3d8      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800483c:	4b78      	ldr	r3, [pc, #480]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004848:	d107      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800484a:	f107 030c 	add.w	r3, r7, #12
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fd40 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004858:	e3c9      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800485e:	e3c6      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004860:	4b6f      	ldr	r3, [pc, #444]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004868:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800486a:	4b6d      	ldr	r3, [pc, #436]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d10c      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	4a67      	ldr	r2, [pc, #412]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488e:	e01e      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004890:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a4:	d102      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048a6:	4b60      	ldr	r3, [pc, #384]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048aa:	e010      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048ac:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b8:	d106      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c0:	d102      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048c2:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	e002      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048cc:	e38f      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80048ce:	e38e      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048d0:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d4:	e38b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048da:	e388      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	f040 80a7 	bne.w	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80048e6:	4b4e      	ldr	r3, [pc, #312]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f6:	d054      	beq.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048fe:	f200 808b 	bhi.w	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004908:	f000 8083 	beq.w	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004912:	f200 8081 	bhi.w	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491c:	d02f      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004924:	d878      	bhi.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004932:	d012      	beq.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004934:	e070      	b.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004936:	4b3a      	ldr	r3, [pc, #232]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004942:	d107      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fe17 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004952:	e34c      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004958:	e349      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800495a:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004966:	d107      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004968:	f107 0318 	add.w	r3, r7, #24
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fb5d 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004976:	e33a      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800497c:	e337      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498a:	d107      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fc9f 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800499a:	e328      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a0:	e325      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049a2:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	08db      	lsrs	r3, r3, #3
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d0:	e01e      	b.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d106      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e6:	d102      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	e010      	b.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049fa:	d106      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80049fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a02:	d102      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a08:	e002      	b.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a0e:	e2ee      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a10:	e2ed      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a16:	e2ea      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a1c:	e2e7      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a1e:	bf00      	nop
 8004a20:	58024400 	.word	0x58024400
 8004a24:	03d09000 	.word	0x03d09000
 8004a28:	003d0900 	.word	0x003d0900
 8004a2c:	007a1200 	.word	0x007a1200
 8004a30:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3a:	f040 809c 	bne.w	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a3e:	4b9e      	ldr	r3, [pc, #632]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a4e:	d054      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a56:	f200 808b 	bhi.w	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a60:	f000 8083 	beq.w	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a6a:	f200 8081 	bhi.w	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a74:	d02f      	beq.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7c:	d878      	bhi.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a8a:	d012      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a8c:	e070      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a8e:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a9a:	d107      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fd6b 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aaa:	e2a0      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ab0:	e29d      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ab2:	4b81      	ldr	r3, [pc, #516]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ac0:	f107 0318 	add.w	r3, r7, #24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fab1 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004ace:	e28e      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad4:	e28b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ad6:	4b78      	ldr	r3, [pc, #480]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fbf3 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004af2:	e27c      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af8:	e279      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004afa:	4b6f      	ldr	r3, [pc, #444]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b04:	4b6c      	ldr	r3, [pc, #432]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b16:	4b68      	ldr	r3, [pc, #416]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	4a66      	ldr	r2, [pc, #408]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b28:	e01e      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b2a:	4b63      	ldr	r3, [pc, #396]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d106      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b40:	4b5f      	ldr	r3, [pc, #380]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	e010      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b46:	4b5c      	ldr	r3, [pc, #368]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5a:	d102      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b5c:	4b59      	ldr	r3, [pc, #356]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e002      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b66:	e242      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004b68:	e241      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b6a:	4b57      	ldr	r3, [pc, #348]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6e:	e23e      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b74:	e23b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	f040 80a6 	bne.w	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b80:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b90:	d054      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b98:	f200 808b 	bhi.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba2:	f000 8083 	beq.w	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bac:	f200 8081 	bhi.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	d02f      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbe:	d878      	bhi.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d012      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004bce:	e070      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bd0:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bdc:	d107      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fcca 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bec:	e1ff      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bf2:	e1fc      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c00:	d107      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c02:	f107 0318 	add.w	r3, r7, #24
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fa10 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c10:	e1ed      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c16:	e1ea      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c18:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c24:	d107      	bne.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c26:	f107 030c 	add.w	r3, r7, #12
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fb52 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c34:	e1db      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3a:	e1d8      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6a:	e01e      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c78:	d106      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c80:	d102      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c82:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c86:	e010      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9c:	d102      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca2:	e002      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ca8:	e1a1      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004caa:	e1a0      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb0:	e19d      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb6:	e19a      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004cb8:	58024400 	.word	0x58024400
 8004cbc:	03d09000 	.word	0x03d09000
 8004cc0:	003d0900 	.word	0x003d0900
 8004cc4:	007a1200 	.word	0x007a1200
 8004cc8:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cd2:	d173      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004cd4:	4b9a      	ldr	r3, [pc, #616]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce4:	d02f      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cec:	d863      	bhi.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfa:	d012      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004cfc:	e05b      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cfe:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d0c:	f107 0318 	add.w	r3, r7, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f98b 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d1a:	e168      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d20:	e165      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d22:	4b87      	ldr	r3, [pc, #540]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 facd 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d3e:	e156      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d44:	e153      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d46:	4b7e      	ldr	r3, [pc, #504]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d50:	4b7b      	ldr	r3, [pc, #492]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d10c      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d62:	4b77      	ldr	r3, [pc, #476]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	4a75      	ldr	r2, [pc, #468]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d74:	e01e      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d76:	4b72      	ldr	r3, [pc, #456]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d106      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8a:	d102      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d8c:	4b6e      	ldr	r3, [pc, #440]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e010      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d92:	4b6b      	ldr	r3, [pc, #428]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d9e:	d106      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da6:	d102      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004da8:	4b68      	ldr	r3, [pc, #416]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	e002      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004db2:	e11c      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004db4:	e11b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dba:	e118      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d133      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004dc4:	4b5e      	ldr	r3, [pc, #376]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dcc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d012      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004ddc:	e023      	b.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dde:	4b58      	ldr	r3, [pc, #352]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dea:	d107      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fbc3 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dfa:	e0f8      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e00:	e0f5      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e02:	4b4f      	ldr	r3, [pc, #316]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e10:	f107 0318 	add.w	r3, r7, #24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f909 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e1e:	e0e6      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e24:	e0e3      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e2a:	e0e0      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e32:	f040 808d 	bne.w	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e36:	4b42      	ldr	r3, [pc, #264]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e46:	d06b      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4e:	d874      	bhi.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e56:	d056      	beq.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5e:	d86c      	bhi.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e66:	d03b      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e6e:	d864      	bhi.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e76:	d021      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7e:	d85c      	bhi.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e8c:	d004      	beq.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004e8e:	e054      	b.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e90:	f000 f8b6 	bl	8005000 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e94:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e96:	e0aa      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ea6:	f107 0318 	add.w	r3, r7, #24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f8be 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eb4:	e09b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eba:	e098      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ebc:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec8:	d107      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eca:	f107 030c 	add.w	r3, r7, #12
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa00 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ed8:	e089      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ede:	e086      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d109      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004efe:	e076      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f04:	e073      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f12:	d102      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f18:	e069      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f1e:	e066      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f2c:	d102      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f32:	e05c      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f38:	e059      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f3e:	e056      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f40:	58024400 	.word	0x58024400
 8004f44:	03d09000 	.word	0x03d09000
 8004f48:	003d0900 	.word	0x003d0900
 8004f4c:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f56:	d148      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f58:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f68:	d02a      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f70:	d838      	bhi.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7e:	d00d      	beq.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004f80:	e030      	b.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f82:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f8e:	d102      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004f90:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f94:	e02b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f9a:	e028      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fa8:	d107      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fae4 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fb8:	e019      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fbe:	e016      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fcc:	d107      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fce:	f107 0318 	add.w	r3, r7, #24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f82a 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fdc:	e007      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe2:	e004      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe8:	e001      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3740      	adds	r7, #64	; 0x40
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	007a1200 	.word	0x007a1200

08005000 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005004:	f7fe fc82 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4904      	ldr	r1, [pc, #16]	; (8005028 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd80      	pop	{r7, pc}
 8005024:	58024400 	.word	0x58024400
 8005028:	0800d048 	.word	0x0800d048

0800502c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800503e:	4b9f      	ldr	r3, [pc, #636]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	0b1b      	lsrs	r3, r3, #12
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800504a:	4b9c      	ldr	r3, [pc, #624]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005056:	4b99      	ldr	r3, [pc, #612]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	08db      	lsrs	r3, r3, #3
 800505c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8111 	beq.w	800529c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f000 8083 	beq.w	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b02      	cmp	r3, #2
 8005086:	f200 80a1 	bhi.w	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d056      	beq.n	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005096:	e099      	b.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005098:	4b88      	ldr	r3, [pc, #544]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02d      	beq.n	8005100 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050a4:	4b85      	ldr	r3, [pc, #532]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	4a84      	ldr	r2, [pc, #528]	; (80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050de:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050fe:	e087      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b6a      	ldr	r3, [pc, #424]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005142:	e065      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b59      	ldr	r3, [pc, #356]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005186:	e043      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ca:	e021      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800520e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	0a5b      	lsrs	r3, r3, #9
 8005216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800522a:	edd7 6a07 	vldr	s13, [r7, #28]
 800522e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005236:	ee17 2a90 	vmov	r2, s15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800523e:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005258:	edd7 6a07 	vldr	s13, [r7, #28]
 800525c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005264:	ee17 2a90 	vmov	r2, s15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800526c:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005286:	edd7 6a07 	vldr	s13, [r7, #28]
 800528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005292:	ee17 2a90 	vmov	r2, s15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800529a:	e008      	b.n	80052ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
 80052c0:	03d09000 	.word	0x03d09000
 80052c4:	46000000 	.word	0x46000000
 80052c8:	4c742400 	.word	0x4c742400
 80052cc:	4a742400 	.word	0x4a742400
 80052d0:	4af42400 	.word	0x4af42400

080052d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052dc:	4ba1      	ldr	r3, [pc, #644]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052e6:	4b9f      	ldr	r3, [pc, #636]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	0d1b      	lsrs	r3, r3, #20
 80052ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052f2:	4b9c      	ldr	r3, [pc, #624]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052fe:	4b99      	ldr	r3, [pc, #612]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	08db      	lsrs	r3, r3, #3
 8005304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8111 	beq.w	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f000 8083 	beq.w	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b02      	cmp	r3, #2
 800532e:	f200 80a1 	bhi.w	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d056      	beq.n	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800533e:	e099      	b.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005340:	4b88      	ldr	r3, [pc, #544]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02d      	beq.n	80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800534c:	4b85      	ldr	r3, [pc, #532]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	4a84      	ldr	r2, [pc, #528]	; (8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
 800535c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b7b      	ldr	r3, [pc, #492]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a03 	vldr	s12, [r7, #12]
 800538a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053a6:	e087      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b6a      	ldr	r3, [pc, #424]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ea:	e065      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b59      	ldr	r3, [pc, #356]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800542e:	e043      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b48      	ldr	r3, [pc, #288]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a03 	vldr	s12, [r7, #12]
 8005456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005472:	e021      	b.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a03 	vldr	s12, [r7, #12]
 800549a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054b8:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	0a5b      	lsrs	r3, r3, #9
 80054be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054de:	ee17 2a90 	vmov	r2, s15
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054e6:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005500:	edd7 6a07 	vldr	s13, [r7, #28]
 8005504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550c:	ee17 2a90 	vmov	r2, s15
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	0e1b      	lsrs	r3, r3, #24
 800551a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800552a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553a:	ee17 2a90 	vmov	r2, s15
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
}
 8005556:	bf00      	nop
 8005558:	3724      	adds	r7, #36	; 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	03d09000 	.word	0x03d09000
 800556c:	46000000 	.word	0x46000000
 8005570:	4c742400 	.word	0x4c742400
 8005574:	4a742400 	.word	0x4a742400
 8005578:	4af42400 	.word	0x4af42400

0800557c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005584:	4ba0      	ldr	r3, [pc, #640]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800558e:	4b9e      	ldr	r3, [pc, #632]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005598:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800559a:	4b9b      	ldr	r3, [pc, #620]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055a4:	4b98      	ldr	r3, [pc, #608]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8111 	beq.w	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	f000 8083 	beq.w	80056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	f200 80a1 	bhi.w	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d056      	beq.n	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055e4:	e099      	b.n	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e6:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02d      	beq.n	800564e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	4a83      	ldr	r2, [pc, #524]	; (800580c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561c:	4b7a      	ldr	r3, [pc, #488]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005630:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005648:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800564c:	e087      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005658:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800565c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005660:	4b69      	ldr	r3, [pc, #420]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005670:	ed97 6a03 	vldr	s12, [r7, #12]
 8005674:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005690:	e065      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80056a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a4:	4b58      	ldr	r3, [pc, #352]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d4:	e043      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800581c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e8:	4b47      	ldr	r3, [pc, #284]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80056fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005714:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005718:	e021      	b.n	800575e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005724:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005758:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800575c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	0a5b      	lsrs	r3, r3, #9
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005778:	edd7 6a07 	vldr	s13, [r7, #28]
 800577c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005784:	ee17 2a90 	vmov	r2, s15
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b2:	ee17 2a90 	vmov	r2, s15
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	0e1b      	lsrs	r3, r3, #24
 80057c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e0:	ee17 2a90 	vmov	r2, s15
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057e8:	e008      	b.n	80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3724      	adds	r7, #36	; 0x24
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	58024400 	.word	0x58024400
 800580c:	03d09000 	.word	0x03d09000
 8005810:	46000000 	.word	0x46000000
 8005814:	4c742400 	.word	0x4c742400
 8005818:	4a742400 	.word	0x4a742400
 800581c:	4af42400 	.word	0x4af42400

08005820 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800582e:	4b53      	ldr	r3, [pc, #332]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b03      	cmp	r3, #3
 8005838:	d101      	bne.n	800583e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e099      	b.n	8005972 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800583e:	4b4f      	ldr	r3, [pc, #316]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a4e      	ldr	r2, [pc, #312]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005844:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584a:	f7fb ff5f 	bl	800170c <HAL_GetTick>
 800584e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005850:	e008      	b.n	8005864 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005852:	f7fb ff5b 	bl	800170c <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e086      	b.n	8005972 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005864:	4b45      	ldr	r3, [pc, #276]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005870:	4b42      	ldr	r3, [pc, #264]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	031b      	lsls	r3, r3, #12
 800587e:	493f      	ldr	r1, [pc, #252]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005880:	4313      	orrs	r3, r2
 8005882:	628b      	str	r3, [r1, #40]	; 0x28
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	3b01      	subs	r3, #1
 800588a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	3b01      	subs	r3, #1
 8005894:	025b      	lsls	r3, r3, #9
 8005896:	b29b      	uxth	r3, r3
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	3b01      	subs	r3, #1
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	061b      	lsls	r3, r3, #24
 80058b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058b4:	4931      	ldr	r1, [pc, #196]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058ba:	4b30      	ldr	r3, [pc, #192]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	492d      	ldr	r1, [pc, #180]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058cc:	4b2b      	ldr	r3, [pc, #172]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	f023 0220 	bic.w	r2, r3, #32
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	4928      	ldr	r1, [pc, #160]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058e4:	f023 0310 	bic.w	r3, r3, #16
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ee:	4b24      	ldr	r3, [pc, #144]	; (8005980 <RCCEx_PLL2_Config+0x160>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	69d2      	ldr	r2, [r2, #28]
 80058f6:	00d2      	lsls	r2, r2, #3
 80058f8:	4920      	ldr	r1, [pc, #128]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a1e      	ldr	r2, [pc, #120]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005904:	f043 0310 	orr.w	r3, r3, #16
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800591c:	e00f      	b.n	800593e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d106      	bne.n	8005932 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a14      	ldr	r2, [pc, #80]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 800592a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005930:	e005      	b.n	800593e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	4a11      	ldr	r2, [pc, #68]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800593c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a0e      	ldr	r2, [pc, #56]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fb fedf 	bl	800170c <HAL_GetTick>
 800594e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005950:	e008      	b.n	8005964 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005952:	f7fb fedb 	bl	800170c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <RCCEx_PLL2_Config+0x15c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
 8005980:	ffff0007 	.word	0xffff0007

08005984 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005992:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d101      	bne.n	80059a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e099      	b.n	8005ad6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059a2:	4b4f      	ldr	r3, [pc, #316]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a4e      	ldr	r2, [pc, #312]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ae:	f7fb fead 	bl	800170c <HAL_GetTick>
 80059b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059b6:	f7fb fea9 	bl	800170c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e086      	b.n	8005ad6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059c8:	4b45      	ldr	r3, [pc, #276]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059d4:	4b42      	ldr	r3, [pc, #264]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	051b      	lsls	r3, r3, #20
 80059e2:	493f      	ldr	r1, [pc, #252]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	628b      	str	r3, [r1, #40]	; 0x28
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	025b      	lsls	r3, r3, #9
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	061b      	lsls	r3, r3, #24
 8005a14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a18:	4931      	ldr	r1, [pc, #196]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a1e:	4b30      	ldr	r3, [pc, #192]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	492d      	ldr	r1, [pc, #180]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a30:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	4928      	ldr	r1, [pc, #160]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a42:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4a26      	ldr	r2, [pc, #152]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <RCCEx_PLL3_Config+0x160>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	69d2      	ldr	r2, [r2, #28]
 8005a5a:	00d2      	lsls	r2, r2, #3
 8005a5c:	4920      	ldr	r1, [pc, #128]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a62:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a80:	e00f      	b.n	8005aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d106      	bne.n	8005a96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a94:	e005      	b.n	8005aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aae:	f7fb fe2d 	bl	800170c <HAL_GetTick>
 8005ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab4:	e008      	b.n	8005ac8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ab6:	f7fb fe29 	bl	800170c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e006      	b.n	8005ad6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <RCCEx_PLL3_Config+0x15c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	ffff0007 	.word	0xffff0007

08005ae8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e075      	b.n	8005be6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fb fb67 	bl	80011e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2204      	movs	r2, #4
 8005b16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f868 	bl	8005bf0 <HAL_SD_InitCard>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e05d      	b.n	8005be6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 ff6f 	bl	8006a14 <HAL_SD_GetCardStatus>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e052      	b.n	8005be6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b40:	7e3b      	ldrb	r3, [r7, #24]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b46:	7e7b      	ldrb	r3, [r7, #25]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10a      	bne.n	8005b6a <HAL_SD_Init+0x82>
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <HAL_SD_Init+0x78>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b66:	659a      	str	r2, [r3, #88]	; 0x58
 8005b68:	e00b      	b.n	8005b82 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d104      	bne.n	8005b7c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b78:	659a      	str	r2, [r3, #88]	; 0x58
 8005b7a:	e002      	b.n	8005b82 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 f82d 	bl	8006be8 <HAL_SD_ConfigWideBusOperation>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e026      	b.n	8005be6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b98:	f7fb fdb8 	bl	800170c <HAL_GetTick>
 8005b9c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b9e:	e011      	b.n	8005bc4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ba0:	f7fb fdb4 	bl	800170c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d109      	bne.n	8005bc4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bb6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e010      	b.n	8005be6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 f921 	bl	8006e0c <HAL_SD_GetCardState>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d1e7      	bne.n	8005ba0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3728      	adds	r7, #40	; 0x28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b08d      	sub	sp, #52	; 0x34
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005c0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005c10:	f7fe fdd2 	bl	80047b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e06a      	b.n	8005d06 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	4a36      	ldr	r2, [pc, #216]	; (8005d10 <HAL_SD_InitCard+0x120>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	466a      	mov	r2, sp
 8005c44:	f107 0318 	add.w	r3, r7, #24
 8005c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c56:	4620      	mov	r0, r4
 8005c58:	f002 fed0 	bl	80089fc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f002 ff13 	bl	8008a8c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c72:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <HAL_SD_InitCard+0x124>)
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fb fd51 	bl	8001724 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 f9b0 	bl	8006fe8 <SD_PowerON>
 8005c88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e02e      	b.n	8005d06 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f8cf 	bl	8006e4c <SD_InitCard>
 8005cae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e01b      	b.n	8005d06 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f002 ff6e 	bl	8008bb8 <SDMMC_CmdBlockLength>
 8005cdc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00f      	beq.n	8005d04 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <HAL_SD_InitCard+0x128>)
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	372c      	adds	r7, #44	; 0x2c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	014f8b59 	.word	0x014f8b59
 8005d14:	00012110 	.word	0x00012110
 8005d18:	1fe00fff 	.word	0x1fe00fff

08005d1c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b092      	sub	sp, #72	; 0x48
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d2a:	f7fb fcef 	bl	800170c <HAL_GetTick>
 8005d2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d107      	bne.n	8005d4e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e167      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	f040 815a 	bne.w	8006010 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d907      	bls.n	8005d80 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e14e      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2203      	movs	r2, #3
 8005d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d002      	beq.n	8005d9e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	025b      	lsls	r3, r3, #9
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005da2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	025b      	lsls	r3, r3, #9
 8005da8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005daa:	2390      	movs	r3, #144	; 0x90
 8005dac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005dae:	2302      	movs	r3, #2
 8005db0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f107 0214 	add.w	r2, r7, #20
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f002 fecb 	bl	8008b60 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d90a      	bls.n	8005df6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2202      	movs	r2, #2
 8005de4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dec:	4618      	mov	r0, r3
 8005dee:	f002 ff29 	bl	8008c44 <SDMMC_CmdReadMultiBlock>
 8005df2:	6478      	str	r0, [r7, #68]	; 0x44
 8005df4:	e009      	b.n	8005e0a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e02:	4618      	mov	r0, r3
 8005e04:	f002 fefb 	bl	8008bfe <SDMMC_CmdReadSingleBlock>
 8005e08:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d012      	beq.n	8005e36 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a84      	ldr	r2, [pc, #528]	; (8006028 <HAL_SD_ReadBlocks+0x30c>)
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e0f3      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e3a:	e058      	b.n	8005eee <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d033      	beq.n	8005eb2 <HAL_SD_ReadBlocks+0x196>
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	2b1f      	cmp	r3, #31
 8005e4e:	d930      	bls.n	8005eb2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40
 8005e54:	e027      	b.n	8005ea6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f002 fdf8 	bl	8008a50 <SDMMC_ReadFIFO>
 8005e60:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	0e1b      	lsrs	r3, r3, #24
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	d9d4      	bls.n	8005e56 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	3b20      	subs	r3, #32
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005eb2:	f7fb fc2b 	bl	800170c <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d902      	bls.n	8005ec8 <HAL_SD_ReadBlocks+0x1ac>
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d112      	bne.n	8005eee <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a56      	ldr	r2, [pc, #344]	; (8006028 <HAL_SD_ReadBlocks+0x30c>)
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e097      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d09f      	beq.n	8005e3c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d022      	beq.n	8005f60 <HAL_SD_ReadBlocks+0x244>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d91f      	bls.n	8005f60 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d01b      	beq.n	8005f60 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f002 fef3 	bl	8008d18 <SDMMC_CmdStopTransfer>
 8005f32:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3a      	ldr	r2, [pc, #232]	; (8006028 <HAL_SD_ReadBlocks+0x30c>)
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e05e      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d012      	beq.n	8005f94 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <HAL_SD_ReadBlocks+0x30c>)
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	f043 0208 	orr.w	r2, r3, #8
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e044      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d012      	beq.n	8005fc8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a20      	ldr	r2, [pc, #128]	; (8006028 <HAL_SD_ReadBlocks+0x30c>)
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e02a      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d012      	beq.n	8005ffc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a13      	ldr	r2, [pc, #76]	; (8006028 <HAL_SD_ReadBlocks+0x30c>)
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e010      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0a      	ldr	r2, [pc, #40]	; (800602c <HAL_SD_ReadBlocks+0x310>)
 8006002:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e006      	b.n	800601e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006014:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3748      	adds	r7, #72	; 0x48
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	1fe00fff 	.word	0x1fe00fff
 800602c:	18000f3a 	.word	0x18000f3a

08006030 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b092      	sub	sp, #72	; 0x48
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800603e:	f7fb fb65 	bl	800170c <HAL_GetTick>
 8006042:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e16b      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b01      	cmp	r3, #1
 800606c:	f040 815e 	bne.w	800632c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	441a      	add	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	429a      	cmp	r2, r3
 8006082:	d907      	bls.n	8006094 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e152      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2203      	movs	r2, #3
 8006098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d002      	beq.n	80060b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	025b      	lsls	r3, r3, #9
 80060b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	025b      	lsls	r3, r3, #9
 80060bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060be:	2390      	movs	r3, #144	; 0x90
 80060c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f107 0218 	add.w	r2, r7, #24
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 fd41 	bl	8008b60 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ec:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d90a      	bls.n	800610a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006100:	4618      	mov	r0, r3
 8006102:	f002 fde5 	bl	8008cd0 <SDMMC_CmdWriteMultiBlock>
 8006106:	6478      	str	r0, [r7, #68]	; 0x44
 8006108:	e009      	b.n	800611e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2210      	movs	r2, #16
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006116:	4618      	mov	r0, r3
 8006118:	f002 fdb7 	bl	8008c8a <SDMMC_CmdWriteSingleBlock>
 800611c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800611e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006120:	2b00      	cmp	r3, #0
 8006122:	d012      	beq.n	800614a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a86      	ldr	r2, [pc, #536]	; (8006344 <HAL_SD_WriteBlocks+0x314>)
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006132:	431a      	orrs	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e0f7      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800614e:	e05c      	b.n	800620a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d037      	beq.n	80061ce <HAL_SD_WriteBlocks+0x19e>
 800615e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006160:	2b1f      	cmp	r3, #31
 8006162:	d934      	bls.n	80061ce <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006164:	2300      	movs	r3, #0
 8006166:	643b      	str	r3, [r7, #64]	; 0x40
 8006168:	e02b      	b.n	80061c2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	3301      	adds	r3, #1
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	021a      	lsls	r2, r3, #8
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	3301      	adds	r3, #1
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	041a      	lsls	r2, r3, #16
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	3301      	adds	r3, #1
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	061a      	lsls	r2, r3, #24
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	3301      	adds	r3, #1
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f107 0214 	add.w	r2, r7, #20
 80061b4:	4611      	mov	r1, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f002 fc57 	bl	8008a6a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	3301      	adds	r3, #1
 80061c0:	643b      	str	r3, [r7, #64]	; 0x40
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	2b07      	cmp	r3, #7
 80061c6:	d9d0      	bls.n	800616a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80061c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ca:	3b20      	subs	r3, #32
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061ce:	f7fb fa9d 	bl	800170c <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061da:	429a      	cmp	r2, r3
 80061dc:	d902      	bls.n	80061e4 <HAL_SD_WriteBlocks+0x1b4>
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d112      	bne.n	800620a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a56      	ldr	r2, [pc, #344]	; (8006344 <HAL_SD_WriteBlocks+0x314>)
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e097      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006214:	2b00      	cmp	r3, #0
 8006216:	d09b      	beq.n	8006150 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006226:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d022      	beq.n	800627c <HAL_SD_WriteBlocks+0x24c>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d91f      	bls.n	800627c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	2b03      	cmp	r3, #3
 8006242:	d01b      	beq.n	800627c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f002 fd65 	bl	8008d18 <SDMMC_CmdStopTransfer>
 800624e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006252:	2b00      	cmp	r3, #0
 8006254:	d012      	beq.n	800627c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3a      	ldr	r2, [pc, #232]	; (8006344 <HAL_SD_WriteBlocks+0x314>)
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e05e      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d012      	beq.n	80062b0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2d      	ldr	r2, [pc, #180]	; (8006344 <HAL_SD_WriteBlocks+0x314>)
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	f043 0208 	orr.w	r2, r3, #8
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e044      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d012      	beq.n	80062e4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a20      	ldr	r2, [pc, #128]	; (8006344 <HAL_SD_WriteBlocks+0x314>)
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	f043 0202 	orr.w	r2, r3, #2
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e02a      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d012      	beq.n	8006318 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a13      	ldr	r2, [pc, #76]	; (8006344 <HAL_SD_WriteBlocks+0x314>)
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	f043 0210 	orr.w	r2, r3, #16
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e010      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <HAL_SD_WriteBlocks+0x318>)
 800631e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e006      	b.n	800633a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3748      	adds	r7, #72	; 0x48
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	1fe00fff 	.word	0x1fe00fff
 8006348:	18000f3a 	.word	0x18000f3a

0800634c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_SD_IRQHandler+0x2e>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 f924 	bl	80075c0 <SD_Read_IT>
 8006378:	e19a      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80ac 	beq.w	80064e2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006392:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b9d      	ldr	r3, [pc, #628]	; (8006614 <HAL_SD_IRQHandler+0x2c8>)
 80063a0:	400b      	ands	r3, r1
 80063a2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d038      	beq.n	8006440 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <HAL_SD_IRQHandler+0x96>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d011      	beq.n	8006406 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f002 fc96 	bl	8008d18 <SDMMC_CmdStopTransfer>
 80063ec:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f959 	bl	80066b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a83      	ldr	r2, [pc, #524]	; (8006618 <HAL_SD_IRQHandler+0x2cc>)
 800640c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <HAL_SD_IRQHandler+0xe4>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f003 f951 	bl	80096d8 <HAL_SD_RxCpltCallback>
 8006436:	e13b      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f003 f943 	bl	80096c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800643e:	e137      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8132 	beq.w	80066b0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2200      	movs	r2, #0
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2200      	movs	r2, #0
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <HAL_SD_IRQHandler+0x12c>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d011      	beq.n	800649c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f002 fc4b 	bl	8008d18 <SDMMC_CmdStopTransfer>
 8006482:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f90e 	bl	80066b8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0310 	and.w	r3, r3, #16
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <HAL_SD_IRQHandler+0x172>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f003 f900 	bl	80096c4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <HAL_SD_IRQHandler+0x18e>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 80eb 	beq.w	80066b0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f003 f8fc 	bl	80096d8 <HAL_SD_RxCpltCallback>
}
 80064e0:	e0e6      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <HAL_SD_IRQHandler+0x1b6>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f8a6 	bl	800764c <SD_Write_IT>
 8006500:	e0d6      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a2 	beq.w	8006656 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	f043 0202 	orr.w	r2, r3, #2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	f043 0208 	orr.w	r2, r3, #8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	f043 0210 	orr.w	r2, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a26      	ldr	r2, [pc, #152]	; (8006618 <HAL_SD_IRQHandler+0x2cc>)
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006590:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065c0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f002 fba6 	bl	8008d18 <SDMMC_CmdStopTransfer>
 80065cc:	4602      	mov	r2, r0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f854 	bl	80066b8 <HAL_SD_ErrorCallback>
}
 8006610:	e04e      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
 8006612:	bf00      	nop
 8006614:	ffff3ec5 	.word	0xffff3ec5
 8006618:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d044      	beq.n	80066b0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	2b00      	cmp	r3, #0
 800662c:	d040      	beq.n	80066b0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800663c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f832 	bl	80066b8 <HAL_SD_ErrorCallback>
}
 8006654:	e02c      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d025      	beq.n	80066b0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10c      	bne.n	8006696 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 f848 	bl	800771c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800668c:	e010      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f830 	bl	80076f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006694:	e00c      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 f831 	bl	8007708 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80066a6:	e003      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 f819 	bl	80076e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80066ae:	e7ff      	b.n	80066b0 <HAL_SD_IRQHandler+0x364>
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066da:	0f9b      	lsrs	r3, r3, #30
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e6:	0e9b      	lsrs	r3, r3, #26
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f8:	0e1b      	lsrs	r3, r3, #24
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670a:	0c1b      	lsrs	r3, r3, #16
 800670c:	b2da      	uxtb	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006716:	0a1b      	lsrs	r3, r3, #8
 8006718:	b2da      	uxtb	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	b2da      	uxtb	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672c:	0d1b      	lsrs	r3, r3, #20
 800672e:	b29a      	uxth	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	b2da      	uxtb	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674a:	0bdb      	lsrs	r3, r3, #15
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675c:	0b9b      	lsrs	r3, r3, #14
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	0b5b      	lsrs	r3, r3, #13
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	0b1b      	lsrs	r3, r3, #12
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2200      	movs	r2, #0
 8006792:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d163      	bne.n	8006864 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a0:	009a      	lsls	r2, r3, #2
 80067a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067a6:	4013      	ands	r3, r2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80067ac:	0f92      	lsrs	r2, r2, #30
 80067ae:	431a      	orrs	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b8:	0edb      	lsrs	r3, r3, #27
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ca:	0e1b      	lsrs	r3, r3, #24
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067dc:	0d5b      	lsrs	r3, r3, #21
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ee:	0c9b      	lsrs	r3, r3, #18
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006800:	0bdb      	lsrs	r3, r3, #15
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	b2da      	uxtb	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	7e1b      	ldrb	r3, [r3, #24]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	3302      	adds	r3, #2
 8006824:	2201      	movs	r2, #1
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800682e:	fb02 f203 	mul.w	r2, r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	7a1b      	ldrb	r3, [r3, #8]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	2201      	movs	r2, #1
 8006842:	409a      	lsls	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006850:	0a52      	lsrs	r2, r2, #9
 8006852:	fb02 f203 	mul.w	r2, r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
 8006862:	e031      	b.n	80068c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	2b01      	cmp	r3, #1
 800686a:	d11d      	bne.n	80068a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	431a      	orrs	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	3301      	adds	r3, #1
 8006888:	029a      	lsls	r2, r3, #10
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800689c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
 80068a6:	e00f      	b.n	80068c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a58      	ldr	r2, [pc, #352]	; (8006a10 <HAL_SD_GetCardCSD+0x344>)
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e09d      	b.n	8006a04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068cc:	0b9b      	lsrs	r3, r3, #14
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068de:	09db      	lsrs	r3, r3, #7
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006900:	0fdb      	lsrs	r3, r3, #31
 8006902:	b2da      	uxtb	r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690c:	0f5b      	lsrs	r3, r3, #29
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	b2da      	uxtb	r2, r3
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691e:	0e9b      	lsrs	r3, r3, #26
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	b2da      	uxtb	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006930:	0d9b      	lsrs	r3, r3, #22
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	b2da      	uxtb	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006942:	0d5b      	lsrs	r3, r3, #21
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695e:	0c1b      	lsrs	r3, r3, #16
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006972:	0bdb      	lsrs	r3, r3, #15
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	0b9b      	lsrs	r3, r3, #14
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699a:	0b5b      	lsrs	r3, r3, #13
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ae:	0b1b      	lsrs	r3, r3, #12
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c2:	0a9b      	lsrs	r3, r3, #10
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	1fe00fff 	.word	0x1fe00fff

08006a14 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b094      	sub	sp, #80	; 0x50
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d101      	bne.n	8006a34 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0a7      	b.n	8006b84 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb62 	bl	8007104 <SD_SendSDStatus>
 8006a40:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d011      	beq.n	8006a6c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a4f      	ldr	r2, [pc, #316]	; (8006b8c <HAL_SD_GetCardStatus+0x178>)
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a6a:	e070      	b.n	8006b4e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	0e1b      	lsrs	r3, r3, #24
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	061a      	lsls	r2, r3, #24
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ab2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006abc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	0d1b      	lsrs	r3, r3, #20
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	0a9b      	lsrs	r3, r3, #10
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	0a1b      	lsrs	r3, r3, #8
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	0e1b      	lsrs	r3, r3, #24
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 f82e 	bl	8008bb8 <SDMMC_CmdBlockLength>
 8006b5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <HAL_SD_GetCardStatus+0x178>)
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b70:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3750      	adds	r7, #80	; 0x50
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	1fe00fff 	.word	0x1fe00fff

08006b90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b08d      	sub	sp, #52	; 0x34
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2203      	movs	r2, #3
 8006c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d02e      	beq.n	8006c6a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c12:	d106      	bne.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8006c20:	e029      	b.n	8006c76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c28:	d10a      	bne.n	8006c40 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fb62 	bl	80072f4 <SD_WideBus_Enable>
 8006c30:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c3e:	e01a      	b.n	8006c76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb9f 	bl	800738a <SD_WideBus_Disable>
 8006c4c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	635a      	str	r2, [r3, #52]	; 0x34
 8006c5a:	e00c      	b.n	8006c76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	635a      	str	r2, [r3, #52]	; 0x34
 8006c68:	e005      	b.n	8006c76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a5e      	ldr	r2, [pc, #376]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c8c:	e094      	b.n	8006db8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c92:	f7fd fd91 	bl	80047b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c96:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8083 	beq.w	8006da6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	4950      	ldr	r1, [pc, #320]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cbe:	fba1 1303 	umull	r1, r3, r1, r3
 8006cc2:	0e1b      	lsrs	r3, r3, #24
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d303      	bcc.n	8006cd0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	e05a      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd8:	d103      	bne.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	e051      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cea:	d126      	bne.n	8006d3a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10e      	bne.n	8006d12 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	4a43      	ldr	r2, [pc, #268]	; (8006e04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d906      	bls.n	8006d0a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	4a40      	ldr	r2, [pc, #256]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d00:	fba2 2303 	umull	r2, r3, r2, r3
 8006d04:	0e5b      	lsrs	r3, r3, #25
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	e03d      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e039      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	6a3a      	ldr	r2, [r7, #32]
 8006d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1e:	4a39      	ldr	r2, [pc, #228]	; (8006e04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d906      	bls.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	4a36      	ldr	r2, [pc, #216]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	0e5b      	lsrs	r3, r3, #25
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e029      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	e025      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10e      	bne.n	8006d60 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	4a30      	ldr	r2, [pc, #192]	; (8006e08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d906      	bls.n	8006d58 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	4a2c      	ldr	r2, [pc, #176]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	0e1b      	lsrs	r3, r3, #24
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e016      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e012      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d906      	bls.n	8006d80 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	0e1b      	lsrs	r3, r3, #24
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e002      	b.n	8006d86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681c      	ldr	r4, [r3, #0]
 8006d8a:	466a      	mov	r2, sp
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d94:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d98:	f107 0308 	add.w	r3, r7, #8
 8006d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f001 fe2c 	bl	80089fc <SDMMC_Init>
 8006da4:	e008      	b.n	8006db8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fef9 	bl	8008bb8 <SDMMC_CmdBlockLength>
 8006dc6:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x214>)
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	372c      	adds	r7, #44	; 0x2c
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}
 8006dfc:	1fe00fff 	.word	0x1fe00fff
 8006e00:	55e63b89 	.word	0x55e63b89
 8006e04:	02faf080 	.word	0x02faf080
 8006e08:	017d7840 	.word	0x017d7840

08006e0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa40 	bl	80072a4 <SD_SendStatus>
 8006e24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	0a5b      	lsrs	r3, r3, #9
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e42:	693b      	ldr	r3, [r7, #16]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b090      	sub	sp, #64	; 0x40
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e58:	f7fa fc58 	bl	800170c <HAL_GetTick>
 8006e5c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fe23 	bl	8008aae <SDMMC_GetPowerState>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e72:	e0b5      	b.n	8006fe0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d02e      	beq.n	8006eda <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f002 f86e 	bl	8008f62 <SDMMC_CmdSendCID>
 8006e86:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <SD_InitCard+0x46>
    {
      return errorstate;
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	e0a6      	b.n	8006fe0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fe4e 	bl	8008b3a <SDMMC_GetResponse>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 fe45 	bl	8008b3a <SDMMC_GetResponse>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2108      	movs	r1, #8
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fe3c 	bl	8008b3a <SDMMC_GetResponse>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	210c      	movs	r1, #12
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fe33 	bl	8008b3a <SDMMC_GetResponse>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d01d      	beq.n	8006f1e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006ee2:	e019      	b.n	8006f18 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f107 020a 	add.w	r2, r7, #10
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f002 f876 	bl	8008fe0 <SDMMC_CmdSetRelAdd>
 8006ef4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	e06f      	b.n	8006fe0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006f00:	f7fa fc04 	bl	800170c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3287 	movw	r2, #4999	; 0x1387
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d902      	bls.n	8006f18 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006f12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f16:	e063      	b.n	8006fe0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006f18:	897b      	ldrh	r3, [r7, #10]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0e2      	beq.n	8006ee4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d036      	beq.n	8006f94 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f002 f830 	bl	8008fa0 <SDMMC_CmdSendCSD>
 8006f40:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <SD_InitCard+0x100>
    {
      return errorstate;
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	e049      	b.n	8006fe0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 fdf1 	bl	8008b3a <SDMMC_GetResponse>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2104      	movs	r1, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fde8 	bl	8008b3a <SDMMC_GetResponse>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2108      	movs	r1, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fddf 	bl	8008b3a <SDMMC_GetResponse>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	210c      	movs	r1, #12
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fdd6 	bl	8008b3a <SDMMC_GetResponse>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2104      	movs	r1, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fdcd 	bl	8008b3a <SDMMC_GetResponse>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	0d1a      	lsrs	r2, r3, #20
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fa8:	f107 030c 	add.w	r3, r7, #12
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff fb8c 	bl	80066cc <HAL_SD_GetCardCSD>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fbe:	e00f      	b.n	8006fe0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f001 fedf 	bl	8008d90 <SDMMC_CmdSelDesel>
 8006fd2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <SD_InitCard+0x192>
  {
    return errorstate;
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	e000      	b.n	8006fe0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3740      	adds	r7, #64	; 0x40
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f001 fee8 	bl	8008dd6 <SDMMC_CmdGoIdleState>
 8007006:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <SD_PowerON+0x2a>
  {
    return errorstate;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	e072      	b.n	80070f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f001 fefb 	bl	8008e12 <SDMMC_CmdOperCond>
 800701c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007024:	d10d      	bne.n	8007042 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fed0 	bl	8008dd6 <SDMMC_CmdGoIdleState>
 8007036:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <SD_PowerON+0x60>
    {
      return errorstate;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	e05a      	b.n	80070f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d137      	bne.n	80070c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fefb 	bl	8008e52 <SDMMC_CmdAppCommand>
 800705c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d02d      	beq.n	80070c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007068:	e046      	b.n	80070f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f001 feee 	bl	8008e52 <SDMMC_CmdAppCommand>
 8007076:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <SD_PowerON+0x9a>
    {
      return errorstate;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	e03a      	b.n	80070f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	491e      	ldr	r1, [pc, #120]	; (8007100 <SD_PowerON+0x118>)
 8007088:	4618      	mov	r0, r3
 800708a:	f001 ff05 	bl	8008e98 <SDMMC_CmdAppOperCommand>
 800708e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800709a:	e02d      	b.n	80070f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 fd49 	bl	8008b3a <SDMMC_GetResponse>
 80070a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	0fdb      	lsrs	r3, r3, #31
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <SD_PowerON+0xce>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <SD_PowerON+0xd0>
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]

    count++;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3301      	adds	r3, #1
 80070be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d802      	bhi.n	80070d0 <SD_PowerON+0xe8>
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0cc      	beq.n	800706a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d902      	bls.n	80070e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070de:	e00b      	b.n	80070f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	c1100000 	.word	0xc1100000

08007104 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08c      	sub	sp, #48	; 0x30
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800710e:	f7fa fafd 	bl	800170c <HAL_GetTick>
 8007112:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f001 fd0b 	bl	8008b3a <SDMMC_GetResponse>
 8007124:	4603      	mov	r3, r0
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712e:	d102      	bne.n	8007136 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007134:	e0b0      	b.n	8007298 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2140      	movs	r1, #64	; 0x40
 800713c:	4618      	mov	r0, r3
 800713e:	f001 fd3b 	bl	8008bb8 <SDMMC_CmdBlockLength>
 8007142:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	e0a0      	b.n	8007298 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f001 fe75 	bl	8008e52 <SDMMC_CmdAppCommand>
 8007168:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	e08d      	b.n	8007298 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800717c:	f04f 33ff 	mov.w	r3, #4294967295
 8007180:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007182:	2340      	movs	r3, #64	; 0x40
 8007184:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007186:	2360      	movs	r3, #96	; 0x60
 8007188:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800718a:	2302      	movs	r3, #2
 800718c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800718e:	2300      	movs	r3, #0
 8007190:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007192:	2301      	movs	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f107 0208 	add.w	r2, r7, #8
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fcdd 	bl	8008b60 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 ff5d 	bl	800906a <SDMMC_CmdStatusRegister>
 80071b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02b      	beq.n	8007210 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	e069      	b.n	8007298 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d013      	beq.n	80071fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d6:	e00d      	b.n	80071f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fc37 	bl	8008a50 <SDMMC_ReadFIFO>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	601a      	str	r2, [r3, #0]
        pData++;
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	3304      	adds	r3, #4
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	3301      	adds	r3, #1
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	2b07      	cmp	r3, #7
 80071f8:	d9ee      	bls.n	80071d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071fa:	f7fa fa87 	bl	800170c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d102      	bne.n	8007210 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800720a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800720e:	e043      	b.n	8007298 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0d2      	beq.n	80071c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800722c:	2308      	movs	r3, #8
 800722e:	e033      	b.n	8007298 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	e02a      	b.n	8007298 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d017      	beq.n	8007280 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007250:	2320      	movs	r3, #32
 8007252:	e021      	b.n	8007298 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fbf9 	bl	8008a50 <SDMMC_ReadFIFO>
 800725e:	4602      	mov	r2, r0
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	601a      	str	r2, [r3, #0]
    pData++;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	3304      	adds	r3, #4
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800726a:	f7fa fa4f 	bl	800170c <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d102      	bne.n	8007280 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800727a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800727e:	e00b      	b.n	8007298 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e2      	bne.n	8007254 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a03      	ldr	r2, [pc, #12]	; (80072a0 <SD_SendSDStatus+0x19c>)
 8007294:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3730      	adds	r7, #48	; 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	18000f3a 	.word	0x18000f3a

080072a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072b8:	e018      	b.n	80072ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f001 feac 	bl	8009024 <SDMMC_CmdSendStatus>
 80072cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e009      	b.n	80072ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 fc2b 	bl	8008b3a <SDMMC_GetResponse>
 80072e4:	4602      	mov	r2, r0
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f001 fc15 	bl	8008b3a <SDMMC_GetResponse>
 8007310:	4603      	mov	r3, r0
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800731a:	d102      	bne.n	8007322 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800731c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007320:	e02f      	b.n	8007382 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f879 	bl	8007420 <SD_FindSCR>
 800732e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	e023      	b.n	8007382 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01c      	beq.n	800737e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f001 fd7e 	bl	8008e52 <SDMMC_CmdAppCommand>
 8007356:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	e00f      	b.n	8007382 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2102      	movs	r1, #2
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fdb5 	bl	8008ed8 <SDMMC_CmdBusWidth>
 800736e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	e003      	b.n	8007382 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
 800737c:	e001      	b.n	8007382 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800737e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 fbca 	bl	8008b3a <SDMMC_GetResponse>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b0:	d102      	bne.n	80073b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073b6:	e02f      	b.n	8007418 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f82e 	bl	8007420 <SD_FindSCR>
 80073c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	e023      	b.n	8007418 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01c      	beq.n	8007414 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f001 fd33 	bl	8008e52 <SDMMC_CmdAppCommand>
 80073ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e00f      	b.n	8007418 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 fd6a 	bl	8008ed8 <SDMMC_CmdBusWidth>
 8007404:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	e003      	b.n	8007418 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007410:	2300      	movs	r3, #0
 8007412:	e001      	b.n	8007418 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007414:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08e      	sub	sp, #56	; 0x38
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800742a:	f7fa f96f 	bl	800170c <HAL_GetTick>
 800742e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2108      	movs	r1, #8
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fbb6 	bl	8008bb8 <SDMMC_CmdBlockLength>
 800744c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	e0ad      	b.n	80075b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	4619      	mov	r1, r3
 8007464:	4610      	mov	r0, r2
 8007466:	f001 fcf4 	bl	8008e52 <SDMMC_CmdAppCommand>
 800746a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	e09e      	b.n	80075b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800747c:	2308      	movs	r3, #8
 800747e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007480:	2330      	movs	r3, #48	; 0x30
 8007482:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007484:	2302      	movs	r3, #2
 8007486:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007488:	2300      	movs	r3, #0
 800748a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800748c:	2301      	movs	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f107 0210 	add.w	r2, r7, #16
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fb60 	bl	8008b60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fd3a 	bl	8008f1e <SDMMC_CmdSendSCR>
 80074aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d027      	beq.n	8007502 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	e07e      	b.n	80075b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d113      	bne.n	80074ec <SD_FindSCR+0xcc>
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d110      	bne.n	80074ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fabe 	bl	8008a50 <SDMMC_ReadFIFO>
 80074d4:	4603      	mov	r3, r0
 80074d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fab7 	bl	8008a50 <SDMMC_ReadFIFO>
 80074e2:	4603      	mov	r3, r0
 80074e4:	60fb      	str	r3, [r7, #12]
      index++;
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	3301      	adds	r3, #1
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074ec:	f7fa f90e 	bl	800170c <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d102      	bne.n	8007502 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007500:	e058      	b.n	80075b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007508:	f240 532a 	movw	r3, #1322	; 0x52a
 800750c:	4013      	ands	r3, r2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0d1      	beq.n	80074b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2208      	movs	r2, #8
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007528:	2308      	movs	r3, #8
 800752a:	e043      	b.n	80075b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2202      	movs	r2, #2
 8007540:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007542:	2302      	movs	r3, #2
 8007544:	e036      	b.n	80075b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2220      	movs	r2, #32
 800755a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800755c:	2320      	movs	r3, #32
 800755e:	e029      	b.n	80075b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <SD_FindSCR+0x19c>)
 8007566:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	061a      	lsls	r2, r3, #24
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007574:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	0a1b      	lsrs	r3, r3, #8
 800757a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800757e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	0e1b      	lsrs	r3, r3, #24
 8007584:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	601a      	str	r2, [r3, #0]
    scr++;
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	3304      	adds	r3, #4
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	061a      	lsls	r2, r3, #24
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800759c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	0e1b      	lsrs	r3, r3, #24
 80075ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3738      	adds	r7, #56	; 0x38
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	18000f3a 	.word	0x18000f3a

080075c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	2b1f      	cmp	r3, #31
 80075d4:	d936      	bls.n	8007644 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	e027      	b.n	800762c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fa35 	bl	8008a50 <SDMMC_ReadFIFO>
 80075e6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	3301      	adds	r3, #1
 80075f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	0a1b      	lsrs	r3, r3, #8
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3301      	adds	r3, #1
 8007604:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	b2da      	uxtb	r2, r3
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	3301      	adds	r3, #1
 8007614:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	b2da      	uxtb	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	3301      	adds	r3, #1
 8007624:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	3301      	adds	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b07      	cmp	r3, #7
 8007630:	d9d4      	bls.n	80075dc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	f1a3 0220 	sub.w	r2, r3, #32
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	2b1f      	cmp	r3, #31
 8007660:	d93a      	bls.n	80076d8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	e02b      	b.n	80076c0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3301      	adds	r3, #1
 8007672:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	021a      	lsls	r2, r3, #8
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3301      	adds	r3, #1
 8007684:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	041a      	lsls	r2, r3, #16
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3301      	adds	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	061a      	lsls	r2, r3, #24
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3301      	adds	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f107 020c 	add.w	r2, r7, #12
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f9d8 	bl	8008a6a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	3301      	adds	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b07      	cmp	r3, #7
 80076c4:	d9d0      	bls.n	8007668 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f1a3 0220 	sub.w	r2, r3, #32
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]
  }
}
 80076d8:	bf00      	nop
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e042      	b.n	80077c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007748:	2b00      	cmp	r3, #0
 800774a:	d106      	bne.n	800775a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7f9 fdd7 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2224      	movs	r2, #36	; 0x24
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0201 	bic.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f82c 	bl	80077d0 <UART_SetConfig>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e022      	b.n	80077c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fe7e 	bl	800848c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800779e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 ff05 	bl	80085d0 <UART_CheckIdleState>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d0:	b5b0      	push	{r4, r5, r7, lr}
 80077d2:	b08e      	sub	sp, #56	; 0x38
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	4bbf      	ldr	r3, [pc, #764]	; (8007afc <UART_SetConfig+0x32c>)
 80077fe:	4013      	ands	r3, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007806:	430b      	orrs	r3, r1
 8007808:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4ab5      	ldr	r2, [pc, #724]	; (8007b00 <UART_SetConfig+0x330>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d004      	beq.n	800783a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007836:	4313      	orrs	r3, r2
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	4bb0      	ldr	r3, [pc, #704]	; (8007b04 <UART_SetConfig+0x334>)
 8007842:	4013      	ands	r3, r2
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800784a:	430b      	orrs	r3, r1
 800784c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	f023 010f 	bic.w	r1, r3, #15
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4aa7      	ldr	r2, [pc, #668]	; (8007b08 <UART_SetConfig+0x338>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d176      	bne.n	800795c <UART_SetConfig+0x18c>
 800786e:	4ba7      	ldr	r3, [pc, #668]	; (8007b0c <UART_SetConfig+0x33c>)
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007876:	2b28      	cmp	r3, #40	; 0x28
 8007878:	d86c      	bhi.n	8007954 <UART_SetConfig+0x184>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0xb0>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007925 	.word	0x08007925
 8007884:	08007955 	.word	0x08007955
 8007888:	08007955 	.word	0x08007955
 800788c:	08007955 	.word	0x08007955
 8007890:	08007955 	.word	0x08007955
 8007894:	08007955 	.word	0x08007955
 8007898:	08007955 	.word	0x08007955
 800789c:	08007955 	.word	0x08007955
 80078a0:	0800792d 	.word	0x0800792d
 80078a4:	08007955 	.word	0x08007955
 80078a8:	08007955 	.word	0x08007955
 80078ac:	08007955 	.word	0x08007955
 80078b0:	08007955 	.word	0x08007955
 80078b4:	08007955 	.word	0x08007955
 80078b8:	08007955 	.word	0x08007955
 80078bc:	08007955 	.word	0x08007955
 80078c0:	08007935 	.word	0x08007935
 80078c4:	08007955 	.word	0x08007955
 80078c8:	08007955 	.word	0x08007955
 80078cc:	08007955 	.word	0x08007955
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007955 	.word	0x08007955
 80078d8:	08007955 	.word	0x08007955
 80078dc:	08007955 	.word	0x08007955
 80078e0:	0800793d 	.word	0x0800793d
 80078e4:	08007955 	.word	0x08007955
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007955 	.word	0x08007955
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007955 	.word	0x08007955
 80078f8:	08007955 	.word	0x08007955
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007945 	.word	0x08007945
 8007904:	08007955 	.word	0x08007955
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	08007955 	.word	0x08007955
 8007914:	08007955 	.word	0x08007955
 8007918:	08007955 	.word	0x08007955
 800791c:	08007955 	.word	0x08007955
 8007920:	0800794d 	.word	0x0800794d
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792a:	e326      	b.n	8007f7a <UART_SetConfig+0x7aa>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007932:	e322      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793a:	e31e      	b.n	8007f7a <UART_SetConfig+0x7aa>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007942:	e31a      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007944:	2320      	movs	r3, #32
 8007946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794a:	e316      	b.n	8007f7a <UART_SetConfig+0x7aa>
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007952:	e312      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800795a:	e30e      	b.n	8007f7a <UART_SetConfig+0x7aa>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6b      	ldr	r2, [pc, #428]	; (8007b10 <UART_SetConfig+0x340>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d130      	bne.n	80079c8 <UART_SetConfig+0x1f8>
 8007966:	4b69      	ldr	r3, [pc, #420]	; (8007b0c <UART_SetConfig+0x33c>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b05      	cmp	r3, #5
 8007970:	d826      	bhi.n	80079c0 <UART_SetConfig+0x1f0>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0x1a8>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007991 	.word	0x08007991
 800797c:	08007999 	.word	0x08007999
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079b1 	.word	0x080079b1
 800798c:	080079b9 	.word	0x080079b9
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007996:	e2f0      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007998:	2304      	movs	r3, #4
 800799a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800799e:	e2ec      	b.n	8007f7a <UART_SetConfig+0x7aa>
 80079a0:	2308      	movs	r3, #8
 80079a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079a6:	e2e8      	b.n	8007f7a <UART_SetConfig+0x7aa>
 80079a8:	2310      	movs	r3, #16
 80079aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ae:	e2e4      	b.n	8007f7a <UART_SetConfig+0x7aa>
 80079b0:	2320      	movs	r3, #32
 80079b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b6:	e2e0      	b.n	8007f7a <UART_SetConfig+0x7aa>
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079be:	e2dc      	b.n	8007f7a <UART_SetConfig+0x7aa>
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079c6:	e2d8      	b.n	8007f7a <UART_SetConfig+0x7aa>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a51      	ldr	r2, [pc, #324]	; (8007b14 <UART_SetConfig+0x344>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d130      	bne.n	8007a34 <UART_SetConfig+0x264>
 80079d2:	4b4e      	ldr	r3, [pc, #312]	; (8007b0c <UART_SetConfig+0x33c>)
 80079d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b05      	cmp	r3, #5
 80079dc:	d826      	bhi.n	8007a2c <UART_SetConfig+0x25c>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <UART_SetConfig+0x214>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	080079fd 	.word	0x080079fd
 80079e8:	08007a05 	.word	0x08007a05
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a25 	.word	0x08007a25
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a02:	e2ba      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a04:	2304      	movs	r3, #4
 8007a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0a:	e2b6      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a12:	e2b2      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a14:	2310      	movs	r3, #16
 8007a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1a:	e2ae      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a1c:	2320      	movs	r3, #32
 8007a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a22:	e2aa      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a2a:	e2a6      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a2c:	2380      	movs	r3, #128	; 0x80
 8007a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a32:	e2a2      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a37      	ldr	r2, [pc, #220]	; (8007b18 <UART_SetConfig+0x348>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d130      	bne.n	8007aa0 <UART_SetConfig+0x2d0>
 8007a3e:	4b33      	ldr	r3, [pc, #204]	; (8007b0c <UART_SetConfig+0x33c>)
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b05      	cmp	r3, #5
 8007a48:	d826      	bhi.n	8007a98 <UART_SetConfig+0x2c8>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0x280>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a69 	.word	0x08007a69
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a79 	.word	0x08007a79
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a89 	.word	0x08007a89
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6e:	e284      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a76:	e280      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e27c      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e278      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8e:	e274      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	e270      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007a98:	2380      	movs	r3, #128	; 0x80
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e26c      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1d      	ldr	r2, [pc, #116]	; (8007b1c <UART_SetConfig+0x34c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d142      	bne.n	8007b30 <UART_SetConfig+0x360>
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <UART_SetConfig+0x33c>)
 8007aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	d838      	bhi.n	8007b28 <UART_SetConfig+0x358>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0x2ec>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ad5 	.word	0x08007ad5
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	08007ae5 	.word	0x08007ae5
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007af5 	.word	0x08007af5
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ada:	e24e      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007adc:	2304      	movs	r3, #4
 8007ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae2:	e24a      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aea:	e246      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007aec:	2310      	movs	r3, #16
 8007aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af2:	e242      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007af4:	2320      	movs	r3, #32
 8007af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afa:	e23e      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007afc:	cfff69f3 	.word	0xcfff69f3
 8007b00:	58000c00 	.word	0x58000c00
 8007b04:	11fff4ff 	.word	0x11fff4ff
 8007b08:	40011000 	.word	0x40011000
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	40004400 	.word	0x40004400
 8007b14:	40004800 	.word	0x40004800
 8007b18:	40004c00 	.word	0x40004c00
 8007b1c:	40005000 	.word	0x40005000
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b26:	e228      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	e224      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4ab1      	ldr	r2, [pc, #708]	; (8007dfc <UART_SetConfig+0x62c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d176      	bne.n	8007c28 <UART_SetConfig+0x458>
 8007b3a:	4bb1      	ldr	r3, [pc, #708]	; (8007e00 <UART_SetConfig+0x630>)
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b42:	2b28      	cmp	r3, #40	; 0x28
 8007b44:	d86c      	bhi.n	8007c20 <UART_SetConfig+0x450>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <UART_SetConfig+0x37c>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007bf1 	.word	0x08007bf1
 8007b50:	08007c21 	.word	0x08007c21
 8007b54:	08007c21 	.word	0x08007c21
 8007b58:	08007c21 	.word	0x08007c21
 8007b5c:	08007c21 	.word	0x08007c21
 8007b60:	08007c21 	.word	0x08007c21
 8007b64:	08007c21 	.word	0x08007c21
 8007b68:	08007c21 	.word	0x08007c21
 8007b6c:	08007bf9 	.word	0x08007bf9
 8007b70:	08007c21 	.word	0x08007c21
 8007b74:	08007c21 	.word	0x08007c21
 8007b78:	08007c21 	.word	0x08007c21
 8007b7c:	08007c21 	.word	0x08007c21
 8007b80:	08007c21 	.word	0x08007c21
 8007b84:	08007c21 	.word	0x08007c21
 8007b88:	08007c21 	.word	0x08007c21
 8007b8c:	08007c01 	.word	0x08007c01
 8007b90:	08007c21 	.word	0x08007c21
 8007b94:	08007c21 	.word	0x08007c21
 8007b98:	08007c21 	.word	0x08007c21
 8007b9c:	08007c21 	.word	0x08007c21
 8007ba0:	08007c21 	.word	0x08007c21
 8007ba4:	08007c21 	.word	0x08007c21
 8007ba8:	08007c21 	.word	0x08007c21
 8007bac:	08007c09 	.word	0x08007c09
 8007bb0:	08007c21 	.word	0x08007c21
 8007bb4:	08007c21 	.word	0x08007c21
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007c21 	.word	0x08007c21
 8007bc0:	08007c21 	.word	0x08007c21
 8007bc4:	08007c21 	.word	0x08007c21
 8007bc8:	08007c21 	.word	0x08007c21
 8007bcc:	08007c11 	.word	0x08007c11
 8007bd0:	08007c21 	.word	0x08007c21
 8007bd4:	08007c21 	.word	0x08007c21
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c21 	.word	0x08007c21
 8007be0:	08007c21 	.word	0x08007c21
 8007be4:	08007c21 	.word	0x08007c21
 8007be8:	08007c21 	.word	0x08007c21
 8007bec:	08007c19 	.word	0x08007c19
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf6:	e1c0      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfe:	e1bc      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c00:	2308      	movs	r3, #8
 8007c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c06:	e1b8      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0e:	e1b4      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c10:	2320      	movs	r3, #32
 8007c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c16:	e1b0      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c18:	2340      	movs	r3, #64	; 0x40
 8007c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1e:	e1ac      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c20:	2380      	movs	r3, #128	; 0x80
 8007c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c26:	e1a8      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a75      	ldr	r2, [pc, #468]	; (8007e04 <UART_SetConfig+0x634>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d130      	bne.n	8007c94 <UART_SetConfig+0x4c4>
 8007c32:	4b73      	ldr	r3, [pc, #460]	; (8007e00 <UART_SetConfig+0x630>)
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b05      	cmp	r3, #5
 8007c3c:	d826      	bhi.n	8007c8c <UART_SetConfig+0x4bc>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0x474>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c5d 	.word	0x08007c5d
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	08007c6d 	.word	0x08007c6d
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c62:	e18a      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c64:	2304      	movs	r3, #4
 8007c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6a:	e186      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c72:	e182      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7a:	e17e      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c7c:	2320      	movs	r3, #32
 8007c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c82:	e17a      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c8a:	e176      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c92:	e172      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a5b      	ldr	r2, [pc, #364]	; (8007e08 <UART_SetConfig+0x638>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d130      	bne.n	8007d00 <UART_SetConfig+0x530>
 8007c9e:	4b58      	ldr	r3, [pc, #352]	; (8007e00 <UART_SetConfig+0x630>)
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d826      	bhi.n	8007cf8 <UART_SetConfig+0x528>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <UART_SetConfig+0x4e0>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cc9 	.word	0x08007cc9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cce:	e154      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd6:	e150      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cde:	e14c      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce6:	e148      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cee:	e144      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf6:	e140      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e13c      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a41      	ldr	r2, [pc, #260]	; (8007e0c <UART_SetConfig+0x63c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	f040 8082 	bne.w	8007e10 <UART_SetConfig+0x640>
 8007d0c:	4b3c      	ldr	r3, [pc, #240]	; (8007e00 <UART_SetConfig+0x630>)
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d14:	2b28      	cmp	r3, #40	; 0x28
 8007d16:	d86d      	bhi.n	8007df4 <UART_SetConfig+0x624>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x550>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007dc5 	.word	0x08007dc5
 8007d24:	08007df5 	.word	0x08007df5
 8007d28:	08007df5 	.word	0x08007df5
 8007d2c:	08007df5 	.word	0x08007df5
 8007d30:	08007df5 	.word	0x08007df5
 8007d34:	08007df5 	.word	0x08007df5
 8007d38:	08007df5 	.word	0x08007df5
 8007d3c:	08007df5 	.word	0x08007df5
 8007d40:	08007dcd 	.word	0x08007dcd
 8007d44:	08007df5 	.word	0x08007df5
 8007d48:	08007df5 	.word	0x08007df5
 8007d4c:	08007df5 	.word	0x08007df5
 8007d50:	08007df5 	.word	0x08007df5
 8007d54:	08007df5 	.word	0x08007df5
 8007d58:	08007df5 	.word	0x08007df5
 8007d5c:	08007df5 	.word	0x08007df5
 8007d60:	08007dd5 	.word	0x08007dd5
 8007d64:	08007df5 	.word	0x08007df5
 8007d68:	08007df5 	.word	0x08007df5
 8007d6c:	08007df5 	.word	0x08007df5
 8007d70:	08007df5 	.word	0x08007df5
 8007d74:	08007df5 	.word	0x08007df5
 8007d78:	08007df5 	.word	0x08007df5
 8007d7c:	08007df5 	.word	0x08007df5
 8007d80:	08007ddd 	.word	0x08007ddd
 8007d84:	08007df5 	.word	0x08007df5
 8007d88:	08007df5 	.word	0x08007df5
 8007d8c:	08007df5 	.word	0x08007df5
 8007d90:	08007df5 	.word	0x08007df5
 8007d94:	08007df5 	.word	0x08007df5
 8007d98:	08007df5 	.word	0x08007df5
 8007d9c:	08007df5 	.word	0x08007df5
 8007da0:	08007de5 	.word	0x08007de5
 8007da4:	08007df5 	.word	0x08007df5
 8007da8:	08007df5 	.word	0x08007df5
 8007dac:	08007df5 	.word	0x08007df5
 8007db0:	08007df5 	.word	0x08007df5
 8007db4:	08007df5 	.word	0x08007df5
 8007db8:	08007df5 	.word	0x08007df5
 8007dbc:	08007df5 	.word	0x08007df5
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e0d6      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e0d2      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e0ce      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e0ca      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007de4:	2320      	movs	r3, #32
 8007de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dea:	e0c6      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df2:	e0c2      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfa:	e0be      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007dfc:	40011400 	.word	0x40011400
 8007e00:	58024400 	.word	0x58024400
 8007e04:	40007800 	.word	0x40007800
 8007e08:	40007c00 	.word	0x40007c00
 8007e0c:	40011800 	.word	0x40011800
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4aad      	ldr	r2, [pc, #692]	; (80080cc <UART_SetConfig+0x8fc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d176      	bne.n	8007f08 <UART_SetConfig+0x738>
 8007e1a:	4bad      	ldr	r3, [pc, #692]	; (80080d0 <UART_SetConfig+0x900>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e22:	2b28      	cmp	r3, #40	; 0x28
 8007e24:	d86c      	bhi.n	8007f00 <UART_SetConfig+0x730>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <UART_SetConfig+0x65c>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007ed1 	.word	0x08007ed1
 8007e30:	08007f01 	.word	0x08007f01
 8007e34:	08007f01 	.word	0x08007f01
 8007e38:	08007f01 	.word	0x08007f01
 8007e3c:	08007f01 	.word	0x08007f01
 8007e40:	08007f01 	.word	0x08007f01
 8007e44:	08007f01 	.word	0x08007f01
 8007e48:	08007f01 	.word	0x08007f01
 8007e4c:	08007ed9 	.word	0x08007ed9
 8007e50:	08007f01 	.word	0x08007f01
 8007e54:	08007f01 	.word	0x08007f01
 8007e58:	08007f01 	.word	0x08007f01
 8007e5c:	08007f01 	.word	0x08007f01
 8007e60:	08007f01 	.word	0x08007f01
 8007e64:	08007f01 	.word	0x08007f01
 8007e68:	08007f01 	.word	0x08007f01
 8007e6c:	08007ee1 	.word	0x08007ee1
 8007e70:	08007f01 	.word	0x08007f01
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f01 	.word	0x08007f01
 8007e7c:	08007f01 	.word	0x08007f01
 8007e80:	08007f01 	.word	0x08007f01
 8007e84:	08007f01 	.word	0x08007f01
 8007e88:	08007f01 	.word	0x08007f01
 8007e8c:	08007ee9 	.word	0x08007ee9
 8007e90:	08007f01 	.word	0x08007f01
 8007e94:	08007f01 	.word	0x08007f01
 8007e98:	08007f01 	.word	0x08007f01
 8007e9c:	08007f01 	.word	0x08007f01
 8007ea0:	08007f01 	.word	0x08007f01
 8007ea4:	08007f01 	.word	0x08007f01
 8007ea8:	08007f01 	.word	0x08007f01
 8007eac:	08007ef1 	.word	0x08007ef1
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	08007f01 	.word	0x08007f01
 8007eb8:	08007f01 	.word	0x08007f01
 8007ebc:	08007f01 	.word	0x08007f01
 8007ec0:	08007f01 	.word	0x08007f01
 8007ec4:	08007f01 	.word	0x08007f01
 8007ec8:	08007f01 	.word	0x08007f01
 8007ecc:	08007ef9 	.word	0x08007ef9
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed6:	e050      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ede:	e04c      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee6:	e048      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eee:	e044      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef6:	e040      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007ef8:	2340      	movs	r3, #64	; 0x40
 8007efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efe:	e03c      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f00:	2380      	movs	r3, #128	; 0x80
 8007f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f06:	e038      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a71      	ldr	r2, [pc, #452]	; (80080d4 <UART_SetConfig+0x904>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d130      	bne.n	8007f74 <UART_SetConfig+0x7a4>
 8007f12:	4b6f      	ldr	r3, [pc, #444]	; (80080d0 <UART_SetConfig+0x900>)
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d826      	bhi.n	8007f6c <UART_SetConfig+0x79c>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <UART_SetConfig+0x754>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f42:	e01a      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f44:	2304      	movs	r3, #4
 8007f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f4a:	e016      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f52:	e012      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f54:	2310      	movs	r3, #16
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5a:	e00e      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f5c:	2320      	movs	r3, #32
 8007f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f62:	e00a      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6a:	e006      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f72:	e002      	b.n	8007f7a <UART_SetConfig+0x7aa>
 8007f74:	2380      	movs	r3, #128	; 0x80
 8007f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a55      	ldr	r2, [pc, #340]	; (80080d4 <UART_SetConfig+0x904>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	f040 80f0 	bne.w	8008166 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	dc46      	bgt.n	800801c <UART_SetConfig+0x84c>
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	db75      	blt.n	800807e <UART_SetConfig+0x8ae>
 8007f92:	3b02      	subs	r3, #2
 8007f94:	2b1e      	cmp	r3, #30
 8007f96:	d872      	bhi.n	800807e <UART_SetConfig+0x8ae>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <UART_SetConfig+0x7d0>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08008023 	.word	0x08008023
 8007fa4:	0800807f 	.word	0x0800807f
 8007fa8:	0800802b 	.word	0x0800802b
 8007fac:	0800807f 	.word	0x0800807f
 8007fb0:	0800807f 	.word	0x0800807f
 8007fb4:	0800807f 	.word	0x0800807f
 8007fb8:	0800803b 	.word	0x0800803b
 8007fbc:	0800807f 	.word	0x0800807f
 8007fc0:	0800807f 	.word	0x0800807f
 8007fc4:	0800807f 	.word	0x0800807f
 8007fc8:	0800807f 	.word	0x0800807f
 8007fcc:	0800807f 	.word	0x0800807f
 8007fd0:	0800807f 	.word	0x0800807f
 8007fd4:	0800807f 	.word	0x0800807f
 8007fd8:	0800804b 	.word	0x0800804b
 8007fdc:	0800807f 	.word	0x0800807f
 8007fe0:	0800807f 	.word	0x0800807f
 8007fe4:	0800807f 	.word	0x0800807f
 8007fe8:	0800807f 	.word	0x0800807f
 8007fec:	0800807f 	.word	0x0800807f
 8007ff0:	0800807f 	.word	0x0800807f
 8007ff4:	0800807f 	.word	0x0800807f
 8007ff8:	0800807f 	.word	0x0800807f
 8007ffc:	0800807f 	.word	0x0800807f
 8008000:	0800807f 	.word	0x0800807f
 8008004:	0800807f 	.word	0x0800807f
 8008008:	0800807f 	.word	0x0800807f
 800800c:	0800807f 	.word	0x0800807f
 8008010:	0800807f 	.word	0x0800807f
 8008014:	0800807f 	.word	0x0800807f
 8008018:	08008071 	.word	0x08008071
 800801c:	2b40      	cmp	r3, #64	; 0x40
 800801e:	d02a      	beq.n	8008076 <UART_SetConfig+0x8a6>
 8008020:	e02d      	b.n	800807e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008022:	f7fc ffed 	bl	8005000 <HAL_RCCEx_GetD3PCLK1Freq>
 8008026:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008028:	e02f      	b.n	800808a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800802a:	f107 0314 	add.w	r3, r7, #20
 800802e:	4618      	mov	r0, r3
 8008030:	f7fc fffc 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008038:	e027      	b.n	800808a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	4618      	mov	r0, r3
 8008040:	f7fd f948 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008048:	e01f      	b.n	800808a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800804a:	4b21      	ldr	r3, [pc, #132]	; (80080d0 <UART_SetConfig+0x900>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008056:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <UART_SetConfig+0x900>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <UART_SetConfig+0x908>)
 8008062:	fa22 f303 	lsr.w	r3, r2, r3
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008068:	e00f      	b.n	800808a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <UART_SetConfig+0x908>)
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800806e:	e00c      	b.n	800808a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008070:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <UART_SetConfig+0x90c>)
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008074:	e009      	b.n	800808a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800807c:	e005      	b.n	800808a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 81e6 	beq.w	800845e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	4a12      	ldr	r2, [pc, #72]	; (80080e0 <UART_SetConfig+0x910>)
 8008098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800809c:	461a      	mov	r2, r3
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	4413      	add	r3, r2
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d305      	bcc.n	80080c2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080bc:	6a3a      	ldr	r2, [r7, #32]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d910      	bls.n	80080e4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080c8:	e1c9      	b.n	800845e <UART_SetConfig+0xc8e>
 80080ca:	bf00      	nop
 80080cc:	40011c00 	.word	0x40011c00
 80080d0:	58024400 	.word	0x58024400
 80080d4:	58000c00 	.word	0x58000c00
 80080d8:	03d09000 	.word	0x03d09000
 80080dc:	003d0900 	.word	0x003d0900
 80080e0:	0800d058 	.word	0x0800d058
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	4618      	mov	r0, r3
 80080e8:	f04f 0100 	mov.w	r1, #0
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	4ac1      	ldr	r2, [pc, #772]	; (80083f8 <UART_SetConfig+0xc28>)
 80080f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	f04f 0300 	mov.w	r3, #0
 80080fc:	f7f8 f960 	bl	80003c0 <__aeabi_uldivmod>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4610      	mov	r0, r2
 8008106:	4619      	mov	r1, r3
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	020b      	lsls	r3, r1, #8
 8008112:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008116:	0202      	lsls	r2, r0, #8
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	6849      	ldr	r1, [r1, #4]
 800811c:	0849      	lsrs	r1, r1, #1
 800811e:	4608      	mov	r0, r1
 8008120:	f04f 0100 	mov.w	r1, #0
 8008124:	1814      	adds	r4, r2, r0
 8008126:	eb43 0501 	adc.w	r5, r3, r1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	461a      	mov	r2, r3
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	4620      	mov	r0, r4
 8008136:	4629      	mov	r1, r5
 8008138:	f7f8 f942 	bl	80003c0 <__aeabi_uldivmod>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4613      	mov	r3, r2
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800814a:	d308      	bcc.n	800815e <UART_SetConfig+0x98e>
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008152:	d204      	bcs.n	800815e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800815a:	60da      	str	r2, [r3, #12]
 800815c:	e17f      	b.n	800845e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008164:	e17b      	b.n	800845e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816e:	f040 80bd 	bne.w	80082ec <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008176:	2b20      	cmp	r3, #32
 8008178:	dc48      	bgt.n	800820c <UART_SetConfig+0xa3c>
 800817a:	2b00      	cmp	r3, #0
 800817c:	db7b      	blt.n	8008276 <UART_SetConfig+0xaa6>
 800817e:	2b20      	cmp	r3, #32
 8008180:	d879      	bhi.n	8008276 <UART_SetConfig+0xaa6>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <UART_SetConfig+0x9b8>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	08008213 	.word	0x08008213
 800818c:	0800821b 	.word	0x0800821b
 8008190:	08008277 	.word	0x08008277
 8008194:	08008277 	.word	0x08008277
 8008198:	08008223 	.word	0x08008223
 800819c:	08008277 	.word	0x08008277
 80081a0:	08008277 	.word	0x08008277
 80081a4:	08008277 	.word	0x08008277
 80081a8:	08008233 	.word	0x08008233
 80081ac:	08008277 	.word	0x08008277
 80081b0:	08008277 	.word	0x08008277
 80081b4:	08008277 	.word	0x08008277
 80081b8:	08008277 	.word	0x08008277
 80081bc:	08008277 	.word	0x08008277
 80081c0:	08008277 	.word	0x08008277
 80081c4:	08008277 	.word	0x08008277
 80081c8:	08008243 	.word	0x08008243
 80081cc:	08008277 	.word	0x08008277
 80081d0:	08008277 	.word	0x08008277
 80081d4:	08008277 	.word	0x08008277
 80081d8:	08008277 	.word	0x08008277
 80081dc:	08008277 	.word	0x08008277
 80081e0:	08008277 	.word	0x08008277
 80081e4:	08008277 	.word	0x08008277
 80081e8:	08008277 	.word	0x08008277
 80081ec:	08008277 	.word	0x08008277
 80081f0:	08008277 	.word	0x08008277
 80081f4:	08008277 	.word	0x08008277
 80081f8:	08008277 	.word	0x08008277
 80081fc:	08008277 	.word	0x08008277
 8008200:	08008277 	.word	0x08008277
 8008204:	08008277 	.word	0x08008277
 8008208:	08008269 	.word	0x08008269
 800820c:	2b40      	cmp	r3, #64	; 0x40
 800820e:	d02e      	beq.n	800826e <UART_SetConfig+0xa9e>
 8008210:	e031      	b.n	8008276 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008212:	f7fb fbab 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8008216:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008218:	e033      	b.n	8008282 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800821a:	f7fb fbbd 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 800821e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008220:	e02f      	b.n	8008282 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008222:	f107 0314 	add.w	r3, r7, #20
 8008226:	4618      	mov	r0, r3
 8008228:	f7fc ff00 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008230:	e027      	b.n	8008282 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008232:	f107 0308 	add.w	r3, r7, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f7fd f84c 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008240:	e01f      	b.n	8008282 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008242:	4b6e      	ldr	r3, [pc, #440]	; (80083fc <UART_SetConfig+0xc2c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800824e:	4b6b      	ldr	r3, [pc, #428]	; (80083fc <UART_SetConfig+0xc2c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	08db      	lsrs	r3, r3, #3
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	4a69      	ldr	r2, [pc, #420]	; (8008400 <UART_SetConfig+0xc30>)
 800825a:	fa22 f303 	lsr.w	r3, r2, r3
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008260:	e00f      	b.n	8008282 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8008262:	4b67      	ldr	r3, [pc, #412]	; (8008400 <UART_SetConfig+0xc30>)
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008266:	e00c      	b.n	8008282 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008268:	4b66      	ldr	r3, [pc, #408]	; (8008404 <UART_SetConfig+0xc34>)
 800826a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800826c:	e009      	b.n	8008282 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008274:	e005      	b.n	8008282 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 80ea 	beq.w	800845e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	4a5a      	ldr	r2, [pc, #360]	; (80083f8 <UART_SetConfig+0xc28>)
 8008290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008294:	461a      	mov	r2, r3
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	fbb3 f3f2 	udiv	r3, r3, r2
 800829c:	005a      	lsls	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	441a      	add	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d916      	bls.n	80082e4 <UART_SetConfig+0xb14>
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082bc:	d212      	bcs.n	80082e4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f023 030f 	bic.w	r3, r3, #15
 80082c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082d6:	4313      	orrs	r3, r2
 80082d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082e0:	60da      	str	r2, [r3, #12]
 80082e2:	e0bc      	b.n	800845e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082ea:	e0b8      	b.n	800845e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	dc4b      	bgt.n	800838c <UART_SetConfig+0xbbc>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f2c0 8087 	blt.w	8008408 <UART_SetConfig+0xc38>
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	f200 8084 	bhi.w	8008408 <UART_SetConfig+0xc38>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <UART_SetConfig+0xb38>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008393 	.word	0x08008393
 800830c:	0800839b 	.word	0x0800839b
 8008310:	08008409 	.word	0x08008409
 8008314:	08008409 	.word	0x08008409
 8008318:	080083a3 	.word	0x080083a3
 800831c:	08008409 	.word	0x08008409
 8008320:	08008409 	.word	0x08008409
 8008324:	08008409 	.word	0x08008409
 8008328:	080083b3 	.word	0x080083b3
 800832c:	08008409 	.word	0x08008409
 8008330:	08008409 	.word	0x08008409
 8008334:	08008409 	.word	0x08008409
 8008338:	08008409 	.word	0x08008409
 800833c:	08008409 	.word	0x08008409
 8008340:	08008409 	.word	0x08008409
 8008344:	08008409 	.word	0x08008409
 8008348:	080083c3 	.word	0x080083c3
 800834c:	08008409 	.word	0x08008409
 8008350:	08008409 	.word	0x08008409
 8008354:	08008409 	.word	0x08008409
 8008358:	08008409 	.word	0x08008409
 800835c:	08008409 	.word	0x08008409
 8008360:	08008409 	.word	0x08008409
 8008364:	08008409 	.word	0x08008409
 8008368:	08008409 	.word	0x08008409
 800836c:	08008409 	.word	0x08008409
 8008370:	08008409 	.word	0x08008409
 8008374:	08008409 	.word	0x08008409
 8008378:	08008409 	.word	0x08008409
 800837c:	08008409 	.word	0x08008409
 8008380:	08008409 	.word	0x08008409
 8008384:	08008409 	.word	0x08008409
 8008388:	080083e9 	.word	0x080083e9
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d02e      	beq.n	80083ee <UART_SetConfig+0xc1e>
 8008390:	e03a      	b.n	8008408 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008392:	f7fb faeb 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8008396:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008398:	e03c      	b.n	8008414 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800839a:	f7fb fafd 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 800839e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083a0:	e038      	b.n	8008414 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a2:	f107 0314 	add.w	r3, r7, #20
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fc fe40 	bl	800502c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083b0:	e030      	b.n	8008414 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b2:	f107 0308 	add.w	r3, r7, #8
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fc ff8c 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083c0:	e028      	b.n	8008414 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c2:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <UART_SetConfig+0xc2c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d009      	beq.n	80083e2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083ce:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <UART_SetConfig+0xc2c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	4a09      	ldr	r2, [pc, #36]	; (8008400 <UART_SetConfig+0xc30>)
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083e0:	e018      	b.n	8008414 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <UART_SetConfig+0xc30>)
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083e6:	e015      	b.n	8008414 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083e8:	4b06      	ldr	r3, [pc, #24]	; (8008404 <UART_SetConfig+0xc34>)
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083ec:	e012      	b.n	8008414 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083f4:	e00e      	b.n	8008414 <UART_SetConfig+0xc44>
 80083f6:	bf00      	nop
 80083f8:	0800d058 	.word	0x0800d058
 80083fc:	58024400 	.word	0x58024400
 8008400:	03d09000 	.word	0x03d09000
 8008404:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008412:	bf00      	nop
    }

    if (pclk != 0U)
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d021      	beq.n	800845e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	4a1a      	ldr	r2, [pc, #104]	; (8008488 <UART_SetConfig+0xcb8>)
 8008420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008424:	461a      	mov	r2, r3
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	fbb3 f2f2 	udiv	r2, r3, r2
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	441a      	add	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	fbb2 f3f3 	udiv	r3, r2, r3
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2b0f      	cmp	r3, #15
 8008442:	d909      	bls.n	8008458 <UART_SetConfig+0xc88>
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844a:	d205      	bcs.n	8008458 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	b29a      	uxth	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60da      	str	r2, [r3, #12]
 8008456:	e002      	b.n	800845e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800847a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800847e:	4618      	mov	r0, r3
 8008480:	3738      	adds	r7, #56	; 0x38
 8008482:	46bd      	mov	sp, r7
 8008484:	bdb0      	pop	{r4, r5, r7, pc}
 8008486:	bf00      	nop
 8008488:	0800d058 	.word	0x0800d058

0800848c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800858a:	d10a      	bne.n	80085a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085e0:	f7f9 f894 	bl	800170c <HAL_GetTick>
 80085e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d10e      	bne.n	8008612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f82f 	bl	8008666 <UART_WaitOnFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e025      	b.n	800865e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b04      	cmp	r3, #4
 800861e:	d10e      	bne.n	800863e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f819 	bl	8008666 <UART_WaitOnFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e00f      	b.n	800865e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b09c      	sub	sp, #112	; 0x70
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	603b      	str	r3, [r7, #0]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008676:	e0a9      	b.n	80087cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	f000 80a5 	beq.w	80087cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008682:	f7f9 f843 	bl	800170c <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800868e:	429a      	cmp	r2, r3
 8008690:	d302      	bcc.n	8008698 <UART_WaitOnFlagUntilTimeout+0x32>
 8008692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008694:	2b00      	cmp	r3, #0
 8008696:	d140      	bne.n	800871a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ac:	667b      	str	r3, [r7, #100]	; 0x64
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e6      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	f023 0301 	bic.w	r3, r3, #1
 80086e0:	663b      	str	r3, [r7, #96]	; 0x60
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80086ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e5      	bne.n	80086ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e069      	b.n	80087ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d051      	beq.n	80087cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008736:	d149      	bne.n	80087cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
 8008762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	66bb      	str	r3, [r7, #104]	; 0x68
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3308      	adds	r3, #8
 8008792:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008794:	623a      	str	r2, [r7, #32]
 8008796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e010      	b.n	80087ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69da      	ldr	r2, [r3, #28]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	f43f af46 	beq.w	8008678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3770      	adds	r7, #112	; 0x70
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_UARTEx_DisableFifoMode+0x16>
 8008808:	2302      	movs	r3, #2
 800880a:	e027      	b.n	800885c <HAL_UARTEx_DisableFifoMode+0x66>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2224      	movs	r2, #36	; 0x24
 8008818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0201 	bic.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800883a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800887c:	2302      	movs	r3, #2
 800887e:	e02d      	b.n	80088dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2224      	movs	r2, #36	; 0x24
 800888c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0201 	bic.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f84f 	bl	8008960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e02d      	b.n	8008958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2224      	movs	r2, #36	; 0x24
 8008908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f811 	bl	8008960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896c:	2b00      	cmp	r3, #0
 800896e:	d108      	bne.n	8008982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008980:	e031      	b.n	80089e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008982:	2310      	movs	r3, #16
 8008984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008986:	2310      	movs	r3, #16
 8008988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	0e5b      	lsrs	r3, r3, #25
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	0f5b      	lsrs	r3, r3, #29
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	7b3a      	ldrb	r2, [r7, #12]
 80089ae:	4911      	ldr	r1, [pc, #68]	; (80089f4 <UARTEx_SetNbDataToProcess+0x94>)
 80089b0:	5c8a      	ldrb	r2, [r1, r2]
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089b6:	7b3a      	ldrb	r2, [r7, #12]
 80089b8:	490f      	ldr	r1, [pc, #60]	; (80089f8 <UARTEx_SetNbDataToProcess+0x98>)
 80089ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	7b7a      	ldrb	r2, [r7, #13]
 80089cc:	4909      	ldr	r1, [pc, #36]	; (80089f4 <UARTEx_SetNbDataToProcess+0x94>)
 80089ce:	5c8a      	ldrb	r2, [r1, r2]
 80089d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089d4:	7b7a      	ldrb	r2, [r7, #13]
 80089d6:	4908      	ldr	r1, [pc, #32]	; (80089f8 <UARTEx_SetNbDataToProcess+0x98>)
 80089d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089da:	fb93 f3f2 	sdiv	r3, r3, r2
 80089de:	b29a      	uxth	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	0800d070 	.word	0x0800d070
 80089f8:	0800d078 	.word	0x0800d078

080089fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089fc:	b084      	sub	sp, #16
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	f107 001c 	add.w	r0, r7, #28
 8008a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008a12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008a14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008a16:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008a1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008a1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008a22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <SDMMC_Init+0x50>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	b004      	add	sp, #16
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	ffc02c00 	.word	0xffc02c00

08008a50 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f043 0203 	orr.w	r2, r3, #3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0303 	and.w	r3, r3, #3
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
	...

08008acc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008aea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008af0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008af6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <SDMMC_SendCommand+0x50>)
 8008b04:	4013      	ands	r3, r2
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	fffee0c0 	.word	0xfffee0c0

08008b20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	b2db      	uxtb	r3, r3
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3314      	adds	r3, #20
 8008b48:	461a      	mov	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b86:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008b8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008b92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0

}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008bc6:	2310      	movs	r3, #16
 8008bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bda:	f107 0308 	add.w	r3, r7, #8
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff ff73 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bea:	2110      	movs	r1, #16
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fa5f 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b088      	sub	sp, #32
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008c0c:	2311      	movs	r3, #17
 8008c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c20:	f107 0308 	add.w	r3, r7, #8
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff ff50 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c30:	2111      	movs	r1, #17
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa3c 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b088      	sub	sp, #32
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c52:	2312      	movs	r3, #18
 8008c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c66:	f107 0308 	add.w	r3, r7, #8
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff ff2d 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c76:	2112      	movs	r1, #18
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa19 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c80:	69fb      	ldr	r3, [r7, #28]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b088      	sub	sp, #32
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c98:	2318      	movs	r3, #24
 8008c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008caa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cac:	f107 0308 	add.w	r3, r7, #8
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff ff0a 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbc:	2118      	movs	r1, #24
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f9f6 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008cc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008cde:	2319      	movs	r3, #25
 8008ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cf2:	f107 0308 	add.w	r3, r7, #8
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff fee7 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d02:	2119      	movs	r1, #25
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f9d3 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008d24:	230c      	movs	r3, #12
 8008d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d36:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d50:	f107 0308 	add.w	r3, r7, #8
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff feb8 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008d5c:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <SDMMC_CmdStopTransfer+0x74>)
 8008d5e:	210c      	movs	r1, #12
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9a5 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008d66:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7a:	d101      	bne.n	8008d80 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008d80:	69fb      	ldr	r3, [r7, #28]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	05f5e100 	.word	0x05f5e100

08008d90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d9e:	2307      	movs	r3, #7
 8008da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008db2:	f107 0308 	add.w	r3, r7, #8
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff fe87 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc2:	2107      	movs	r1, #7
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f973 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3720      	adds	r7, #32
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b088      	sub	sp, #32
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fe66 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb97 	bl	8009534 <SDMMC_GetCmdError>
 8008e06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e08:	69fb      	ldr	r3, [r7, #28]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3720      	adds	r7, #32
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b088      	sub	sp, #32
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008e1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008e20:	2308      	movs	r3, #8
 8008e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff fe46 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb29 	bl	8009498 <SDMMC_GetCmdResp7>
 8008e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e48:	69fb      	ldr	r3, [r7, #28]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3720      	adds	r7, #32
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b088      	sub	sp, #32
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e60:	2337      	movs	r3, #55	; 0x37
 8008e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e74:	f107 0308 	add.w	r3, r7, #8
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fe26 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e84:	2137      	movs	r1, #55	; 0x37
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f912 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e8e:	69fb      	ldr	r3, [r7, #28]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ea6:	2329      	movs	r3, #41	; 0x29
 8008ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eba:	f107 0308 	add.w	r3, r7, #8
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff fe03 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fa2e 	bl	8009328 <SDMMC_GetCmdResp3>
 8008ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ece:	69fb      	ldr	r3, [r7, #28]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3720      	adds	r7, #32
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ee6:	2306      	movs	r3, #6
 8008ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fde3 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0a:	2106      	movs	r1, #6
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f8cf 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f14:	69fb      	ldr	r3, [r7, #28]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b088      	sub	sp, #32
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008f2a:	2333      	movs	r3, #51	; 0x33
 8008f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f3e:	f107 0308 	add.w	r3, r7, #8
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fdc1 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f4e:	2133      	movs	r1, #51	; 0x33
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8ad 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f58:	69fb      	ldr	r3, [r7, #28]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3720      	adds	r7, #32
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b088      	sub	sp, #32
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f6e:	2302      	movs	r3, #2
 8008f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff fd9f 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f980 	bl	8009294 <SDMMC_GetCmdResp2>
 8008f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f96:	69fb      	ldr	r3, [r7, #28]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3720      	adds	r7, #32
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008fae:	2309      	movs	r3, #9
 8008fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc2:	f107 0308 	add.w	r3, r7, #8
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff fd7f 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f960 	bl	8009294 <SDMMC_GetCmdResp2>
 8008fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009002:	f107 0308 	add.w	r3, r7, #8
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fd5f 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	2103      	movs	r1, #3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f9c8 	bl	80093a8 <SDMMC_GetCmdResp6>
 8009018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901a:	69fb      	ldr	r3, [r7, #28]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009032:	230d      	movs	r3, #13
 8009034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800903a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009046:	f107 0308 	add.w	r3, r7, #8
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fd3d 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009052:	f241 3288 	movw	r2, #5000	; 0x1388
 8009056:	210d      	movs	r1, #13
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f829 	bl	80090b0 <SDMMC_GetCmdResp1>
 800905e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009060:	69fb      	ldr	r3, [r7, #28]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b088      	sub	sp, #32
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009076:	230d      	movs	r3, #13
 8009078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800907a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800907e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff fd1b 	bl	8008acc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009096:	f241 3288 	movw	r2, #5000	; 0x1388
 800909a:	210d      	movs	r1, #13
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f807 	bl	80090b0 <SDMMC_GetCmdResp1>
 80090a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a4:	69fb      	ldr	r3, [r7, #28]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3720      	adds	r7, #32
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	460b      	mov	r3, r1
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80090be:	4b70      	ldr	r3, [pc, #448]	; (8009280 <SDMMC_GetCmdResp1+0x1d0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a70      	ldr	r2, [pc, #448]	; (8009284 <SDMMC_GetCmdResp1+0x1d4>)
 80090c4:	fba2 2303 	umull	r2, r3, r2, r3
 80090c8:	0a5a      	lsrs	r2, r3, #9
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	fb02 f303 	mul.w	r3, r2, r3
 80090d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	1e5a      	subs	r2, r3, #1
 80090d6:	61fa      	str	r2, [r7, #28]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090e0:	e0c9      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	4b67      	ldr	r3, [pc, #412]	; (8009288 <SDMMC_GetCmdResp1+0x1d8>)
 80090ec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0ef      	beq.n	80090d2 <SDMMC_GetCmdResp1+0x22>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1ea      	bne.n	80090d2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2204      	movs	r2, #4
 800910c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800910e:	2304      	movs	r3, #4
 8009110:	e0b1      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009124:	2301      	movs	r3, #1
 8009126:	e0a6      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4a58      	ldr	r2, [pc, #352]	; (800928c <SDMMC_GetCmdResp1+0x1dc>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7ff fcf6 	bl	8008b20 <SDMMC_GetCommandResponse>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	4293      	cmp	r3, r2
 800913c:	d001      	beq.n	8009142 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800913e:	2301      	movs	r3, #1
 8009140:	e099      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009142:	2100      	movs	r1, #0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff fcf8 	bl	8008b3a <SDMMC_GetResponse>
 800914a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	4b50      	ldr	r3, [pc, #320]	; (8009290 <SDMMC_GetCmdResp1+0x1e0>)
 8009150:	4013      	ands	r3, r2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009156:	2300      	movs	r3, #0
 8009158:	e08d      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da02      	bge.n	8009166 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009164:	e087      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009170:	2340      	movs	r3, #64	; 0x40
 8009172:	e080      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800917e:	2380      	movs	r3, #128	; 0x80
 8009180:	e079      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800918c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009190:	e071      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800919c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091a0:	e069      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80091ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b0:	e061      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091c0:	e059      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091d0:	e051      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091e0:	e049      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091f0:	e041      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009200:	e039      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800920c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009210:	e031      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800921c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009220:	e029      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800922c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009230:	e021      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800923c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009240:	e019      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800924c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009250:	e011      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800925c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009260:	e009      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800926c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009270:	e001      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	24000000 	.word	0x24000000
 8009284:	10624dd3 	.word	0x10624dd3
 8009288:	00200045 	.word	0x00200045
 800928c:	002000c5 	.word	0x002000c5
 8009290:	fdffe008 	.word	0xfdffe008

08009294 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800929c:	4b1f      	ldr	r3, [pc, #124]	; (800931c <SDMMC_GetCmdResp2+0x88>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <SDMMC_GetCmdResp2+0x8c>)
 80092a2:	fba2 2303 	umull	r2, r3, r2, r3
 80092a6:	0a5b      	lsrs	r3, r3, #9
 80092a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ac:	fb02 f303 	mul.w	r3, r2, r3
 80092b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1e5a      	subs	r2, r3, #1
 80092b6:	60fa      	str	r2, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092c0:	e026      	b.n	8009310 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0ef      	beq.n	80092b2 <SDMMC_GetCmdResp2+0x1e>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1ea      	bne.n	80092b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d004      	beq.n	80092f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2204      	movs	r2, #4
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092ee:	2304      	movs	r3, #4
 80092f0:	e00e      	b.n	8009310 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d004      	beq.n	8009308 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009304:	2301      	movs	r3, #1
 8009306:	e003      	b.n	8009310 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a06      	ldr	r2, [pc, #24]	; (8009324 <SDMMC_GetCmdResp2+0x90>)
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	24000000 	.word	0x24000000
 8009320:	10624dd3 	.word	0x10624dd3
 8009324:	002000c5 	.word	0x002000c5

08009328 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009330:	4b1a      	ldr	r3, [pc, #104]	; (800939c <SDMMC_GetCmdResp3+0x74>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1a      	ldr	r2, [pc, #104]	; (80093a0 <SDMMC_GetCmdResp3+0x78>)
 8009336:	fba2 2303 	umull	r2, r3, r2, r3
 800933a:	0a5b      	lsrs	r3, r3, #9
 800933c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009340:	fb02 f303 	mul.w	r3, r2, r3
 8009344:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	1e5a      	subs	r2, r3, #1
 800934a:	60fa      	str	r2, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009354:	e01b      	b.n	800938e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0ef      	beq.n	8009346 <SDMMC_GetCmdResp3+0x1e>
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1ea      	bne.n	8009346 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2204      	movs	r2, #4
 8009380:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009382:	2304      	movs	r3, #4
 8009384:	e003      	b.n	800938e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a06      	ldr	r2, [pc, #24]	; (80093a4 <SDMMC_GetCmdResp3+0x7c>)
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	24000000 	.word	0x24000000
 80093a0:	10624dd3 	.word	0x10624dd3
 80093a4:	002000c5 	.word	0x002000c5

080093a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	460b      	mov	r3, r1
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093b6:	4b35      	ldr	r3, [pc, #212]	; (800948c <SDMMC_GetCmdResp6+0xe4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a35      	ldr	r2, [pc, #212]	; (8009490 <SDMMC_GetCmdResp6+0xe8>)
 80093bc:	fba2 2303 	umull	r2, r3, r2, r3
 80093c0:	0a5b      	lsrs	r3, r3, #9
 80093c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	1e5a      	subs	r2, r3, #1
 80093d0:	61fa      	str	r2, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d102      	bne.n	80093dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093da:	e052      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0ef      	beq.n	80093cc <SDMMC_GetCmdResp6+0x24>
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1ea      	bne.n	80093cc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2204      	movs	r2, #4
 8009406:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009408:	2304      	movs	r3, #4
 800940a:	e03a      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800941e:	2301      	movs	r3, #1
 8009420:	e02f      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fb7c 	bl	8008b20 <SDMMC_GetCommandResponse>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	7afb      	ldrb	r3, [r7, #11]
 800942e:	4293      	cmp	r3, r2
 8009430:	d001      	beq.n	8009436 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009432:	2301      	movs	r3, #1
 8009434:	e025      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4a16      	ldr	r2, [pc, #88]	; (8009494 <SDMMC_GetCmdResp6+0xec>)
 800943a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff fb7b 	bl	8008b3a <SDMMC_GetResponse>
 8009444:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	0c1b      	lsrs	r3, r3, #16
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800945a:	2300      	movs	r3, #0
 800945c:	e011      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800946c:	e009      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800947c:	e001      	b.n	8009482 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800947e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009482:	4618      	mov	r0, r3
 8009484:	3720      	adds	r7, #32
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	24000000 	.word	0x24000000
 8009490:	10624dd3 	.word	0x10624dd3
 8009494:	002000c5 	.word	0x002000c5

08009498 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80094a0:	4b22      	ldr	r3, [pc, #136]	; (800952c <SDMMC_GetCmdResp7+0x94>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a22      	ldr	r2, [pc, #136]	; (8009530 <SDMMC_GetCmdResp7+0x98>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	0a5b      	lsrs	r3, r3, #9
 80094ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b0:	fb02 f303 	mul.w	r3, r2, r3
 80094b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	60fa      	str	r2, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094c4:	e02c      	b.n	8009520 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0ef      	beq.n	80094b6 <SDMMC_GetCmdResp7+0x1e>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1ea      	bne.n	80094b6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d004      	beq.n	80094f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2204      	movs	r2, #4
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094f2:	2304      	movs	r3, #4
 80094f4:	e014      	b.n	8009520 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009508:	2301      	movs	r3, #1
 800950a:	e009      	b.n	8009520 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2240      	movs	r2, #64	; 0x40
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800951e:	2300      	movs	r3, #0

}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	24000000 	.word	0x24000000
 8009530:	10624dd3 	.word	0x10624dd3

08009534 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <SDMMC_GetCmdError+0x50>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a11      	ldr	r2, [pc, #68]	; (8009588 <SDMMC_GetCmdError+0x54>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	0a5b      	lsrs	r3, r3, #9
 8009548:	f241 3288 	movw	r2, #5000	; 0x1388
 800954c:	fb02 f303 	mul.w	r3, r2, r3
 8009550:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	60fa      	str	r2, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d102      	bne.n	8009562 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800955c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009560:	e009      	b.n	8009576 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0f1      	beq.n	8009552 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a06      	ldr	r2, [pc, #24]	; (800958c <SDMMC_GetCmdError+0x58>)
 8009572:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	24000000 	.word	0x24000000
 8009588:	10624dd3 	.word	0x10624dd3
 800958c:	002000c5 	.word	0x002000c5

08009590 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009594:	4904      	ldr	r1, [pc, #16]	; (80095a8 <MX_FATFS_Init+0x18>)
 8009596:	4805      	ldr	r0, [pc, #20]	; (80095ac <MX_FATFS_Init+0x1c>)
 8009598:	f002 ff9a 	bl	800c4d0 <FATFS_LinkDriver>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <MX_FATFS_Init+0x20>)
 80095a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095a4:	bf00      	nop
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	240003d4 	.word	0x240003d4
 80095ac:	0800d080 	.word	0x0800d080
 80095b0:	240003d0 	.word	0x240003d0

080095b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80095ce:	f000 f89b 	bl	8009708 <BSP_SD_IsDetected>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d001      	beq.n	80095dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80095d8:	2302      	movs	r3, #2
 80095da:	e012      	b.n	8009602 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80095dc:	480b      	ldr	r0, [pc, #44]	; (800960c <BSP_SD_Init+0x48>)
 80095de:	f7fc fa83 	bl	8005ae8 <HAL_SD_Init>
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d109      	bne.n	8009600 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80095ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80095f0:	4806      	ldr	r0, [pc, #24]	; (800960c <BSP_SD_Init+0x48>)
 80095f2:	f7fd faf9 	bl	8006be8 <HAL_SD_ConfigWideBusOperation>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009600:	79fb      	ldrb	r3, [r7, #7]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	24000228 	.word	0x24000228

08009610 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af02      	add	r7, sp, #8
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	4806      	ldr	r0, [pc, #24]	; (8009648 <BSP_SD_ReadBlocks+0x38>)
 800962e:	f7fc fb75 	bl	8005d1c <HAL_SD_ReadBlocks>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	24000228 	.word	0x24000228

0800964c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af02      	add	r7, sp, #8
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	4806      	ldr	r0, [pc, #24]	; (8009684 <BSP_SD_WriteBlocks+0x38>)
 800966a:	f7fc fce1 	bl	8006030 <HAL_SD_WriteBlocks>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009678:	7dfb      	ldrb	r3, [r7, #23]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	24000228 	.word	0x24000228

08009688 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800968c:	4805      	ldr	r0, [pc, #20]	; (80096a4 <BSP_SD_GetCardState+0x1c>)
 800968e:	f7fd fbbd 	bl	8006e0c <HAL_SD_GetCardState>
 8009692:	4603      	mov	r3, r0
 8009694:	2b04      	cmp	r3, #4
 8009696:	bf14      	ite	ne
 8009698:	2301      	movne	r3, #1
 800969a:	2300      	moveq	r3, #0
 800969c:	b2db      	uxtb	r3, r3
}
 800969e:	4618      	mov	r0, r3
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	24000228 	.word	0x24000228

080096a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4803      	ldr	r0, [pc, #12]	; (80096c0 <BSP_SD_GetCardInfo+0x18>)
 80096b4:	f7fd fa6c 	bl	8006b90 <HAL_SD_GetCardInfo>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	24000228 	.word	0x24000228

080096c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80096cc:	f000 f80e 	bl	80096ec <BSP_SD_WriteCpltCallback>
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80096e0:	f000 f80b 	bl	80096fa <BSP_SD_ReadCpltCallback>
}
 80096e4:	bf00      	nop
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0

}
 80096f0:	bf00      	nop
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80096fa:	b480      	push	{r7}
 80096fc:	af00      	add	r7, sp, #0

}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800970e:	2301      	movs	r3, #1
 8009710:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009712:	f000 f80b 	bl	800972c <BSP_PlatformIsDetected>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800971c:	2300      	movs	r3, #0
 800971e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	b2db      	uxtb	r3, r3
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009732:	2301      	movs	r3, #1
 8009734:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800973a:	4806      	ldr	r0, [pc, #24]	; (8009754 <BSP_PlatformIsDetected+0x28>)
 800973c:	f7f8 fef8 	bl	8002530 <HAL_GPIO_ReadPin>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009746:	2300      	movs	r3, #0
 8009748:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800974a:	79fb      	ldrb	r3, [r7, #7]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	58020800 	.word	0x58020800

08009758 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009762:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <SD_CheckStatus+0x38>)
 8009764:	2201      	movs	r2, #1
 8009766:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009768:	f7ff ff8e 	bl	8009688 <BSP_SD_GetCardState>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d107      	bne.n	8009782 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <SD_CheckStatus+0x38>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f023 0301 	bic.w	r3, r3, #1
 800977c:	b2da      	uxtb	r2, r3
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <SD_CheckStatus+0x38>)
 8009780:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009782:	4b03      	ldr	r3, [pc, #12]	; (8009790 <SD_CheckStatus+0x38>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b2db      	uxtb	r3, r3
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	2400000d 	.word	0x2400000d

08009794 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800979e:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <SD_initialize+0x38>)
 80097a0:	2201      	movs	r2, #1
 80097a2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097a4:	f7ff ff0e 	bl	80095c4 <BSP_SD_Init>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d107      	bne.n	80097be <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff ffd1 	bl	8009758 <SD_CheckStatus>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461a      	mov	r2, r3
 80097ba:	4b04      	ldr	r3, [pc, #16]	; (80097cc <SD_initialize+0x38>)
 80097bc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097be:	4b03      	ldr	r3, [pc, #12]	; (80097cc <SD_initialize+0x38>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b2db      	uxtb	r3, r3
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	2400000d 	.word	0x2400000d

080097d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ffbb 	bl	8009758 <SD_CheckStatus>
 80097e2:	4603      	mov	r3, r0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	603b      	str	r3, [r7, #0]
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	68b8      	ldr	r0, [r7, #8]
 800980a:	f7ff ff01 	bl	8009610 <BSP_SD_ReadBlocks>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d107      	bne.n	8009824 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009814:	bf00      	nop
 8009816:	f7ff ff37 	bl	8009688 <BSP_SD_GetCardState>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1fa      	bne.n	8009816 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	68b8      	ldr	r0, [r7, #8]
 800984c:	f7ff fefe 	bl	800964c <BSP_SD_WriteBlocks>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d107      	bne.n	8009866 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009856:	bf00      	nop
 8009858:	f7ff ff16 	bl	8009688 <BSP_SD_GetCardState>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1fa      	bne.n	8009858 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009866:	7dfb      	ldrb	r3, [r7, #23]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08c      	sub	sp, #48	; 0x30
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	603a      	str	r2, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
 800987c:	460b      	mov	r3, r1
 800987e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009886:	4b25      	ldr	r3, [pc, #148]	; (800991c <SD_ioctl+0xac>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <SD_ioctl+0x28>
 8009894:	2303      	movs	r3, #3
 8009896:	e03c      	b.n	8009912 <SD_ioctl+0xa2>

  switch (cmd)
 8009898:	79bb      	ldrb	r3, [r7, #6]
 800989a:	2b03      	cmp	r3, #3
 800989c:	d834      	bhi.n	8009908 <SD_ioctl+0x98>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <SD_ioctl+0x34>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098bd 	.word	0x080098bd
 80098ac:	080098d5 	.word	0x080098d5
 80098b0:	080098ef 	.word	0x080098ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ba:	e028      	b.n	800990e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fef1 	bl	80096a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098c6:	6a3a      	ldr	r2, [r7, #32]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098d2:	e01c      	b.n	800990e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fee5 	bl	80096a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ec:	e00f      	b.n	800990e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff fed8 	bl	80096a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	0a5a      	lsrs	r2, r3, #9
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009906:	e002      	b.n	800990e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009908:	2304      	movs	r3, #4
 800990a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800990e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009912:	4618      	mov	r0, r3
 8009914:	3730      	adds	r7, #48	; 0x30
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	2400000d 	.word	0x2400000d

08009920 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	4a08      	ldr	r2, [pc, #32]	; (8009950 <disk_status+0x30>)
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	79fa      	ldrb	r2, [r7, #7]
 8009938:	4905      	ldr	r1, [pc, #20]	; (8009950 <disk_status+0x30>)
 800993a:	440a      	add	r2, r1
 800993c:	7a12      	ldrb	r2, [r2, #8]
 800993e:	4610      	mov	r0, r2
 8009940:	4798      	blx	r3
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	24000184 	.word	0x24000184

08009954 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	4a0d      	ldr	r2, [pc, #52]	; (800999c <disk_initialize+0x48>)
 8009966:	5cd3      	ldrb	r3, [r2, r3]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d111      	bne.n	8009990 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	4a0b      	ldr	r2, [pc, #44]	; (800999c <disk_initialize+0x48>)
 8009970:	2101      	movs	r1, #1
 8009972:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	4a09      	ldr	r2, [pc, #36]	; (800999c <disk_initialize+0x48>)
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	79fa      	ldrb	r2, [r7, #7]
 8009982:	4906      	ldr	r1, [pc, #24]	; (800999c <disk_initialize+0x48>)
 8009984:	440a      	add	r2, r1
 8009986:	7a12      	ldrb	r2, [r2, #8]
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009990:	7bfb      	ldrb	r3, [r7, #15]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	24000184 	.word	0x24000184

080099a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <disk_read+0x3c>)
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	689c      	ldr	r4, [r3, #8]
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4a07      	ldr	r2, [pc, #28]	; (80099dc <disk_read+0x3c>)
 80099c0:	4413      	add	r3, r2
 80099c2:	7a18      	ldrb	r0, [r3, #8]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	47a0      	blx	r4
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd90      	pop	{r4, r7, pc}
 80099da:	bf00      	nop
 80099dc:	24000184 	.word	0x24000184

080099e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4a0a      	ldr	r2, [pc, #40]	; (8009a1c <disk_write+0x3c>)
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68dc      	ldr	r4, [r3, #12]
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	4a07      	ldr	r2, [pc, #28]	; (8009a1c <disk_write+0x3c>)
 8009a00:	4413      	add	r3, r2
 8009a02:	7a18      	ldrb	r0, [r3, #8]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	47a0      	blx	r4
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd90      	pop	{r4, r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	24000184 	.word	0x24000184

08009a20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	603a      	str	r2, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <disk_ioctl+0x38>)
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	79fa      	ldrb	r2, [r7, #7]
 8009a3e:	4906      	ldr	r1, [pc, #24]	; (8009a58 <disk_ioctl+0x38>)
 8009a40:	440a      	add	r2, r1
 8009a42:	7a10      	ldrb	r0, [r2, #8]
 8009a44:	79b9      	ldrb	r1, [r7, #6]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	4798      	blx	r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	24000184 	.word	0x24000184

08009a5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3301      	adds	r3, #1
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a6c:	89fb      	ldrh	r3, [r7, #14]
 8009a6e:	021b      	lsls	r3, r3, #8
 8009a70:	b21a      	sxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b21b      	sxth	r3, r3
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	b21b      	sxth	r3, r3
 8009a7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3303      	adds	r3, #3
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	3202      	adds	r2, #2
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	3201      	adds	r2, #1
 8009ab2:	7812      	ldrb	r2, [r2, #0]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	7812      	ldrb	r2, [r2, #0]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	887a      	ldrh	r2, [r7, #2]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	887b      	ldrh	r3, [r7, #2]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	887a      	ldrh	r2, [r7, #2]
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	0a1b      	lsrs	r3, r3, #8
 8009b22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	b2d2      	uxtb	r2, r2
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	607a      	str	r2, [r7, #4]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00d      	beq.n	8009b96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	1c53      	adds	r3, r2, #1
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	1c59      	adds	r1, r3, #1
 8009b84:	6179      	str	r1, [r7, #20]
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	607b      	str	r3, [r7, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1f1      	bne.n	8009b7a <mem_cpy+0x1a>
	}
}
 8009b96:	bf00      	nop
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009ba2:	b480      	push	{r7}
 8009ba4:	b087      	sub	sp, #28
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	617a      	str	r2, [r7, #20]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1f3      	bne.n	8009bb2 <mem_set+0x10>
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	371c      	adds	r7, #28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bd8:	b480      	push	{r7}
 8009bda:	b089      	sub	sp, #36	; 0x24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	61fb      	str	r3, [r7, #28]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	61fa      	str	r2, [r7, #28]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	61ba      	str	r2, [r7, #24]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	1acb      	subs	r3, r1, r3
 8009c04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <mem_cmp+0x40>
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0eb      	beq.n	8009bf0 <mem_cmp+0x18>

	return r;
 8009c18:	697b      	ldr	r3, [r7, #20]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3724      	adds	r7, #36	; 0x24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c30:	e002      	b.n	8009c38 <chk_chr+0x12>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3301      	adds	r3, #1
 8009c36:	607b      	str	r3, [r7, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <chk_chr+0x26>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d1f2      	bne.n	8009c32 <chk_chr+0xc>
	return *str;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c66:	2300      	movs	r3, #0
 8009c68:	60bb      	str	r3, [r7, #8]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	60fb      	str	r3, [r7, #12]
 8009c6e:	e029      	b.n	8009cc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c70:	4a27      	ldr	r2, [pc, #156]	; (8009d10 <chk_lock+0xb4>)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	4413      	add	r3, r2
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01d      	beq.n	8009cba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c7e:	4a24      	ldr	r2, [pc, #144]	; (8009d10 <chk_lock+0xb4>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	4413      	add	r3, r2
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d116      	bne.n	8009cbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c90:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <chk_lock+0xb4>)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	4413      	add	r3, r2
 8009c98:	3304      	adds	r3, #4
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d10c      	bne.n	8009cbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ca4:	4a1a      	ldr	r2, [pc, #104]	; (8009d10 <chk_lock+0xb4>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	011b      	lsls	r3, r3, #4
 8009caa:	4413      	add	r3, r2
 8009cac:	3308      	adds	r3, #8
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d102      	bne.n	8009cbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cb8:	e007      	b.n	8009cca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d9d2      	bls.n	8009c70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d109      	bne.n	8009ce4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <chk_lock+0x80>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d101      	bne.n	8009ce0 <chk_lock+0x84>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e010      	b.n	8009d02 <chk_lock+0xa6>
 8009ce0:	2312      	movs	r3, #18
 8009ce2:	e00e      	b.n	8009d02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d108      	bne.n	8009cfc <chk_lock+0xa0>
 8009cea:	4a09      	ldr	r2, [pc, #36]	; (8009d10 <chk_lock+0xb4>)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	4413      	add	r3, r2
 8009cf2:	330c      	adds	r3, #12
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfa:	d101      	bne.n	8009d00 <chk_lock+0xa4>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	e000      	b.n	8009d02 <chk_lock+0xa6>
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	24000164 	.word	0x24000164

08009d14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	e002      	b.n	8009d26 <enq_lock+0x12>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3301      	adds	r3, #1
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d806      	bhi.n	8009d3a <enq_lock+0x26>
 8009d2c:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <enq_lock+0x40>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	4413      	add	r3, r2
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1f2      	bne.n	8009d20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	24000164 	.word	0x24000164

08009d58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	e01f      	b.n	8009da8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d68:	4a41      	ldr	r2, [pc, #260]	; (8009e70 <inc_lock+0x118>)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	011b      	lsls	r3, r3, #4
 8009d6e:	4413      	add	r3, r2
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d113      	bne.n	8009da2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d7a:	4a3d      	ldr	r2, [pc, #244]	; (8009e70 <inc_lock+0x118>)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	4413      	add	r3, r2
 8009d82:	3304      	adds	r3, #4
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d109      	bne.n	8009da2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d8e:	4a38      	ldr	r2, [pc, #224]	; (8009e70 <inc_lock+0x118>)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	4413      	add	r3, r2
 8009d96:	3308      	adds	r3, #8
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d006      	beq.n	8009db0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3301      	adds	r3, #1
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d9dc      	bls.n	8009d68 <inc_lock+0x10>
 8009dae:	e000      	b.n	8009db2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009db0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d132      	bne.n	8009e1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e002      	b.n	8009dc4 <inc_lock+0x6c>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d806      	bhi.n	8009dd8 <inc_lock+0x80>
 8009dca:	4a29      	ldr	r2, [pc, #164]	; (8009e70 <inc_lock+0x118>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	4413      	add	r3, r2
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1f2      	bne.n	8009dbe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d101      	bne.n	8009de2 <inc_lock+0x8a>
 8009dde:	2300      	movs	r3, #0
 8009de0:	e040      	b.n	8009e64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	4922      	ldr	r1, [pc, #136]	; (8009e70 <inc_lock+0x118>)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	440b      	add	r3, r1
 8009dee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	491e      	ldr	r1, [pc, #120]	; (8009e70 <inc_lock+0x118>)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	440b      	add	r3, r1
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695a      	ldr	r2, [r3, #20]
 8009e04:	491a      	ldr	r1, [pc, #104]	; (8009e70 <inc_lock+0x118>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	440b      	add	r3, r1
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e10:	4a17      	ldr	r2, [pc, #92]	; (8009e70 <inc_lock+0x118>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	4413      	add	r3, r2
 8009e18:	330c      	adds	r3, #12
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d009      	beq.n	8009e38 <inc_lock+0xe0>
 8009e24:	4a12      	ldr	r2, [pc, #72]	; (8009e70 <inc_lock+0x118>)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	4413      	add	r3, r2
 8009e2c:	330c      	adds	r3, #12
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <inc_lock+0xe0>
 8009e34:	2300      	movs	r3, #0
 8009e36:	e015      	b.n	8009e64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d108      	bne.n	8009e50 <inc_lock+0xf8>
 8009e3e:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <inc_lock+0x118>)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	4413      	add	r3, r2
 8009e46:	330c      	adds	r3, #12
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	e001      	b.n	8009e54 <inc_lock+0xfc>
 8009e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e54:	4906      	ldr	r1, [pc, #24]	; (8009e70 <inc_lock+0x118>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	440b      	add	r3, r1
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3301      	adds	r3, #1
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	24000164 	.word	0x24000164

08009e74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	607b      	str	r3, [r7, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d825      	bhi.n	8009ed4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e88:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <dec_lock+0x74>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	4413      	add	r3, r2
 8009e90:	330c      	adds	r3, #12
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e96:	89fb      	ldrh	r3, [r7, #14]
 8009e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9c:	d101      	bne.n	8009ea2 <dec_lock+0x2e>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ea2:	89fb      	ldrh	r3, [r7, #14]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <dec_lock+0x3a>
 8009ea8:	89fb      	ldrh	r3, [r7, #14]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009eae:	4a0e      	ldr	r2, [pc, #56]	; (8009ee8 <dec_lock+0x74>)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	4413      	add	r3, r2
 8009eb6:	330c      	adds	r3, #12
 8009eb8:	89fa      	ldrh	r2, [r7, #14]
 8009eba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ebc:	89fb      	ldrh	r3, [r7, #14]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d105      	bne.n	8009ece <dec_lock+0x5a>
 8009ec2:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <dec_lock+0x74>)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	4413      	add	r3, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	737b      	strb	r3, [r7, #13]
 8009ed2:	e001      	b.n	8009ed8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ed8:	7b7b      	ldrb	r3, [r7, #13]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	24000164 	.word	0x24000164

08009eec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	e010      	b.n	8009f1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009efa:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <clear_lock+0x44>)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	011b      	lsls	r3, r3, #4
 8009f00:	4413      	add	r3, r2
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d105      	bne.n	8009f16 <clear_lock+0x2a>
 8009f0a:	4a09      	ldr	r2, [pc, #36]	; (8009f30 <clear_lock+0x44>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	4413      	add	r3, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d9eb      	bls.n	8009efa <clear_lock+0xe>
	}
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	24000164 	.word	0x24000164

08009f34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	78db      	ldrb	r3, [r3, #3]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d034      	beq.n	8009fb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7858      	ldrb	r0, [r3, #1]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f58:	2301      	movs	r3, #1
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	f7ff fd40 	bl	80099e0 <disk_write>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	73fb      	strb	r3, [r7, #15]
 8009f6a:	e022      	b.n	8009fb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	1ad2      	subs	r2, r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d217      	bcs.n	8009fb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	789b      	ldrb	r3, [r3, #2]
 8009f86:	613b      	str	r3, [r7, #16]
 8009f88:	e010      	b.n	8009fac <sync_window+0x78>
					wsect += fs->fsize;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	4413      	add	r3, r2
 8009f92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	7858      	ldrb	r0, [r3, #1]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	f7ff fd1d 	bl	80099e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	613b      	str	r3, [r7, #16]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d8eb      	bhi.n	8009f8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d01b      	beq.n	800a00c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff ffad 	bl	8009f34 <sync_window>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d113      	bne.n	800a00c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7858      	ldrb	r0, [r3, #1]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fee:	2301      	movs	r3, #1
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	f7ff fcd5 	bl	80099a0 <disk_read>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295
 800a000:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a002:	2301      	movs	r3, #1
 800a004:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7ff ff87 	bl	8009f34 <sync_window>
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d158      	bne.n	800a0e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b03      	cmp	r3, #3
 800a036:	d148      	bne.n	800a0ca <sync_fs+0xb2>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	791b      	ldrb	r3, [r3, #4]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d144      	bne.n	800a0ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3330      	adds	r3, #48	; 0x30
 800a044:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff fda9 	bl	8009ba2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3330      	adds	r3, #48	; 0x30
 800a054:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a058:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff fd38 	bl	8009ad2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3330      	adds	r3, #48	; 0x30
 800a066:	4921      	ldr	r1, [pc, #132]	; (800a0ec <sync_fs+0xd4>)
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff fd4d 	bl	8009b08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	3330      	adds	r3, #48	; 0x30
 800a072:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a076:	491e      	ldr	r1, [pc, #120]	; (800a0f0 <sync_fs+0xd8>)
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fd45 	bl	8009b08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3330      	adds	r3, #48	; 0x30
 800a082:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	4619      	mov	r1, r3
 800a08c:	4610      	mov	r0, r2
 800a08e:	f7ff fd3b 	bl	8009b08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3330      	adds	r3, #48	; 0x30
 800a096:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f7ff fd31 	bl	8009b08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7858      	ldrb	r0, [r3, #1]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f7ff fc8e 	bl	80099e0 <disk_write>
			fs->fsi_flag = 0;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fca4 	bl	8009a20 <disk_ioctl>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <sync_fs+0xca>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	41615252 	.word	0x41615252
 800a0f0:	61417272 	.word	0x61417272

0800a0f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	3b02      	subs	r3, #2
 800a102:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	3b02      	subs	r3, #2
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d301      	bcc.n	800a114 <clust2sect+0x20>
 800a110:	2300      	movs	r3, #0
 800a112:	e008      	b.n	800a126 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	895b      	ldrh	r3, [r3, #10]
 800a118:	461a      	mov	r2, r3
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	fb03 f202 	mul.w	r2, r3, r2
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a124:	4413      	add	r3, r2
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b086      	sub	sp, #24
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d904      	bls.n	800a152 <get_fat+0x20>
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d302      	bcc.n	800a158 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a152:	2301      	movs	r3, #1
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	e08f      	b.n	800a278 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a158:	f04f 33ff 	mov.w	r3, #4294967295
 800a15c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2b03      	cmp	r3, #3
 800a164:	d062      	beq.n	800a22c <get_fat+0xfa>
 800a166:	2b03      	cmp	r3, #3
 800a168:	dc7c      	bgt.n	800a264 <get_fat+0x132>
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d002      	beq.n	800a174 <get_fat+0x42>
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d042      	beq.n	800a1f8 <get_fat+0xc6>
 800a172:	e077      	b.n	800a264 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	60fb      	str	r3, [r7, #12]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	085b      	lsrs	r3, r3, #1
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	6a1a      	ldr	r2, [r3, #32]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	0a5b      	lsrs	r3, r3, #9
 800a18a:	4413      	add	r3, r2
 800a18c:	4619      	mov	r1, r3
 800a18e:	6938      	ldr	r0, [r7, #16]
 800a190:	f7ff ff14 	bl	8009fbc <move_window>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d167      	bne.n	800a26a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6a1a      	ldr	r2, [r3, #32]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	0a5b      	lsrs	r3, r3, #9
 800a1b6:	4413      	add	r3, r2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6938      	ldr	r0, [r7, #16]
 800a1bc:	f7ff fefe 	bl	8009fbc <move_window>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d153      	bne.n	800a26e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1d4:	021b      	lsls	r3, r3, #8
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <get_fat+0xbc>
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	091b      	lsrs	r3, r3, #4
 800a1ec:	e002      	b.n	800a1f4 <get_fat+0xc2>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1f4:	617b      	str	r3, [r7, #20]
			break;
 800a1f6:	e03f      	b.n	800a278 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6a1a      	ldr	r2, [r3, #32]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	0a1b      	lsrs	r3, r3, #8
 800a200:	4413      	add	r3, r2
 800a202:	4619      	mov	r1, r3
 800a204:	6938      	ldr	r0, [r7, #16]
 800a206:	f7ff fed9 	bl	8009fbc <move_window>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d130      	bne.n	800a272 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a21e:	4413      	add	r3, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fc1b 	bl	8009a5c <ld_word>
 800a226:	4603      	mov	r3, r0
 800a228:	617b      	str	r3, [r7, #20]
			break;
 800a22a:	e025      	b.n	800a278 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	6a1a      	ldr	r2, [r3, #32]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	09db      	lsrs	r3, r3, #7
 800a234:	4413      	add	r3, r2
 800a236:	4619      	mov	r1, r3
 800a238:	6938      	ldr	r0, [r7, #16]
 800a23a:	f7ff febf 	bl	8009fbc <move_window>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d118      	bne.n	800a276 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a252:	4413      	add	r3, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff fc19 	bl	8009a8c <ld_dword>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a260:	617b      	str	r3, [r7, #20]
			break;
 800a262:	e009      	b.n	800a278 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a264:	2301      	movs	r3, #1
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e006      	b.n	800a278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a26a:	bf00      	nop
 800a26c:	e004      	b.n	800a278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a26e:	bf00      	nop
 800a270:	e002      	b.n	800a278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a272:	bf00      	nop
 800a274:	e000      	b.n	800a278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a276:	bf00      	nop
		}
	}

	return val;
 800a278:	697b      	ldr	r3, [r7, #20]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a282:	b590      	push	{r4, r7, lr}
 800a284:	b089      	sub	sp, #36	; 0x24
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a28e:	2302      	movs	r3, #2
 800a290:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b01      	cmp	r3, #1
 800a296:	f240 80d2 	bls.w	800a43e <put_fat+0x1bc>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	f080 80cc 	bcs.w	800a43e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	f000 8096 	beq.w	800a3dc <put_fat+0x15a>
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	f300 80cd 	bgt.w	800a450 <put_fat+0x1ce>
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d002      	beq.n	800a2c0 <put_fat+0x3e>
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d06e      	beq.n	800a39c <put_fat+0x11a>
 800a2be:	e0c7      	b.n	800a450 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	0a5b      	lsrs	r3, r3, #9
 800a2d6:	4413      	add	r3, r2
 800a2d8:	4619      	mov	r1, r3
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff fe6e 	bl	8009fbc <move_window>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2e4:	7ffb      	ldrb	r3, [r7, #31]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f040 80ab 	bne.w	800a442 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	1c59      	adds	r1, r3, #1
 800a2f6:	61b9      	str	r1, [r7, #24]
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	4413      	add	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00d      	beq.n	800a326 <put_fat+0xa4>
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b25b      	sxtb	r3, r3
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	b25a      	sxtb	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	4313      	orrs	r3, r2
 800a320:	b25b      	sxtb	r3, r3
 800a322:	b2db      	uxtb	r3, r3
 800a324:	e001      	b.n	800a32a <put_fat+0xa8>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1a      	ldr	r2, [r3, #32]
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	0a5b      	lsrs	r3, r3, #9
 800a33c:	4413      	add	r3, r2
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff fe3b 	bl	8009fbc <move_window>
 800a346:	4603      	mov	r3, r0
 800a348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a34a:	7ffb      	ldrb	r3, [r7, #31]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d17a      	bne.n	800a446 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	4413      	add	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <put_fat+0xf0>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	091b      	lsrs	r3, r3, #4
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	e00e      	b.n	800a390 <put_fat+0x10e>
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b25b      	sxtb	r3, r3
 800a378:	f023 030f 	bic.w	r3, r3, #15
 800a37c:	b25a      	sxtb	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	b25b      	sxtb	r3, r3
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	4313      	orrs	r3, r2
 800a38c:	b25b      	sxtb	r3, r3
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2201      	movs	r2, #1
 800a398:	70da      	strb	r2, [r3, #3]
			break;
 800a39a:	e059      	b.n	800a450 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	0a1b      	lsrs	r3, r3, #8
 800a3a4:	4413      	add	r3, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff fe07 	bl	8009fbc <move_window>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3b2:	7ffb      	ldrb	r3, [r7, #31]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d148      	bne.n	800a44a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a3c6:	4413      	add	r3, r2
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fb7f 	bl	8009ad2 <st_word>
			fs->wflag = 1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	70da      	strb	r2, [r3, #3]
			break;
 800a3da:	e039      	b.n	800a450 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a1a      	ldr	r2, [r3, #32]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	09db      	lsrs	r3, r3, #7
 800a3e4:	4413      	add	r3, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7ff fde7 	bl	8009fbc <move_window>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3f2:	7ffb      	ldrb	r3, [r7, #31]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d12a      	bne.n	800a44e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a40c:	4413      	add	r3, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fb3c 	bl	8009a8c <ld_dword>
 800a414:	4603      	mov	r3, r0
 800a416:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a41a:	4323      	orrs	r3, r4
 800a41c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a42c:	4413      	add	r3, r2
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fb69 	bl	8009b08 <st_dword>
			fs->wflag = 1;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	70da      	strb	r2, [r3, #3]
			break;
 800a43c:	e008      	b.n	800a450 <put_fat+0x1ce>
		}
	}
 800a43e:	bf00      	nop
 800a440:	e006      	b.n	800a450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a442:	bf00      	nop
 800a444:	e004      	b.n	800a450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a446:	bf00      	nop
 800a448:	e002      	b.n	800a450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a44a:	bf00      	nop
 800a44c:	e000      	b.n	800a450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a44e:	bf00      	nop
	return res;
 800a450:	7ffb      	ldrb	r3, [r7, #31]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3724      	adds	r7, #36	; 0x24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd90      	pop	{r4, r7, pc}

0800a45a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b088      	sub	sp, #32
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d904      	bls.n	800a480 <remove_chain+0x26>
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d301      	bcc.n	800a484 <remove_chain+0x2a>
 800a480:	2302      	movs	r3, #2
 800a482:	e04b      	b.n	800a51c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00c      	beq.n	800a4a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a48a:	f04f 32ff 	mov.w	r2, #4294967295
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	69b8      	ldr	r0, [r7, #24]
 800a492:	f7ff fef6 	bl	800a282 <put_fat>
 800a496:	4603      	mov	r3, r0
 800a498:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a49a:	7ffb      	ldrb	r3, [r7, #31]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <remove_chain+0x4a>
 800a4a0:	7ffb      	ldrb	r3, [r7, #31]
 800a4a2:	e03b      	b.n	800a51c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff fe43 	bl	800a132 <get_fat>
 800a4ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d031      	beq.n	800a518 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <remove_chain+0x64>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	e02e      	b.n	800a51c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d101      	bne.n	800a4ca <remove_chain+0x70>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e028      	b.n	800a51c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	69b8      	ldr	r0, [r7, #24]
 800a4d0:	f7ff fed7 	bl	800a282 <put_fat>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a4d8:	7ffb      	ldrb	r3, [r7, #31]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <remove_chain+0x88>
 800a4de:	7ffb      	ldrb	r3, [r7, #31]
 800a4e0:	e01c      	b.n	800a51c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	3b02      	subs	r3, #2
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d20b      	bcs.n	800a508 <remove_chain+0xae>
			fs->free_clst++;
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	791b      	ldrb	r3, [r3, #4]
 800a4fe:	f043 0301 	orr.w	r3, r3, #1
 800a502:	b2da      	uxtb	r2, r3
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	429a      	cmp	r2, r3
 800a514:	d3c6      	bcc.n	800a4a4 <remove_chain+0x4a>
 800a516:	e000      	b.n	800a51a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a518:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3720      	adds	r7, #32
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10d      	bne.n	800a556 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d004      	beq.n	800a550 <create_chain+0x2c>
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d31b      	bcc.n	800a588 <create_chain+0x64>
 800a550:	2301      	movs	r3, #1
 800a552:	61bb      	str	r3, [r7, #24]
 800a554:	e018      	b.n	800a588 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff fdea 	bl	800a132 <get_fat>
 800a55e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d801      	bhi.n	800a56a <create_chain+0x46>
 800a566:	2301      	movs	r3, #1
 800a568:	e070      	b.n	800a64c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a570:	d101      	bne.n	800a576 <create_chain+0x52>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	e06a      	b.n	800a64c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d201      	bcs.n	800a584 <create_chain+0x60>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	e063      	b.n	800a64c <create_chain+0x128>
		scl = clst;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	3301      	adds	r3, #1
 800a590:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d307      	bcc.n	800a5ac <create_chain+0x88>
				ncl = 2;
 800a59c:	2302      	movs	r3, #2
 800a59e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d901      	bls.n	800a5ac <create_chain+0x88>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e04f      	b.n	800a64c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5ac:	69f9      	ldr	r1, [r7, #28]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fdbf 	bl	800a132 <get_fat>
 800a5b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00e      	beq.n	800a5da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d003      	beq.n	800a5ca <create_chain+0xa6>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c8:	d101      	bne.n	800a5ce <create_chain+0xaa>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	e03e      	b.n	800a64c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d1da      	bne.n	800a58c <create_chain+0x68>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e038      	b.n	800a64c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a5da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	69f9      	ldr	r1, [r7, #28]
 800a5e2:	6938      	ldr	r0, [r7, #16]
 800a5e4:	f7ff fe4d 	bl	800a282 <put_fat>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d109      	bne.n	800a606 <create_chain+0xe2>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d006      	beq.n	800a606 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6938      	ldr	r0, [r7, #16]
 800a5fe:	f7ff fe40 	bl	800a282 <put_fat>
 800a602:	4603      	mov	r3, r0
 800a604:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d116      	bne.n	800a63a <create_chain+0x116>
		fs->last_clst = ncl;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	69fa      	ldr	r2, [r7, #28]
 800a610:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	691a      	ldr	r2, [r3, #16]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	3b02      	subs	r3, #2
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d804      	bhi.n	800a62a <create_chain+0x106>
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	1e5a      	subs	r2, r3, #1
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	791b      	ldrb	r3, [r3, #4]
 800a62e:	f043 0301 	orr.w	r3, r3, #1
 800a632:	b2da      	uxtb	r2, r3
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	711a      	strb	r2, [r3, #4]
 800a638:	e007      	b.n	800a64a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d102      	bne.n	800a646 <create_chain+0x122>
 800a640:	f04f 33ff 	mov.w	r3, #4294967295
 800a644:	e000      	b.n	800a648 <create_chain+0x124>
 800a646:	2301      	movs	r3, #1
 800a648:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a64a:	69fb      	ldr	r3, [r7, #28]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a668:	3304      	adds	r3, #4
 800a66a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	0a5b      	lsrs	r3, r3, #9
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	8952      	ldrh	r2, [r2, #10]
 800a674:	fbb3 f3f2 	udiv	r3, r3, r2
 800a678:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1d1a      	adds	r2, r3, #4
 800a67e:	613a      	str	r2, [r7, #16]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <clmt_clust+0x3a>
 800a68a:	2300      	movs	r3, #0
 800a68c:	e010      	b.n	800a6b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	d307      	bcc.n	800a6a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6a4:	e7e9      	b.n	800a67a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a6a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4413      	add	r3, r2
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	371c      	adds	r7, #28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6d2:	d204      	bcs.n	800a6de <dir_sdi+0x22>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	f003 031f 	and.w	r3, r3, #31
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e063      	b.n	800a7aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <dir_sdi+0x46>
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d902      	bls.n	800a702 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10c      	bne.n	800a722 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	095b      	lsrs	r3, r3, #5
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	8912      	ldrh	r2, [r2, #8]
 800a710:	4293      	cmp	r3, r2
 800a712:	d301      	bcc.n	800a718 <dir_sdi+0x5c>
 800a714:	2302      	movs	r3, #2
 800a716:	e048      	b.n	800a7aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	61da      	str	r2, [r3, #28]
 800a720:	e029      	b.n	800a776 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	895b      	ldrh	r3, [r3, #10]
 800a726:	025b      	lsls	r3, r3, #9
 800a728:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a72a:	e019      	b.n	800a760 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6979      	ldr	r1, [r7, #20]
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fcfe 	bl	800a132 <get_fat>
 800a736:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73e:	d101      	bne.n	800a744 <dir_sdi+0x88>
 800a740:	2301      	movs	r3, #1
 800a742:	e032      	b.n	800a7aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d904      	bls.n	800a754 <dir_sdi+0x98>
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	429a      	cmp	r2, r3
 800a752:	d301      	bcc.n	800a758 <dir_sdi+0x9c>
 800a754:	2302      	movs	r3, #2
 800a756:	e028      	b.n	800a7aa <dir_sdi+0xee>
			ofs -= csz;
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d2e1      	bcs.n	800a72c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a768:	6979      	ldr	r1, [r7, #20]
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f7ff fcc2 	bl	800a0f4 <clust2sect>
 800a770:	4602      	mov	r2, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <dir_sdi+0xcc>
 800a784:	2302      	movs	r3, #2
 800a786:	e010      	b.n	800a7aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	0a5b      	lsrs	r3, r3, #9
 800a790:	441a      	add	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a2:	441a      	add	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	3320      	adds	r3, #32
 800a7c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <dir_next+0x28>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7d8:	d301      	bcc.n	800a7de <dir_next+0x2c>
 800a7da:	2304      	movs	r3, #4
 800a7dc:	e0aa      	b.n	800a934 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f040 8098 	bne.w	800a91a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10b      	bne.n	800a814 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	095b      	lsrs	r3, r3, #5
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	8912      	ldrh	r2, [r2, #8]
 800a804:	4293      	cmp	r3, r2
 800a806:	f0c0 8088 	bcc.w	800a91a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	61da      	str	r2, [r3, #28]
 800a810:	2304      	movs	r3, #4
 800a812:	e08f      	b.n	800a934 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	0a5b      	lsrs	r3, r3, #9
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	8952      	ldrh	r2, [r2, #10]
 800a81c:	3a01      	subs	r2, #1
 800a81e:	4013      	ands	r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d17a      	bne.n	800a91a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f7ff fc80 	bl	800a132 <get_fat>
 800a832:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d801      	bhi.n	800a83e <dir_next+0x8c>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e07a      	b.n	800a934 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d101      	bne.n	800a84a <dir_next+0x98>
 800a846:	2301      	movs	r3, #1
 800a848:	e074      	b.n	800a934 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	429a      	cmp	r2, r3
 800a852:	d358      	bcc.n	800a906 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	61da      	str	r2, [r3, #28]
 800a860:	2304      	movs	r3, #4
 800a862:	e067      	b.n	800a934 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	4619      	mov	r1, r3
 800a86c:	4610      	mov	r0, r2
 800a86e:	f7ff fe59 	bl	800a524 <create_chain>
 800a872:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <dir_next+0xcc>
 800a87a:	2307      	movs	r3, #7
 800a87c:	e05a      	b.n	800a934 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d101      	bne.n	800a888 <dir_next+0xd6>
 800a884:	2302      	movs	r3, #2
 800a886:	e055      	b.n	800a934 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88e:	d101      	bne.n	800a894 <dir_next+0xe2>
 800a890:	2301      	movs	r3, #1
 800a892:	e04f      	b.n	800a934 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fb4d 	bl	8009f34 <sync_window>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <dir_next+0xf2>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e047      	b.n	800a934 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3330      	adds	r3, #48	; 0x30
 800a8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff f977 	bl	8009ba2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	613b      	str	r3, [r7, #16]
 800a8b8:	6979      	ldr	r1, [r7, #20]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff fc1a 	bl	800a0f4 <clust2sect>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8c6:	e012      	b.n	800a8ee <dir_next+0x13c>
						fs->wflag = 1;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f7ff fb30 	bl	8009f34 <sync_window>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <dir_next+0x12c>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e02a      	b.n	800a934 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	895b      	ldrh	r3, [r3, #10]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d3e6      	bcc.n	800a8c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	1ad2      	subs	r2, r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a90c:	6979      	ldr	r1, [r7, #20]
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7ff fbf0 	bl	800a0f4 <clust2sect>
 800a914:	4602      	mov	r2, r0
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92c:	441a      	add	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a94c:	2100      	movs	r1, #0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff feb4 	bl	800a6bc <dir_sdi>
 800a954:	4603      	mov	r3, r0
 800a956:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d12b      	bne.n	800a9b6 <dir_alloc+0x7a>
		n = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	4619      	mov	r1, r3
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff fb27 	bl	8009fbc <move_window>
 800a96e:	4603      	mov	r3, r0
 800a970:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11d      	bne.n	800a9b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2be5      	cmp	r3, #229	; 0xe5
 800a980:	d004      	beq.n	800a98c <dir_alloc+0x50>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d107      	bne.n	800a99c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	3301      	adds	r3, #1
 800a990:	613b      	str	r3, [r7, #16]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d102      	bne.n	800a9a0 <dir_alloc+0x64>
 800a99a:	e00c      	b.n	800a9b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a99c:	2300      	movs	r3, #0
 800a99e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff ff05 	bl	800a7b2 <dir_next>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0d7      	beq.n	800a962 <dir_alloc+0x26>
 800a9b2:	e000      	b.n	800a9b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a9b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	d101      	bne.n	800a9c0 <dir_alloc+0x84>
 800a9bc:	2307      	movs	r3, #7
 800a9be:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	331a      	adds	r3, #26
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff f83f 	bl	8009a5c <ld_word>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d109      	bne.n	800a9fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	3314      	adds	r3, #20
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff f834 	bl	8009a5c <ld_word>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	041b      	lsls	r3, r3, #16
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	331a      	adds	r3, #26
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	b292      	uxth	r2, r2
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff f857 	bl	8009ad2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d109      	bne.n	800aa40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f103 0214 	add.w	r2, r3, #20
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	0c1b      	lsrs	r3, r3, #16
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f7ff f849 	bl	8009ad2 <st_word>
	}
}
 800aa40:	bf00      	nop
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa56:	2100      	movs	r1, #0
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff fe2f 	bl	800a6bc <dir_sdi>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <dir_find+0x24>
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	e03e      	b.n	800aaea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	4619      	mov	r1, r3
 800aa72:	6938      	ldr	r0, [r7, #16]
 800aa74:	f7ff faa2 	bl	8009fbc <move_window>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d12f      	bne.n	800aae2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <dir_find+0x4e>
 800aa90:	2304      	movs	r3, #4
 800aa92:	75fb      	strb	r3, [r7, #23]
 800aa94:	e028      	b.n	800aae8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	330b      	adds	r3, #11
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a1b      	ldr	r3, [r3, #32]
 800aaac:	330b      	adds	r3, #11
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	f003 0308 	and.w	r3, r3, #8
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <dir_find+0x86>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a18      	ldr	r0, [r3, #32]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3324      	adds	r3, #36	; 0x24
 800aac0:	220b      	movs	r2, #11
 800aac2:	4619      	mov	r1, r3
 800aac4:	f7ff f888 	bl	8009bd8 <mem_cmp>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aace:	2100      	movs	r1, #0
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff fe6e 	bl	800a7b2 <dir_next>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0c5      	beq.n	800aa6c <dir_find+0x24>
 800aae0:	e002      	b.n	800aae8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aae2:	bf00      	nop
 800aae4:	e000      	b.n	800aae8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aae6:	bf00      	nop

	return res;
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ab00:	2101      	movs	r1, #1
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff ff1a 	bl	800a93c <dir_alloc>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d11c      	bne.n	800ab4c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	4619      	mov	r1, r3
 800ab18:	68b8      	ldr	r0, [r7, #8]
 800ab1a:	f7ff fa4f 	bl	8009fbc <move_window>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d111      	bne.n	800ab4c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff f836 	bl	8009ba2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a18      	ldr	r0, [r3, #32]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3324      	adds	r3, #36	; 0x24
 800ab3e:	220b      	movs	r2, #11
 800ab40:	4619      	mov	r1, r3
 800ab42:	f7ff f80d 	bl	8009b60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	60fb      	str	r3, [r7, #12]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3324      	adds	r3, #36	; 0x24
 800ab6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab6e:	220b      	movs	r2, #11
 800ab70:	2120      	movs	r1, #32
 800ab72:	68b8      	ldr	r0, [r7, #8]
 800ab74:	f7ff f815 	bl	8009ba2 <mem_set>
	si = i = 0; ni = 8;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	613b      	str	r3, [r7, #16]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	61fb      	str	r3, [r7, #28]
 800ab80:	2308      	movs	r3, #8
 800ab82:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	61fa      	str	r2, [r7, #28]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab92:	7efb      	ldrb	r3, [r7, #27]
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	d94e      	bls.n	800ac36 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ab98:	7efb      	ldrb	r3, [r7, #27]
 800ab9a:	2b2f      	cmp	r3, #47	; 0x2f
 800ab9c:	d006      	beq.n	800abac <create_name+0x54>
 800ab9e:	7efb      	ldrb	r3, [r7, #27]
 800aba0:	2b5c      	cmp	r3, #92	; 0x5c
 800aba2:	d110      	bne.n	800abc6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aba4:	e002      	b.n	800abac <create_name+0x54>
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	3301      	adds	r3, #1
 800abaa:	61fb      	str	r3, [r7, #28]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b2f      	cmp	r3, #47	; 0x2f
 800abb6:	d0f6      	beq.n	800aba6 <create_name+0x4e>
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2b5c      	cmp	r3, #92	; 0x5c
 800abc2:	d0f0      	beq.n	800aba6 <create_name+0x4e>
			break;
 800abc4:	e038      	b.n	800ac38 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800abc6:	7efb      	ldrb	r3, [r7, #27]
 800abc8:	2b2e      	cmp	r3, #46	; 0x2e
 800abca:	d003      	beq.n	800abd4 <create_name+0x7c>
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d30c      	bcc.n	800abee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b0b      	cmp	r3, #11
 800abd8:	d002      	beq.n	800abe0 <create_name+0x88>
 800abda:	7efb      	ldrb	r3, [r7, #27]
 800abdc:	2b2e      	cmp	r3, #46	; 0x2e
 800abde:	d001      	beq.n	800abe4 <create_name+0x8c>
 800abe0:	2306      	movs	r3, #6
 800abe2:	e044      	b.n	800ac6e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800abe4:	2308      	movs	r3, #8
 800abe6:	613b      	str	r3, [r7, #16]
 800abe8:	230b      	movs	r3, #11
 800abea:	617b      	str	r3, [r7, #20]
			continue;
 800abec:	e022      	b.n	800ac34 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800abee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	da04      	bge.n	800ac00 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800abf6:	7efb      	ldrb	r3, [r7, #27]
 800abf8:	3b80      	subs	r3, #128	; 0x80
 800abfa:	4a1f      	ldr	r2, [pc, #124]	; (800ac78 <create_name+0x120>)
 800abfc:	5cd3      	ldrb	r3, [r2, r3]
 800abfe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ac00:	7efb      	ldrb	r3, [r7, #27]
 800ac02:	4619      	mov	r1, r3
 800ac04:	481d      	ldr	r0, [pc, #116]	; (800ac7c <create_name+0x124>)
 800ac06:	f7ff f80e 	bl	8009c26 <chk_chr>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <create_name+0xbc>
 800ac10:	2306      	movs	r3, #6
 800ac12:	e02c      	b.n	800ac6e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ac14:	7efb      	ldrb	r3, [r7, #27]
 800ac16:	2b60      	cmp	r3, #96	; 0x60
 800ac18:	d905      	bls.n	800ac26 <create_name+0xce>
 800ac1a:	7efb      	ldrb	r3, [r7, #27]
 800ac1c:	2b7a      	cmp	r3, #122	; 0x7a
 800ac1e:	d802      	bhi.n	800ac26 <create_name+0xce>
 800ac20:	7efb      	ldrb	r3, [r7, #27]
 800ac22:	3b20      	subs	r3, #32
 800ac24:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	613a      	str	r2, [r7, #16]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	4413      	add	r3, r2
 800ac30:	7efa      	ldrb	r2, [r7, #27]
 800ac32:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac34:	e7a6      	b.n	800ab84 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac36:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	441a      	add	r2, r3
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <create_name+0xf4>
 800ac48:	2306      	movs	r3, #6
 800ac4a:	e010      	b.n	800ac6e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2be5      	cmp	r3, #229	; 0xe5
 800ac52:	d102      	bne.n	800ac5a <create_name+0x102>
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2205      	movs	r2, #5
 800ac58:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac5a:	7efb      	ldrb	r3, [r7, #27]
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d801      	bhi.n	800ac64 <create_name+0x10c>
 800ac60:	2204      	movs	r2, #4
 800ac62:	e000      	b.n	800ac66 <create_name+0x10e>
 800ac64:	2200      	movs	r2, #0
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	330b      	adds	r3, #11
 800ac6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac6c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	0800d094 	.word	0x0800d094
 800ac7c:	0800d004 	.word	0x0800d004

0800ac80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac94:	e002      	b.n	800ac9c <follow_path+0x1c>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b2f      	cmp	r3, #47	; 0x2f
 800aca2:	d0f8      	beq.n	800ac96 <follow_path+0x16>
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b5c      	cmp	r3, #92	; 0x5c
 800acaa:	d0f4      	beq.n	800ac96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2200      	movs	r2, #0
 800acb0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b1f      	cmp	r3, #31
 800acb8:	d80a      	bhi.n	800acd0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2280      	movs	r2, #128	; 0x80
 800acbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800acc2:	2100      	movs	r1, #0
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff fcf9 	bl	800a6bc <dir_sdi>
 800acca:	4603      	mov	r3, r0
 800accc:	75fb      	strb	r3, [r7, #23]
 800acce:	e043      	b.n	800ad58 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acd0:	463b      	mov	r3, r7
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff ff3f 	bl	800ab58 <create_name>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d134      	bne.n	800ad4e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff feaf 	bl	800aa48 <dir_find>
 800acea:	4603      	mov	r3, r0
 800acec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acf4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800acfc:	7dfb      	ldrb	r3, [r7, #23]
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d127      	bne.n	800ad52 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad02:	7afb      	ldrb	r3, [r7, #11]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d122      	bne.n	800ad52 <follow_path+0xd2>
 800ad0c:	2305      	movs	r3, #5
 800ad0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad10:	e01f      	b.n	800ad52 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d11c      	bne.n	800ad56 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	799b      	ldrb	r3, [r3, #6]
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad28:	2305      	movs	r3, #5
 800ad2a:	75fb      	strb	r3, [r7, #23]
 800ad2c:	e014      	b.n	800ad58 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3c:	4413      	add	r3, r2
 800ad3e:	4619      	mov	r1, r3
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7ff fe42 	bl	800a9ca <ld_clust>
 800ad46:	4602      	mov	r2, r0
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad4c:	e7c0      	b.n	800acd0 <follow_path+0x50>
			if (res != FR_OK) break;
 800ad4e:	bf00      	nop
 800ad50:	e002      	b.n	800ad58 <follow_path+0xd8>
				break;
 800ad52:	bf00      	nop
 800ad54:	e000      	b.n	800ad58 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad56:	bf00      	nop
			}
		}
	}

	return res;
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b087      	sub	sp, #28
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d031      	beq.n	800addc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	617b      	str	r3, [r7, #20]
 800ad7e:	e002      	b.n	800ad86 <get_ldnumber+0x24>
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	3301      	adds	r3, #1
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	d903      	bls.n	800ad96 <get_ldnumber+0x34>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b3a      	cmp	r3, #58	; 0x3a
 800ad94:	d1f4      	bne.n	800ad80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b3a      	cmp	r3, #58	; 0x3a
 800ad9c:	d11c      	bne.n	800add8 <get_ldnumber+0x76>
			tp = *path;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	60fa      	str	r2, [r7, #12]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	3b30      	subs	r3, #48	; 0x30
 800adae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b09      	cmp	r3, #9
 800adb4:	d80e      	bhi.n	800add4 <get_ldnumber+0x72>
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d10a      	bne.n	800add4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d107      	bne.n	800add4 <get_ldnumber+0x72>
					vol = (int)i;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	3301      	adds	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	e002      	b.n	800adde <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800add8:	2300      	movs	r3, #0
 800adda:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800addc:	693b      	ldr	r3, [r7, #16]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
	...

0800adec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	70da      	strb	r2, [r3, #3]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff f8d8 	bl	8009fbc <move_window>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <check_fs+0x2a>
 800ae12:	2304      	movs	r3, #4
 800ae14:	e038      	b.n	800ae88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3330      	adds	r3, #48	; 0x30
 800ae1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe fe1c 	bl	8009a5c <ld_word>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d001      	beq.n	800ae34 <check_fs+0x48>
 800ae30:	2303      	movs	r3, #3
 800ae32:	e029      	b.n	800ae88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae3a:	2be9      	cmp	r3, #233	; 0xe9
 800ae3c:	d009      	beq.n	800ae52 <check_fs+0x66>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae44:	2beb      	cmp	r3, #235	; 0xeb
 800ae46:	d11e      	bne.n	800ae86 <check_fs+0x9a>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae4e:	2b90      	cmp	r3, #144	; 0x90
 800ae50:	d119      	bne.n	800ae86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3330      	adds	r3, #48	; 0x30
 800ae56:	3336      	adds	r3, #54	; 0x36
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fe fe17 	bl	8009a8c <ld_dword>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae64:	4a0a      	ldr	r2, [pc, #40]	; (800ae90 <check_fs+0xa4>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d101      	bne.n	800ae6e <check_fs+0x82>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e00c      	b.n	800ae88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3330      	adds	r3, #48	; 0x30
 800ae72:	3352      	adds	r3, #82	; 0x52
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fe09 	bl	8009a8c <ld_dword>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4a05      	ldr	r2, [pc, #20]	; (800ae94 <check_fs+0xa8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d101      	bne.n	800ae86 <check_fs+0x9a>
 800ae82:	2300      	movs	r3, #0
 800ae84:	e000      	b.n	800ae88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae86:	2302      	movs	r3, #2
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	00544146 	.word	0x00544146
 800ae94:	33544146 	.word	0x33544146

0800ae98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b096      	sub	sp, #88	; 0x58
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7ff ff58 	bl	800ad62 <get_ldnumber>
 800aeb2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	da01      	bge.n	800aebe <find_volume+0x26>
 800aeba:	230b      	movs	r3, #11
 800aebc:	e22e      	b.n	800b31c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aebe:	4aa8      	ldr	r2, [pc, #672]	; (800b160 <find_volume+0x2c8>)
 800aec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <find_volume+0x3a>
 800aece:	230c      	movs	r3, #12
 800aed0:	e224      	b.n	800b31c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	f023 0301 	bic.w	r3, r3, #1
 800aede:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d01a      	beq.n	800af1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fe fd17 	bl	8009920 <disk_status>
 800aef2:	4603      	mov	r3, r0
 800aef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10c      	bne.n	800af1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <find_volume+0x82>
 800af0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af0e:	f003 0304 	and.w	r3, r3, #4
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af16:	230a      	movs	r3, #10
 800af18:	e200      	b.n	800b31c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800af1a:	2300      	movs	r3, #0
 800af1c:	e1fe      	b.n	800b31c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af26:	b2da      	uxtb	r2, r3
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe fd0f 	bl	8009954 <disk_initialize>
 800af36:	4603      	mov	r3, r0
 800af38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af48:	2303      	movs	r3, #3
 800af4a:	e1e7      	b.n	800b31c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d007      	beq.n	800af62 <find_volume+0xca>
 800af52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af56:	f003 0304 	and.w	r3, r3, #4
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af5e:	230a      	movs	r3, #10
 800af60:	e1dc      	b.n	800b31c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af6a:	f7ff ff3f 	bl	800adec <check_fs>
 800af6e:	4603      	mov	r3, r0
 800af70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d14b      	bne.n	800b014 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af7c:	2300      	movs	r3, #0
 800af7e:	643b      	str	r3, [r7, #64]	; 0x40
 800af80:	e01f      	b.n	800afc2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af8a:	011b      	lsls	r3, r3, #4
 800af8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af90:	4413      	add	r3, r2
 800af92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	3304      	adds	r3, #4
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <find_volume+0x114>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	3308      	adds	r3, #8
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe fd72 	bl	8009a8c <ld_dword>
 800afa8:	4602      	mov	r2, r0
 800afaa:	e000      	b.n	800afae <find_volume+0x116>
 800afac:	2200      	movs	r2, #0
 800afae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800afb6:	440b      	add	r3, r1
 800afb8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbe:	3301      	adds	r3, #1
 800afc0:	643b      	str	r3, [r7, #64]	; 0x40
 800afc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d9dc      	bls.n	800af82 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800afc8:	2300      	movs	r3, #0
 800afca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800afcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <find_volume+0x140>
 800afd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd4:	3b01      	subs	r3, #1
 800afd6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800afd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800afe0:	4413      	add	r3, r2
 800afe2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800afe6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800afe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afea:	2b00      	cmp	r3, #0
 800afec:	d005      	beq.n	800affa <find_volume+0x162>
 800afee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aff2:	f7ff fefb 	bl	800adec <check_fs>
 800aff6:	4603      	mov	r3, r0
 800aff8:	e000      	b.n	800affc <find_volume+0x164>
 800affa:	2303      	movs	r3, #3
 800affc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b004:	2b01      	cmp	r3, #1
 800b006:	d905      	bls.n	800b014 <find_volume+0x17c>
 800b008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b00a:	3301      	adds	r3, #1
 800b00c:	643b      	str	r3, [r7, #64]	; 0x40
 800b00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b010:	2b03      	cmp	r3, #3
 800b012:	d9e1      	bls.n	800afd8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b018:	2b04      	cmp	r3, #4
 800b01a:	d101      	bne.n	800b020 <find_volume+0x188>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e17d      	b.n	800b31c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b024:	2b01      	cmp	r3, #1
 800b026:	d901      	bls.n	800b02c <find_volume+0x194>
 800b028:	230d      	movs	r3, #13
 800b02a:	e177      	b.n	800b31c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	3330      	adds	r3, #48	; 0x30
 800b030:	330b      	adds	r3, #11
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fd12 	bl	8009a5c <ld_word>
 800b038:	4603      	mov	r3, r0
 800b03a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b03e:	d001      	beq.n	800b044 <find_volume+0x1ac>
 800b040:	230d      	movs	r3, #13
 800b042:	e16b      	b.n	800b31c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	3330      	adds	r3, #48	; 0x30
 800b048:	3316      	adds	r3, #22
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe fd06 	bl	8009a5c <ld_word>
 800b050:	4603      	mov	r3, r0
 800b052:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d106      	bne.n	800b068 <find_volume+0x1d0>
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	3330      	adds	r3, #48	; 0x30
 800b05e:	3324      	adds	r3, #36	; 0x24
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe fd13 	bl	8009a8c <ld_dword>
 800b066:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b06c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	789b      	ldrb	r3, [r3, #2]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d005      	beq.n	800b08c <find_volume+0x1f4>
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	789b      	ldrb	r3, [r3, #2]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d001      	beq.n	800b08c <find_volume+0x1f4>
 800b088:	230d      	movs	r3, #13
 800b08a:	e147      	b.n	800b31c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	789b      	ldrb	r3, [r3, #2]
 800b090:	461a      	mov	r2, r3
 800b092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b094:	fb02 f303 	mul.w	r3, r2, r3
 800b098:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	895b      	ldrh	r3, [r3, #10]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <find_volume+0x228>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b0:	895b      	ldrh	r3, [r3, #10]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	895b      	ldrh	r3, [r3, #10]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <find_volume+0x22c>
 800b0c0:	230d      	movs	r3, #13
 800b0c2:	e12b      	b.n	800b31c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	3330      	adds	r3, #48	; 0x30
 800b0c8:	3311      	adds	r3, #17
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe fcc6 	bl	8009a5c <ld_word>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	891b      	ldrh	r3, [r3, #8]
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <find_volume+0x252>
 800b0e6:	230d      	movs	r3, #13
 800b0e8:	e118      	b.n	800b31c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	3330      	adds	r3, #48	; 0x30
 800b0ee:	3313      	adds	r3, #19
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe fcb3 	bl	8009a5c <ld_word>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <find_volume+0x276>
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	3330      	adds	r3, #48	; 0x30
 800b104:	3320      	adds	r3, #32
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe fcc0 	bl	8009a8c <ld_dword>
 800b10c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	3330      	adds	r3, #48	; 0x30
 800b112:	330e      	adds	r3, #14
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fca1 	bl	8009a5c <ld_word>
 800b11a:	4603      	mov	r3, r0
 800b11c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b11e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <find_volume+0x290>
 800b124:	230d      	movs	r3, #13
 800b126:	e0f9      	b.n	800b31c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b128:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	4413      	add	r3, r2
 800b12e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b130:	8912      	ldrh	r2, [r2, #8]
 800b132:	0912      	lsrs	r2, r2, #4
 800b134:	b292      	uxth	r2, r2
 800b136:	4413      	add	r3, r2
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b13a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	429a      	cmp	r2, r3
 800b140:	d201      	bcs.n	800b146 <find_volume+0x2ae>
 800b142:	230d      	movs	r3, #13
 800b144:	e0ea      	b.n	800b31c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b14e:	8952      	ldrh	r2, [r2, #10]
 800b150:	fbb3 f3f2 	udiv	r3, r3, r2
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d103      	bne.n	800b164 <find_volume+0x2cc>
 800b15c:	230d      	movs	r3, #13
 800b15e:	e0dd      	b.n	800b31c <find_volume+0x484>
 800b160:	2400015c 	.word	0x2400015c
		fmt = FS_FAT32;
 800b164:	2303      	movs	r3, #3
 800b166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b170:	4293      	cmp	r3, r2
 800b172:	d802      	bhi.n	800b17a <find_volume+0x2e2>
 800b174:	2302      	movs	r3, #2
 800b176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b180:	4293      	cmp	r3, r2
 800b182:	d802      	bhi.n	800b18a <find_volume+0x2f2>
 800b184:	2301      	movs	r3, #1
 800b186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	1c9a      	adds	r2, r3, #2
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b196:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b198:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19c:	441a      	add	r2, r3
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b1a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	441a      	add	r2, r3
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d11e      	bne.n	800b1f2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	3330      	adds	r3, #48	; 0x30
 800b1b8:	332a      	adds	r3, #42	; 0x2a
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe fc4e 	bl	8009a5c <ld_word>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <find_volume+0x332>
 800b1c6:	230d      	movs	r3, #13
 800b1c8:	e0a8      	b.n	800b31c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	891b      	ldrh	r3, [r3, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <find_volume+0x33e>
 800b1d2:	230d      	movs	r3, #13
 800b1d4:	e0a2      	b.n	800b31c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	3330      	adds	r3, #48	; 0x30
 800b1da:	332c      	adds	r3, #44	; 0x2c
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe fc55 	bl	8009a8c <ld_dword>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f0:	e01f      	b.n	800b232 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	891b      	ldrh	r3, [r3, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <find_volume+0x366>
 800b1fa:	230d      	movs	r3, #13
 800b1fc:	e08e      	b.n	800b31c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	6a1a      	ldr	r2, [r3, #32]
 800b202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b204:	441a      	add	r2, r3
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b20a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d103      	bne.n	800b21a <find_volume+0x382>
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	e00a      	b.n	800b230 <find_volume+0x398>
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	695a      	ldr	r2, [r3, #20]
 800b21e:	4613      	mov	r3, r2
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	4413      	add	r3, r2
 800b224:	085a      	lsrs	r2, r3, #1
 800b226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b230:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b238:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b23c:	0a5b      	lsrs	r3, r3, #9
 800b23e:	429a      	cmp	r2, r3
 800b240:	d201      	bcs.n	800b246 <find_volume+0x3ae>
 800b242:	230d      	movs	r3, #13
 800b244:	e06a      	b.n	800b31c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b248:	f04f 32ff 	mov.w	r2, #4294967295
 800b24c:	611a      	str	r2, [r3, #16]
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	691a      	ldr	r2, [r3, #16]
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	2280      	movs	r2, #128	; 0x80
 800b25a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b25c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b260:	2b03      	cmp	r3, #3
 800b262:	d149      	bne.n	800b2f8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	3330      	adds	r3, #48	; 0x30
 800b268:	3330      	adds	r3, #48	; 0x30
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fbf6 	bl	8009a5c <ld_word>
 800b270:	4603      	mov	r3, r0
 800b272:	2b01      	cmp	r3, #1
 800b274:	d140      	bne.n	800b2f8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b278:	3301      	adds	r3, #1
 800b27a:	4619      	mov	r1, r3
 800b27c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b27e:	f7fe fe9d 	bl	8009fbc <move_window>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d137      	bne.n	800b2f8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	2200      	movs	r2, #0
 800b28c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	3330      	adds	r3, #48	; 0x30
 800b292:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe fbe0 	bl	8009a5c <ld_word>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d127      	bne.n	800b2f8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	3330      	adds	r3, #48	; 0x30
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe fbed 	bl	8009a8c <ld_dword>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4a1b      	ldr	r2, [pc, #108]	; (800b324 <find_volume+0x48c>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d11e      	bne.n	800b2f8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2bc:	3330      	adds	r3, #48	; 0x30
 800b2be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fbe2 	bl	8009a8c <ld_dword>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <find_volume+0x490>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d113      	bne.n	800b2f8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	3330      	adds	r3, #48	; 0x30
 800b2d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fbd7 	bl	8009a8c <ld_dword>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	3330      	adds	r3, #48	; 0x30
 800b2e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe fbcd 	bl	8009a8c <ld_dword>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b2fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <find_volume+0x494>)
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	3301      	adds	r3, #1
 800b306:	b29a      	uxth	r2, r3
 800b308:	4b08      	ldr	r3, [pc, #32]	; (800b32c <find_volume+0x494>)
 800b30a:	801a      	strh	r2, [r3, #0]
 800b30c:	4b07      	ldr	r3, [pc, #28]	; (800b32c <find_volume+0x494>)
 800b30e:	881a      	ldrh	r2, [r3, #0]
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b314:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b316:	f7fe fde9 	bl	8009eec <clear_lock>
#endif
	return FR_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3758      	adds	r7, #88	; 0x58
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	41615252 	.word	0x41615252
 800b328:	61417272 	.word	0x61417272
 800b32c:	24000160 	.word	0x24000160

0800b330 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b33a:	2309      	movs	r3, #9
 800b33c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d01c      	beq.n	800b37e <validate+0x4e>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d018      	beq.n	800b37e <validate+0x4e>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d013      	beq.n	800b37e <validate+0x4e>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	889a      	ldrh	r2, [r3, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	88db      	ldrh	r3, [r3, #6]
 800b360:	429a      	cmp	r2, r3
 800b362:	d10c      	bne.n	800b37e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fad8 	bl	8009920 <disk_status>
 800b370:	4603      	mov	r3, r0
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <validate+0x4e>
			res = FR_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <validate+0x5a>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	e000      	b.n	800b38c <validate+0x5c>
 800b38a:	2300      	movs	r3, #0
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	6013      	str	r3, [r2, #0]
	return res;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b3ae:	f107 0310 	add.w	r3, r7, #16
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff fcd5 	bl	800ad62 <get_ldnumber>
 800b3b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da01      	bge.n	800b3c4 <f_mount+0x28>
 800b3c0:	230b      	movs	r3, #11
 800b3c2:	e02b      	b.n	800b41c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b3c4:	4a17      	ldr	r2, [pc, #92]	; (800b424 <f_mount+0x88>)
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3d4:	69b8      	ldr	r0, [r7, #24]
 800b3d6:	f7fe fd89 	bl	8009eec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	490d      	ldr	r1, [pc, #52]	; (800b424 <f_mount+0x88>)
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <f_mount+0x66>
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d001      	beq.n	800b406 <f_mount+0x6a>
 800b402:	2300      	movs	r3, #0
 800b404:	e00a      	b.n	800b41c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b406:	f107 010c 	add.w	r1, r7, #12
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	2200      	movs	r2, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fd41 	bl	800ae98 <find_volume>
 800b416:	4603      	mov	r3, r0
 800b418:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3720      	adds	r7, #32
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	2400015c 	.word	0x2400015c

0800b428 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b098      	sub	sp, #96	; 0x60
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	4613      	mov	r3, r2
 800b434:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <f_open+0x18>
 800b43c:	2309      	movs	r3, #9
 800b43e:	e1ad      	b.n	800b79c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b446:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b448:	79fa      	ldrb	r2, [r7, #7]
 800b44a:	f107 0110 	add.w	r1, r7, #16
 800b44e:	f107 0308 	add.w	r3, r7, #8
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff fd20 	bl	800ae98 <find_volume>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b462:	2b00      	cmp	r3, #0
 800b464:	f040 8191 	bne.w	800b78a <f_open+0x362>
		dj.obj.fs = fs;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	f107 0314 	add.w	r3, r7, #20
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fc03 	bl	800ac80 <follow_path>
 800b47a:	4603      	mov	r3, r0
 800b47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11a      	bne.n	800b4be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b488:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b48c:	b25b      	sxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	da03      	bge.n	800b49a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b492:	2306      	movs	r3, #6
 800b494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b498:	e011      	b.n	800b4be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	f023 0301 	bic.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bf14      	ite	ne
 800b4a4:	2301      	movne	r3, #1
 800b4a6:	2300      	moveq	r3, #0
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f107 0314 	add.w	r3, r7, #20
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fbd2 	bl	8009c5c <chk_lock>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	f003 031c 	and.w	r3, r3, #28
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d07f      	beq.n	800b5c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d017      	beq.n	800b500 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d10e      	bne.n	800b4f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4d8:	f7fe fc1c 	bl	8009d14 <enq_lock>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d006      	beq.n	800b4f0 <f_open+0xc8>
 800b4e2:	f107 0314 	add.w	r3, r7, #20
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff fb03 	bl	800aaf2 <dir_register>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	e000      	b.n	800b4f2 <f_open+0xca>
 800b4f0:	2312      	movs	r3, #18
 800b4f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	f043 0308 	orr.w	r3, r3, #8
 800b4fc:	71fb      	strb	r3, [r7, #7]
 800b4fe:	e010      	b.n	800b522 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b500:	7ebb      	ldrb	r3, [r7, #26]
 800b502:	f003 0311 	and.w	r3, r3, #17
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <f_open+0xea>
					res = FR_DENIED;
 800b50a:	2307      	movs	r3, #7
 800b50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b510:	e007      	b.n	800b522 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <f_open+0xfa>
 800b51c:	2308      	movs	r3, #8
 800b51e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b526:	2b00      	cmp	r3, #0
 800b528:	d168      	bne.n	800b5fc <f_open+0x1d4>
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	f003 0308 	and.w	r3, r3, #8
 800b530:	2b00      	cmp	r3, #0
 800b532:	d063      	beq.n	800b5fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800b534:	f7fe f83e 	bl	80095b4 <get_fattime>
 800b538:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53c:	330e      	adds	r3, #14
 800b53e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fae1 	bl	8009b08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b548:	3316      	adds	r3, #22
 800b54a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe fadb 	bl	8009b08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b554:	330b      	adds	r3, #11
 800b556:	2220      	movs	r2, #32
 800b558:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b55e:	4611      	mov	r1, r2
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fa32 	bl	800a9ca <ld_clust>
 800b566:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b56c:	2200      	movs	r2, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff fa4a 	bl	800aa08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	331c      	adds	r3, #28
 800b578:	2100      	movs	r1, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fac4 	bl	8009b08 <st_dword>
					fs->wflag = 1;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	2201      	movs	r2, #1
 800b584:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d037      	beq.n	800b5fc <f_open+0x1d4>
						dw = fs->winsect;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	2200      	movs	r2, #0
 800b598:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe ff5d 	bl	800a45a <remove_chain>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d126      	bne.n	800b5fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fd02 	bl	8009fbc <move_window>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5c2:	3a01      	subs	r2, #1
 800b5c4:	60da      	str	r2, [r3, #12]
 800b5c6:	e019      	b.n	800b5fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d115      	bne.n	800b5fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5d0:	7ebb      	ldrb	r3, [r7, #26]
 800b5d2:	f003 0310 	and.w	r3, r3, #16
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5da:	2304      	movs	r3, #4
 800b5dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5e0:	e00c      	b.n	800b5fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	f003 0302 	and.w	r3, r3, #2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d007      	beq.n	800b5fc <f_open+0x1d4>
 800b5ec:	7ebb      	ldrb	r3, [r7, #26]
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <f_open+0x1d4>
						res = FR_DENIED;
 800b5f6:	2307      	movs	r3, #7
 800b5f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b600:	2b00      	cmp	r3, #0
 800b602:	d128      	bne.n	800b656 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	f003 0308 	and.w	r3, r3, #8
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b614:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b61e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	f023 0301 	bic.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bf14      	ite	ne
 800b62e:	2301      	movne	r3, #1
 800b630:	2300      	moveq	r3, #0
 800b632:	b2db      	uxtb	r3, r3
 800b634:	461a      	mov	r2, r3
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	4611      	mov	r1, r2
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe fb8b 	bl	8009d58 <inc_lock>
 800b642:	4602      	mov	r2, r0
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <f_open+0x22e>
 800b650:	2302      	movs	r3, #2
 800b652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f040 8095 	bne.w	800b78a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff f9af 	bl	800a9ca <ld_clust>
 800b66c:	4602      	mov	r2, r0
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b674:	331c      	adds	r3, #28
 800b676:	4618      	mov	r0, r3
 800b678:	f7fe fa08 	bl	8009a8c <ld_dword>
 800b67c:	4602      	mov	r2, r0
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	88da      	ldrh	r2, [r3, #6]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	79fa      	ldrb	r2, [r7, #7]
 800b69a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3330      	adds	r3, #48	; 0x30
 800b6b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe fa72 	bl	8009ba2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d060      	beq.n	800b78a <f_open+0x362>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d05c      	beq.n	800b78a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	895b      	ldrh	r3, [r3, #10]
 800b6dc:	025b      	lsls	r3, r3, #9
 800b6de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b6ec:	e016      	b.n	800b71c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fe fd1d 	bl	800a132 <get_fat>
 800b6f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d802      	bhi.n	800b706 <f_open+0x2de>
 800b700:	2302      	movs	r3, #2
 800b702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70c:	d102      	bne.n	800b714 <f_open+0x2ec>
 800b70e:	2301      	movs	r3, #1
 800b710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	657b      	str	r3, [r7, #84]	; 0x54
 800b71c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b720:	2b00      	cmp	r3, #0
 800b722:	d103      	bne.n	800b72c <f_open+0x304>
 800b724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b728:	429a      	cmp	r2, r3
 800b72a:	d8e0      	bhi.n	800b6ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b730:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b736:	2b00      	cmp	r3, #0
 800b738:	d127      	bne.n	800b78a <f_open+0x362>
 800b73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b740:	2b00      	cmp	r3, #0
 800b742:	d022      	beq.n	800b78a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe fcd3 	bl	800a0f4 <clust2sect>
 800b74e:	6478      	str	r0, [r7, #68]	; 0x44
 800b750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b752:	2b00      	cmp	r3, #0
 800b754:	d103      	bne.n	800b75e <f_open+0x336>
						res = FR_INT_ERR;
 800b756:	2302      	movs	r3, #2
 800b758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b75c:	e015      	b.n	800b78a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b75e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b760:	0a5a      	lsrs	r2, r3, #9
 800b762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	7858      	ldrb	r0, [r3, #1]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a1a      	ldr	r2, [r3, #32]
 800b778:	2301      	movs	r3, #1
 800b77a:	f7fe f911 	bl	80099a0 <disk_read>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <f_open+0x362>
 800b784:	2301      	movs	r3, #1
 800b786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b78a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <f_open+0x370>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3760      	adds	r7, #96	; 0x60
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08c      	sub	sp, #48	; 0x30
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
 800b7b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f107 0210 	add.w	r2, r7, #16
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff fdb3 	bl	800b330 <validate>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d107      	bne.n	800b7e8 <f_write+0x44>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	7d5b      	ldrb	r3, [r3, #21]
 800b7dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <f_write+0x4a>
 800b7e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7ec:	e14b      	b.n	800ba86 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	7d1b      	ldrb	r3, [r3, #20]
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <f_write+0x5a>
 800b7fa:	2307      	movs	r3, #7
 800b7fc:	e143      	b.n	800ba86 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	699a      	ldr	r2, [r3, #24]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	441a      	add	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	f080 812d 	bcs.w	800ba6a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	43db      	mvns	r3, r3
 800b816:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b818:	e127      	b.n	800ba6a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b822:	2b00      	cmp	r3, #0
 800b824:	f040 80e3 	bne.w	800b9ee <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	0a5b      	lsrs	r3, r3, #9
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	8952      	ldrh	r2, [r2, #10]
 800b832:	3a01      	subs	r2, #1
 800b834:	4013      	ands	r3, r2
 800b836:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d143      	bne.n	800b8c6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10c      	bne.n	800b860 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d11a      	bne.n	800b888 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2100      	movs	r1, #0
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fe64 	bl	800a524 <create_chain>
 800b85c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b85e:	e013      	b.n	800b888 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	4619      	mov	r1, r3
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7fe fef0 	bl	800a654 <clmt_clust>
 800b874:	62b8      	str	r0, [r7, #40]	; 0x28
 800b876:	e007      	b.n	800b888 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	4619      	mov	r1, r3
 800b880:	4610      	mov	r0, r2
 800b882:	f7fe fe4f 	bl	800a524 <create_chain>
 800b886:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 80f2 	beq.w	800ba74 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	2b01      	cmp	r3, #1
 800b894:	d104      	bne.n	800b8a0 <f_write+0xfc>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2202      	movs	r2, #2
 800b89a:	755a      	strb	r2, [r3, #21]
 800b89c:	2302      	movs	r3, #2
 800b89e:	e0f2      	b.n	800ba86 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d104      	bne.n	800b8b2 <f_write+0x10e>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	755a      	strb	r2, [r3, #21]
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e0e9      	b.n	800ba86 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d102      	bne.n	800b8c6 <f_write+0x122>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ca:	b25b      	sxtb	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	da18      	bge.n	800b902 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	7858      	ldrb	r0, [r3, #1]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a1a      	ldr	r2, [r3, #32]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	f7fe f87e 	bl	80099e0 <disk_write>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <f_write+0x150>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	755a      	strb	r2, [r3, #21]
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e0c8      	b.n	800ba86 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	7d1b      	ldrb	r3, [r3, #20]
 800b8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f7fe fbf2 	bl	800a0f4 <clust2sect>
 800b910:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d104      	bne.n	800b922 <f_write+0x17e>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2202      	movs	r2, #2
 800b91c:	755a      	strb	r2, [r3, #21]
 800b91e:	2302      	movs	r3, #2
 800b920:	e0b1      	b.n	800ba86 <f_write+0x2e2>
			sect += csect;
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	4413      	add	r3, r2
 800b928:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0a5b      	lsrs	r3, r3, #9
 800b92e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d03c      	beq.n	800b9b0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	6a3b      	ldr	r3, [r7, #32]
 800b93a:	4413      	add	r3, r2
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	8952      	ldrh	r2, [r2, #10]
 800b940:	4293      	cmp	r3, r2
 800b942:	d905      	bls.n	800b950 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	895b      	ldrh	r3, [r3, #10]
 800b948:	461a      	mov	r2, r3
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	7858      	ldrb	r0, [r3, #1]
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	69f9      	ldr	r1, [r7, #28]
 800b95a:	f7fe f841 	bl	80099e0 <disk_write>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d004      	beq.n	800b96e <f_write+0x1ca>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	755a      	strb	r2, [r3, #21]
 800b96a:	2301      	movs	r3, #1
 800b96c:	e08b      	b.n	800ba86 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6a1a      	ldr	r2, [r3, #32]
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	6a3a      	ldr	r2, [r7, #32]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d915      	bls.n	800b9a8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6a1a      	ldr	r2, [r3, #32]
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	025b      	lsls	r3, r3, #9
 800b98c:	69fa      	ldr	r2, [r7, #28]
 800b98e:	4413      	add	r3, r2
 800b990:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b994:	4619      	mov	r1, r3
 800b996:	f7fe f8e3 	bl	8009b60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	7d1b      	ldrb	r3, [r3, #20]
 800b99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	025b      	lsls	r3, r3, #9
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b9ae:	e03f      	b.n	800ba30 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d016      	beq.n	800b9e8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d210      	bcs.n	800b9e8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	7858      	ldrb	r0, [r3, #1]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	f7fd ffe4 	bl	80099a0 <disk_read>
 800b9d8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d004      	beq.n	800b9e8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	755a      	strb	r2, [r3, #21]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e04e      	b.n	800ba86 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b9fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d901      	bls.n	800ba08 <f_write+0x264>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	4413      	add	r3, r2
 800ba18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1a:	69f9      	ldr	r1, [r7, #28]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe f89f 	bl	8009b60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	7d1b      	ldrb	r3, [r3, #20]
 800ba26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba30:	69fa      	ldr	r2, [r7, #28]
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	4413      	add	r3, r2
 800ba36:	61fb      	str	r3, [r7, #28]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	699a      	ldr	r2, [r3, #24]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	441a      	add	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	619a      	str	r2, [r3, #24]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	68da      	ldr	r2, [r3, #12]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	bf38      	it	cc
 800ba50:	461a      	movcc	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	60da      	str	r2, [r3, #12]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	441a      	add	r2, r3
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f47f aed4 	bne.w	800b81a <f_write+0x76>
 800ba72:	e000      	b.n	800ba76 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba74:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	7d1b      	ldrb	r3, [r3, #20]
 800ba7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3730      	adds	r7, #48	; 0x30
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b086      	sub	sp, #24
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f107 0208 	add.w	r2, r7, #8
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fc46 	bl	800b330 <validate>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d168      	bne.n	800bb80 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7d1b      	ldrb	r3, [r3, #20]
 800bab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d062      	beq.n	800bb80 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	7d1b      	ldrb	r3, [r3, #20]
 800babe:	b25b      	sxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	da15      	bge.n	800baf0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	7858      	ldrb	r0, [r3, #1]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1a      	ldr	r2, [r3, #32]
 800bad2:	2301      	movs	r3, #1
 800bad4:	f7fd ff84 	bl	80099e0 <disk_write>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <f_sync+0x54>
 800bade:	2301      	movs	r3, #1
 800bae0:	e04f      	b.n	800bb82 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	7d1b      	ldrb	r3, [r3, #20]
 800bae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baea:	b2da      	uxtb	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800baf0:	f7fd fd60 	bl	80095b4 <get_fattime>
 800baf4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafc:	4619      	mov	r1, r3
 800bafe:	4610      	mov	r0, r2
 800bb00:	f7fe fa5c 	bl	8009fbc <move_window>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d138      	bne.n	800bb80 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	330b      	adds	r3, #11
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	330b      	adds	r3, #11
 800bb1e:	f042 0220 	orr.w	r2, r2, #32
 800bb22:	b2d2      	uxtb	r2, r2
 800bb24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	68f9      	ldr	r1, [r7, #12]
 800bb32:	f7fe ff69 	bl	800aa08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f103 021c 	add.w	r2, r3, #28
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	4619      	mov	r1, r3
 800bb42:	4610      	mov	r0, r2
 800bb44:	f7fd ffe0 	bl	8009b08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3316      	adds	r3, #22
 800bb4c:	6939      	ldr	r1, [r7, #16]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fd ffda 	bl	8009b08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3312      	adds	r3, #18
 800bb58:	2100      	movs	r1, #0
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fd ffb9 	bl	8009ad2 <st_word>
					fs->wflag = 1;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2201      	movs	r2, #1
 800bb64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe fa55 	bl	800a018 <sync_fs>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7d1b      	ldrb	r3, [r3, #20]
 800bb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff ff7b 	bl	800ba8e <f_sync>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d118      	bne.n	800bbd4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f107 0208 	add.w	r2, r7, #8
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fbc0 	bl	800b330 <validate>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10c      	bne.n	800bbd4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe f958 	bl	8009e74 <dec_lock>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bbe0:	b590      	push	{r4, r7, lr}
 800bbe2:	b09d      	sub	sp, #116	; 0x74
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	607a      	str	r2, [r7, #4]
 800bbea:	603b      	str	r3, [r7, #0]
 800bbec:	460b      	mov	r3, r1
 800bbee:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bbf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbf8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bbfa:	f107 030c 	add.w	r3, r7, #12
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7ff f8af 	bl	800ad62 <get_ldnumber>
 800bc04:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	da02      	bge.n	800bc12 <f_mkfs+0x32>
 800bc0c:	230b      	movs	r3, #11
 800bc0e:	f000 bc0d 	b.w	800c42c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bc12:	4a94      	ldr	r2, [pc, #592]	; (800be64 <f_mkfs+0x284>)
 800bc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d005      	beq.n	800bc2a <f_mkfs+0x4a>
 800bc1e:	4a91      	ldr	r2, [pc, #580]	; (800be64 <f_mkfs+0x284>)
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bc30:	2300      	movs	r3, #0
 800bc32:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bc36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fd fe8a 	bl	8009954 <disk_initialize>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bc46:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <f_mkfs+0x76>
 800bc52:	2303      	movs	r3, #3
 800bc54:	e3ea      	b.n	800c42c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bc56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc5a:	f003 0304 	and.w	r3, r3, #4
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <f_mkfs+0x86>
 800bc62:	230a      	movs	r3, #10
 800bc64:	e3e2      	b.n	800c42c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bc66:	f107 0214 	add.w	r2, r7, #20
 800bc6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc6e:	2103      	movs	r1, #3
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd fed5 	bl	8009a20 <disk_ioctl>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10c      	bne.n	800bc96 <f_mkfs+0xb6>
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d009      	beq.n	800bc96 <f_mkfs+0xb6>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc88:	d805      	bhi.n	800bc96 <f_mkfs+0xb6>
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	1e5a      	subs	r2, r3, #1
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	4013      	ands	r3, r2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <f_mkfs+0xba>
 800bc96:	2301      	movs	r3, #1
 800bc98:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bc9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc9e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <f_mkfs+0xce>
 800bca6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d309      	bcc.n	800bcc2 <f_mkfs+0xe2>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcb4:	d805      	bhi.n	800bcc2 <f_mkfs+0xe2>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	1e5a      	subs	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <f_mkfs+0xe6>
 800bcc2:	2313      	movs	r3, #19
 800bcc4:	e3b2      	b.n	800c42c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bcc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcce:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bcd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcde:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bce0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	fb02 f303 	mul.w	r3, r2, r3
 800bce8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <f_mkfs+0x114>
 800bcf0:	230e      	movs	r3, #14
 800bcf2:	e39b      	b.n	800c42c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bcf4:	f107 0210 	add.w	r2, r7, #16
 800bcf8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd fe8e 	bl	8009a20 <disk_ioctl>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <f_mkfs+0x12e>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e38e      	b.n	800c42c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <f_mkfs+0x13c>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	e000      	b.n	800bd1e <f_mkfs+0x13e>
 800bd1c:	233f      	movs	r3, #63	; 0x3f
 800bd1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d901      	bls.n	800bd2c <f_mkfs+0x14c>
 800bd28:	230e      	movs	r3, #14
 800bd2a:	e37f      	b.n	800c42c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2b7f      	cmp	r3, #127	; 0x7f
 800bd38:	d801      	bhi.n	800bd3e <f_mkfs+0x15e>
 800bd3a:	230e      	movs	r3, #14
 800bd3c:	e376      	b.n	800c42c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b80      	cmp	r3, #128	; 0x80
 800bd42:	d901      	bls.n	800bd48 <f_mkfs+0x168>
 800bd44:	2313      	movs	r3, #19
 800bd46:	e371      	b.n	800c42c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00d      	beq.n	800bd6e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	f003 0307 	and.w	r3, r3, #7
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d004      	beq.n	800bd66 <f_mkfs+0x186>
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d103      	bne.n	800bd6e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bd66:	2303      	movs	r3, #3
 800bd68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bd6c:	e009      	b.n	800bd82 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <f_mkfs+0x19c>
 800bd78:	2313      	movs	r3, #19
 800bd7a:	e357      	b.n	800c42c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bd86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	d13c      	bne.n	800be08 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d11b      	bne.n	800bdcc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	0c5b      	lsrs	r3, r3, #17
 800bd98:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd9e:	2301      	movs	r3, #1
 800bda0:	653b      	str	r3, [r7, #80]	; 0x50
 800bda2:	e005      	b.n	800bdb0 <f_mkfs+0x1d0>
 800bda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda6:	3301      	adds	r3, #1
 800bda8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	653b      	str	r3, [r7, #80]	; 0x50
 800bdb0:	4a2d      	ldr	r2, [pc, #180]	; (800be68 <f_mkfs+0x288>)
 800bdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <f_mkfs+0x1ec>
 800bdbc:	4a2a      	ldr	r2, [pc, #168]	; (800be68 <f_mkfs+0x288>)
 800bdbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d2eb      	bcs.n	800bda4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	3302      	adds	r3, #2
 800bdda:	009a      	lsls	r2, r3, #2
 800bddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdde:	4413      	add	r3, r2
 800bde0:	1e5a      	subs	r2, r3, #1
 800bde2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bde4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bdea:	2320      	movs	r3, #32
 800bdec:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bdee:	2300      	movs	r3, #0
 800bdf0:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d903      	bls.n	800be04 <f_mkfs+0x224>
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	4a1b      	ldr	r2, [pc, #108]	; (800be6c <f_mkfs+0x28c>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d952      	bls.n	800beaa <f_mkfs+0x2ca>
 800be04:	230e      	movs	r3, #14
 800be06:	e311      	b.n	800c42c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800be08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d11b      	bne.n	800be46 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	0b1b      	lsrs	r3, r3, #12
 800be12:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800be14:	2300      	movs	r3, #0
 800be16:	64bb      	str	r3, [r7, #72]	; 0x48
 800be18:	2301      	movs	r3, #1
 800be1a:	653b      	str	r3, [r7, #80]	; 0x50
 800be1c:	e005      	b.n	800be2a <f_mkfs+0x24a>
 800be1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be20:	3301      	adds	r3, #1
 800be22:	64bb      	str	r3, [r7, #72]	; 0x48
 800be24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	653b      	str	r3, [r7, #80]	; 0x50
 800be2a:	4a11      	ldr	r2, [pc, #68]	; (800be70 <f_mkfs+0x290>)
 800be2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d007      	beq.n	800be46 <f_mkfs+0x266>
 800be36:	4a0e      	ldr	r2, [pc, #56]	; (800be70 <f_mkfs+0x290>)
 800be38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be3e:	461a      	mov	r2, r3
 800be40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be42:	4293      	cmp	r3, r2
 800be44:	d2eb      	bcs.n	800be1e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be4e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be56:	4293      	cmp	r3, r2
 800be58:	d90c      	bls.n	800be74 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	3302      	adds	r3, #2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be62:	e012      	b.n	800be8a <f_mkfs+0x2aa>
 800be64:	2400015c 	.word	0x2400015c
 800be68:	0800d114 	.word	0x0800d114
 800be6c:	0ffffff5 	.word	0x0ffffff5
 800be70:	0800d124 	.word	0x0800d124
				} else {
					fmt = FS_FAT12;
 800be74:	2301      	movs	r3, #1
 800be76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800be7a:	6a3a      	ldr	r2, [r7, #32]
 800be7c:	4613      	mov	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	3301      	adds	r3, #1
 800be84:	085b      	lsrs	r3, r3, #1
 800be86:	3303      	adds	r3, #3
 800be88:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800be8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8e:	4413      	add	r3, r2
 800be90:	1e5a      	subs	r2, r3, #1
 800be92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be94:	fbb2 f3f3 	udiv	r3, r2, r3
 800be98:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800be9a:	2301      	movs	r3, #1
 800be9c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800be9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea0:	015a      	lsls	r2, r3, #5
 800bea2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800beaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beae:	4413      	add	r3, r2
 800beb0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800beb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb6:	fb02 f203 	mul.w	r2, r2, r3
 800beba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bebc:	4413      	add	r3, r2
 800bebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bec0:	4413      	add	r3, r2
 800bec2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	4413      	add	r3, r2
 800beca:	1e5a      	subs	r2, r3, #1
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	425b      	negs	r3, r3
 800bed0:	401a      	ands	r2, r3
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bed8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bedc:	2b03      	cmp	r3, #3
 800bede:	d108      	bne.n	800bef2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800bee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bee4:	4413      	add	r3, r2
 800bee6:	657b      	str	r3, [r7, #84]	; 0x54
 800bee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beec:	4413      	add	r3, r2
 800beee:	65bb      	str	r3, [r7, #88]	; 0x58
 800bef0:	e006      	b.n	800bf00 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800bef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800befa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800befc:	4413      	add	r3, r2
 800befe:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800bf00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf02:	011a      	lsls	r2, r3, #4
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	441a      	add	r2, r3
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	1ad2      	subs	r2, r2, r3
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d901      	bls.n	800bf16 <f_mkfs+0x336>
 800bf12:	230e      	movs	r3, #14
 800bf14:	e28a      	b.n	800c42c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf1a:	1ad2      	subs	r2, r2, r3
 800bf1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf20:	fb01 f303 	mul.w	r3, r1, r3
 800bf24:	1ad2      	subs	r2, r2, r3
 800bf26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf28:	1ad2      	subs	r2, r2, r3
 800bf2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf30:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bf32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d10f      	bne.n	800bf5a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d80a      	bhi.n	800bf5a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d105      	bne.n	800bf56 <f_mkfs+0x376>
 800bf4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	607b      	str	r3, [r7, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d144      	bne.n	800bfe0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800bf56:	230e      	movs	r3, #14
 800bf58:	e268      	b.n	800c42c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bf5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d133      	bne.n	800bfca <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d91e      	bls.n	800bfaa <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d107      	bne.n	800bf82 <f_mkfs+0x3a2>
 800bf72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	2b40      	cmp	r3, #64	; 0x40
 800bf78:	d803      	bhi.n	800bf82 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	e033      	b.n	800bfea <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bf82:	7afb      	ldrb	r3, [r7, #11]
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf92:	e02a      	b.n	800bfea <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <f_mkfs+0x3c6>
 800bf9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	607b      	str	r3, [r7, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b80      	cmp	r3, #128	; 0x80
 800bfa4:	d91e      	bls.n	800bfe4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bfa6:	230e      	movs	r3, #14
 800bfa8:	e240      	b.n	800c42c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d80a      	bhi.n	800bfca <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <f_mkfs+0x3e6>
 800bfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	607b      	str	r3, [r7, #4]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b80      	cmp	r3, #128	; 0x80
 800bfc4:	d910      	bls.n	800bfe8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bfc6:	230e      	movs	r3, #14
 800bfc8:	e230      	b.n	800c42c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bfca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d10c      	bne.n	800bfec <f_mkfs+0x40c>
 800bfd2:	6a3b      	ldr	r3, [r7, #32]
 800bfd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d907      	bls.n	800bfec <f_mkfs+0x40c>
 800bfdc:	230e      	movs	r3, #14
 800bfde:	e225      	b.n	800c42c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bfe0:	bf00      	nop
 800bfe2:	e6ce      	b.n	800bd82 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfe4:	bf00      	nop
 800bfe6:	e6cc      	b.n	800bd82 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfe8:	bf00      	nop
			pau = au;
 800bfea:	e6ca      	b.n	800bd82 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bfec:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bfee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bff0:	461a      	mov	r2, r3
 800bff2:	2100      	movs	r1, #0
 800bff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff6:	f7fd fdd4 	bl	8009ba2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bffa:	220b      	movs	r2, #11
 800bffc:	49bc      	ldr	r1, [pc, #752]	; (800c2f0 <f_mkfs+0x710>)
 800bffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c000:	f7fd fdae 	bl	8009b60 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	330b      	adds	r3, #11
 800c008:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fd fd60 	bl	8009ad2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	330d      	adds	r3, #13
 800c016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c018:	b2d2      	uxtb	r2, r2
 800c01a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	330e      	adds	r3, #14
 800c020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c022:	b292      	uxth	r2, r2
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd fd53 	bl	8009ad2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	3310      	adds	r3, #16
 800c030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	f103 0211 	add.w	r2, r3, #17
 800c03c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c040:	2b03      	cmp	r3, #3
 800c042:	d002      	beq.n	800c04a <f_mkfs+0x46a>
 800c044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c046:	b29b      	uxth	r3, r3
 800c048:	e000      	b.n	800c04c <f_mkfs+0x46c>
 800c04a:	2300      	movs	r3, #0
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f7fd fd3f 	bl	8009ad2 <st_word>
		if (sz_vol < 0x10000) {
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c05a:	d208      	bcs.n	800c06e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	3313      	adds	r3, #19
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	b292      	uxth	r2, r2
 800c064:	4611      	mov	r1, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f7fd fd33 	bl	8009ad2 <st_word>
 800c06c:	e006      	b.n	800c07c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	3320      	adds	r3, #32
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fd fd46 	bl	8009b08 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	3315      	adds	r3, #21
 800c080:	22f8      	movs	r2, #248	; 0xf8
 800c082:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	3318      	adds	r3, #24
 800c088:	213f      	movs	r1, #63	; 0x3f
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fd fd21 	bl	8009ad2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	331a      	adds	r3, #26
 800c094:	21ff      	movs	r1, #255	; 0xff
 800c096:	4618      	mov	r0, r3
 800c098:	f7fd fd1b 	bl	8009ad2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	331c      	adds	r3, #28
 800c0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fd fd30 	bl	8009b08 <st_dword>
		if (fmt == FS_FAT32) {
 800c0a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c0ac:	2b03      	cmp	r3, #3
 800c0ae:	d131      	bne.n	800c114 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c0b6:	f7fd fa7d 	bl	80095b4 <get_fattime>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f7fd fd22 	bl	8009b08 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	3324      	adds	r3, #36	; 0x24
 800c0c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fd fd1c 	bl	8009b08 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d2:	332c      	adds	r3, #44	; 0x2c
 800c0d4:	2102      	movs	r1, #2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fd16 	bl	8009b08 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	3330      	adds	r3, #48	; 0x30
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fd fcf5 	bl	8009ad2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	3332      	adds	r3, #50	; 0x32
 800c0ec:	2106      	movs	r1, #6
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fd fcef 	bl	8009ad2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	3340      	adds	r3, #64	; 0x40
 800c0f8:	2280      	movs	r2, #128	; 0x80
 800c0fa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	3342      	adds	r3, #66	; 0x42
 800c100:	2229      	movs	r2, #41	; 0x29
 800c102:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	3347      	adds	r3, #71	; 0x47
 800c108:	2213      	movs	r2, #19
 800c10a:	497a      	ldr	r1, [pc, #488]	; (800c2f4 <f_mkfs+0x714>)
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fd fd27 	bl	8009b60 <mem_cpy>
 800c112:	e020      	b.n	800c156 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c11a:	f7fd fa4b 	bl	80095b4 <get_fattime>
 800c11e:	4603      	mov	r3, r0
 800c120:	4619      	mov	r1, r3
 800c122:	4620      	mov	r0, r4
 800c124:	f7fd fcf0 	bl	8009b08 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	3316      	adds	r3, #22
 800c12c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c12e:	b292      	uxth	r2, r2
 800c130:	4611      	mov	r1, r2
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd fccd 	bl	8009ad2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13a:	3324      	adds	r3, #36	; 0x24
 800c13c:	2280      	movs	r2, #128	; 0x80
 800c13e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	3326      	adds	r3, #38	; 0x26
 800c144:	2229      	movs	r2, #41	; 0x29
 800c146:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	332b      	adds	r3, #43	; 0x2b
 800c14c:	2213      	movs	r2, #19
 800c14e:	496a      	ldr	r1, [pc, #424]	; (800c2f8 <f_mkfs+0x718>)
 800c150:	4618      	mov	r0, r3
 800c152:	f7fd fd05 	bl	8009b60 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c15c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c160:	4618      	mov	r0, r3
 800c162:	f7fd fcb6 	bl	8009ad2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c166:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c16a:	2301      	movs	r3, #1
 800c16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c170:	f7fd fc36 	bl	80099e0 <disk_write>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <f_mkfs+0x59e>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e156      	b.n	800c42c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c17e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c182:	2b03      	cmp	r3, #3
 800c184:	d140      	bne.n	800c208 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	1d9a      	adds	r2, r3, #6
 800c18a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c18e:	2301      	movs	r3, #1
 800c190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c192:	f7fd fc25 	bl	80099e0 <disk_write>
			mem_set(buf, 0, ss);
 800c196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c198:	461a      	mov	r2, r3
 800c19a:	2100      	movs	r1, #0
 800c19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c19e:	f7fd fd00 	bl	8009ba2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c1a2:	4956      	ldr	r1, [pc, #344]	; (800c2fc <f_mkfs+0x71c>)
 800c1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1a6:	f7fd fcaf 	bl	8009b08 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1b0:	4953      	ldr	r1, [pc, #332]	; (800c300 <f_mkfs+0x720>)
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fd fca8 	bl	8009b08 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	f7fd fc9f 	bl	8009b08 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd fc98 	bl	8009b08 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1de:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fd fc75 	bl	8009ad2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	1dda      	adds	r2, r3, #7
 800c1ec:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1f4:	f7fd fbf4 	bl	80099e0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c200:	2301      	movs	r3, #1
 800c202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c204:	f7fd fbec 	bl	80099e0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20a:	2100      	movs	r1, #0
 800c20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c20e:	f7fd fcc8 	bl	8009ba2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c214:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c216:	2300      	movs	r3, #0
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48
 800c21a:	e04b      	b.n	800c2b4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c21c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c220:	2b03      	cmp	r3, #3
 800c222:	d113      	bne.n	800c24c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c224:	f06f 0107 	mvn.w	r1, #7
 800c228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c22a:	f7fd fc6d 	bl	8009b08 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	3304      	adds	r3, #4
 800c232:	f04f 31ff 	mov.w	r1, #4294967295
 800c236:	4618      	mov	r0, r3
 800c238:	f7fd fc66 	bl	8009b08 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	3308      	adds	r3, #8
 800c240:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c244:	4618      	mov	r0, r3
 800c246:	f7fd fc5f 	bl	8009b08 <st_dword>
 800c24a:	e00b      	b.n	800c264 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c24c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c250:	2b01      	cmp	r3, #1
 800c252:	d101      	bne.n	800c258 <f_mkfs+0x678>
 800c254:	4b2b      	ldr	r3, [pc, #172]	; (800c304 <f_mkfs+0x724>)
 800c256:	e001      	b.n	800c25c <f_mkfs+0x67c>
 800c258:	f06f 0307 	mvn.w	r3, #7
 800c25c:	4619      	mov	r1, r3
 800c25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c260:	f7fd fc52 	bl	8009b08 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c266:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	4293      	cmp	r3, r2
 800c26e:	bf28      	it	cs
 800c270:	4613      	movcs	r3, r2
 800c272:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c274:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c27a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c27c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c27e:	f7fd fbaf 	bl	80099e0 <disk_write>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <f_mkfs+0x6ac>
 800c288:	2301      	movs	r3, #1
 800c28a:	e0cf      	b.n	800c42c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c28c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c28e:	461a      	mov	r2, r3
 800c290:	2100      	movs	r1, #0
 800c292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c294:	f7fd fc85 	bl	8009ba2 <mem_set>
				sect += n; nsect -= n;
 800c298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c29c:	4413      	add	r3, r2
 800c29e:	667b      	str	r3, [r7, #100]	; 0x64
 800c2a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c2a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1dc      	bne.n	800c268 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c2ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d3af      	bcc.n	800c21c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c2bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d101      	bne.n	800c2c8 <f_mkfs+0x6e8>
 800c2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c6:	e000      	b.n	800c2ca <f_mkfs+0x6ea>
 800c2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ca:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c2cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	bf28      	it	cs
 800c2d4:	4613      	movcs	r3, r2
 800c2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c2d8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2e2:	f7fd fb7d 	bl	80099e0 <disk_write>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00d      	beq.n	800c308 <f_mkfs+0x728>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e09d      	b.n	800c42c <f_mkfs+0x84c>
 800c2f0:	0800d014 	.word	0x0800d014
 800c2f4:	0800d020 	.word	0x0800d020
 800c2f8:	0800d034 	.word	0x0800d034
 800c2fc:	41615252 	.word	0x41615252
 800c300:	61417272 	.word	0x61417272
 800c304:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c308:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30c:	4413      	add	r3, r2
 800c30e:	667b      	str	r3, [r7, #100]	; 0x64
 800c310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1d6      	bne.n	800c2cc <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c31e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c322:	2b03      	cmp	r3, #3
 800c324:	d103      	bne.n	800c32e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c326:	230c      	movs	r3, #12
 800c328:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c32c:	e010      	b.n	800c350 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c334:	d303      	bcc.n	800c33e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c336:	2306      	movs	r3, #6
 800c338:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c33c:	e008      	b.n	800c350 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c33e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c342:	2b02      	cmp	r3, #2
 800c344:	d101      	bne.n	800c34a <f_mkfs+0x76a>
 800c346:	2304      	movs	r3, #4
 800c348:	e000      	b.n	800c34c <f_mkfs+0x76c>
 800c34a:	2301      	movs	r3, #1
 800c34c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	f003 0308 	and.w	r3, r3, #8
 800c356:	2b00      	cmp	r3, #0
 800c358:	d15b      	bne.n	800c412 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c35a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c35c:	461a      	mov	r2, r3
 800c35e:	2100      	movs	r1, #0
 800c360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c362:	f7fd fc1e 	bl	8009ba2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c36c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c370:	4618      	mov	r0, r3
 800c372:	f7fd fbae 	bl	8009ad2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c37c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	2200      	movs	r2, #0
 800c382:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	3301      	adds	r3, #1
 800c388:	2201      	movs	r2, #1
 800c38a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	3302      	adds	r3, #2
 800c390:	2201      	movs	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	3303      	adds	r3, #3
 800c398:	2200      	movs	r2, #0
 800c39a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c3a4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	441a      	add	r2, r3
 800c3ac:	4b21      	ldr	r3, [pc, #132]	; (800c434 <f_mkfs+0x854>)
 800c3ae:	fba3 1302 	umull	r1, r3, r3, r2
 800c3b2:	1ad2      	subs	r2, r2, r3
 800c3b4:	0852      	lsrs	r2, r2, #1
 800c3b6:	4413      	add	r3, r2
 800c3b8:	0b5b      	lsrs	r3, r3, #13
 800c3ba:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	3305      	adds	r3, #5
 800c3c0:	22fe      	movs	r2, #254	; 0xfe
 800c3c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c3c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3c6:	089b      	lsrs	r3, r3, #2
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	3306      	adds	r3, #6
 800c3ce:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	3307      	adds	r3, #7
 800c3da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fd fb8e 	bl	8009b08 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fd fb87 	bl	8009b08 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c3fa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3fe:	2301      	movs	r3, #1
 800c400:	2200      	movs	r2, #0
 800c402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c404:	f7fd faec 	bl	80099e0 <disk_write>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <f_mkfs+0x832>
 800c40e:	2301      	movs	r3, #1
 800c410:	e00c      	b.n	800c42c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c412:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c416:	2200      	movs	r2, #0
 800c418:	2100      	movs	r1, #0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fd fb00 	bl	8009a20 <disk_ioctl>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <f_mkfs+0x84a>
 800c426:	2301      	movs	r3, #1
 800c428:	e000      	b.n	800c42c <f_mkfs+0x84c>

	return FR_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3774      	adds	r7, #116	; 0x74
 800c430:	46bd      	mov	sp, r7
 800c432:	bd90      	pop	{r4, r7, pc}
 800c434:	0515565b 	.word	0x0515565b

0800c438 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	4613      	mov	r3, r2
 800c444:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c446:	2301      	movs	r3, #1
 800c448:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c44e:	4b1f      	ldr	r3, [pc, #124]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c450:	7a5b      	ldrb	r3, [r3, #9]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b00      	cmp	r3, #0
 800c456:	d131      	bne.n	800c4bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c458:	4b1c      	ldr	r3, [pc, #112]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c45a:	7a5b      	ldrb	r3, [r3, #9]
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	461a      	mov	r2, r3
 800c460:	4b1a      	ldr	r3, [pc, #104]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c462:	2100      	movs	r1, #0
 800c464:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c466:	4b19      	ldr	r3, [pc, #100]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c468:	7a5b      	ldrb	r3, [r3, #9]
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	4a17      	ldr	r2, [pc, #92]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c476:	4b15      	ldr	r3, [pc, #84]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c478:	7a5b      	ldrb	r3, [r3, #9]
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	461a      	mov	r2, r3
 800c47e:	4b13      	ldr	r3, [pc, #76]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c480:	4413      	add	r3, r2
 800c482:	79fa      	ldrb	r2, [r7, #7]
 800c484:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c488:	7a5b      	ldrb	r3, [r3, #9]
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	b2d1      	uxtb	r1, r2
 800c490:	4a0e      	ldr	r2, [pc, #56]	; (800c4cc <FATFS_LinkDriverEx+0x94>)
 800c492:	7251      	strb	r1, [r2, #9]
 800c494:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c496:	7dbb      	ldrb	r3, [r7, #22]
 800c498:	3330      	adds	r3, #48	; 0x30
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	223a      	movs	r2, #58	; 0x3a
 800c4a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3302      	adds	r3, #2
 800c4ac:	222f      	movs	r2, #47	; 0x2f
 800c4ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	3303      	adds	r3, #3
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	371c      	adds	r7, #28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	24000184 	.word	0x24000184

0800c4d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4da:	2200      	movs	r2, #0
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff ffaa 	bl	800c438 <FATFS_LinkDriverEx>
 800c4e4:	4603      	mov	r3, r0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
	...

0800c4f0 <__errno>:
 800c4f0:	4b01      	ldr	r3, [pc, #4]	; (800c4f8 <__errno+0x8>)
 800c4f2:	6818      	ldr	r0, [r3, #0]
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	24000010 	.word	0x24000010

0800c4fc <__libc_init_array>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	4d0d      	ldr	r5, [pc, #52]	; (800c534 <__libc_init_array+0x38>)
 800c500:	4c0d      	ldr	r4, [pc, #52]	; (800c538 <__libc_init_array+0x3c>)
 800c502:	1b64      	subs	r4, r4, r5
 800c504:	10a4      	asrs	r4, r4, #2
 800c506:	2600      	movs	r6, #0
 800c508:	42a6      	cmp	r6, r4
 800c50a:	d109      	bne.n	800c520 <__libc_init_array+0x24>
 800c50c:	4d0b      	ldr	r5, [pc, #44]	; (800c53c <__libc_init_array+0x40>)
 800c50e:	4c0c      	ldr	r4, [pc, #48]	; (800c540 <__libc_init_array+0x44>)
 800c510:	f000 fc4e 	bl	800cdb0 <_init>
 800c514:	1b64      	subs	r4, r4, r5
 800c516:	10a4      	asrs	r4, r4, #2
 800c518:	2600      	movs	r6, #0
 800c51a:	42a6      	cmp	r6, r4
 800c51c:	d105      	bne.n	800c52a <__libc_init_array+0x2e>
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	f855 3b04 	ldr.w	r3, [r5], #4
 800c524:	4798      	blx	r3
 800c526:	3601      	adds	r6, #1
 800c528:	e7ee      	b.n	800c508 <__libc_init_array+0xc>
 800c52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52e:	4798      	blx	r3
 800c530:	3601      	adds	r6, #1
 800c532:	e7f2      	b.n	800c51a <__libc_init_array+0x1e>
 800c534:	0800d170 	.word	0x0800d170
 800c538:	0800d170 	.word	0x0800d170
 800c53c:	0800d170 	.word	0x0800d170
 800c540:	0800d174 	.word	0x0800d174

0800c544 <memcpy>:
 800c544:	440a      	add	r2, r1
 800c546:	4291      	cmp	r1, r2
 800c548:	f100 33ff 	add.w	r3, r0, #4294967295
 800c54c:	d100      	bne.n	800c550 <memcpy+0xc>
 800c54e:	4770      	bx	lr
 800c550:	b510      	push	{r4, lr}
 800c552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c55a:	4291      	cmp	r1, r2
 800c55c:	d1f9      	bne.n	800c552 <memcpy+0xe>
 800c55e:	bd10      	pop	{r4, pc}

0800c560 <memset>:
 800c560:	4402      	add	r2, r0
 800c562:	4603      	mov	r3, r0
 800c564:	4293      	cmp	r3, r2
 800c566:	d100      	bne.n	800c56a <memset+0xa>
 800c568:	4770      	bx	lr
 800c56a:	f803 1b01 	strb.w	r1, [r3], #1
 800c56e:	e7f9      	b.n	800c564 <memset+0x4>

0800c570 <siprintf>:
 800c570:	b40e      	push	{r1, r2, r3}
 800c572:	b500      	push	{lr}
 800c574:	b09c      	sub	sp, #112	; 0x70
 800c576:	ab1d      	add	r3, sp, #116	; 0x74
 800c578:	9002      	str	r0, [sp, #8]
 800c57a:	9006      	str	r0, [sp, #24]
 800c57c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c580:	4809      	ldr	r0, [pc, #36]	; (800c5a8 <siprintf+0x38>)
 800c582:	9107      	str	r1, [sp, #28]
 800c584:	9104      	str	r1, [sp, #16]
 800c586:	4909      	ldr	r1, [pc, #36]	; (800c5ac <siprintf+0x3c>)
 800c588:	f853 2b04 	ldr.w	r2, [r3], #4
 800c58c:	9105      	str	r1, [sp, #20]
 800c58e:	6800      	ldr	r0, [r0, #0]
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	a902      	add	r1, sp, #8
 800c594:	f000 f868 	bl	800c668 <_svfiprintf_r>
 800c598:	9b02      	ldr	r3, [sp, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	701a      	strb	r2, [r3, #0]
 800c59e:	b01c      	add	sp, #112	; 0x70
 800c5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a4:	b003      	add	sp, #12
 800c5a6:	4770      	bx	lr
 800c5a8:	24000010 	.word	0x24000010
 800c5ac:	ffff0208 	.word	0xffff0208

0800c5b0 <__ssputs_r>:
 800c5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	688e      	ldr	r6, [r1, #8]
 800c5b6:	429e      	cmp	r6, r3
 800c5b8:	4682      	mov	sl, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	4690      	mov	r8, r2
 800c5be:	461f      	mov	r7, r3
 800c5c0:	d838      	bhi.n	800c634 <__ssputs_r+0x84>
 800c5c2:	898a      	ldrh	r2, [r1, #12]
 800c5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5c8:	d032      	beq.n	800c630 <__ssputs_r+0x80>
 800c5ca:	6825      	ldr	r5, [r4, #0]
 800c5cc:	6909      	ldr	r1, [r1, #16]
 800c5ce:	eba5 0901 	sub.w	r9, r5, r1
 800c5d2:	6965      	ldr	r5, [r4, #20]
 800c5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5dc:	3301      	adds	r3, #1
 800c5de:	444b      	add	r3, r9
 800c5e0:	106d      	asrs	r5, r5, #1
 800c5e2:	429d      	cmp	r5, r3
 800c5e4:	bf38      	it	cc
 800c5e6:	461d      	movcc	r5, r3
 800c5e8:	0553      	lsls	r3, r2, #21
 800c5ea:	d531      	bpl.n	800c650 <__ssputs_r+0xa0>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	f000 fb39 	bl	800cc64 <_malloc_r>
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	b950      	cbnz	r0, 800c60c <__ssputs_r+0x5c>
 800c5f6:	230c      	movs	r3, #12
 800c5f8:	f8ca 3000 	str.w	r3, [sl]
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	f04f 30ff 	mov.w	r0, #4294967295
 800c608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60c:	6921      	ldr	r1, [r4, #16]
 800c60e:	464a      	mov	r2, r9
 800c610:	f7ff ff98 	bl	800c544 <memcpy>
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c61e:	81a3      	strh	r3, [r4, #12]
 800c620:	6126      	str	r6, [r4, #16]
 800c622:	6165      	str	r5, [r4, #20]
 800c624:	444e      	add	r6, r9
 800c626:	eba5 0509 	sub.w	r5, r5, r9
 800c62a:	6026      	str	r6, [r4, #0]
 800c62c:	60a5      	str	r5, [r4, #8]
 800c62e:	463e      	mov	r6, r7
 800c630:	42be      	cmp	r6, r7
 800c632:	d900      	bls.n	800c636 <__ssputs_r+0x86>
 800c634:	463e      	mov	r6, r7
 800c636:	4632      	mov	r2, r6
 800c638:	6820      	ldr	r0, [r4, #0]
 800c63a:	4641      	mov	r1, r8
 800c63c:	f000 faa8 	bl	800cb90 <memmove>
 800c640:	68a3      	ldr	r3, [r4, #8]
 800c642:	6822      	ldr	r2, [r4, #0]
 800c644:	1b9b      	subs	r3, r3, r6
 800c646:	4432      	add	r2, r6
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	6022      	str	r2, [r4, #0]
 800c64c:	2000      	movs	r0, #0
 800c64e:	e7db      	b.n	800c608 <__ssputs_r+0x58>
 800c650:	462a      	mov	r2, r5
 800c652:	f000 fb61 	bl	800cd18 <_realloc_r>
 800c656:	4606      	mov	r6, r0
 800c658:	2800      	cmp	r0, #0
 800c65a:	d1e1      	bne.n	800c620 <__ssputs_r+0x70>
 800c65c:	6921      	ldr	r1, [r4, #16]
 800c65e:	4650      	mov	r0, sl
 800c660:	f000 fab0 	bl	800cbc4 <_free_r>
 800c664:	e7c7      	b.n	800c5f6 <__ssputs_r+0x46>
	...

0800c668 <_svfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4698      	mov	r8, r3
 800c66e:	898b      	ldrh	r3, [r1, #12]
 800c670:	061b      	lsls	r3, r3, #24
 800c672:	b09d      	sub	sp, #116	; 0x74
 800c674:	4607      	mov	r7, r0
 800c676:	460d      	mov	r5, r1
 800c678:	4614      	mov	r4, r2
 800c67a:	d50e      	bpl.n	800c69a <_svfiprintf_r+0x32>
 800c67c:	690b      	ldr	r3, [r1, #16]
 800c67e:	b963      	cbnz	r3, 800c69a <_svfiprintf_r+0x32>
 800c680:	2140      	movs	r1, #64	; 0x40
 800c682:	f000 faef 	bl	800cc64 <_malloc_r>
 800c686:	6028      	str	r0, [r5, #0]
 800c688:	6128      	str	r0, [r5, #16]
 800c68a:	b920      	cbnz	r0, 800c696 <_svfiprintf_r+0x2e>
 800c68c:	230c      	movs	r3, #12
 800c68e:	603b      	str	r3, [r7, #0]
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	e0d1      	b.n	800c83a <_svfiprintf_r+0x1d2>
 800c696:	2340      	movs	r3, #64	; 0x40
 800c698:	616b      	str	r3, [r5, #20]
 800c69a:	2300      	movs	r3, #0
 800c69c:	9309      	str	r3, [sp, #36]	; 0x24
 800c69e:	2320      	movs	r3, #32
 800c6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a8:	2330      	movs	r3, #48	; 0x30
 800c6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c854 <_svfiprintf_r+0x1ec>
 800c6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6b2:	f04f 0901 	mov.w	r9, #1
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	469a      	mov	sl, r3
 800c6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6be:	b10a      	cbz	r2, 800c6c4 <_svfiprintf_r+0x5c>
 800c6c0:	2a25      	cmp	r2, #37	; 0x25
 800c6c2:	d1f9      	bne.n	800c6b8 <_svfiprintf_r+0x50>
 800c6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c8:	d00b      	beq.n	800c6e2 <_svfiprintf_r+0x7a>
 800c6ca:	465b      	mov	r3, fp
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff ff6d 	bl	800c5b0 <__ssputs_r>
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	f000 80aa 	beq.w	800c830 <_svfiprintf_r+0x1c8>
 800c6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6de:	445a      	add	r2, fp
 800c6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 80a2 	beq.w	800c830 <_svfiprintf_r+0x1c8>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f6:	f10a 0a01 	add.w	sl, sl, #1
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	9307      	str	r3, [sp, #28]
 800c6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c702:	931a      	str	r3, [sp, #104]	; 0x68
 800c704:	4654      	mov	r4, sl
 800c706:	2205      	movs	r2, #5
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	4851      	ldr	r0, [pc, #324]	; (800c854 <_svfiprintf_r+0x1ec>)
 800c70e:	f7f3 fe07 	bl	8000320 <memchr>
 800c712:	9a04      	ldr	r2, [sp, #16]
 800c714:	b9d8      	cbnz	r0, 800c74e <_svfiprintf_r+0xe6>
 800c716:	06d0      	lsls	r0, r2, #27
 800c718:	bf44      	itt	mi
 800c71a:	2320      	movmi	r3, #32
 800c71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c720:	0711      	lsls	r1, r2, #28
 800c722:	bf44      	itt	mi
 800c724:	232b      	movmi	r3, #43	; 0x2b
 800c726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72a:	f89a 3000 	ldrb.w	r3, [sl]
 800c72e:	2b2a      	cmp	r3, #42	; 0x2a
 800c730:	d015      	beq.n	800c75e <_svfiprintf_r+0xf6>
 800c732:	9a07      	ldr	r2, [sp, #28]
 800c734:	4654      	mov	r4, sl
 800c736:	2000      	movs	r0, #0
 800c738:	f04f 0c0a 	mov.w	ip, #10
 800c73c:	4621      	mov	r1, r4
 800c73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c742:	3b30      	subs	r3, #48	; 0x30
 800c744:	2b09      	cmp	r3, #9
 800c746:	d94e      	bls.n	800c7e6 <_svfiprintf_r+0x17e>
 800c748:	b1b0      	cbz	r0, 800c778 <_svfiprintf_r+0x110>
 800c74a:	9207      	str	r2, [sp, #28]
 800c74c:	e014      	b.n	800c778 <_svfiprintf_r+0x110>
 800c74e:	eba0 0308 	sub.w	r3, r0, r8
 800c752:	fa09 f303 	lsl.w	r3, r9, r3
 800c756:	4313      	orrs	r3, r2
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	46a2      	mov	sl, r4
 800c75c:	e7d2      	b.n	800c704 <_svfiprintf_r+0x9c>
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	1d19      	adds	r1, r3, #4
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	9103      	str	r1, [sp, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	bfbb      	ittet	lt
 800c76a:	425b      	neglt	r3, r3
 800c76c:	f042 0202 	orrlt.w	r2, r2, #2
 800c770:	9307      	strge	r3, [sp, #28]
 800c772:	9307      	strlt	r3, [sp, #28]
 800c774:	bfb8      	it	lt
 800c776:	9204      	strlt	r2, [sp, #16]
 800c778:	7823      	ldrb	r3, [r4, #0]
 800c77a:	2b2e      	cmp	r3, #46	; 0x2e
 800c77c:	d10c      	bne.n	800c798 <_svfiprintf_r+0x130>
 800c77e:	7863      	ldrb	r3, [r4, #1]
 800c780:	2b2a      	cmp	r3, #42	; 0x2a
 800c782:	d135      	bne.n	800c7f0 <_svfiprintf_r+0x188>
 800c784:	9b03      	ldr	r3, [sp, #12]
 800c786:	1d1a      	adds	r2, r3, #4
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	9203      	str	r2, [sp, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	bfb8      	it	lt
 800c790:	f04f 33ff 	movlt.w	r3, #4294967295
 800c794:	3402      	adds	r4, #2
 800c796:	9305      	str	r3, [sp, #20]
 800c798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c864 <_svfiprintf_r+0x1fc>
 800c79c:	7821      	ldrb	r1, [r4, #0]
 800c79e:	2203      	movs	r2, #3
 800c7a0:	4650      	mov	r0, sl
 800c7a2:	f7f3 fdbd 	bl	8000320 <memchr>
 800c7a6:	b140      	cbz	r0, 800c7ba <_svfiprintf_r+0x152>
 800c7a8:	2340      	movs	r3, #64	; 0x40
 800c7aa:	eba0 000a 	sub.w	r0, r0, sl
 800c7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c7b2:	9b04      	ldr	r3, [sp, #16]
 800c7b4:	4303      	orrs	r3, r0
 800c7b6:	3401      	adds	r4, #1
 800c7b8:	9304      	str	r3, [sp, #16]
 800c7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7be:	4826      	ldr	r0, [pc, #152]	; (800c858 <_svfiprintf_r+0x1f0>)
 800c7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7c4:	2206      	movs	r2, #6
 800c7c6:	f7f3 fdab 	bl	8000320 <memchr>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d038      	beq.n	800c840 <_svfiprintf_r+0x1d8>
 800c7ce:	4b23      	ldr	r3, [pc, #140]	; (800c85c <_svfiprintf_r+0x1f4>)
 800c7d0:	bb1b      	cbnz	r3, 800c81a <_svfiprintf_r+0x1b2>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	3307      	adds	r3, #7
 800c7d6:	f023 0307 	bic.w	r3, r3, #7
 800c7da:	3308      	adds	r3, #8
 800c7dc:	9303      	str	r3, [sp, #12]
 800c7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e0:	4433      	add	r3, r6
 800c7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e4:	e767      	b.n	800c6b6 <_svfiprintf_r+0x4e>
 800c7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	2001      	movs	r0, #1
 800c7ee:	e7a5      	b.n	800c73c <_svfiprintf_r+0xd4>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	3401      	adds	r4, #1
 800c7f4:	9305      	str	r3, [sp, #20]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	f04f 0c0a 	mov.w	ip, #10
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c802:	3a30      	subs	r2, #48	; 0x30
 800c804:	2a09      	cmp	r2, #9
 800c806:	d903      	bls.n	800c810 <_svfiprintf_r+0x1a8>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d0c5      	beq.n	800c798 <_svfiprintf_r+0x130>
 800c80c:	9105      	str	r1, [sp, #20]
 800c80e:	e7c3      	b.n	800c798 <_svfiprintf_r+0x130>
 800c810:	fb0c 2101 	mla	r1, ip, r1, r2
 800c814:	4604      	mov	r4, r0
 800c816:	2301      	movs	r3, #1
 800c818:	e7f0      	b.n	800c7fc <_svfiprintf_r+0x194>
 800c81a:	ab03      	add	r3, sp, #12
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	462a      	mov	r2, r5
 800c820:	4b0f      	ldr	r3, [pc, #60]	; (800c860 <_svfiprintf_r+0x1f8>)
 800c822:	a904      	add	r1, sp, #16
 800c824:	4638      	mov	r0, r7
 800c826:	f3af 8000 	nop.w
 800c82a:	1c42      	adds	r2, r0, #1
 800c82c:	4606      	mov	r6, r0
 800c82e:	d1d6      	bne.n	800c7de <_svfiprintf_r+0x176>
 800c830:	89ab      	ldrh	r3, [r5, #12]
 800c832:	065b      	lsls	r3, r3, #25
 800c834:	f53f af2c 	bmi.w	800c690 <_svfiprintf_r+0x28>
 800c838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c83a:	b01d      	add	sp, #116	; 0x74
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	ab03      	add	r3, sp, #12
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	462a      	mov	r2, r5
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <_svfiprintf_r+0x1f8>)
 800c848:	a904      	add	r1, sp, #16
 800c84a:	4638      	mov	r0, r7
 800c84c:	f000 f87a 	bl	800c944 <_printf_i>
 800c850:	e7eb      	b.n	800c82a <_svfiprintf_r+0x1c2>
 800c852:	bf00      	nop
 800c854:	0800d132 	.word	0x0800d132
 800c858:	0800d13c 	.word	0x0800d13c
 800c85c:	00000000 	.word	0x00000000
 800c860:	0800c5b1 	.word	0x0800c5b1
 800c864:	0800d138 	.word	0x0800d138

0800c868 <_printf_common>:
 800c868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c86c:	4616      	mov	r6, r2
 800c86e:	4699      	mov	r9, r3
 800c870:	688a      	ldr	r2, [r1, #8]
 800c872:	690b      	ldr	r3, [r1, #16]
 800c874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c878:	4293      	cmp	r3, r2
 800c87a:	bfb8      	it	lt
 800c87c:	4613      	movlt	r3, r2
 800c87e:	6033      	str	r3, [r6, #0]
 800c880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c884:	4607      	mov	r7, r0
 800c886:	460c      	mov	r4, r1
 800c888:	b10a      	cbz	r2, 800c88e <_printf_common+0x26>
 800c88a:	3301      	adds	r3, #1
 800c88c:	6033      	str	r3, [r6, #0]
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	0699      	lsls	r1, r3, #26
 800c892:	bf42      	ittt	mi
 800c894:	6833      	ldrmi	r3, [r6, #0]
 800c896:	3302      	addmi	r3, #2
 800c898:	6033      	strmi	r3, [r6, #0]
 800c89a:	6825      	ldr	r5, [r4, #0]
 800c89c:	f015 0506 	ands.w	r5, r5, #6
 800c8a0:	d106      	bne.n	800c8b0 <_printf_common+0x48>
 800c8a2:	f104 0a19 	add.w	sl, r4, #25
 800c8a6:	68e3      	ldr	r3, [r4, #12]
 800c8a8:	6832      	ldr	r2, [r6, #0]
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	42ab      	cmp	r3, r5
 800c8ae:	dc26      	bgt.n	800c8fe <_printf_common+0x96>
 800c8b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8b4:	1e13      	subs	r3, r2, #0
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	bf18      	it	ne
 800c8ba:	2301      	movne	r3, #1
 800c8bc:	0692      	lsls	r2, r2, #26
 800c8be:	d42b      	bmi.n	800c918 <_printf_common+0xb0>
 800c8c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	4638      	mov	r0, r7
 800c8c8:	47c0      	blx	r8
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	d01e      	beq.n	800c90c <_printf_common+0xa4>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	68e5      	ldr	r5, [r4, #12]
 800c8d2:	6832      	ldr	r2, [r6, #0]
 800c8d4:	f003 0306 	and.w	r3, r3, #6
 800c8d8:	2b04      	cmp	r3, #4
 800c8da:	bf08      	it	eq
 800c8dc:	1aad      	subeq	r5, r5, r2
 800c8de:	68a3      	ldr	r3, [r4, #8]
 800c8e0:	6922      	ldr	r2, [r4, #16]
 800c8e2:	bf0c      	ite	eq
 800c8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8e8:	2500      	movne	r5, #0
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	bfc4      	itt	gt
 800c8ee:	1a9b      	subgt	r3, r3, r2
 800c8f0:	18ed      	addgt	r5, r5, r3
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	341a      	adds	r4, #26
 800c8f6:	42b5      	cmp	r5, r6
 800c8f8:	d11a      	bne.n	800c930 <_printf_common+0xc8>
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	e008      	b.n	800c910 <_printf_common+0xa8>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4652      	mov	r2, sl
 800c902:	4649      	mov	r1, r9
 800c904:	4638      	mov	r0, r7
 800c906:	47c0      	blx	r8
 800c908:	3001      	adds	r0, #1
 800c90a:	d103      	bne.n	800c914 <_printf_common+0xac>
 800c90c:	f04f 30ff 	mov.w	r0, #4294967295
 800c910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c914:	3501      	adds	r5, #1
 800c916:	e7c6      	b.n	800c8a6 <_printf_common+0x3e>
 800c918:	18e1      	adds	r1, r4, r3
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	2030      	movs	r0, #48	; 0x30
 800c91e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c922:	4422      	add	r2, r4
 800c924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c92c:	3302      	adds	r3, #2
 800c92e:	e7c7      	b.n	800c8c0 <_printf_common+0x58>
 800c930:	2301      	movs	r3, #1
 800c932:	4622      	mov	r2, r4
 800c934:	4649      	mov	r1, r9
 800c936:	4638      	mov	r0, r7
 800c938:	47c0      	blx	r8
 800c93a:	3001      	adds	r0, #1
 800c93c:	d0e6      	beq.n	800c90c <_printf_common+0xa4>
 800c93e:	3601      	adds	r6, #1
 800c940:	e7d9      	b.n	800c8f6 <_printf_common+0x8e>
	...

0800c944 <_printf_i>:
 800c944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c948:	460c      	mov	r4, r1
 800c94a:	4691      	mov	r9, r2
 800c94c:	7e27      	ldrb	r7, [r4, #24]
 800c94e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c950:	2f78      	cmp	r7, #120	; 0x78
 800c952:	4680      	mov	r8, r0
 800c954:	469a      	mov	sl, r3
 800c956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c95a:	d807      	bhi.n	800c96c <_printf_i+0x28>
 800c95c:	2f62      	cmp	r7, #98	; 0x62
 800c95e:	d80a      	bhi.n	800c976 <_printf_i+0x32>
 800c960:	2f00      	cmp	r7, #0
 800c962:	f000 80d8 	beq.w	800cb16 <_printf_i+0x1d2>
 800c966:	2f58      	cmp	r7, #88	; 0x58
 800c968:	f000 80a3 	beq.w	800cab2 <_printf_i+0x16e>
 800c96c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c974:	e03a      	b.n	800c9ec <_printf_i+0xa8>
 800c976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c97a:	2b15      	cmp	r3, #21
 800c97c:	d8f6      	bhi.n	800c96c <_printf_i+0x28>
 800c97e:	a001      	add	r0, pc, #4	; (adr r0, 800c984 <_printf_i+0x40>)
 800c980:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	0800c9f1 	.word	0x0800c9f1
 800c98c:	0800c96d 	.word	0x0800c96d
 800c990:	0800c96d 	.word	0x0800c96d
 800c994:	0800c96d 	.word	0x0800c96d
 800c998:	0800c96d 	.word	0x0800c96d
 800c99c:	0800c9f1 	.word	0x0800c9f1
 800c9a0:	0800c96d 	.word	0x0800c96d
 800c9a4:	0800c96d 	.word	0x0800c96d
 800c9a8:	0800c96d 	.word	0x0800c96d
 800c9ac:	0800c96d 	.word	0x0800c96d
 800c9b0:	0800cafd 	.word	0x0800cafd
 800c9b4:	0800ca21 	.word	0x0800ca21
 800c9b8:	0800cadf 	.word	0x0800cadf
 800c9bc:	0800c96d 	.word	0x0800c96d
 800c9c0:	0800c96d 	.word	0x0800c96d
 800c9c4:	0800cb1f 	.word	0x0800cb1f
 800c9c8:	0800c96d 	.word	0x0800c96d
 800c9cc:	0800ca21 	.word	0x0800ca21
 800c9d0:	0800c96d 	.word	0x0800c96d
 800c9d4:	0800c96d 	.word	0x0800c96d
 800c9d8:	0800cae7 	.word	0x0800cae7
 800c9dc:	680b      	ldr	r3, [r1, #0]
 800c9de:	1d1a      	adds	r2, r3, #4
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	600a      	str	r2, [r1, #0]
 800c9e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e0a3      	b.n	800cb38 <_printf_i+0x1f4>
 800c9f0:	6825      	ldr	r5, [r4, #0]
 800c9f2:	6808      	ldr	r0, [r1, #0]
 800c9f4:	062e      	lsls	r6, r5, #24
 800c9f6:	f100 0304 	add.w	r3, r0, #4
 800c9fa:	d50a      	bpl.n	800ca12 <_printf_i+0xce>
 800c9fc:	6805      	ldr	r5, [r0, #0]
 800c9fe:	600b      	str	r3, [r1, #0]
 800ca00:	2d00      	cmp	r5, #0
 800ca02:	da03      	bge.n	800ca0c <_printf_i+0xc8>
 800ca04:	232d      	movs	r3, #45	; 0x2d
 800ca06:	426d      	negs	r5, r5
 800ca08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca0c:	485e      	ldr	r0, [pc, #376]	; (800cb88 <_printf_i+0x244>)
 800ca0e:	230a      	movs	r3, #10
 800ca10:	e019      	b.n	800ca46 <_printf_i+0x102>
 800ca12:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ca16:	6805      	ldr	r5, [r0, #0]
 800ca18:	600b      	str	r3, [r1, #0]
 800ca1a:	bf18      	it	ne
 800ca1c:	b22d      	sxthne	r5, r5
 800ca1e:	e7ef      	b.n	800ca00 <_printf_i+0xbc>
 800ca20:	680b      	ldr	r3, [r1, #0]
 800ca22:	6825      	ldr	r5, [r4, #0]
 800ca24:	1d18      	adds	r0, r3, #4
 800ca26:	6008      	str	r0, [r1, #0]
 800ca28:	0628      	lsls	r0, r5, #24
 800ca2a:	d501      	bpl.n	800ca30 <_printf_i+0xec>
 800ca2c:	681d      	ldr	r5, [r3, #0]
 800ca2e:	e002      	b.n	800ca36 <_printf_i+0xf2>
 800ca30:	0669      	lsls	r1, r5, #25
 800ca32:	d5fb      	bpl.n	800ca2c <_printf_i+0xe8>
 800ca34:	881d      	ldrh	r5, [r3, #0]
 800ca36:	4854      	ldr	r0, [pc, #336]	; (800cb88 <_printf_i+0x244>)
 800ca38:	2f6f      	cmp	r7, #111	; 0x6f
 800ca3a:	bf0c      	ite	eq
 800ca3c:	2308      	moveq	r3, #8
 800ca3e:	230a      	movne	r3, #10
 800ca40:	2100      	movs	r1, #0
 800ca42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca46:	6866      	ldr	r6, [r4, #4]
 800ca48:	60a6      	str	r6, [r4, #8]
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	bfa2      	ittt	ge
 800ca4e:	6821      	ldrge	r1, [r4, #0]
 800ca50:	f021 0104 	bicge.w	r1, r1, #4
 800ca54:	6021      	strge	r1, [r4, #0]
 800ca56:	b90d      	cbnz	r5, 800ca5c <_printf_i+0x118>
 800ca58:	2e00      	cmp	r6, #0
 800ca5a:	d04d      	beq.n	800caf8 <_printf_i+0x1b4>
 800ca5c:	4616      	mov	r6, r2
 800ca5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca62:	fb03 5711 	mls	r7, r3, r1, r5
 800ca66:	5dc7      	ldrb	r7, [r0, r7]
 800ca68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca6c:	462f      	mov	r7, r5
 800ca6e:	42bb      	cmp	r3, r7
 800ca70:	460d      	mov	r5, r1
 800ca72:	d9f4      	bls.n	800ca5e <_printf_i+0x11a>
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d10b      	bne.n	800ca90 <_printf_i+0x14c>
 800ca78:	6823      	ldr	r3, [r4, #0]
 800ca7a:	07df      	lsls	r7, r3, #31
 800ca7c:	d508      	bpl.n	800ca90 <_printf_i+0x14c>
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	6861      	ldr	r1, [r4, #4]
 800ca82:	4299      	cmp	r1, r3
 800ca84:	bfde      	ittt	le
 800ca86:	2330      	movle	r3, #48	; 0x30
 800ca88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca90:	1b92      	subs	r2, r2, r6
 800ca92:	6122      	str	r2, [r4, #16]
 800ca94:	f8cd a000 	str.w	sl, [sp]
 800ca98:	464b      	mov	r3, r9
 800ca9a:	aa03      	add	r2, sp, #12
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	4640      	mov	r0, r8
 800caa0:	f7ff fee2 	bl	800c868 <_printf_common>
 800caa4:	3001      	adds	r0, #1
 800caa6:	d14c      	bne.n	800cb42 <_printf_i+0x1fe>
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	b004      	add	sp, #16
 800caae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab2:	4835      	ldr	r0, [pc, #212]	; (800cb88 <_printf_i+0x244>)
 800cab4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	680e      	ldr	r6, [r1, #0]
 800cabc:	061f      	lsls	r7, r3, #24
 800cabe:	f856 5b04 	ldr.w	r5, [r6], #4
 800cac2:	600e      	str	r6, [r1, #0]
 800cac4:	d514      	bpl.n	800caf0 <_printf_i+0x1ac>
 800cac6:	07d9      	lsls	r1, r3, #31
 800cac8:	bf44      	itt	mi
 800caca:	f043 0320 	orrmi.w	r3, r3, #32
 800cace:	6023      	strmi	r3, [r4, #0]
 800cad0:	b91d      	cbnz	r5, 800cada <_printf_i+0x196>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	f023 0320 	bic.w	r3, r3, #32
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	2310      	movs	r3, #16
 800cadc:	e7b0      	b.n	800ca40 <_printf_i+0xfc>
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	f043 0320 	orr.w	r3, r3, #32
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	2378      	movs	r3, #120	; 0x78
 800cae8:	4828      	ldr	r0, [pc, #160]	; (800cb8c <_printf_i+0x248>)
 800caea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800caee:	e7e3      	b.n	800cab8 <_printf_i+0x174>
 800caf0:	065e      	lsls	r6, r3, #25
 800caf2:	bf48      	it	mi
 800caf4:	b2ad      	uxthmi	r5, r5
 800caf6:	e7e6      	b.n	800cac6 <_printf_i+0x182>
 800caf8:	4616      	mov	r6, r2
 800cafa:	e7bb      	b.n	800ca74 <_printf_i+0x130>
 800cafc:	680b      	ldr	r3, [r1, #0]
 800cafe:	6826      	ldr	r6, [r4, #0]
 800cb00:	6960      	ldr	r0, [r4, #20]
 800cb02:	1d1d      	adds	r5, r3, #4
 800cb04:	600d      	str	r5, [r1, #0]
 800cb06:	0635      	lsls	r5, r6, #24
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	d501      	bpl.n	800cb10 <_printf_i+0x1cc>
 800cb0c:	6018      	str	r0, [r3, #0]
 800cb0e:	e002      	b.n	800cb16 <_printf_i+0x1d2>
 800cb10:	0671      	lsls	r1, r6, #25
 800cb12:	d5fb      	bpl.n	800cb0c <_printf_i+0x1c8>
 800cb14:	8018      	strh	r0, [r3, #0]
 800cb16:	2300      	movs	r3, #0
 800cb18:	6123      	str	r3, [r4, #16]
 800cb1a:	4616      	mov	r6, r2
 800cb1c:	e7ba      	b.n	800ca94 <_printf_i+0x150>
 800cb1e:	680b      	ldr	r3, [r1, #0]
 800cb20:	1d1a      	adds	r2, r3, #4
 800cb22:	600a      	str	r2, [r1, #0]
 800cb24:	681e      	ldr	r6, [r3, #0]
 800cb26:	6862      	ldr	r2, [r4, #4]
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7f3 fbf8 	bl	8000320 <memchr>
 800cb30:	b108      	cbz	r0, 800cb36 <_printf_i+0x1f2>
 800cb32:	1b80      	subs	r0, r0, r6
 800cb34:	6060      	str	r0, [r4, #4]
 800cb36:	6863      	ldr	r3, [r4, #4]
 800cb38:	6123      	str	r3, [r4, #16]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb40:	e7a8      	b.n	800ca94 <_printf_i+0x150>
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	4632      	mov	r2, r6
 800cb46:	4649      	mov	r1, r9
 800cb48:	4640      	mov	r0, r8
 800cb4a:	47d0      	blx	sl
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d0ab      	beq.n	800caa8 <_printf_i+0x164>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	079b      	lsls	r3, r3, #30
 800cb54:	d413      	bmi.n	800cb7e <_printf_i+0x23a>
 800cb56:	68e0      	ldr	r0, [r4, #12]
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	4298      	cmp	r0, r3
 800cb5c:	bfb8      	it	lt
 800cb5e:	4618      	movlt	r0, r3
 800cb60:	e7a4      	b.n	800caac <_printf_i+0x168>
 800cb62:	2301      	movs	r3, #1
 800cb64:	4632      	mov	r2, r6
 800cb66:	4649      	mov	r1, r9
 800cb68:	4640      	mov	r0, r8
 800cb6a:	47d0      	blx	sl
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d09b      	beq.n	800caa8 <_printf_i+0x164>
 800cb70:	3501      	adds	r5, #1
 800cb72:	68e3      	ldr	r3, [r4, #12]
 800cb74:	9903      	ldr	r1, [sp, #12]
 800cb76:	1a5b      	subs	r3, r3, r1
 800cb78:	42ab      	cmp	r3, r5
 800cb7a:	dcf2      	bgt.n	800cb62 <_printf_i+0x21e>
 800cb7c:	e7eb      	b.n	800cb56 <_printf_i+0x212>
 800cb7e:	2500      	movs	r5, #0
 800cb80:	f104 0619 	add.w	r6, r4, #25
 800cb84:	e7f5      	b.n	800cb72 <_printf_i+0x22e>
 800cb86:	bf00      	nop
 800cb88:	0800d143 	.word	0x0800d143
 800cb8c:	0800d154 	.word	0x0800d154

0800cb90 <memmove>:
 800cb90:	4288      	cmp	r0, r1
 800cb92:	b510      	push	{r4, lr}
 800cb94:	eb01 0402 	add.w	r4, r1, r2
 800cb98:	d902      	bls.n	800cba0 <memmove+0x10>
 800cb9a:	4284      	cmp	r4, r0
 800cb9c:	4623      	mov	r3, r4
 800cb9e:	d807      	bhi.n	800cbb0 <memmove+0x20>
 800cba0:	1e43      	subs	r3, r0, #1
 800cba2:	42a1      	cmp	r1, r4
 800cba4:	d008      	beq.n	800cbb8 <memmove+0x28>
 800cba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbae:	e7f8      	b.n	800cba2 <memmove+0x12>
 800cbb0:	4402      	add	r2, r0
 800cbb2:	4601      	mov	r1, r0
 800cbb4:	428a      	cmp	r2, r1
 800cbb6:	d100      	bne.n	800cbba <memmove+0x2a>
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbc2:	e7f7      	b.n	800cbb4 <memmove+0x24>

0800cbc4 <_free_r>:
 800cbc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbc6:	2900      	cmp	r1, #0
 800cbc8:	d048      	beq.n	800cc5c <_free_r+0x98>
 800cbca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbce:	9001      	str	r0, [sp, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbd6:	bfb8      	it	lt
 800cbd8:	18e4      	addlt	r4, r4, r3
 800cbda:	f000 f8d3 	bl	800cd84 <__malloc_lock>
 800cbde:	4a20      	ldr	r2, [pc, #128]	; (800cc60 <_free_r+0x9c>)
 800cbe0:	9801      	ldr	r0, [sp, #4]
 800cbe2:	6813      	ldr	r3, [r2, #0]
 800cbe4:	4615      	mov	r5, r2
 800cbe6:	b933      	cbnz	r3, 800cbf6 <_free_r+0x32>
 800cbe8:	6063      	str	r3, [r4, #4]
 800cbea:	6014      	str	r4, [r2, #0]
 800cbec:	b003      	add	sp, #12
 800cbee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbf2:	f000 b8cd 	b.w	800cd90 <__malloc_unlock>
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	d90b      	bls.n	800cc12 <_free_r+0x4e>
 800cbfa:	6821      	ldr	r1, [r4, #0]
 800cbfc:	1862      	adds	r2, r4, r1
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	bf04      	itt	eq
 800cc02:	681a      	ldreq	r2, [r3, #0]
 800cc04:	685b      	ldreq	r3, [r3, #4]
 800cc06:	6063      	str	r3, [r4, #4]
 800cc08:	bf04      	itt	eq
 800cc0a:	1852      	addeq	r2, r2, r1
 800cc0c:	6022      	streq	r2, [r4, #0]
 800cc0e:	602c      	str	r4, [r5, #0]
 800cc10:	e7ec      	b.n	800cbec <_free_r+0x28>
 800cc12:	461a      	mov	r2, r3
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	b10b      	cbz	r3, 800cc1c <_free_r+0x58>
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	d9fa      	bls.n	800cc12 <_free_r+0x4e>
 800cc1c:	6811      	ldr	r1, [r2, #0]
 800cc1e:	1855      	adds	r5, r2, r1
 800cc20:	42a5      	cmp	r5, r4
 800cc22:	d10b      	bne.n	800cc3c <_free_r+0x78>
 800cc24:	6824      	ldr	r4, [r4, #0]
 800cc26:	4421      	add	r1, r4
 800cc28:	1854      	adds	r4, r2, r1
 800cc2a:	42a3      	cmp	r3, r4
 800cc2c:	6011      	str	r1, [r2, #0]
 800cc2e:	d1dd      	bne.n	800cbec <_free_r+0x28>
 800cc30:	681c      	ldr	r4, [r3, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	6053      	str	r3, [r2, #4]
 800cc36:	4421      	add	r1, r4
 800cc38:	6011      	str	r1, [r2, #0]
 800cc3a:	e7d7      	b.n	800cbec <_free_r+0x28>
 800cc3c:	d902      	bls.n	800cc44 <_free_r+0x80>
 800cc3e:	230c      	movs	r3, #12
 800cc40:	6003      	str	r3, [r0, #0]
 800cc42:	e7d3      	b.n	800cbec <_free_r+0x28>
 800cc44:	6825      	ldr	r5, [r4, #0]
 800cc46:	1961      	adds	r1, r4, r5
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	bf04      	itt	eq
 800cc4c:	6819      	ldreq	r1, [r3, #0]
 800cc4e:	685b      	ldreq	r3, [r3, #4]
 800cc50:	6063      	str	r3, [r4, #4]
 800cc52:	bf04      	itt	eq
 800cc54:	1949      	addeq	r1, r1, r5
 800cc56:	6021      	streq	r1, [r4, #0]
 800cc58:	6054      	str	r4, [r2, #4]
 800cc5a:	e7c7      	b.n	800cbec <_free_r+0x28>
 800cc5c:	b003      	add	sp, #12
 800cc5e:	bd30      	pop	{r4, r5, pc}
 800cc60:	24000190 	.word	0x24000190

0800cc64 <_malloc_r>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	1ccd      	adds	r5, r1, #3
 800cc68:	f025 0503 	bic.w	r5, r5, #3
 800cc6c:	3508      	adds	r5, #8
 800cc6e:	2d0c      	cmp	r5, #12
 800cc70:	bf38      	it	cc
 800cc72:	250c      	movcc	r5, #12
 800cc74:	2d00      	cmp	r5, #0
 800cc76:	4606      	mov	r6, r0
 800cc78:	db01      	blt.n	800cc7e <_malloc_r+0x1a>
 800cc7a:	42a9      	cmp	r1, r5
 800cc7c:	d903      	bls.n	800cc86 <_malloc_r+0x22>
 800cc7e:	230c      	movs	r3, #12
 800cc80:	6033      	str	r3, [r6, #0]
 800cc82:	2000      	movs	r0, #0
 800cc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc86:	f000 f87d 	bl	800cd84 <__malloc_lock>
 800cc8a:	4921      	ldr	r1, [pc, #132]	; (800cd10 <_malloc_r+0xac>)
 800cc8c:	680a      	ldr	r2, [r1, #0]
 800cc8e:	4614      	mov	r4, r2
 800cc90:	b99c      	cbnz	r4, 800ccba <_malloc_r+0x56>
 800cc92:	4f20      	ldr	r7, [pc, #128]	; (800cd14 <_malloc_r+0xb0>)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	b923      	cbnz	r3, 800cca2 <_malloc_r+0x3e>
 800cc98:	4621      	mov	r1, r4
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 f862 	bl	800cd64 <_sbrk_r>
 800cca0:	6038      	str	r0, [r7, #0]
 800cca2:	4629      	mov	r1, r5
 800cca4:	4630      	mov	r0, r6
 800cca6:	f000 f85d 	bl	800cd64 <_sbrk_r>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d123      	bne.n	800ccf6 <_malloc_r+0x92>
 800ccae:	230c      	movs	r3, #12
 800ccb0:	6033      	str	r3, [r6, #0]
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f000 f86c 	bl	800cd90 <__malloc_unlock>
 800ccb8:	e7e3      	b.n	800cc82 <_malloc_r+0x1e>
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	1b5b      	subs	r3, r3, r5
 800ccbe:	d417      	bmi.n	800ccf0 <_malloc_r+0x8c>
 800ccc0:	2b0b      	cmp	r3, #11
 800ccc2:	d903      	bls.n	800cccc <_malloc_r+0x68>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	441c      	add	r4, r3
 800ccc8:	6025      	str	r5, [r4, #0]
 800ccca:	e004      	b.n	800ccd6 <_malloc_r+0x72>
 800cccc:	6863      	ldr	r3, [r4, #4]
 800ccce:	42a2      	cmp	r2, r4
 800ccd0:	bf0c      	ite	eq
 800ccd2:	600b      	streq	r3, [r1, #0]
 800ccd4:	6053      	strne	r3, [r2, #4]
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f000 f85a 	bl	800cd90 <__malloc_unlock>
 800ccdc:	f104 000b 	add.w	r0, r4, #11
 800cce0:	1d23      	adds	r3, r4, #4
 800cce2:	f020 0007 	bic.w	r0, r0, #7
 800cce6:	1ac2      	subs	r2, r0, r3
 800cce8:	d0cc      	beq.n	800cc84 <_malloc_r+0x20>
 800ccea:	1a1b      	subs	r3, r3, r0
 800ccec:	50a3      	str	r3, [r4, r2]
 800ccee:	e7c9      	b.n	800cc84 <_malloc_r+0x20>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	6864      	ldr	r4, [r4, #4]
 800ccf4:	e7cc      	b.n	800cc90 <_malloc_r+0x2c>
 800ccf6:	1cc4      	adds	r4, r0, #3
 800ccf8:	f024 0403 	bic.w	r4, r4, #3
 800ccfc:	42a0      	cmp	r0, r4
 800ccfe:	d0e3      	beq.n	800ccc8 <_malloc_r+0x64>
 800cd00:	1a21      	subs	r1, r4, r0
 800cd02:	4630      	mov	r0, r6
 800cd04:	f000 f82e 	bl	800cd64 <_sbrk_r>
 800cd08:	3001      	adds	r0, #1
 800cd0a:	d1dd      	bne.n	800ccc8 <_malloc_r+0x64>
 800cd0c:	e7cf      	b.n	800ccae <_malloc_r+0x4a>
 800cd0e:	bf00      	nop
 800cd10:	24000190 	.word	0x24000190
 800cd14:	24000194 	.word	0x24000194

0800cd18 <_realloc_r>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	4614      	mov	r4, r2
 800cd1e:	460e      	mov	r6, r1
 800cd20:	b921      	cbnz	r1, 800cd2c <_realloc_r+0x14>
 800cd22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd26:	4611      	mov	r1, r2
 800cd28:	f7ff bf9c 	b.w	800cc64 <_malloc_r>
 800cd2c:	b922      	cbnz	r2, 800cd38 <_realloc_r+0x20>
 800cd2e:	f7ff ff49 	bl	800cbc4 <_free_r>
 800cd32:	4625      	mov	r5, r4
 800cd34:	4628      	mov	r0, r5
 800cd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd38:	f000 f830 	bl	800cd9c <_malloc_usable_size_r>
 800cd3c:	42a0      	cmp	r0, r4
 800cd3e:	d20f      	bcs.n	800cd60 <_realloc_r+0x48>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4638      	mov	r0, r7
 800cd44:	f7ff ff8e 	bl	800cc64 <_malloc_r>
 800cd48:	4605      	mov	r5, r0
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d0f2      	beq.n	800cd34 <_realloc_r+0x1c>
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4622      	mov	r2, r4
 800cd52:	f7ff fbf7 	bl	800c544 <memcpy>
 800cd56:	4631      	mov	r1, r6
 800cd58:	4638      	mov	r0, r7
 800cd5a:	f7ff ff33 	bl	800cbc4 <_free_r>
 800cd5e:	e7e9      	b.n	800cd34 <_realloc_r+0x1c>
 800cd60:	4635      	mov	r5, r6
 800cd62:	e7e7      	b.n	800cd34 <_realloc_r+0x1c>

0800cd64 <_sbrk_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d06      	ldr	r5, [pc, #24]	; (800cd80 <_sbrk_r+0x1c>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	602b      	str	r3, [r5, #0]
 800cd70:	f7f4 fb6e 	bl	8001450 <_sbrk>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_sbrk_r+0x1a>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_sbrk_r+0x1a>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	24000838 	.word	0x24000838

0800cd84 <__malloc_lock>:
 800cd84:	4801      	ldr	r0, [pc, #4]	; (800cd8c <__malloc_lock+0x8>)
 800cd86:	f000 b811 	b.w	800cdac <__retarget_lock_acquire_recursive>
 800cd8a:	bf00      	nop
 800cd8c:	24000840 	.word	0x24000840

0800cd90 <__malloc_unlock>:
 800cd90:	4801      	ldr	r0, [pc, #4]	; (800cd98 <__malloc_unlock+0x8>)
 800cd92:	f000 b80c 	b.w	800cdae <__retarget_lock_release_recursive>
 800cd96:	bf00      	nop
 800cd98:	24000840 	.word	0x24000840

0800cd9c <_malloc_usable_size_r>:
 800cd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda0:	1f18      	subs	r0, r3, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfbc      	itt	lt
 800cda6:	580b      	ldrlt	r3, [r1, r0]
 800cda8:	18c0      	addlt	r0, r0, r3
 800cdaa:	4770      	bx	lr

0800cdac <__retarget_lock_acquire_recursive>:
 800cdac:	4770      	bx	lr

0800cdae <__retarget_lock_release_recursive>:
 800cdae:	4770      	bx	lr

0800cdb0 <_init>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr

0800cdbc <_fini>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	bf00      	nop
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr
