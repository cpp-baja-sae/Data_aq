
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf60  0800cf60  0001cf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf68  0800cf68  0001cf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800cf70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000a0  0800d010  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000100  0800d070  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003f120  24000160  0800d0d0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2403f280  0800d0d0  0002f280  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e633  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004832  00000000  00000000  0004e7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00052ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00054410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000367d4  00000000  00000000  000556b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccb7  00000000  00000000  0008be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014f556  00000000  00000000  000a8b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f8091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056cc  00000000  00000000  001f80e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000160 	.word	0x24000160
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cdac 	.word	0x0800cdac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000164 	.word	0x24000164
 800030c:	0800cdac 	.word	0x0800cdac

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <MountSD>:
#include "fatfs.h"
#include "SDInterface.h"
#include "stdio.h"

void MountSD()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80006be:	af02      	add	r7, sp, #8
	// Temporary memory allocation to setup file system
	// http://elm-chan.org/fsw/ff/doc/mkfs.html
	uint8_t rtext[_MAX_SS];
	FRESULT res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	4912      	ldr	r1, [pc, #72]	; (800070c <MountSD+0x54>)
 80006c4:	4812      	ldr	r0, [pc, #72]	; (8000710 <MountSD+0x58>)
 80006c6:	f00a fe67 	bl	800b398 <f_mount>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    if( res != FR_OK)
 80006d0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <MountSD+0x26>
    {
        Error_Handler();
 80006d8:	f000 fc7e 	bl	8000fd8 <Error_Handler>
        if( res != FR_OK)
        {
            Error_Handler();
        }
    }
};
 80006dc:	e011      	b.n	8000702 <MountSD+0x4a>
    	FRESULT res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	2107      	movs	r1, #7
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <MountSD+0x54>)
 80006ec:	f00b fa76 	bl	800bbdc <f_mkfs>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
        if( res != FR_OK)
 80006f6:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MountSD+0x4a>
            Error_Handler();
 80006fe:	f000 fc6b 	bl	8000fd8 <Error_Handler>
};
 8000702:	bf00      	nop
 8000704:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2403ee0c 	.word	0x2403ee0c
 8000710:	2403f040 	.word	0x2403f040

08000714 <OpenSD>:

void OpenSD(const char **file_name,enum SD_FATFS_POSIX file_acces_type)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	FRESULT res = f_open(&SDFile, *file_name, file_acces_type);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	4619      	mov	r1, r3
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <OpenSD+0x30>)
 800072a:	f00a fe7b 	bl	800b424 <f_open>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <OpenSD+0x28>
	{
		Error_Handler();
 8000738:	f000 fc4e 	bl	8000fd8 <Error_Handler>
	}
};
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2403ee10 	.word	0x2403ee10

08000748 <WriteSD>:

void WriteSD(char *wtext, uint32_t wtextSize, uint32_t *BytesWritten)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	FRESULT res = f_write(&SDFile, (char *)wtext, wtextSize, (void *)&BytesWritten);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	68f9      	ldr	r1, [r7, #12]
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <WriteSD+0x34>)
 800075c:	f00b f820 	bl	800b7a0 <f_write>
 8000760:	4603      	mov	r3, r0
 8000762:	75fb      	strb	r3, [r7, #23]
	if((BytesWritten == 0) || (res != FR_OK))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <WriteSD+0x28>
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <WriteSD+0x2c>
	{
	  Error_Handler();
 8000770:	f000 fc32 	bl	8000fd8 <Error_Handler>
	}
};
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2403ee10 	.word	0x2403ee10

08000780 <CloseSD>:

void CloseSD()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <CloseSD+0x10>)
 8000786:	f00b f9fe 	bl	800bb86 <f_close>
};
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2403ee10 	.word	0x2403ee10

08000794 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e024      	b.n	80007f0 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	e01a      	b.n	80007e2 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	dd0a      	ble.n	80007c8 <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	025a      	lsls	r2, r3, #9
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e009      	b.n	80007dc <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	025a      	lsls	r2, r3, #9
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	3301      	adds	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007e8:	dbe0      	blt.n	80007ac <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbd6      	blt.n	80007a6 <HalfKBWrite+0x12>
			}

		}

	}
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	; 0x70
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HalfKBWrite(wtext,chunk_mult);
 800080e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000812:	4881      	ldr	r0, [pc, #516]	; (8000a18 <main+0x210>)
 8000814:	f7ff ffbe 	bl	8000794 <HalfKBWrite>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000818:	4b80      	ldr	r3, [pc, #512]	; (8000a1c <main+0x214>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11b      	bne.n	800085c <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800082a:	f3bf 8f6f 	isb	sy
}
 800082e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000830:	4b7a      	ldr	r3, [pc, #488]	; (8000a1c <main+0x214>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000838:	f3bf 8f4f 	dsb	sy
}
 800083c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083e:	f3bf 8f6f 	isb	sy
}
 8000842:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000844:	4b75      	ldr	r3, [pc, #468]	; (8000a1c <main+0x214>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a74      	ldr	r2, [pc, #464]	; (8000a1c <main+0x214>)
 800084a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000850:	f3bf 8f4f 	dsb	sy
}
 8000854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000856:	f3bf 8f6f 	isb	sy
}
 800085a:	e000      	b.n	800085e <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800085c:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800085e:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <main+0x214>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d138      	bne.n	80008dc <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800086a:	4b6c      	ldr	r3, [pc, #432]	; (8000a1c <main+0x214>)
 800086c:	2200      	movs	r2, #0
 800086e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000872:	f3bf 8f4f 	dsb	sy
}
 8000876:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000878:	4b68      	ldr	r3, [pc, #416]	; (8000a1c <main+0x214>)
 800087a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800087e:	65fb      	str	r3, [r7, #92]	; 0x5c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000882:	0b5b      	lsrs	r3, r3, #13
 8000884:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800088a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800088c:	08db      	lsrs	r3, r3, #3
 800088e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000896:	015a      	lsls	r2, r3, #5
 8000898:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800089c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800089e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008a0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a2:	495e      	ldr	r1, [pc, #376]	; (8000a1c <main+0x214>)
 80008a4:	4313      	orrs	r3, r2
 80008a6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	657a      	str	r2, [r7, #84]	; 0x54
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1ef      	bne.n	8000894 <main+0x8c>
    } while(sets-- != 0U);
 80008b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1e5      	bne.n	800088a <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
}
 80008c2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008c4:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <main+0x214>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4a54      	ldr	r2, [pc, #336]	; (8000a1c <main+0x214>)
 80008ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
}
 80008d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy
}
 80008da:	e000      	b.n	80008de <main+0xd6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008dc:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 fe8d 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f8ab 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f000 fa3d 	bl	8000d64 <MX_GPIO_Init>
  MX_ETH_Init();
 80008ea:	f000 f917 	bl	8000b1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008ee:	f000 f981 	bl	8000bf4 <MX_USART3_UART_Init>
  MX_MDMA_Init();
 80008f2:	f000 f9d3 	bl	8000c9c <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 80008f6:	f000 f95d 	bl	8000bb4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008fa:	f008 fe47 	bl	800958c <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 80008fe:	f000 f9c5 	bl	8000c8c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2101      	movs	r1, #1
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <main+0x218>)
 8000908:	f001 fe28 	bl	800255c <HAL_GPIO_WritePin>
	MountSD();
 800090c:	f7ff fed4 	bl	80006b8 <MountSD>
	OpenSD(file_name,w);
 8000910:	210a      	movs	r1, #10
 8000912:	4844      	ldr	r0, [pc, #272]	; (8000a24 <main+0x21c>)
 8000914:	f7ff fefe 	bl	8000714 <OpenSD>
	WriteSD(wtext,chunk_size,&byteswritten);
 8000918:	4a43      	ldr	r2, [pc, #268]	; (8000a28 <main+0x220>)
 800091a:	f44f 317a 	mov.w	r1, #256000	; 0x3e800
 800091e:	483e      	ldr	r0, [pc, #248]	; (8000a18 <main+0x210>)
 8000920:	f7ff ff12 	bl	8000748 <WriteSD>
	CloseSD();
 8000924:	f7ff ff2c 	bl	8000780 <CloseSD>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	483c      	ldr	r0, [pc, #240]	; (8000a20 <main+0x218>)
 800092e:	f001 fe15 	bl	800255c <HAL_GPIO_WritePin>
	WriteTime();
 8000932:	f000 fb13 	bl	8000f5c <WriteTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	4839      	ldr	r0, [pc, #228]	; (8000a20 <main+0x218>)
 800093c:	f001 fe27 	bl	800258e <HAL_GPIO_TogglePin>


 int looper = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	66fb      	str	r3, [r7, #108]	; 0x6c
 char str[80]={0};
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	224c      	movs	r2, #76	; 0x4c
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00b fdf5 	bl	800c540 <memset>
      while (1)
  {
    	  int timestart = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	667b      	str	r3, [r7, #100]	; 0x64
    	  int timestop = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
    	  looper++;
 800095e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000960:	3301      	adds	r3, #1
 8000962:	66fb      	str	r3, [r7, #108]	; 0x6c
  	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2102      	movs	r1, #2
 8000968:	4830      	ldr	r0, [pc, #192]	; (8000a2c <main+0x224>)
 800096a:	f001 fdf7 	bl	800255c <HAL_GPIO_WritePin>

  	OpenSD(file_name,a);
 800096e:	2132      	movs	r1, #50	; 0x32
 8000970:	482c      	ldr	r0, [pc, #176]	; (8000a24 <main+0x21c>)
 8000972:	f7ff fecf 	bl	8000714 <OpenSD>

	for(int a = 0 ; a<100;a++)
 8000976:	2300      	movs	r3, #0
 8000978:	66bb      	str	r3, [r7, #104]	; 0x68
 800097a:	e00d      	b.n	8000998 <main+0x190>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 800097c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000980:	4827      	ldr	r0, [pc, #156]	; (8000a20 <main+0x218>)
 8000982:	f001 fe04 	bl	800258e <HAL_GPIO_TogglePin>
		//timestart = HAL_GetTick();
	  	//sprintf(wtext, "%d",a);
		WriteSD(wtext,chunk_size,&byteswritten);
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <main+0x220>)
 8000988:	f44f 317a 	mov.w	r1, #256000	; 0x3e800
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <main+0x210>)
 800098e:	f7ff fedb 	bl	8000748 <WriteSD>
	for(int a = 0 ; a<100;a++)
 8000992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000994:	3301      	adds	r3, #1
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
 8000998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800099a:	2b63      	cmp	r3, #99	; 0x63
 800099c:	ddee      	ble.n	800097c <main+0x174>
		//timestop = HAL_GetTick();
		//HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
	}
	CloseSD();
 800099e:	f7ff feef 	bl	8000780 <CloseSD>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a6:	481e      	ldr	r0, [pc, #120]	; (8000a20 <main+0x218>)
 80009a8:	f001 fdf1 	bl	800258e <HAL_GPIO_TogglePin>

	OpenSD(file_name,a);
 80009ac:	2132      	movs	r1, #50	; 0x32
 80009ae:	481d      	ldr	r0, [pc, #116]	; (8000a24 <main+0x21c>)
 80009b0:	f7ff feb0 	bl	8000714 <OpenSD>
		  	sprintf(text, "\n");
 80009b4:	491e      	ldr	r1, [pc, #120]	; (8000a30 <main+0x228>)
 80009b6:	481f      	ldr	r0, [pc, #124]	; (8000a34 <main+0x22c>)
 80009b8:	f00b fdca 	bl	800c550 <siprintf>
	WriteSD(text,strlen((char *)text),&byteswritten);
 80009bc:	481d      	ldr	r0, [pc, #116]	; (8000a34 <main+0x22c>)
 80009be:	f7ff fca7 	bl	8000310 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <main+0x220>)
 80009c6:	4619      	mov	r1, r3
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <main+0x22c>)
 80009ca:	f7ff febd 	bl	8000748 <WriteSD>
	CloseSD();
 80009ce:	f7ff fed7 	bl	8000780 <CloseSD>

	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <main+0x224>)
 80009d8:	f001 fdc0 	bl	800255c <HAL_GPIO_WritePin>
	if(looper == 10){
 80009dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009de:	2b0a      	cmp	r3, #10
 80009e0:	d1b9      	bne.n	8000956 <main+0x14e>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <main+0x218>)
 80009e8:	f001 fdd1 	bl	800258e <HAL_GPIO_TogglePin>
		WriteTime();
 80009ec:	f000 fab6 	bl	8000f5c <WriteTime>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2101      	movs	r1, #1
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <main+0x218>)
 80009f6:	f001 fdb1 	bl	800255c <HAL_GPIO_WritePin>
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <main+0x230>)
 8000a00:	f00a fcca 	bl	800b398 <f_mount>
		while(1){
			HAL_Delay(100);
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f000 fe8b 	bl	8001720 <HAL_Delay>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <main+0x218>)
 8000a10:	f001 fdbd 	bl	800258e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000a14:	e7f6      	b.n	8000a04 <main+0x1fc>
 8000a16:	bf00      	nop
 8000a18:	2400017c 	.word	0x2400017c
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	58020400 	.word	0x58020400
 8000a24:	24000028 	.word	0x24000028
 8000a28:	2403ea54 	.word	0x2403ea54
 8000a2c:	58021000 	.word	0x58021000
 8000a30:	0800cdd0 	.word	0x0800cdd0
 8000a34:	24000000 	.word	0x24000000
 8000a38:	2403f040 	.word	0x2403f040

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b09c      	sub	sp, #112	; 0x70
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	224c      	movs	r2, #76	; 0x4c
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00b fd78 	bl	800c540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2220      	movs	r2, #32
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00b fd72 	bl	800c540 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f002 f83d 	bl	8002adc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	4a2b      	ldr	r2, [pc, #172]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a70:	6193      	str	r3, [r2, #24]
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a7e:	bf00      	nop
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8c:	d1f8      	bne.n	8000a80 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a8e:	2321      	movs	r3, #33	; 0x21
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000aa8:	f240 1313 	movw	r3, #275	; 0x113
 8000aac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000aba:	2304      	movs	r3, #4
 8000abc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f840 	bl	8002b50 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad6:	f000 fa7f 	bl	8000fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	233f      	movs	r3, #63	; 0x3f
 8000adc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2103      	movs	r1, #3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fbd1 	bl	80032a8 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b0c:	f000 fa64 	bl	8000fd8 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3770      	adds	r7, #112	; 0x70
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024800 	.word	0x58024800

08000b1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <MX_ETH_Init+0x84>)
 8000b24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b34:	22e1      	movs	r2, #225	; 0xe1
 8000b36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b4c:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <MX_ETH_Init+0x88>)
 8000b4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_ETH_Init+0x8c>)
 8000b5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <MX_ETH_Init+0x90>)
 8000b60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_ETH_Init+0x80>)
 8000b6c:	f000 ff20 	bl	80019b0 <HAL_ETH_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b76:	f000 fa2f 	bl	8000fd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b7a:	2234      	movs	r2, #52	; 0x34
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_ETH_Init+0x94>)
 8000b80:	f00b fcde 	bl	800c540 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_ETH_Init+0x94>)
 8000b86:	2221      	movs	r2, #33	; 0x21
 8000b88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_ETH_Init+0x94>)
 8000b8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_ETH_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2403ed48 	.word	0x2403ed48
 8000ba0:	40028000 	.word	0x40028000
 8000ba4:	2403e97c 	.word	0x2403e97c
 8000ba8:	24000100 	.word	0x24000100
 8000bac:	240000a0 	.word	0x240000a0
 8000bb0:	2403edd0 	.word	0x2403edd0

08000bb4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_SDMMC1_SD_Init+0x38>)
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_SDMMC1_SD_Init+0x38>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_SDMMC1_SD_Init+0x38>)
 8000bc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bca:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_SDMMC1_SD_Init+0x38>)
 8000bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd2:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <MX_SDMMC1_SD_Init+0x38>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <MX_SDMMC1_SD_Init+0x38>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2403ea58 	.word	0x2403ea58
 8000bf0:	52007000 	.word	0x52007000

08000bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <MX_USART3_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f006 fd75 	bl	800772c <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 f9c6 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c50:	f007 fe08 	bl	8008864 <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f9bd 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c62:	f007 fe3d 	bl	80088e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f9b4 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c72:	f007 fdbe 	bl	80087f2 <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f9ac 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2403e9c4 	.word	0x2403e9c4
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <MX_MDMA_Init+0xbc>)
 8000ca4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <MX_MDMA_Init+0xbc>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <MX_MDMA_Init+0xbc>)
 8000cb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cc2:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <MX_MDMA_Init+0xc4>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cc8:	221d      	movs	r2, #29
 8000cca:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d1e:	f001 fc50 	bl	80025c2 <HAL_MDMA_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000d28:	f000 f956 	bl	8000fd8 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	480a      	ldr	r0, [pc, #40]	; (8000d5c <MX_MDMA_Init+0xc0>)
 8000d32:	f001 fc92 	bl	800265a <HAL_MDMA_ConfigPostRequestMask>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000d3c:	f000 f94c 	bl	8000fd8 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	207a      	movs	r0, #122	; 0x7a
 8000d46:	f000 fdfe 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d4a:	207a      	movs	r0, #122	; 0x7a
 8000d4c:	f000 fe15 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	2403ecdc 	.word	0x2403ecdc
 8000d60:	52000040 	.word	0x52000040

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b71      	ldr	r3, [pc, #452]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a6f      	ldr	r2, [pc, #444]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b6d      	ldr	r3, [pc, #436]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d98:	4b69      	ldr	r3, [pc, #420]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a68      	ldr	r2, [pc, #416]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a60      	ldr	r2, [pc, #384]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b5e      	ldr	r3, [pc, #376]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	4a59      	ldr	r2, [pc, #356]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b4f      	ldr	r3, [pc, #316]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a42      	ldr	r2, [pc, #264]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e52:	483c      	ldr	r0, [pc, #240]	; (8000f44 <MX_GPIO_Init+0x1e0>)
 8000e54:	f001 fb82 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	483a      	ldr	r0, [pc, #232]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000e60:	f001 fb7c 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	4838      	ldr	r0, [pc, #224]	; (8000f4c <MX_GPIO_Init+0x1e8>)
 8000e6a:	f001 fb77 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4833      	ldr	r0, [pc, #204]	; (8000f50 <MX_GPIO_Init+0x1ec>)
 8000e84:	f001 f9aa 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e88:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4828      	ldr	r0, [pc, #160]	; (8000f44 <MX_GPIO_Init+0x1e0>)
 8000ea2:	f001 f99b 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4822      	ldr	r0, [pc, #136]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000ec0:	f001 f98c 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481e      	ldr	r0, [pc, #120]	; (8000f54 <MX_GPIO_Init+0x1f0>)
 8000eda:	f001 f97f 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	; (8000f58 <MX_GPIO_Init+0x1f4>)
 8000ef4:	f001 f972 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4810      	ldr	r0, [pc, #64]	; (8000f58 <MX_GPIO_Init+0x1f4>)
 8000f16:	f001 f961 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_GPIO_Init+0x1e8>)
 8000f32:	f001 f953 	bl	80021dc <HAL_GPIO_Init>

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	58024400 	.word	0x58024400
 8000f44:	58020400 	.word	0x58020400
 8000f48:	58020c00 	.word	0x58020c00
 8000f4c:	58021000 	.word	0x58021000
 8000f50:	58020800 	.word	0x58020800
 8000f54:	58021800 	.word	0x58021800
 8000f58:	58020000 	.word	0x58020000

08000f5c <WriteTime>:

/* USER CODE BEGIN 4 */
void WriteTime()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000f60:	2232      	movs	r2, #50	; 0x32
 8000f62:	4917      	ldr	r1, [pc, #92]	; (8000fc0 <WriteTime+0x64>)
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <WriteTime+0x68>)
 8000f66:	f00a fa5d 	bl	800b424 <f_open>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <WriteTime+0x18>
	{
		Error_Handler();
 8000f70:	f000 f832 	bl	8000fd8 <Error_Handler>
	}
		sprintf(text, "\n#######################%u\n",HAL_GetTick());
 8000f74:	f000 fbc8 	bl	8001708 <HAL_GetTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <WriteTime+0x6c>)
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <WriteTime+0x70>)
 8000f80:	f00b fae6 	bl	800c550 <siprintf>
		res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000f84:	4811      	ldr	r0, [pc, #68]	; (8000fcc <WriteTime+0x70>)
 8000f86:	f7ff f9c3 	bl	8000310 <strlen>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <WriteTime+0x74>)
 8000f8e:	490f      	ldr	r1, [pc, #60]	; (8000fcc <WriteTime+0x70>)
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <WriteTime+0x68>)
 8000f92:	f00a fc05 	bl	800b7a0 <f_write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <WriteTime+0x78>)
 8000f9c:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <WriteTime+0x74>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <WriteTime+0x52>
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <WriteTime+0x78>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <WriteTime+0x58>
	{
		Error_Handler();
 8000fae:	f000 f813 	bl	8000fd8 <Error_Handler>
 8000fb2:	e003      	b.n	8000fbc <WriteTime+0x60>
	}
	else
	{
		f_close(&SDFile);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <WriteTime+0x68>)
 8000fb6:	f00a fde6 	bl	800bb86 <f_close>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	0800cdd4 	.word	0x0800cdd4
 8000fc4:	2403ee10 	.word	0x2403ee10
 8000fc8:	0800cde0 	.word	0x0800cde0
 8000fcc:	24000000 	.word	0x24000000
 8000fd0:	2403ea54 	.word	0x2403ea54
 8000fd4:	2403ecd8 	.word	0x2403ecd8

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <Error_Handler+0x2c>)
 8000fe2:	f001 fabb 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <Error_Handler+0x30>)
 8000fec:	f001 fab6 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <Error_Handler+0x2c>)
 8000ff8:	f001 fab0 	bl	800255c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x28>
 8001002:	bf00      	nop
 8001004:	58020400 	.word	0x58020400
 8001008:	58021000 	.word	0x58021000

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_MspInit+0x30>)
 8001014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x30>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x30>)
 8001024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	58024400 	.word	0x58024400

08001040 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a59      	ldr	r2, [pc, #356]	; (80011c4 <HAL_ETH_MspInit+0x184>)
 800105e:	4293      	cmp	r3, r2
 8001060:	f040 80ab 	bne.w	80011ba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001064:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 8001066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800106a:	4a57      	ldr	r2, [pc, #348]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 800106c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001070:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001074:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 8001076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800107a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001082:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 8001084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001088:	4a4f      	ldr	r2, [pc, #316]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001092:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 8001094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a6:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_ETH_MspInit+0x188>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001136:	2332      	movs	r3, #50	; 0x32
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001146:	230b      	movs	r3, #11
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	481e      	ldr	r0, [pc, #120]	; (80011cc <HAL_ETH_MspInit+0x18c>)
 8001152:	f001 f843 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001156:	2386      	movs	r3, #134	; 0x86
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001166:	230b      	movs	r3, #11
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4817      	ldr	r0, [pc, #92]	; (80011d0 <HAL_ETH_MspInit+0x190>)
 8001172:	f001 f833 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001188:	230b      	movs	r3, #11
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <HAL_ETH_MspInit+0x194>)
 8001194:	f001 f822 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001198:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <HAL_ETH_MspInit+0x198>)
 80011b6:	f001 f811 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3738      	adds	r7, #56	; 0x38
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40028000 	.word	0x40028000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	58020800 	.word	0x58020800
 80011d0:	58020000 	.word	0x58020000
 80011d4:	58020400 	.word	0x58020400
 80011d8:	58021800 	.word	0x58021800

080011dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0b8      	sub	sp, #224	; 0xe0
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	22b4      	movs	r2, #180	; 0xb4
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b f99f 	bl	800c540 <memset>
  if(hsd->Instance==SDMMC1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a3b      	ldr	r2, [pc, #236]	; (80012f4 <HAL_SD_MspInit+0x118>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d16e      	bne.n	80012ea <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800120c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001210:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001212:	2300      	movs	r3, #0
 8001214:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fbd0 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001226:	f7ff fed7 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 800122c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001230:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 8001232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001236:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 800123c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_SD_MspInit+0x11c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001284:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800129e:	230c      	movs	r3, #12
 80012a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a8:	4619      	mov	r1, r3
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <HAL_SD_MspInit+0x120>)
 80012ac:	f000 ff96 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b0:	2304      	movs	r3, #4
 80012b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012c8:	230c      	movs	r3, #12
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d2:	4619      	mov	r1, r3
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <HAL_SD_MspInit+0x124>)
 80012d6:	f000 ff81 	bl	80021dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2031      	movs	r0, #49	; 0x31
 80012e0:	f000 fb31 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012e4:	2031      	movs	r0, #49	; 0x31
 80012e6:	f000 fb48 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	37e0      	adds	r7, #224	; 0xe0
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	52007000 	.word	0x52007000
 80012f8:	58024400 	.word	0x58024400
 80012fc:	58020800 	.word	0x58020800
 8001300:	58020c00 	.word	0x58020c00

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0b6      	sub	sp, #216	; 0xd8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	22b4      	movs	r2, #180	; 0xb4
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f00b f90b 	bl	800c540 <memset>
  if(huart->Instance==USART3)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_UART_MspInit+0xc0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d142      	bne.n	80013ba <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001334:	2302      	movs	r3, #2
 8001336:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fb3c 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800134e:	f7ff fe43 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0xc4>)
 8001354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_UART_MspInit+0xc4>)
 800135a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_UART_MspInit+0xc4>)
 8001364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0xc4>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_UART_MspInit+0xc4>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_UART_MspInit+0xc4>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800138e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a8:	2307      	movs	r3, #7
 80013aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_UART_MspInit+0xc8>)
 80013b6:	f000 ff11 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	37d8      	adds	r7, #216	; 0xd8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40004800 	.word	0x40004800
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58020c00 	.word	0x58020c00

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 f960 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <SDMMC1_IRQHandler+0x10>)
 800142a:	f004 ff8d 	bl	8006348 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2403ea58 	.word	0x2403ea58

08001438 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <MDMA_IRQHandler+0x10>)
 800143e:	f001 f95f 	bl	8002700 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2403ecdc 	.word	0x2403ecdc

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f00b f836 	bl	800c4ec <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	24050000 	.word	0x24050000
 80014ac:	00000800 	.word	0x00000800
 80014b0:	2403e984 	.word	0x2403e984
 80014b4:	2403f280 	.word	0x2403f280

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <SystemInit+0xd0>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a31      	ldr	r2, [pc, #196]	; (8001588 <SystemInit+0xd0>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <SystemInit+0xd4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d807      	bhi.n	80014e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <SystemInit+0xd4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 030f 	bic.w	r3, r3, #15
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <SystemInit+0xd4>)
 80014e2:	f043 0307 	orr.w	r3, r3, #7
 80014e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <SystemInit+0xd8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <SystemInit+0xd8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <SystemInit+0xd8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemInit+0xd8>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4924      	ldr	r1, [pc, #144]	; (8001590 <SystemInit+0xd8>)
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <SystemInit+0xdc>)
 8001502:	4013      	ands	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <SystemInit+0xd4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <SystemInit+0xd4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 030f 	bic.w	r3, r3, #15
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <SystemInit+0xd4>)
 800151c:	f043 0307 	orr.w	r3, r3, #7
 8001520:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <SystemInit+0xd8>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <SystemInit+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <SystemInit+0xd8>)
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <SystemInit+0xe0>)
 8001538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <SystemInit+0xd8>)
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <SystemInit+0xe4>)
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <SystemInit+0xd8>)
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <SystemInit+0xe8>)
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SystemInit+0xd8>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <SystemInit+0xd8>)
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <SystemInit+0xe8>)
 8001550:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <SystemInit+0xd8>)
 8001554:	2200      	movs	r2, #0
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <SystemInit+0xd8>)
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <SystemInit+0xe8>)
 800155c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <SystemInit+0xd8>)
 8001560:	2200      	movs	r2, #0
 8001562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <SystemInit+0xd8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <SystemInit+0xd8>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <SystemInit+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <SystemInit+0xec>)
 8001578:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800157c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	52002000 	.word	0x52002000
 8001590:	58024400 	.word	0x58024400
 8001594:	eaf6ed7f 	.word	0xeaf6ed7f
 8001598:	02020200 	.word	0x02020200
 800159c:	01ff0000 	.word	0x01ff0000
 80015a0:	01010280 	.word	0x01010280
 80015a4:	52004000 	.word	0x52004000

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ac:	f7ff ff84 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f00a ff8f 	bl	800c4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff f915 	bl	8000808 <main>
  bx  lr
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e8:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 80015ec:	0800cf70 	.word	0x0800cf70
  ldr r2, =_sbss
 80015f0:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80015f4:	2403f280 	.word	0x2403f280

080015f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC3_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	2003      	movs	r0, #3
 8001604:	f000 f994 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001608:	f002 f804 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_Init+0x68>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	4913      	ldr	r1, [pc, #76]	; (8001668 <HAL_Init+0x6c>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_Init+0x68>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_Init+0x6c>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_Init+0x70>)
 800163e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x74>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f814 	bl	8001674 <HAL_InitTick>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e002      	b.n	800165c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001656:	f7ff fcd9 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58024400 	.word	0x58024400
 8001668:	0800ce40 	.word	0x0800ce40
 800166c:	24000030 	.word	0x24000030
 8001670:	2400002c 	.word	0x2400002c

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e021      	b.n	80016cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_InitTick+0x64>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_InitTick+0x60>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f979 	bl	8001996 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f943 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x68>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	24000038 	.word	0x24000038
 80016d8:	2400002c 	.word	0x2400002c
 80016dc:	24000034 	.word	0x24000034

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	24000038 	.word	0x24000038
 8001704:	2403ee04 	.word	0x2403ee04

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2403ee04 	.word	0x2403ee04

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	24000038 	.word	0x24000038

08001768 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	58000400 	.word	0x58000400

08001790 <__NVIC_SetPriorityGrouping>:
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	05fa0000 	.word	0x05fa0000

080017d8 <__NVIC_GetPriorityGrouping>:
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff40 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff90 	bl	8001884 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5f 	bl	8001830 <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff33 	bl	80017f4 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa4 	bl	80018ec <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0c6      	b.n	8001b50 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fb38 	bl	8001040 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2223      	movs	r2, #35	; 0x23
 80019d4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <HAL_ETH_Init+0x1a8>)
 80019d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019dc:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <HAL_ETH_Init+0x1a8>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_ETH_Init+0x1a8>)
 80019e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1b      	ldrb	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff feb3 	bl	8001768 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a02:	e003      	b.n	8001a0c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a08:	f7ff feae 	bl	8001768 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff fe70 	bl	8001708 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a2a:	e00f      	b.n	8001a4c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a2c:	f7ff fe6c 	bl	8001708 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a3a:	d907      	bls.n	8001a4c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	22e0      	movs	r2, #224	; 0xe0
 8001a46:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e081      	b.n	8001b50 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1e6      	bne.n	8001a2c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fac0 	bl	8001fe4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a64:	f001 ff50 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a3c      	ldr	r2, [pc, #240]	; (8001b5c <HAL_ETH_Init+0x1ac>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9a      	lsrs	r2, r3, #18
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3a01      	subs	r2, #1
 8001a78:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fa13 	bl	8001ea8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a9c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	22e0      	movs	r2, #224	; 0xe0
 8001ab4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e04a      	b.n	8001b50 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <HAL_ETH_Init+0x1b0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6952      	ldr	r2, [r2, #20]
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	6809      	ldr	r1, [r1, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ada:	440b      	add	r3, r1
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fad8 	bl	8002094 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb1c 	bl	8002122 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	3305      	adds	r3, #5
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021a      	lsls	r2, r3, #8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	061a      	lsls	r2, r3, #24
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	3302      	adds	r3, #2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b36:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2210      	movs	r2, #16
 8001b46:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	431bde83 	.word	0x431bde83
 8001b60:	ffff8001 	.word	0xffff8001

08001b64 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b76:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b7e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	7b1b      	ldrb	r3, [r3, #12]
 8001b84:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b86:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	7b5b      	ldrb	r3, [r3, #13]
 8001b8c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b8e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	7b9b      	ldrb	r3, [r3, #14]
 8001b94:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	7bdb      	ldrb	r3, [r3, #15]
 8001b9c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b9e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	7c12      	ldrb	r2, [r2, #16]
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d102      	bne.n	8001bae <ETH_SetMACConfig+0x4a>
 8001ba8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bac:	e000      	b.n	8001bb0 <ETH_SetMACConfig+0x4c>
 8001bae:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bb0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	7c52      	ldrb	r2, [r2, #17]
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d102      	bne.n	8001bc0 <ETH_SetMACConfig+0x5c>
 8001bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bbe:	e000      	b.n	8001bc2 <ETH_SetMACConfig+0x5e>
 8001bc0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bc2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7c9b      	ldrb	r3, [r3, #18]
 8001bc8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bca:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bd0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001bd6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7f1b      	ldrb	r3, [r3, #28]
 8001bdc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001bde:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	7f5b      	ldrb	r3, [r3, #29]
 8001be4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001be6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	7f92      	ldrb	r2, [r2, #30]
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	d102      	bne.n	8001bf6 <ETH_SetMACConfig+0x92>
 8001bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf4:	e000      	b.n	8001bf8 <ETH_SetMACConfig+0x94>
 8001bf6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bf8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	7fdb      	ldrb	r3, [r3, #31]
 8001bfe:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c00:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c08:	2a00      	cmp	r2, #0
 8001c0a:	d102      	bne.n	8001c12 <ETH_SetMACConfig+0xae>
 8001c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c10:	e000      	b.n	8001c14 <ETH_SetMACConfig+0xb0>
 8001c12:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c14:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c1a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c22:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c24:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <ETH_SetMACConfig+0x22c>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c4e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c50:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c58:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c5a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c62:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c64:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d102      	bne.n	8001c76 <ETH_SetMACConfig+0x112>
 8001c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c74:	e000      	b.n	8001c78 <ETH_SetMACConfig+0x114>
 8001c76:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c78:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <ETH_SetMACConfig+0x230>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	430b      	orrs	r3, r1
 8001c94:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c9c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <ETH_SetMACConfig+0x234>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cc0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cc6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d101      	bne.n	8001cd6 <ETH_SetMACConfig+0x172>
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	e000      	b.n	8001cd8 <ETH_SetMACConfig+0x174>
 8001cd6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001cd8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cde:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cee:	4013      	ands	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d00:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d08:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d16:	f023 0103 	bic.w	r1, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d2e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d101      	bne.n	8001d52 <ETH_SetMACConfig+0x1ee>
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	e000      	b.n	8001d54 <ETH_SetMACConfig+0x1f0>
 8001d52:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d54:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d5c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d5e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d66:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d74:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	00048083 	.word	0x00048083
 8001d94:	c0f88000 	.word	0xc0f88000
 8001d98:	fffffef0 	.word	0xfffffef0

08001d9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <ETH_SetDMAConfig+0xf8>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	6809      	ldr	r1, [r1, #0]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001dc2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	791b      	ldrb	r3, [r3, #4]
 8001dc8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
 8001dd4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f241 0304 	movw	r3, #4100	; 0x1004
 8001de2:	4413      	add	r3, r2
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <ETH_SetDMAConfig+0xfc>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6811      	ldr	r1, [r2, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001df6:	440b      	add	r3, r1
 8001df8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7b5b      	ldrb	r3, [r3, #13]
 8001dfe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <ETH_SetDMAConfig+0x100>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e22:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	7d1b      	ldrb	r3, [r3, #20]
 8001e2c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e2e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	7f5b      	ldrb	r3, [r3, #29]
 8001e34:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e42:	4413      	add	r3, r2
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <ETH_SetDMAConfig+0x104>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e56:	440b      	add	r3, r1
 8001e58:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7f1b      	ldrb	r3, [r3, #28]
 8001e5e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e70:	4413      	add	r3, r2
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <ETH_SetDMAConfig+0x108>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6811      	ldr	r1, [r2, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e84:	440b      	add	r3, r1
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	ffff87fd 	.word	0xffff87fd
 8001e98:	ffff2ffe 	.word	0xffff2ffe
 8001e9c:	fffec000 	.word	0xfffec000
 8001ea0:	ffc0efef 	.word	0xffc0efef
 8001ea4:	7fc0ffff 	.word	0x7fc0ffff

08001ea8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0a4      	sub	sp, #144	; 0x90
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f00:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f04:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f22:	2300      	movs	r3, #0
 8001f24:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f40:	2320      	movs	r3, #32
 8001f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f52:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f5c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f64:	2302      	movs	r3, #2
 8001f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f82:	2300      	movs	r3, #0
 8001f84:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fde6 	bl	8001b64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001fc8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fee1 	bl	8001d9c <ETH_SetDMAConfig>
}
 8001fda:	bf00      	nop
 8001fdc:	3790      	adds	r7, #144	; 0x90
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ffe:	f001 fc83 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8002002:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d908      	bls.n	800201e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d804      	bhi.n	800201e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e027      	b.n	800206e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4a18      	ldr	r2, [pc, #96]	; (8002084 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d908      	bls.n	8002038 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d204      	bcs.n	8002038 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e01a      	b.n	800206e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d303      	bcc.n	8002048 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d911      	bls.n	800206c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d908      	bls.n	8002062 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d804      	bhi.n	8002062 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e005      	b.n	800206e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e000      	b.n	800206e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800206c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	01312cff 	.word	0x01312cff
 8002084:	02160ebf 	.word	0x02160ebf
 8002088:	03938700 	.word	0x03938700
 800208c:	05f5e0ff 	.word	0x05f5e0ff
 8002090:	08f0d17f 	.word	0x08f0d17f

08002094 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e01d      	b.n	80020de <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68d9      	ldr	r1, [r3, #12]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	3206      	adds	r2, #6
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d9de      	bls.n	80020a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f241 132c 	movw	r3, #4396	; 0x112c
 80020f2:	4413      	add	r3, r2
 80020f4:	2203      	movs	r2, #3
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68d9      	ldr	r1, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f241 1314 	movw	r3, #4372	; 0x1114
 8002104:	4413      	add	r3, r2
 8002106:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e024      	b.n	800217a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6919      	ldr	r1, [r3, #16]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3310      	adds	r3, #16
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d9d7      	bls.n	8002130 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f241 1330 	movw	r3, #4400	; 0x1130
 80021a6:	4413      	add	r3, r2
 80021a8:	2203      	movs	r2, #3
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80021b8:	4413      	add	r3, r2
 80021ba:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f241 1328 	movw	r3, #4392	; 0x1128
 80021cc:	4413      	add	r3, r2
 80021ce:	6019      	str	r1, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021ea:	4b86      	ldr	r3, [pc, #536]	; (8002404 <HAL_GPIO_Init+0x228>)
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ee:	e18c      	b.n	800250a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 817e 	beq.w	8002504 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d005      	beq.n	8002220 <HAL_GPIO_Init+0x44>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d130      	bne.n	8002282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002256:	2201      	movs	r2, #1
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 0201 	and.w	r2, r3, #1
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b03      	cmp	r3, #3
 800228c:	d017      	beq.n	80022be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d123      	bne.n	8002312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	69b9      	ldr	r1, [r7, #24]
 800230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80d8 	beq.w	8002504 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <HAL_GPIO_Init+0x22c>)
 8002356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235a:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <HAL_GPIO_Init+0x22c>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_GPIO_Init+0x22c>)
 8002366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_GPIO_Init+0x230>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_GPIO_Init+0x234>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d04a      	beq.n	8002434 <HAL_GPIO_Init+0x258>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_GPIO_Init+0x238>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02b      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_GPIO_Init+0x23c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1a      	ldr	r2, [pc, #104]	; (800241c <HAL_GPIO_Init+0x240>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_GPIO_Init+0x244>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x216>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_GPIO_Init+0x248>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x212>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_GPIO_Init+0x24c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_GPIO_Init+0x250>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x20a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_GPIO_Init+0x254>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x206>
 80023de:	2309      	movs	r3, #9
 80023e0:	e029      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023e2:	230a      	movs	r3, #10
 80023e4:	e027      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e025      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e023      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023ee:	2305      	movs	r3, #5
 80023f0:	e021      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e01f      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e01d      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e01b      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 80023fe:	2301      	movs	r3, #1
 8002400:	e019      	b.n	8002436 <HAL_GPIO_Init+0x25a>
 8002402:	bf00      	nop
 8002404:	58000080 	.word	0x58000080
 8002408:	58024400 	.word	0x58024400
 800240c:	58000400 	.word	0x58000400
 8002410:	58020000 	.word	0x58020000
 8002414:	58020400 	.word	0x58020400
 8002418:	58020800 	.word	0x58020800
 800241c:	58020c00 	.word	0x58020c00
 8002420:	58021000 	.word	0x58021000
 8002424:	58021400 	.word	0x58021400
 8002428:	58021800 	.word	0x58021800
 800242c:	58021c00 	.word	0x58021c00
 8002430:	58022400 	.word	0x58022400
 8002434:	2300      	movs	r3, #0
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002446:	4938      	ldr	r1, [pc, #224]	; (8002528 <HAL_GPIO_Init+0x34c>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800247a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	3301      	adds	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f ae6b 	bne.w	80021f0 <HAL_GPIO_Init+0x14>
  }
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3724      	adds	r7, #36	; 0x24
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	58000400 	.word	0x58000400

0800252c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e001      	b.n	800254e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	041a      	lsls	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a0:	887a      	ldrh	r2, [r7, #2]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	041a      	lsls	r2, r3, #16
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	400b      	ands	r3, r1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ca:	f7ff f89d 	bl	8001708 <HAL_GetTick>
 80025ce:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e03b      	b.n	8002652 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80025fa:	e00f      	b.n	800261c <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80025fc:	f7ff f884 	bl	8001708 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b05      	cmp	r3, #5
 8002608:	d908      	bls.n	800261c <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2203      	movs	r2, #3
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e01a      	b.n	8002652 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e8      	bne.n	80025fc <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9be 	bl	80029ac <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800265a:	b480      	push	{r7}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e03e      	b.n	80026f2 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800267e:	2302      	movs	r3, #2
 8002680:	e037      	b.n	80026f2 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d126      	bne.n	80026e4 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11c      	bne.n	80026de <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026c8:	611a      	str	r2, [r3, #16]
 80026ca:	e00d      	b.n	80026e8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	e004      	b.n	80026e8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
 80026e2:	e001      	b.n	80026e8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800270c:	4b9a      	ldr	r3, [pc, #616]	; (8002978 <HAL_MDMA_IRQHandler+0x278>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a9a      	ldr	r2, [pc, #616]	; (800297c <HAL_MDMA_IRQHandler+0x27c>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0a9b      	lsrs	r3, r3, #10
 8002718:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	4b97      	ldr	r3, [pc, #604]	; (8002980 <HAL_MDMA_IRQHandler+0x280>)
 8002722:	4413      	add	r3, r2
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2201      	movs	r2, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8002732:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 812e 	beq.w	800299e <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d054      	beq.n	80027fa <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d04d      	beq.n	80027fa <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0202 	bic.w	r2, r2, #2
 800276c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	669a      	str	r2, [r3, #104]	; 0x68
 800278c:	e005      	b.n	800279a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027be:	f043 0208 	orr.w	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2208      	movs	r2, #8
 8002850:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2204      	movs	r2, #4
 8002884:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d039      	beq.n	8002918 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d032      	beq.n	8002918 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80028c0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d110      	bne.n	80028f0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05d      	beq.n	80029a2 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
        }
        return;
 80028ee:	e058      	b.n	80029a2 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291c:	2b00      	cmp	r3, #0
 800291e:	d041      	beq.n	80029a4 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	d307      	bcc.n	8002954 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f2      	bne.n	8002938 <HAL_MDMA_IRQHandler+0x238>
 8002952:	e000      	b.n	8002956 <HAL_MDMA_IRQHandler+0x256>
        break;
 8002954:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2203      	movs	r2, #3
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002974:	e00a      	b.n	800298c <HAL_MDMA_IRQHandler+0x28c>
 8002976:	bf00      	nop
 8002978:	2400002c 	.word	0x2400002c
 800297c:	1b4e81b5 	.word	0x1b4e81b5
 8002980:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e002      	b.n	80029a4 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80029a2:	bf00      	nop
    }
  }
}
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop

080029ac <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68d9      	ldr	r1, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029d2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029de:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029ea:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	3b01      	subs	r3, #1
 80029f2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80029f4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002a00:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002a02:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d107      	bne.n	8002a1e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002a1c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da11      	bge.n	8002a52 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a3c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	425b      	negs	r3, r3
 8002a44:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	621a      	str	r2, [r3, #32]
 8002a50:	e006      	b.n	8002a60 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da15      	bge.n	8002a94 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002a76:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	425b      	negs	r3, r3
 8002a7e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6a19      	ldr	r1, [r3, #32]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	621a      	str	r2, [r3, #32]
 8002a92:	e009      	b.n	8002aa8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a19      	ldr	r1, [r3, #32]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	041a      	lsls	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d006      	beq.n	8002ac0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
 8002abe:	e003      	b.n	8002ac8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00a      	beq.n	8002b06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01f      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e01d      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	490f      	ldr	r1, [pc, #60]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b16:	f7fe fdf7 	bl	8001708 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b1e:	f7fe fdf3 	bl	8001708 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2c:	d901      	bls.n	8002b32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	58024800 	.word	0x58024800

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	; 0x30
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e397      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8087 	beq.w	8002c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b70:	4b9e      	ldr	r3, [pc, #632]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b7a:	4b9c      	ldr	r3, [pc, #624]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d007      	beq.n	8002b96 <HAL_RCC_OscConfig+0x46>
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	2b18      	cmp	r3, #24
 8002b8a:	d110      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b95      	ldr	r3, [pc, #596]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x12c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d168      	bne.n	8002c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e371      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x76>
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a8b      	ldr	r2, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e02e      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b87      	ldr	r3, [pc, #540]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a86      	ldr	r2, [pc, #536]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b84      	ldr	r3, [pc, #528]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a83      	ldr	r2, [pc, #524]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0xbc>
 8002bf2:	4b7e      	ldr	r3, [pc, #504]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7d      	ldr	r2, [pc, #500]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b7b      	ldr	r3, [pc, #492]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7a      	ldr	r2, [pc, #488]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	4b77      	ldr	r3, [pc, #476]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a76      	ldr	r2, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b74      	ldr	r3, [pc, #464]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a73      	ldr	r2, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd6c 	bl	8001708 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fd68 	bl	8001708 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e325      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c46:	4b69      	ldr	r3, [pc, #420]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe4>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fd58 	bl	8001708 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fd54 	bl	8001708 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e311      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x10c>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 808a 	beq.w	8002da0 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8c:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c96:	4b55      	ldr	r3, [pc, #340]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	2b18      	cmp	r3, #24
 8002ca6:	d137      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c8>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d132      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb2:	4b4e      	ldr	r3, [pc, #312]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e2e3      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cca:	4b48      	ldr	r3, [pc, #288]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0219 	bic.w	r2, r3, #25
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4945      	ldr	r1, [pc, #276]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cdc:	f7fe fd14 	bl	8001708 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fd10 	bl	8001708 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e2cd      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	4936      	ldr	r1, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d16:	e043      	b.n	8002da0 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d026      	beq.n	8002d6e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 0219 	bic.w	r2, r3, #25
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	492f      	ldr	r1, [pc, #188]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fce9 	bl	8001708 <HAL_GetTick>
 8002d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fce5 	bl	8001708 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e2a2      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4921      	ldr	r1, [pc, #132]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fcc5 	bl	8001708 <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe fcc1 	bl	8001708 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e27e      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d06d      	beq.n	8002e88 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d007      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x282>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b18      	cmp	r3, #24
 8002dc6:	d11e      	bne.n	8002e06 <HAL_RCC_OscConfig+0x2b6>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d119      	bne.n	8002e06 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x29c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2a0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d004      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e253      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
 8002dea:	bf00      	nop
 8002dec:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df0:	4ba3      	ldr	r3, [pc, #652]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	49a0      	ldr	r1, [pc, #640]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e04:	e040      	b.n	8002e88 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d023      	beq.n	8002e56 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e0e:	4b9c      	ldr	r3, [pc, #624]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a9b      	ldr	r2, [pc, #620]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fc75 	bl	8001708 <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e22:	f7fe fc71 	bl	8001708 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e22e      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e34:	4b92      	ldr	r3, [pc, #584]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e40:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	498c      	ldr	r1, [pc, #560]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60cb      	str	r3, [r1, #12]
 8002e54:	e018      	b.n	8002e88 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e56:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a89      	ldr	r2, [pc, #548]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fc51 	bl	8001708 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fc4d 	bl	8001708 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e20a      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e7c:	4b80      	ldr	r3, [pc, #512]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d036      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d019      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9c:	4b78      	ldr	r3, [pc, #480]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	4a77      	ldr	r2, [pc, #476]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fc2e 	bl	8001708 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fc2a 	bl	8001708 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1e7      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ec2:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x360>
 8002ece:	e018      	b.n	8002f02 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b6b      	ldr	r3, [pc, #428]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed4:	4a6a      	ldr	r2, [pc, #424]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fc14 	bl	8001708 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fc10 	bl	8001708 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1cd      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef6:	4b62      	ldr	r3, [pc, #392]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d036      	beq.n	8002f7c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f16:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a59      	ldr	r2, [pc, #356]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fbf1 	bl	8001708 <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fbed 	bl	8001708 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1aa      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3da>
 8002f48:	e018      	b.n	8002f7c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a4c      	ldr	r2, [pc, #304]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fbd7 	bl	8001708 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f5e:	f7fe fbd3 	bl	8001708 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e190      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8085 	beq.w	8003094 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_OscConfig+0x534>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3d      	ldr	r2, [pc, #244]	; (8003084 <HAL_RCC_OscConfig+0x534>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f96:	f7fe fbb7 	bl	8001708 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe fbb3 	bl	8001708 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e170      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x534>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x482>
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	e02d      	b.n	800302e <HAL_RCC_OscConfig+0x4de>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4a4>
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a28      	ldr	r2, [pc, #160]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a25      	ldr	r2, [pc, #148]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	e01c      	b.n	800302e <HAL_RCC_OscConfig+0x4de>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x4c6>
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x4de>
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe fb67 	bl	8001708 <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fb63 	bl	8001708 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e11e      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCC_OscConfig+0x530>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <HAL_RCC_OscConfig+0x4ee>
 8003060:	e018      	b.n	8003094 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe fb51 	bl	8001708 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003068:	e00e      	b.n	8003088 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe fb4d 	bl	8001708 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d905      	bls.n	8003088 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e108      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
 8003080:	58024400 	.word	0x58024400
 8003084:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ea      	bne.n	800306a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80f9 	beq.w	8003290 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a6:	2b18      	cmp	r3, #24
 80030a8:	f000 80b4 	beq.w	8003214 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f040 8095 	bne.w	80031e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b79      	ldr	r3, [pc, #484]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a78      	ldr	r2, [pc, #480]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80030bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe fb21 	bl	8001708 <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe fb1d 	bl	8001708 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0da      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030dc:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCC_OscConfig+0x750>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	430a      	orrs	r2, r1
 80030fc:	4967      	ldr	r1, [pc, #412]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	628b      	str	r3, [r1, #40]	; 0x28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	3b01      	subs	r3, #1
 8003108:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	3b01      	subs	r3, #1
 8003112:	025b      	lsls	r3, r3, #9
 8003114:	b29b      	uxth	r3, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	3b01      	subs	r3, #1
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	3b01      	subs	r3, #1
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003132:	495a      	ldr	r1, [pc, #360]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003138:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	4a57      	ldr	r2, [pc, #348]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003144:	4b55      	ldr	r3, [pc, #340]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003148:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <HAL_RCC_OscConfig+0x754>)
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003150:	00d2      	lsls	r2, r2, #3
 8003152:	4952      	ldr	r1, [pc, #328]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f023 020c 	bic.w	r2, r3, #12
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f023 0202 	bic.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4949      	ldr	r1, [pc, #292]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800317c:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003188:	4b44      	ldr	r3, [pc, #272]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800318e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003194:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4a40      	ldr	r2, [pc, #256]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80031a0:	4b3e      	ldr	r3, [pc, #248]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a3d      	ldr	r2, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3a      	ldr	r2, [pc, #232]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe faa6 	bl	8001708 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe faa2 	bl	8001708 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e05f      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031d2:	4b32      	ldr	r3, [pc, #200]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x670>
 80031de:	e057      	b.n	8003290 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fa8c 	bl	8001708 <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fa88 	bl	8001708 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e045      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a4>
 8003212:	e03d      	b.n	8003290 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_RCC_OscConfig+0x74c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	d031      	beq.n	800328c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d12a      	bne.n	800328c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d122      	bne.n	800328c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0a5b      	lsrs	r3, r3, #9
 800325a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d108      	bne.n	800328c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3730      	adds	r7, #48	; 0x30
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	58024400 	.word	0x58024400
 80032a0:	fffffc0c 	.word	0xfffffc0c
 80032a4:	ffff0007 	.word	0xffff0007

080032a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e19c      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d910      	bls.n	80032ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b87      	ldr	r3, [pc, #540]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 020f 	bic.w	r2, r3, #15
 80032d2:	4985      	ldr	r1, [pc, #532]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b83      	ldr	r3, [pc, #524]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e184      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	4b7b      	ldr	r3, [pc, #492]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003304:	429a      	cmp	r2, r3
 8003306:	d908      	bls.n	800331a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003308:	4b78      	ldr	r3, [pc, #480]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	4975      	ldr	r1, [pc, #468]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003316:	4313      	orrs	r3, r2
 8003318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003332:	429a      	cmp	r2, r3
 8003334:	d908      	bls.n	8003348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003336:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	496a      	ldr	r1, [pc, #424]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003344:	4313      	orrs	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	4b64      	ldr	r3, [pc, #400]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003360:	429a      	cmp	r2, r3
 8003362:	d908      	bls.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003364:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	495e      	ldr	r1, [pc, #376]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003372:	4313      	orrs	r3, r2
 8003374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d010      	beq.n	80033a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800338e:	429a      	cmp	r2, r3
 8003390:	d908      	bls.n	80033a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003392:	4b56      	ldr	r3, [pc, #344]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4953      	ldr	r1, [pc, #332]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	429a      	cmp	r2, r3
 80033be:	d908      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f023 020f 	bic.w	r2, r3, #15
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4947      	ldr	r1, [pc, #284]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d055      	beq.n	800348a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4940      	ldr	r1, [pc, #256]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d121      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0f6      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d107      	bne.n	8003420 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d115      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0ea      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0de      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003438:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0d6      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f023 0207 	bic.w	r2, r3, #7
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4925      	ldr	r1, [pc, #148]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 8003456:	4313      	orrs	r3, r2
 8003458:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fe f955 	bl	8001708 <HAL_GetTick>
 800345e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003460:	e00a      	b.n	8003478 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003462:	f7fe f951 	bl	8001708 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0be      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	429a      	cmp	r2, r3
 8003488:	d1eb      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d208      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f023 020f 	bic.w	r2, r3, #15
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x244>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d214      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 020f 	bic.w	r2, r3, #15
 80034ce:	4906      	ldr	r1, [pc, #24]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_RCC_ClockConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e086      	b.n	80035f6 <HAL_RCC_ClockConfig+0x34e>
 80034e8:	52002000 	.word	0x52002000
 80034ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003508:	429a      	cmp	r2, r3
 800350a:	d208      	bcs.n	800351e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800350c:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	4939      	ldr	r1, [pc, #228]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 800351a:	4313      	orrs	r3, r2
 800351c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003536:	429a      	cmp	r2, r3
 8003538:	d208      	bcs.n	800354c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	492e      	ldr	r1, [pc, #184]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 8003548:	4313      	orrs	r3, r2
 800354a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003564:	429a      	cmp	r2, r3
 8003566:	d208      	bcs.n	800357a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4922      	ldr	r1, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 8003576:	4313      	orrs	r3, r2
 8003578:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003592:	429a      	cmp	r2, r3
 8003594:	d208      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003596:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4917      	ldr	r1, [pc, #92]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035a8:	f000 f834 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4912      	ldr	r1, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x35c>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCC_ClockConfig+0x358>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <HAL_RCC_ClockConfig+0x35c>)
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x360>)
 80035de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x364>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x368>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe f842 	bl	8001674 <HAL_InitTick>
 80035f0:	4603      	mov	r3, r0
 80035f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	0800ce40 	.word	0x0800ce40
 8003608:	24000030 	.word	0x24000030
 800360c:	2400002c 	.word	0x2400002c
 8003610:	24000034 	.word	0x24000034

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800361a:	4bb3      	ldr	r3, [pc, #716]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003622:	2b18      	cmp	r3, #24
 8003624:	f200 8155 	bhi.w	80038d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003628:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003695 	.word	0x08003695
 8003634:	080038d3 	.word	0x080038d3
 8003638:	080038d3 	.word	0x080038d3
 800363c:	080038d3 	.word	0x080038d3
 8003640:	080038d3 	.word	0x080038d3
 8003644:	080038d3 	.word	0x080038d3
 8003648:	080038d3 	.word	0x080038d3
 800364c:	080038d3 	.word	0x080038d3
 8003650:	080036bb 	.word	0x080036bb
 8003654:	080038d3 	.word	0x080038d3
 8003658:	080038d3 	.word	0x080038d3
 800365c:	080038d3 	.word	0x080038d3
 8003660:	080038d3 	.word	0x080038d3
 8003664:	080038d3 	.word	0x080038d3
 8003668:	080038d3 	.word	0x080038d3
 800366c:	080038d3 	.word	0x080038d3
 8003670:	080036c1 	.word	0x080036c1
 8003674:	080038d3 	.word	0x080038d3
 8003678:	080038d3 	.word	0x080038d3
 800367c:	080038d3 	.word	0x080038d3
 8003680:	080038d3 	.word	0x080038d3
 8003684:	080038d3 	.word	0x080038d3
 8003688:	080038d3 	.word	0x080038d3
 800368c:	080038d3 	.word	0x080038d3
 8003690:	080036c7 	.word	0x080036c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003694:	4b94      	ldr	r3, [pc, #592]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036a0:	4b91      	ldr	r3, [pc, #580]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	4a90      	ldr	r2, [pc, #576]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80036b2:	e111      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036b4:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b6:	61bb      	str	r3, [r7, #24]
    break;
 80036b8:	e10e      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036ba:	4b8d      	ldr	r3, [pc, #564]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036bc:	61bb      	str	r3, [r7, #24]
    break;
 80036be:	e10b      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80036c0:	4b8c      	ldr	r3, [pc, #560]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036c2:	61bb      	str	r3, [r7, #24]
    break;
 80036c4:	e108      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036c6:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036d0:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036dc:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036e6:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80e1 	beq.w	80038cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b02      	cmp	r3, #2
 800370e:	f000 8083 	beq.w	8003818 <HAL_RCC_GetSysClockFreq+0x204>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	f200 80a1 	bhi.w	800385c <HAL_RCC_GetSysClockFreq+0x248>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x114>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d056      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003726:	e099      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003728:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02d      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003734:	4b6c      	ldr	r3, [pc, #432]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	08db      	lsrs	r3, r3, #3
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	4a6b      	ldr	r2, [pc, #428]	; (80038ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
 8003744:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	4b62      	ldr	r3, [pc, #392]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003772:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800378e:	e087      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037d2:	e065      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003816:	e043      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003904 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a02 	vldr	s12, [r7, #8]
 800383e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800385a:	e021      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003882:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	0a5b      	lsrs	r3, r3, #9
 80038a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038aa:	3301      	adds	r3, #1
 80038ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80038bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c4:	ee17 3a90 	vmov	r3, s15
 80038c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80038ca:	e005      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038d4:	61bb      	str	r3, [r7, #24]
    break;
 80038d6:	bf00      	nop
  }

  return sysclockfreq;
 80038d8:	69bb      	ldr	r3, [r7, #24]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	; 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400
 80038ec:	03d09000 	.word	0x03d09000
 80038f0:	003d0900 	.word	0x003d0900
 80038f4:	007a1200 	.word	0x007a1200
 80038f8:	46000000 	.word	0x46000000
 80038fc:	4c742400 	.word	0x4c742400
 8003900:	4a742400 	.word	0x4a742400
 8003904:	4af42400 	.word	0x4af42400

08003908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800390e:	f7ff fe81 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_RCC_GetHCLKFreq+0x50>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	490f      	ldr	r1, [pc, #60]	; (800395c <HAL_RCC_GetHCLKFreq+0x54>)
 8003920:	5ccb      	ldrb	r3, [r1, r3]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <HAL_RCC_GetHCLKFreq+0x50>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_RCC_GetHCLKFreq+0x54>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <HAL_RCC_GetHCLKFreq+0x58>)
 8003944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <HAL_RCC_GetHCLKFreq+0x58>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58024400 	.word	0x58024400
 800395c:	0800ce40 	.word	0x0800ce40
 8003960:	24000030 	.word	0x24000030
 8003964:	2400002c 	.word	0x2400002c

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800396c:	f7ff ffcc 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	58024400 	.word	0x58024400
 8003990:	0800ce40 	.word	0x0800ce40

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003998:	f7ff ffb6 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4904      	ldr	r1, [pc, #16]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	58024400 	.word	0x58024400
 80039bc:	0800ce40 	.word	0x0800ce40

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d03f      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039e4:	d02a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039ea:	d824      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f0:	d018      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f6:	d81e      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a00:	d007      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a02:	e018      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a04:	4bab      	ldr	r3, [pc, #684]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	4aaa      	ldr	r2, [pc, #680]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2102      	movs	r1, #2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 feff 	bl	800581c <RCCEx_PLL2_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3324      	adds	r3, #36	; 0x24
 8003a28:	2102      	movs	r1, #2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 ffa8 	bl	8005980 <RCCEx_PLL3_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a34:	e003      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
      break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a44:	4b9b      	ldr	r3, [pc, #620]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a50:	4998      	ldr	r1, [pc, #608]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	650b      	str	r3, [r1, #80]	; 0x50
 8003a56:	e001      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d826      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a8d 	.word	0x08003a8d
 8003a7c:	08003a9b 	.word	0x08003a9b
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ac5 	.word	0x08003ac5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8c:	4b89      	ldr	r3, [pc, #548]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	4a88      	ldr	r2, [pc, #544]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a98:	e015      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 febb 	bl	800581c <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aaa:	e00c      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3324      	adds	r3, #36	; 0x24
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 ff64 	bl	8005980 <RCCEx_PLL3_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003acc:	4b79      	ldr	r3, [pc, #484]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	4976      	ldr	r1, [pc, #472]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	650b      	str	r3, [r1, #80]	; 0x50
 8003ade:	e001      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d051      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003af6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003afa:	d036      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003afc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003b00:	d830      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b06:	d032      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b0c:	d82a      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b12:	d02e      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003b14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b18:	d824      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1e:	d018      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b24:	d81e      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b30:	e018      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b32:	4b60      	ldr	r3, [pc, #384]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	4a5f      	ldr	r2, [pc, #380]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b3e:	e019      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fe68 	bl	800581c <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b50:	e010      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 ff11 	bl	8005980 <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b62:	e007      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
      break;
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b7a:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b88:	494a      	ldr	r1, [pc, #296]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b8e:	e001      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d051      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ba6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003baa:	d036      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003bac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bb0:	d830      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb6:	d032      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bbc:	d82a      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bc2:	d02e      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bc8:	d824      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bce:	d018      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd4:	d81e      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bde:	d007      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003be0:	e018      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	4a33      	ldr	r2, [pc, #204]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bee:	e019      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 fe10 	bl	800581c <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c00:	e010      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3324      	adds	r3, #36	; 0x24
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 feb9 	bl	8005980 <RCCEx_PLL3_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c12:	e007      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
      break;
 8003c18:	e004      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c38:	491e      	ldr	r1, [pc, #120]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d035      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d01c      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d817      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d00c      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d813      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d016      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d10f      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c78:	e00e      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fdcb 	bl	800581c <RCCEx_PLL2_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003caa:	4902      	ldr	r1, [pc, #8]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003cb2:	bf00      	nop
 8003cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d047      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd0:	d030      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd6:	d82a      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cdc:	d02c      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce2:	d824      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce8:	d018      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d81e      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d007      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfc:	4bac      	ldr	r3, [pc, #688]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4aab      	ldr	r2, [pc, #684]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d08:	e017      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fd83 	bl	800581c <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d1a:	e00e      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 fe2c 	bl	8005980 <RCCEx_PLL3_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d2c:	e005      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d40:	4b9b      	ldr	r3, [pc, #620]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4998      	ldr	r1, [pc, #608]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	650b      	str	r3, [r1, #80]	; 0x50
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d049      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d02e      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d72:	d828      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d78:	d02a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d7e:	d822      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d84:	d026      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d8a:	d81c      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d90:	d010      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d96:	d816      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01d      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d111      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 fd37 	bl	800581c <RCCEx_PLL2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003db2:	e012      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 fde0 	bl	8005980 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dc4:	e009      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dcc:	bf00      	nop
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003de0:	4b73      	ldr	r3, [pc, #460]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	4970      	ldr	r1, [pc, #448]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	650b      	str	r3, [r1, #80]	; 0x50
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04b      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e0e:	d02e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e14:	d828      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d822      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e26:	d026      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e2c:	d81c      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e32:	d010      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e38:	d816      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01d      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e42:	d111      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fce6 	bl	800581c <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e54:	e012      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3324      	adds	r3, #36	; 0x24
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fd8f 	bl	8005980 <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e66:	e009      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e82:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e90:	4947      	ldr	r1, [pc, #284]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	658b      	str	r3, [r1, #88]	; 0x58
 8003e96:	e001      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02f      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb6:	d814      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	4a3a      	ldr	r2, [pc, #232]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ece:	e00c      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 fca0 	bl	800581c <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efc:	492c      	ldr	r1, [pc, #176]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	650b      	str	r3, [r1, #80]	; 0x50
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d032      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d81b      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f5b 	.word	0x08003f5b
 8003f28:	08003f35 	.word	0x08003f35
 8003f2c:	08003f43 	.word	0x08003f43
 8003f30:	08003f5b 	.word	0x08003f5b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2102      	movs	r1, #2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fc67 	bl	800581c <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4910      	ldr	r1, [pc, #64]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f74:	e001      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 808a 	beq.w	800409c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f94:	f7fd fbb8 	bl	8001708 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9a:	e00d      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9c:	f7fd fbb4 	bl	8001708 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d906      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	75fb      	strb	r3, [r7, #23]
        break;
 8003fae:	e009      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb8:	4bb9      	ldr	r3, [pc, #740]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0eb      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d166      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fca:	4bb6      	ldr	r3, [pc, #728]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fd4:	4053      	eors	r3, r2
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d013      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fde:	4bb1      	ldr	r3, [pc, #708]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe8:	4bae      	ldr	r3, [pc, #696]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4aad      	ldr	r2, [pc, #692]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff4:	4bab      	ldr	r3, [pc, #684]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4aaa      	ldr	r2, [pc, #680]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004000:	4aa8      	ldr	r2, [pc, #672]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800400c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004010:	d115      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fd fb79 	bl	8001708 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004018:	e00b      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fd fb75 	bl	8001708 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d902      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	75fb      	strb	r3, [r7, #23]
            break;
 8004030:	e005      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004032:	4b9c      	ldr	r3, [pc, #624]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ed      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d126      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004052:	d10d      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004054:	4b93      	ldr	r3, [pc, #588]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004062:	0919      	lsrs	r1, r3, #4
 8004064:	4b90      	ldr	r3, [pc, #576]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004066:	400b      	ands	r3, r1
 8004068:	498e      	ldr	r1, [pc, #568]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	610b      	str	r3, [r1, #16]
 800406e:	e005      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004070:	4b8c      	ldr	r3, [pc, #560]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4a8b      	ldr	r2, [pc, #556]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800407a:	6113      	str	r3, [r2, #16]
 800407c:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800407e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408a:	4986      	ldr	r1, [pc, #536]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	670b      	str	r3, [r1, #112]	; 0x70
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	75bb      	strb	r3, [r7, #22]
 8004096:	e001      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d07e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	2b28      	cmp	r3, #40	; 0x28
 80040ae:	d867      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	08004187 	.word	0x08004187
 80040bc:	08004181 	.word	0x08004181
 80040c0:	08004181 	.word	0x08004181
 80040c4:	08004181 	.word	0x08004181
 80040c8:	08004181 	.word	0x08004181
 80040cc:	08004181 	.word	0x08004181
 80040d0:	08004181 	.word	0x08004181
 80040d4:	08004181 	.word	0x08004181
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	08004181 	.word	0x08004181
 80040e0:	08004181 	.word	0x08004181
 80040e4:	08004181 	.word	0x08004181
 80040e8:	08004181 	.word	0x08004181
 80040ec:	08004181 	.word	0x08004181
 80040f0:	08004181 	.word	0x08004181
 80040f4:	08004181 	.word	0x08004181
 80040f8:	0800416f 	.word	0x0800416f
 80040fc:	08004181 	.word	0x08004181
 8004100:	08004181 	.word	0x08004181
 8004104:	08004181 	.word	0x08004181
 8004108:	08004181 	.word	0x08004181
 800410c:	08004181 	.word	0x08004181
 8004110:	08004181 	.word	0x08004181
 8004114:	08004181 	.word	0x08004181
 8004118:	08004187 	.word	0x08004187
 800411c:	08004181 	.word	0x08004181
 8004120:	08004181 	.word	0x08004181
 8004124:	08004181 	.word	0x08004181
 8004128:	08004181 	.word	0x08004181
 800412c:	08004181 	.word	0x08004181
 8004130:	08004181 	.word	0x08004181
 8004134:	08004181 	.word	0x08004181
 8004138:	08004187 	.word	0x08004187
 800413c:	08004181 	.word	0x08004181
 8004140:	08004181 	.word	0x08004181
 8004144:	08004181 	.word	0x08004181
 8004148:	08004181 	.word	0x08004181
 800414c:	08004181 	.word	0x08004181
 8004150:	08004181 	.word	0x08004181
 8004154:	08004181 	.word	0x08004181
 8004158:	08004187 	.word	0x08004187
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fb5a 	bl	800581c <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800416c:	e00c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3324      	adds	r3, #36	; 0x24
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f001 fc03 	bl	8005980 <RCCEx_PLL3_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800417e:	e003      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800418e:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	4942      	ldr	r1, [pc, #264]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800419c:	4313      	orrs	r3, r2
 800419e:	654b      	str	r3, [r1, #84]	; 0x54
 80041a0:	e001      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d037      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d820      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	08004203 	.word	0x08004203
 80041c4:	080041d9 	.word	0x080041d9
 80041c8:	080041eb 	.word	0x080041eb
 80041cc:	08004203 	.word	0x08004203
 80041d0:	08004203 	.word	0x08004203
 80041d4:	08004203 	.word	0x08004203
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2101      	movs	r1, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 fb1c 	bl	800581c <RCCEx_PLL2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041e8:	e00c      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3324      	adds	r3, #36	; 0x24
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fbc5 	bl	8005980 <RCCEx_PLL3_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f023 0207 	bic.w	r2, r3, #7
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4923      	ldr	r1, [pc, #140]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	654b      	str	r3, [r1, #84]	; 0x54
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d040      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004234:	2b05      	cmp	r3, #5
 8004236:	d821      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004283 	.word	0x08004283
 8004244:	08004259 	.word	0x08004259
 8004248:	0800426b 	.word	0x0800426b
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 fadc 	bl	800581c <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004268:	e00c      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f001 fb85 	bl	8005980 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d110      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f023 0207 	bic.w	r2, r3, #7
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004298:	4902      	ldr	r1, [pc, #8]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	658b      	str	r3, [r1, #88]	; 0x58
 800429e:	e007      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80042a0:	58024800 	.word	0x58024800
 80042a4:	58024400 	.word	0x58024400
 80042a8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c6:	d02e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80042c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042cc:	d828      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d02a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d822      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042de:	d026      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80042e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e4:	d81c      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ea:	d010      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f0:	d816      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01d      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d111      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fa8a 	bl	800581c <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800430c:	e012      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fb33 	bl	8005980 <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800431e:	e009      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800433a:	4bb2      	ldr	r3, [pc, #712]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	49ae      	ldr	r1, [pc, #696]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800434a:	4313      	orrs	r3, r2
 800434c:	654b      	str	r3, [r1, #84]	; 0x54
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d04b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800436a:	d02e      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800436c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004370:	d828      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d02a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d822      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800437e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004382:	d026      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004388:	d81c      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	d010      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	d816      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01d      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d111      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 fa38 	bl	800581c <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043b0:	e012      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 fae1 	bl	8005980 <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
      break;
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043de:	4b89      	ldr	r3, [pc, #548]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ec:	4985      	ldr	r1, [pc, #532]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	658b      	str	r3, [r1, #88]	; 0x58
 80043f2:	e001      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d04b      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800440a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800440e:	d02e      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004414:	d828      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d02a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800441c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004420:	d822      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004426:	d026      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800442c:	d81c      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800442e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004432:	d010      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004438:	d816      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01d      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004442:	d111      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f001 f9e6 	bl	800581c <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004454:	e012      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3324      	adds	r3, #36	; 0x24
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f001 fa8f 	bl	8005980 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004466:	e009      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	75fb      	strb	r3, [r7, #23]
      break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800447a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004482:	4b60      	ldr	r3, [pc, #384]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004490:	495c      	ldr	r1, [pc, #368]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004492:	4313      	orrs	r3, r2
 8004494:	658b      	str	r3, [r1, #88]	; 0x58
 8004496:	e001      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d018      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b0:	d10a      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3324      	adds	r3, #36	; 0x24
 80044b6:	2102      	movs	r1, #2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 fa61 	bl	8005980 <RCCEx_PLL3_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80044c8:	4b4e      	ldr	r3, [pc, #312]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d4:	494b      	ldr	r1, [pc, #300]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f0:	d10a      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3324      	adds	r3, #36	; 0x24
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 fa41 	bl	8005980 <RCCEx_PLL3_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	493b      	ldr	r1, [pc, #236]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004518:	4313      	orrs	r3, r2
 800451a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d034      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800452e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004532:	d01d      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004538:	d817      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004544:	e011      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f965 	bl	800581c <RCCEx_PLL2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3324      	adds	r3, #36	; 0x24
 800455c:	2102      	movs	r1, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fa0e 	bl	8005980 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004586:	491f      	ldr	r1, [pc, #124]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004588:	4313      	orrs	r3, r2
 800458a:	658b      	str	r3, [r1, #88]	; 0x58
 800458c:	e001      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d036      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045a8:	d01c      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80045aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045ae:	d816      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80045b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ba:	d007      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80045bc:	e00f      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045ca:	e00c      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3324      	adds	r3, #36	; 0x24
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f9d4 	bl	8005980 <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
      break;
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10d      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fa:	4902      	ldr	r1, [pc, #8]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d029      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d007      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004626:	e00f      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4a60      	ldr	r2, [pc, #384]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004634:	e00b      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f001 f8ed 	bl	800581c <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004646:	e002      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
      break;
 800464c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004654:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004660:	4953      	ldr	r1, [pc, #332]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004666:	e001      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3324      	adds	r3, #36	; 0x24
 800467c:	2102      	movs	r1, #2
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f97e 	bl	8005980 <RCCEx_PLL3_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d030      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a2:	d017      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a8:	d811      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ae:	d013      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b4:	d80b      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d106      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a3a      	ldr	r2, [pc, #232]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046cc:	e007      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
      break;
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046d4:	bf00      	nop
 80046d6:	e002      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f0:	492f      	ldr	r1, [pc, #188]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	654b      	str	r3, [r1, #84]	; 0x54
 80046f6:	e001      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004714:	4926      	ldr	r1, [pc, #152]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004732:	491f      	ldr	r1, [pc, #124]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800474a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800474e:	6113      	str	r3, [r2, #16]
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800475a:	4915      	ldr	r1, [pc, #84]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	da08      	bge.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	490e      	ldr	r1, [pc, #56]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	4906      	ldr	r1, [pc, #24]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004796:	4313      	orrs	r3, r2
 8004798:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800479a:	7dbb      	ldrb	r3, [r7, #22]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400

080047b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b090      	sub	sp, #64	; 0x40
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	f040 8089 	bne.w	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80047c6:	4b95      	ldr	r3, [pc, #596]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d87d      	bhi.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047f1 	.word	0x080047f1
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004839 	.word	0x08004839
 80047e8:	080048cd 	.word	0x080048cd
 80047ec:	0800485d 	.word	0x0800485d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047f0:	4b8a      	ldr	r3, [pc, #552]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047fc:	d107      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004802:	4618      	mov	r0, r3
 8004804:	f000 feb8 	bl	8005578 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800480c:	e3ed      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004812:	e3ea      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004814:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004820:	d107      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004822:	f107 0318 	add.w	r3, r7, #24
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fbfe 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004830:	e3db      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004836:	e3d8      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004838:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004844:	d107      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd40 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004854:	e3c9      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800485a:	e3c6      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800485c:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004864:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004866:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	4a67      	ldr	r2, [pc, #412]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488a:	e01e      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800488c:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004898:	d106      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a0:	d102      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048a2:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a6:	e010      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048a8:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b4:	d106      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048bc:	d102      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048be:	4b5a      	ldr	r3, [pc, #360]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048c8:	e38f      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80048ca:	e38e      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048cc:	4b57      	ldr	r3, [pc, #348]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d0:	e38b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d6:	e388      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048de:	f040 80a7 	bne.w	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80048e2:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f2:	d054      	beq.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048fa:	f200 808b 	bhi.w	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004904:	f000 8083 	beq.w	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800490e:	f200 8081 	bhi.w	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d02f      	beq.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004920:	d878      	bhi.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492e:	d012      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004930:	e070      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004932:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800493e:	d107      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fe17 	bl	8005578 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800494e:	e34c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004954:	e349      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004956:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004962:	d107      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004964:	f107 0318 	add.w	r3, r7, #24
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fb5d 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004972:	e33a      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004978:	e337      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800497a:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004986:	d107      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fc9f 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004996:	e328      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800499c:	e325      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800499e:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049a8:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d10c      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049ba:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049cc:	e01e      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d106      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e2:	d102      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	e010      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f6:	d106      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fe:	d102      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a04:	e002      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a0a:	e2ee      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a0c:	e2ed      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a12:	e2ea      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a18:	e2e7      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a1a:	bf00      	nop
 8004a1c:	58024400 	.word	0x58024400
 8004a20:	03d09000 	.word	0x03d09000
 8004a24:	003d0900 	.word	0x003d0900
 8004a28:	007a1200 	.word	0x007a1200
 8004a2c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a36:	f040 809c 	bne.w	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a3a:	4b9e      	ldr	r3, [pc, #632]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a4a:	d054      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a52:	f200 808b 	bhi.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a5c:	f000 8083 	beq.w	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a66:	f200 8081 	bhi.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a70:	d02f      	beq.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a78:	d878      	bhi.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a86:	d012      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a88:	e070      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a8a:	4b8a      	ldr	r3, [pc, #552]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fd6b 	bl	8005578 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aa6:	e2a0      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aac:	e29d      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aae:	4b81      	ldr	r3, [pc, #516]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aba:	d107      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004abc:	f107 0318 	add.w	r3, r7, #24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fab1 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004aca:	e28e      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad0:	e28b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ad2:	4b78      	ldr	r3, [pc, #480]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ade:	d107      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fbf3 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aee:	e27c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af4:	e279      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004af6:	4b6f      	ldr	r3, [pc, #444]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b00:	4b6c      	ldr	r3, [pc, #432]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d10c      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b12:	4b68      	ldr	r3, [pc, #416]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	08db      	lsrs	r3, r3, #3
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	4a66      	ldr	r2, [pc, #408]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b24:	e01e      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b26:	4b63      	ldr	r3, [pc, #396]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b32:	d106      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3a:	d102      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b3c:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b40:	e010      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b42:	4b5c      	ldr	r3, [pc, #368]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b56:	d102      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b58:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b62:	e242      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004b64:	e241      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b66:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6a:	e23e      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b70:	e23b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	f040 80a6 	bne.w	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b8c:	d054      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b94:	f200 808b 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b9e:	f000 8083 	beq.w	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba8:	f200 8081 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	d02f      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	d878      	bhi.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc8:	d012      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004bca:	e070      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bcc:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd8:	d107      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fcca 	bl	8005578 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004be8:	e1ff      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bee:	e1fc      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bf0:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bfe:	f107 0318 	add.w	r3, r7, #24
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa10 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c0c:	e1ed      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c12:	e1ea      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c14:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c20:	d107      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fb52 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c30:	e1db      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c36:	e1d8      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	4a16      	ldr	r2, [pc, #88]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	e01e      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c82:	e010      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ca4:	e1a1      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ca6:	e1a0      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cac:	e19d      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb2:	e19a      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	03d09000 	.word	0x03d09000
 8004cbc:	003d0900 	.word	0x003d0900
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cce:	d173      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004cd0:	4b9a      	ldr	r3, [pc, #616]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce0:	d02f      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce8:	d863      	bhi.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d012      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004cf8:	e05b      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cfa:	4b90      	ldr	r3, [pc, #576]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d06:	d107      	bne.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d08:	f107 0318 	add.w	r3, r7, #24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f98b 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d16:	e168      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d1c:	e165      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d1e:	4b87      	ldr	r3, [pc, #540]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d2c:	f107 030c 	add.w	r3, r7, #12
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 facd 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d3a:	e156      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d40:	e153      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d42:	4b7e      	ldr	r3, [pc, #504]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d4c:	4b7b      	ldr	r3, [pc, #492]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d5e:	4b77      	ldr	r3, [pc, #476]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	08db      	lsrs	r3, r3, #3
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	4a75      	ldr	r2, [pc, #468]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d70:	e01e      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d72:	4b72      	ldr	r3, [pc, #456]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d86:	d102      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d88:	4b6e      	ldr	r3, [pc, #440]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8c:	e010      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d8e:	4b6b      	ldr	r3, [pc, #428]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d9a:	d106      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da2:	d102      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004da4:	4b68      	ldr	r3, [pc, #416]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004dae:	e11c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004db0:	e11b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004db6:	e118      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d133      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004dc0:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd6:	d012      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004dd8:	e023      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dda:	4b58      	ldr	r3, [pc, #352]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de6:	d107      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fbc3 	bl	8005578 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004df6:	e0f8      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dfc:	e0f5      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e0c:	f107 0318 	add.w	r3, r7, #24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f909 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e1a:	e0e6      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e20:	e0e3      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e26:	e0e0      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2e:	f040 808d 	bne.w	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e32:	4b42      	ldr	r3, [pc, #264]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e42:	d06b      	beq.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4a:	d874      	bhi.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d056      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d86c      	bhi.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e62:	d03b      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e6a:	d864      	bhi.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e72:	d021      	beq.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7a:	d85c      	bhi.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e88:	d004      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004e8a:	e054      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e8c:	f000 f8b6 	bl	8004ffc <HAL_RCCEx_GetD3PCLK1Freq>
 8004e90:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e92:	e0aa      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea0:	d107      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ea2:	f107 0318 	add.w	r3, r7, #24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f8be 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eb0:	e09b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb6:	e098      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa00 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ed4:	e089      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eda:	e086      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d109      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004efa:	e076      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f00:	e073      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f14:	e069      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f1a:	e066      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f28:	d102      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f2e:	e05c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f34:	e059      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f3a:	e056      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	03d09000 	.word	0x03d09000
 8004f44:	003d0900 	.word	0x003d0900
 8004f48:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f52:	d148      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f54:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f64:	d02a      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6c:	d838      	bhi.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7a:	d00d      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004f7c:	e030      	b.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f90:	e02b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f96:	e028      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f98:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fae4 	bl	8005578 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fb4:	e019      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fba:	e016      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc8:	d107      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fca:	f107 0318 	add.w	r3, r7, #24
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f82a 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fd8:	e007      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe4:	e001      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3740      	adds	r7, #64	; 0x40
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005000:	f7fe fc82 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4904      	ldr	r1, [pc, #16]	; (8005024 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	58024400 	.word	0x58024400
 8005024:	0800ce40 	.word	0x0800ce40

08005028 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005028:	b480      	push	{r7}
 800502a:	b089      	sub	sp, #36	; 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005030:	4ba1      	ldr	r3, [pc, #644]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800503a:	4b9f      	ldr	r3, [pc, #636]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	0b1b      	lsrs	r3, r3, #12
 8005040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005044:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005046:	4b9c      	ldr	r3, [pc, #624]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005052:	4b99      	ldr	r3, [pc, #612]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	08db      	lsrs	r3, r3, #3
 8005058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8111 	beq.w	8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f000 8083 	beq.w	8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b02      	cmp	r3, #2
 8005082:	f200 80a1 	bhi.w	80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d056      	beq.n	8005140 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005092:	e099      	b.n	80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005094:	4b88      	ldr	r3, [pc, #544]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02d      	beq.n	80050fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050a0:	4b85      	ldr	r3, [pc, #532]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	4a84      	ldr	r2, [pc, #528]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ca:	4b7b      	ldr	r3, [pc, #492]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	ed97 6a03 	vldr	s12, [r7, #12]
 80050de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050fa:	e087      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b6a      	ldr	r3, [pc, #424]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005122:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800513e:	e065      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005182:	e043      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b48      	ldr	r3, [pc, #288]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051c6:	e021      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b37      	ldr	r3, [pc, #220]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800520a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800520c:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	0a5b      	lsrs	r3, r3, #9
 8005212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005226:	edd7 6a07 	vldr	s13, [r7, #28]
 800522a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005232:	ee17 2a90 	vmov	r2, s15
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800523a:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005254:	edd7 6a07 	vldr	s13, [r7, #28]
 8005258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800525c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005260:	ee17 2a90 	vmov	r2, s15
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800527e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005282:	edd7 6a07 	vldr	s13, [r7, #28]
 8005286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528e:	ee17 2a90 	vmov	r2, s15
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005296:	e008      	b.n	80052aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
}
 80052aa:	bf00      	nop
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	03d09000 	.word	0x03d09000
 80052c0:	46000000 	.word	0x46000000
 80052c4:	4c742400 	.word	0x4c742400
 80052c8:	4a742400 	.word	0x4a742400
 80052cc:	4af42400 	.word	0x4af42400

080052d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	; 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d8:	4ba1      	ldr	r3, [pc, #644]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052e2:	4b9f      	ldr	r3, [pc, #636]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	0d1b      	lsrs	r3, r3, #20
 80052e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ee:	4b9c      	ldr	r3, [pc, #624]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052fa:	4b99      	ldr	r3, [pc, #612]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	08db      	lsrs	r3, r3, #3
 8005300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8111 	beq.w	8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b02      	cmp	r3, #2
 8005322:	f000 8083 	beq.w	800542c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b02      	cmp	r3, #2
 800532a:	f200 80a1 	bhi.w	8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d056      	beq.n	80053e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800533a:	e099      	b.n	8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533c:	4b88      	ldr	r3, [pc, #544]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02d      	beq.n	80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005348:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	4a84      	ldr	r2, [pc, #528]	; (8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
 8005358:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b7b      	ldr	r3, [pc, #492]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a03 	vldr	s12, [r7, #12]
 8005386:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053a2:	e087      	b.n	80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b6a      	ldr	r3, [pc, #424]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053e6:	e065      	b.n	80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b59      	ldr	r3, [pc, #356]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a03 	vldr	s12, [r7, #12]
 800540e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800542a:	e043      	b.n	80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b48      	ldr	r3, [pc, #288]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005452:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800546e:	e021      	b.n	80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b37      	ldr	r3, [pc, #220]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a03 	vldr	s12, [r7, #12]
 8005496:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054b4:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	0a5b      	lsrs	r3, r3, #9
 80054ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	ee17 2a90 	vmov	r2, s15
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054e2:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005508:	ee17 2a90 	vmov	r2, s15
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552a:	edd7 6a07 	vldr	s13, [r7, #28]
 800552e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005536:	ee17 2a90 	vmov	r2, s15
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
}
 8005552:	bf00      	nop
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	58024400 	.word	0x58024400
 8005564:	03d09000 	.word	0x03d09000
 8005568:	46000000 	.word	0x46000000
 800556c:	4c742400 	.word	0x4c742400
 8005570:	4a742400 	.word	0x4a742400
 8005574:	4af42400 	.word	0x4af42400

08005578 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005580:	4ba0      	ldr	r3, [pc, #640]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800558a:	4b9e      	ldr	r3, [pc, #632]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005596:	4b9b      	ldr	r3, [pc, #620]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055a0:	4b98      	ldr	r3, [pc, #608]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	08db      	lsrs	r3, r3, #3
 80055a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8111 	beq.w	80057e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f000 8083 	beq.w	80056d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	f200 80a1 	bhi.w	8005716 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d056      	beq.n	800568e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055e0:	e099      	b.n	8005716 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e2:	4b88      	ldr	r3, [pc, #544]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02d      	beq.n	800564a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055ee:	4b85      	ldr	r3, [pc, #532]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	4a83      	ldr	r2, [pc, #524]	; (8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005618:	4b7a      	ldr	r3, [pc, #488]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	ed97 6a03 	vldr	s12, [r7, #12]
 800562c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005644:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005648:	e087      	b.n	800575a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005654:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565c:	4b69      	ldr	r3, [pc, #420]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005670:	eddf 5a66 	vldr	s11, [pc, #408]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005688:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800568c:	e065      	b.n	800575a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005698:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800569c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a0:	4b58      	ldr	r3, [pc, #352]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d0:	e043      	b.n	800575a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e4:	4b47      	ldr	r3, [pc, #284]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005710:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005714:	e021      	b.n	800575a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005720:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005728:	4b36      	ldr	r3, [pc, #216]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005738:	ed97 6a03 	vldr	s12, [r7, #12]
 800573c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800574c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005758:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800575a:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	0a5b      	lsrs	r3, r3, #9
 8005760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005774:	edd7 6a07 	vldr	s13, [r7, #28]
 8005778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005780:	ee17 2a90 	vmov	r2, s15
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005788:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800579e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ae:	ee17 2a90 	vmov	r2, s15
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	0e1b      	lsrs	r3, r3, #24
 80057bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057dc:	ee17 2a90 	vmov	r2, s15
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057e4:	e008      	b.n	80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	3724      	adds	r7, #36	; 0x24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	58024400 	.word	0x58024400
 8005808:	03d09000 	.word	0x03d09000
 800580c:	46000000 	.word	0x46000000
 8005810:	4c742400 	.word	0x4c742400
 8005814:	4a742400 	.word	0x4a742400
 8005818:	4af42400 	.word	0x4af42400

0800581c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800582a:	4b53      	ldr	r3, [pc, #332]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d101      	bne.n	800583a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e099      	b.n	800596e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800583a:	4b4f      	ldr	r3, [pc, #316]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a4e      	ldr	r2, [pc, #312]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005840:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005846:	f7fb ff5f 	bl	8001708 <HAL_GetTick>
 800584a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800584c:	e008      	b.n	8005860 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800584e:	f7fb ff5b 	bl	8001708 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e086      	b.n	800596e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005860:	4b45      	ldr	r3, [pc, #276]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800586c:	4b42      	ldr	r3, [pc, #264]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	493f      	ldr	r1, [pc, #252]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	628b      	str	r3, [r1, #40]	; 0x28
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	3b01      	subs	r3, #1
 8005886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	3b01      	subs	r3, #1
 8005890:	025b      	lsls	r3, r3, #9
 8005892:	b29b      	uxth	r3, r3
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	3b01      	subs	r3, #1
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	061b      	lsls	r3, r3, #24
 80058ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058b0:	4931      	ldr	r1, [pc, #196]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058b6:	4b30      	ldr	r3, [pc, #192]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	492d      	ldr	r1, [pc, #180]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f023 0220 	bic.w	r2, r3, #32
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	4928      	ldr	r1, [pc, #160]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058da:	4b27      	ldr	r3, [pc, #156]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	4a26      	ldr	r2, [pc, #152]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058e0:	f023 0310 	bic.w	r3, r3, #16
 80058e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <RCCEx_PLL2_Config+0x160>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	69d2      	ldr	r2, [r2, #28]
 80058f2:	00d2      	lsls	r2, r2, #3
 80058f4:	4920      	ldr	r1, [pc, #128]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058fa:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005900:	f043 0310 	orr.w	r3, r3, #16
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005918:	e00f      	b.n	800593a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a14      	ldr	r2, [pc, #80]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800592c:	e005      	b.n	800593a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	4a11      	ldr	r2, [pc, #68]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005938:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a0e      	ldr	r2, [pc, #56]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005946:	f7fb fedf 	bl	8001708 <HAL_GetTick>
 800594a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800594c:	e008      	b.n	8005960 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800594e:	f7fb fedb 	bl	8001708 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e006      	b.n	800596e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <RCCEx_PLL2_Config+0x15c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f0      	beq.n	800594e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	ffff0007 	.word	0xffff0007

08005980 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800598e:	4b53      	ldr	r3, [pc, #332]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b03      	cmp	r3, #3
 8005998:	d101      	bne.n	800599e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e099      	b.n	8005ad2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800599e:	4b4f      	ldr	r3, [pc, #316]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a4e      	ldr	r2, [pc, #312]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 80059a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059aa:	f7fb fead 	bl	8001708 <HAL_GetTick>
 80059ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059b0:	e008      	b.n	80059c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059b2:	f7fb fea9 	bl	8001708 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e086      	b.n	8005ad2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059c4:	4b45      	ldr	r3, [pc, #276]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059d0:	4b42      	ldr	r3, [pc, #264]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	051b      	lsls	r3, r3, #20
 80059de:	493f      	ldr	r1, [pc, #252]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	628b      	str	r3, [r1, #40]	; 0x28
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	025b      	lsls	r3, r3, #9
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a14:	4931      	ldr	r1, [pc, #196]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a1a:	4b30      	ldr	r3, [pc, #192]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	492d      	ldr	r1, [pc, #180]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	4928      	ldr	r1, [pc, #160]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a3e:	4b27      	ldr	r3, [pc, #156]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	4a26      	ldr	r2, [pc, #152]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <RCCEx_PLL3_Config+0x160>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	69d2      	ldr	r2, [r2, #28]
 8005a56:	00d2      	lsls	r2, r2, #3
 8005a58:	4920      	ldr	r1, [pc, #128]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a5e:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a70:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a19      	ldr	r2, [pc, #100]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a7c:	e00f      	b.n	8005a9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d106      	bne.n	8005a92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a84:	4b15      	ldr	r3, [pc, #84]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a90:	e005      	b.n	8005a9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4a11      	ldr	r2, [pc, #68]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005a98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a0e      	ldr	r2, [pc, #56]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aaa:	f7fb fe2d 	bl	8001708 <HAL_GetTick>
 8005aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab0:	e008      	b.n	8005ac4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ab2:	f7fb fe29 	bl	8001708 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e006      	b.n	8005ad2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f0      	beq.n	8005ab2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	ffff0007 	.word	0xffff0007

08005ae4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e075      	b.n	8005be2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d105      	bne.n	8005b0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fb fb67 	bl	80011dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2204      	movs	r2, #4
 8005b12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f868 	bl	8005bec <HAL_SD_InitCard>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e05d      	b.n	8005be2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 ff6f 	bl	8006a10 <HAL_SD_GetCardStatus>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e052      	b.n	8005be2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b3c:	7e3b      	ldrb	r3, [r7, #24]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b42:	7e7b      	ldrb	r3, [r7, #25]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10a      	bne.n	8005b66 <HAL_SD_Init+0x82>
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d102      	bne.n	8005b5c <HAL_SD_Init+0x78>
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b62:	659a      	str	r2, [r3, #88]	; 0x58
 8005b64:	e00b      	b.n	8005b7e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d104      	bne.n	8005b78 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58
 8005b76:	e002      	b.n	8005b7e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 f82d 	bl	8006be4 <HAL_SD_ConfigWideBusOperation>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e026      	b.n	8005be2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b94:	f7fb fdb8 	bl	8001708 <HAL_GetTick>
 8005b98:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b9a:	e011      	b.n	8005bc0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b9c:	f7fb fdb4 	bl	8001708 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d109      	bne.n	8005bc0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e010      	b.n	8005be2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f921 	bl	8006e08 <HAL_SD_GetCardState>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d1e7      	bne.n	8005b9c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3728      	adds	r7, #40	; 0x28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b08d      	sub	sp, #52	; 0x34
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005c08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005c0c:	f7fe fdd2 	bl	80047b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c10:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e06a      	b.n	8005d02 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	4a36      	ldr	r2, [pc, #216]	; (8005d0c <HAL_SD_InitCard+0x120>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681c      	ldr	r4, [r3, #0]
 8005c3e:	466a      	mov	r2, sp
 8005c40:	f107 0318 	add.w	r3, r7, #24
 8005c44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c48:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c4c:	f107 030c 	add.w	r3, r7, #12
 8005c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c52:	4620      	mov	r0, r4
 8005c54:	f002 fed0 	bl	80089f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f002 ff13 	bl	8008a88 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c6e:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <HAL_SD_InitCard+0x124>)
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	3301      	adds	r3, #1
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fb fd51 	bl	8001720 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f9b0 	bl	8006fe4 <SD_PowerON>
 8005c84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e02e      	b.n	8005d02 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 f8cf 	bl	8006e48 <SD_InitCard>
 8005caa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e01b      	b.n	8005d02 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f002 ff6e 	bl	8008bb4 <SDMMC_CmdBlockLength>
 8005cd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00f      	beq.n	8005d00 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <HAL_SD_InitCard+0x128>)
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	372c      	adds	r7, #44	; 0x2c
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	014f8b59 	.word	0x014f8b59
 8005d10:	00012110 	.word	0x00012110
 8005d14:	1fe00fff 	.word	0x1fe00fff

08005d18 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b092      	sub	sp, #72	; 0x48
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d26:	f7fb fcef 	bl	8001708 <HAL_GetTick>
 8005d2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e167      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	f040 815a 	bne.w	800600c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d907      	bls.n	8005d7c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d70:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e14e      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2203      	movs	r2, #3
 8005d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d002      	beq.n	8005d9a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	025b      	lsls	r3, r3, #9
 8005d98:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	025b      	lsls	r3, r3, #9
 8005da4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005da6:	2390      	movs	r3, #144	; 0x90
 8005da8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005daa:	2302      	movs	r3, #2
 8005dac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f107 0214 	add.w	r2, r7, #20
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f002 fecb 	bl	8008b5c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d90a      	bls.n	8005df2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2202      	movs	r2, #2
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005de8:	4618      	mov	r0, r3
 8005dea:	f002 ff29 	bl	8008c40 <SDMMC_CmdReadMultiBlock>
 8005dee:	6478      	str	r0, [r7, #68]	; 0x44
 8005df0:	e009      	b.n	8005e06 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f002 fefb 	bl	8008bfa <SDMMC_CmdReadSingleBlock>
 8005e04:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d012      	beq.n	8005e32 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a84      	ldr	r2, [pc, #528]	; (8006024 <HAL_SD_ReadBlocks+0x30c>)
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e0f3      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e36:	e058      	b.n	8005eea <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d033      	beq.n	8005eae <HAL_SD_ReadBlocks+0x196>
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	2b1f      	cmp	r3, #31
 8005e4a:	d930      	bls.n	8005eae <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	e027      	b.n	8005ea2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 fdf8 	bl	8008a4c <SDMMC_ReadFIFO>
 8005e5c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	3301      	adds	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	3301      	adds	r3, #1
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	3301      	adds	r3, #1
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	0e1b      	lsrs	r3, r3, #24
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	3301      	adds	r3, #1
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d9d4      	bls.n	8005e52 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	3b20      	subs	r3, #32
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005eae:	f7fb fc2b 	bl	8001708 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d902      	bls.n	8005ec4 <HAL_SD_ReadBlocks+0x1ac>
 8005ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d112      	bne.n	8005eea <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a56      	ldr	r2, [pc, #344]	; (8006024 <HAL_SD_ReadBlocks+0x30c>)
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e097      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d09f      	beq.n	8005e38 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f06:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d022      	beq.n	8005f5c <HAL_SD_ReadBlocks+0x244>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d91f      	bls.n	8005f5c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d01b      	beq.n	8005f5c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f002 fef3 	bl	8008d14 <SDMMC_CmdStopTransfer>
 8005f2e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d012      	beq.n	8005f5c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3a      	ldr	r2, [pc, #232]	; (8006024 <HAL_SD_ReadBlocks+0x30c>)
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e05e      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d012      	beq.n	8005f90 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2d      	ldr	r2, [pc, #180]	; (8006024 <HAL_SD_ReadBlocks+0x30c>)
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	f043 0208 	orr.w	r2, r3, #8
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e044      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d012      	beq.n	8005fc4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a20      	ldr	r2, [pc, #128]	; (8006024 <HAL_SD_ReadBlocks+0x30c>)
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e02a      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a13      	ldr	r2, [pc, #76]	; (8006024 <HAL_SD_ReadBlocks+0x30c>)
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e010      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <HAL_SD_ReadBlocks+0x310>)
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e006      	b.n	800601a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
  }
}
 800601a:	4618      	mov	r0, r3
 800601c:	3748      	adds	r7, #72	; 0x48
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	1fe00fff 	.word	0x1fe00fff
 8006028:	18000f3a 	.word	0x18000f3a

0800602c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b092      	sub	sp, #72	; 0x48
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800603a:	f7fb fb65 	bl	8001708 <HAL_GetTick>
 800603e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d107      	bne.n	800605e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e16b      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	f040 815e 	bne.w	8006328 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	429a      	cmp	r2, r3
 800607e:	d907      	bls.n	8006090 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006084:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e152      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2203      	movs	r2, #3
 8006094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d002      	beq.n	80060ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	025b      	lsls	r3, r3, #9
 80060ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	025b      	lsls	r3, r3, #9
 80060b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060ba:	2390      	movs	r3, #144	; 0x90
 80060bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f107 0218 	add.w	r2, r7, #24
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 fd41 	bl	8008b5c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d90a      	bls.n	8006106 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 fde5 	bl	8008ccc <SDMMC_CmdWriteMultiBlock>
 8006102:	6478      	str	r0, [r7, #68]	; 0x44
 8006104:	e009      	b.n	800611a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2210      	movs	r2, #16
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006112:	4618      	mov	r0, r3
 8006114:	f002 fdb7 	bl	8008c86 <SDMMC_CmdWriteSingleBlock>
 8006118:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a86      	ldr	r2, [pc, #536]	; (8006340 <HAL_SD_WriteBlocks+0x314>)
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612e:	431a      	orrs	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e0f7      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800614a:	e05c      	b.n	8006206 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d037      	beq.n	80061ca <HAL_SD_WriteBlocks+0x19e>
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	2b1f      	cmp	r3, #31
 800615e:	d934      	bls.n	80061ca <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006160:	2300      	movs	r3, #0
 8006162:	643b      	str	r3, [r7, #64]	; 0x40
 8006164:	e02b      	b.n	80061be <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	3301      	adds	r3, #1
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	021a      	lsls	r2, r3, #8
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	3301      	adds	r3, #1
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	041a      	lsls	r2, r3, #16
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006192:	3301      	adds	r3, #1
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	061a      	lsls	r2, r3, #24
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	3301      	adds	r3, #1
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f107 0214 	add.w	r2, r7, #20
 80061b0:	4611      	mov	r1, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f002 fc57 	bl	8008a66 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80061b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ba:	3301      	adds	r3, #1
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
 80061be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c0:	2b07      	cmp	r3, #7
 80061c2:	d9d0      	bls.n	8006166 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	3b20      	subs	r3, #32
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061ca:	f7fb fa9d 	bl	8001708 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d902      	bls.n	80061e0 <HAL_SD_WriteBlocks+0x1b4>
 80061da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d112      	bne.n	8006206 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a56      	ldr	r2, [pc, #344]	; (8006340 <HAL_SD_WriteBlocks+0x314>)
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	431a      	orrs	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e097      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006210:	2b00      	cmp	r3, #0
 8006212:	d09b      	beq.n	800614c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006222:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	2b00      	cmp	r3, #0
 8006230:	d022      	beq.n	8006278 <HAL_SD_WriteBlocks+0x24c>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d91f      	bls.n	8006278 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	2b03      	cmp	r3, #3
 800623e:	d01b      	beq.n	8006278 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f002 fd65 	bl	8008d14 <SDMMC_CmdStopTransfer>
 800624a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624e:	2b00      	cmp	r3, #0
 8006250:	d012      	beq.n	8006278 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a3a      	ldr	r2, [pc, #232]	; (8006340 <HAL_SD_WriteBlocks+0x314>)
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e05e      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d012      	beq.n	80062ac <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <HAL_SD_WriteBlocks+0x314>)
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	f043 0208 	orr.w	r2, r3, #8
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e044      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d012      	beq.n	80062e0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a20      	ldr	r2, [pc, #128]	; (8006340 <HAL_SD_WriteBlocks+0x314>)
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e02a      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d012      	beq.n	8006314 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a13      	ldr	r2, [pc, #76]	; (8006340 <HAL_SD_WriteBlocks+0x314>)
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	f043 0210 	orr.w	r2, r3, #16
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e010      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <HAL_SD_WriteBlocks+0x318>)
 800631a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e006      	b.n	8006336 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3748      	adds	r7, #72	; 0x48
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	1fe00fff 	.word	0x1fe00fff
 8006344:	18000f3a 	.word	0x18000f3a

08006348 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_SD_IRQHandler+0x2e>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f924 	bl	80075bc <SD_Read_IT>
 8006374:	e19a      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80ac 	beq.w	80064de <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800638e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b9d      	ldr	r3, [pc, #628]	; (8006610 <HAL_SD_IRQHandler+0x2c8>)
 800639c:	400b      	ands	r3, r1
 800639e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d038      	beq.n	800643c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <HAL_SD_IRQHandler+0x96>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d011      	beq.n	8006402 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f002 fc96 	bl	8008d14 <SDMMC_CmdStopTransfer>
 80063e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f959 	bl	80066b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a83      	ldr	r2, [pc, #524]	; (8006614 <HAL_SD_IRQHandler+0x2cc>)
 8006408:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d104      	bne.n	800642c <HAL_SD_IRQHandler+0xe4>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f003 f951 	bl	80096d4 <HAL_SD_RxCpltCallback>
 8006432:	e13b      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f003 f943 	bl	80096c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800643a:	e137      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8132 	beq.w	80066ac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2200      	movs	r2, #0
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2200      	movs	r2, #0
 800645e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d104      	bne.n	8006474 <HAL_SD_IRQHandler+0x12c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d011      	beq.n	8006498 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f002 fc4b 	bl	8008d14 <SDMMC_CmdStopTransfer>
 800647e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f90e 	bl	80066b4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <HAL_SD_IRQHandler+0x172>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f003 f900 	bl	80096c0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d105      	bne.n	80064d6 <HAL_SD_IRQHandler+0x18e>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80eb 	beq.w	80066ac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f003 f8fc 	bl	80096d4 <HAL_SD_RxCpltCallback>
}
 80064dc:	e0e6      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d008      	beq.n	80064fe <HAL_SD_IRQHandler+0x1b6>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f8a6 	bl	8007648 <SD_Write_IT>
 80064fc:	e0d6      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006504:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80a2 	beq.w	8006652 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006520:	f043 0202 	orr.w	r2, r3, #2
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	f043 0208 	orr.w	r2, r3, #8
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	f043 0210 	orr.w	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a26      	ldr	r2, [pc, #152]	; (8006614 <HAL_SD_IRQHandler+0x2cc>)
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800658c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800659c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065bc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f002 fba6 	bl	8008d14 <SDMMC_CmdStopTransfer>
 80065c8:	4602      	mov	r2, r0
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f854 	bl	80066b4 <HAL_SD_ErrorCallback>
}
 800660c:	e04e      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
 800660e:	bf00      	nop
 8006610:	ffff3ec5 	.word	0xffff3ec5
 8006614:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	d044      	beq.n	80066ac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	2b00      	cmp	r3, #0
 8006628:	d040      	beq.n	80066ac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006638:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f832 	bl	80066b4 <HAL_SD_ErrorCallback>
}
 8006650:	e02c      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d025      	beq.n	80066ac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10c      	bne.n	8006692 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 f848 	bl	8007718 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006688:	e010      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f830 	bl	80076f0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006690:	e00c      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f831 	bl	8007704 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80066a2:	e003      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f819 	bl	80076dc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80066aa:	e7ff      	b.n	80066ac <HAL_SD_IRQHandler+0x364>
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d6:	0f9b      	lsrs	r3, r3, #30
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	0e9b      	lsrs	r3, r3, #26
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	b2da      	uxtb	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	b2da      	uxtb	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006728:	0d1b      	lsrs	r3, r3, #20
 800672a:	b29a      	uxth	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	0bdb      	lsrs	r3, r3, #15
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	0b9b      	lsrs	r3, r3, #14
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676a:	0b5b      	lsrs	r3, r3, #13
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677c:	0b1b      	lsrs	r3, r3, #12
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2200      	movs	r2, #0
 800678e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d163      	bne.n	8006860 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	009a      	lsls	r2, r3, #2
 800679e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067a2:	4013      	ands	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80067a8:	0f92      	lsrs	r2, r2, #30
 80067aa:	431a      	orrs	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b4:	0edb      	lsrs	r3, r3, #27
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c6:	0e1b      	lsrs	r3, r3, #24
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d8:	0d5b      	lsrs	r3, r3, #21
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ea:	0c9b      	lsrs	r3, r3, #18
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fc:	0bdb      	lsrs	r3, r3, #15
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	7e1b      	ldrb	r3, [r3, #24]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	3302      	adds	r3, #2
 8006820:	2201      	movs	r2, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800682a:	fb02 f203 	mul.w	r2, r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	7a1b      	ldrb	r3, [r3, #8]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	2201      	movs	r2, #1
 800683e:	409a      	lsls	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800684c:	0a52      	lsrs	r2, r2, #9
 800684e:	fb02 f203 	mul.w	r2, r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
 800685e:	e031      	b.n	80068c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11d      	bne.n	80068a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	431a      	orrs	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	029a      	lsls	r2, r3, #10
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006898:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
 80068a2:	e00f      	b.n	80068c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a58      	ldr	r2, [pc, #352]	; (8006a0c <HAL_SD_GetCardCSD+0x344>)
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e09d      	b.n	8006a00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c8:	0b9b      	lsrs	r3, r3, #14
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068da:	09db      	lsrs	r3, r3, #7
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068fc:	0fdb      	lsrs	r3, r3, #31
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	0f5b      	lsrs	r3, r3, #29
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691a:	0e9b      	lsrs	r3, r3, #26
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692c:	0d9b      	lsrs	r3, r3, #22
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	b2da      	uxtb	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693e:	0d5b      	lsrs	r3, r3, #21
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800696e:	0bdb      	lsrs	r3, r3, #15
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006982:	0b9b      	lsrs	r3, r3, #14
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006996:	0b5b      	lsrs	r3, r3, #13
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069aa:	0b1b      	lsrs	r3, r3, #12
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069be:	0a9b      	lsrs	r3, r3, #10
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	1fe00fff 	.word	0x1fe00fff

08006a10 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b094      	sub	sp, #80	; 0x50
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d101      	bne.n	8006a30 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0a7      	b.n	8006b80 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a30:	f107 0308 	add.w	r3, r7, #8
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fb62 	bl	8007100 <SD_SendSDStatus>
 8006a3c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d011      	beq.n	8006a68 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a4f      	ldr	r2, [pc, #316]	; (8006b88 <HAL_SD_GetCardStatus+0x178>)
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a66:	e070      	b.n	8006b4a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	0e1b      	lsrs	r3, r3, #24
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	061a      	lsls	r2, r3, #24
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ab8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	0e1b      	lsrs	r3, r3, #24
 8006abe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	0d1b      	lsrs	r3, r3, #20
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	0a9b      	lsrs	r3, r3, #10
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	0a1b      	lsrs	r3, r3, #8
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	0e1b      	lsrs	r3, r3, #24
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b52:	4618      	mov	r0, r3
 8006b54:	f002 f82e 	bl	8008bb4 <SDMMC_CmdBlockLength>
 8006b58:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00d      	beq.n	8006b7c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <HAL_SD_GetCardStatus+0x178>)
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b6c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3750      	adds	r7, #80	; 0x50
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	1fe00fff 	.word	0x1fe00fff

08006b8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b08d      	sub	sp, #52	; 0x34
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d02e      	beq.n	8006c66 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0e:	d106      	bne.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8006c1c:	e029      	b.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c24:	d10a      	bne.n	8006c3c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb62 	bl	80072f0 <SD_WideBus_Enable>
 8006c2c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	635a      	str	r2, [r3, #52]	; 0x34
 8006c3a:	e01a      	b.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fb9f 	bl	8007386 <SD_WideBus_Disable>
 8006c48:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	635a      	str	r2, [r3, #52]	; 0x34
 8006c56:	e00c      	b.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	635a      	str	r2, [r3, #52]	; 0x34
 8006c64:	e005      	b.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a5e      	ldr	r2, [pc, #376]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c88:	e094      	b.n	8006db4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c8a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c8e:	f7fd fd91 	bl	80047b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c92:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8083 	beq.w	8006da2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695a      	ldr	r2, [r3, #20]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	4950      	ldr	r1, [pc, #320]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cba:	fba1 1303 	umull	r1, r3, r1, r3
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d303      	bcc.n	8006ccc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e05a      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd4:	d103      	bne.n	8006cde <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e051      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce6:	d126      	bne.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10e      	bne.n	8006d0e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	4a43      	ldr	r2, [pc, #268]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d906      	bls.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	4a40      	ldr	r2, [pc, #256]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	0e5b      	lsrs	r3, r3, #25
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e03d      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e039      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1a:	4a39      	ldr	r2, [pc, #228]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d906      	bls.n	8006d2e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	4a36      	ldr	r2, [pc, #216]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	0e5b      	lsrs	r3, r3, #25
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	e029      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	e025      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10e      	bne.n	8006d5c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4a30      	ldr	r2, [pc, #192]	; (8006e04 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d906      	bls.n	8006d54 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	4a2c      	ldr	r2, [pc, #176]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	e016      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e012      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	6a3a      	ldr	r2, [r7, #32]
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d906      	bls.n	8006d7c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e002      	b.n	8006d82 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681c      	ldr	r4, [r3, #0]
 8006d86:	466a      	mov	r2, sp
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d90:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d94:	f107 0308 	add.w	r3, r7, #8
 8006d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f001 fe2c 	bl	80089f8 <SDMMC_Init>
 8006da0:	e008      	b.n	8006db4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fef9 	bl	8008bb4 <SDMMC_CmdBlockLength>
 8006dc2:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00c      	beq.n	8006de4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	372c      	adds	r7, #44	; 0x2c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}
 8006df8:	1fe00fff 	.word	0x1fe00fff
 8006dfc:	55e63b89 	.word	0x55e63b89
 8006e00:	02faf080 	.word	0x02faf080
 8006e04:	017d7840 	.word	0x017d7840

08006e08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e14:	f107 030c 	add.w	r3, r7, #12
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa40 	bl	80072a0 <SD_SendStatus>
 8006e20:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	0a5b      	lsrs	r3, r3, #9
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e3e:	693b      	ldr	r3, [r7, #16]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e54:	f7fa fc58 	bl	8001708 <HAL_GetTick>
 8006e58:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 fe23 	bl	8008aaa <SDMMC_GetPowerState>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e6e:	e0b5      	b.n	8006fdc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d02e      	beq.n	8006ed6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 f86e 	bl	8008f5e <SDMMC_CmdSendCID>
 8006e82:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <SD_InitCard+0x46>
    {
      return errorstate;
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	e0a6      	b.n	8006fdc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 fe4e 	bl	8008b36 <SDMMC_GetResponse>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2104      	movs	r1, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 fe45 	bl	8008b36 <SDMMC_GetResponse>
 8006eac:	4602      	mov	r2, r0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2108      	movs	r1, #8
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 fe3c 	bl	8008b36 <SDMMC_GetResponse>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	210c      	movs	r1, #12
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 fe33 	bl	8008b36 <SDMMC_GetResponse>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d01d      	beq.n	8006f1a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006ede:	e019      	b.n	8006f14 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f107 020a 	add.w	r2, r7, #10
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f002 f876 	bl	8008fdc <SDMMC_CmdSetRelAdd>
 8006ef0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <SD_InitCard+0xb4>
      {
        return errorstate;
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	e06f      	b.n	8006fdc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006efc:	f7fa fc04 	bl	8001708 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f241 3287 	movw	r2, #4999	; 0x1387
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d902      	bls.n	8006f14 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006f0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f12:	e063      	b.n	8006fdc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006f14:	897b      	ldrh	r3, [r7, #10]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0e2      	beq.n	8006ee0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d036      	beq.n	8006f90 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	461a      	mov	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f002 f830 	bl	8008f9c <SDMMC_CmdSendCSD>
 8006f3c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	e049      	b.n	8006fdc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fdf1 	bl	8008b36 <SDMMC_GetResponse>
 8006f54:	4602      	mov	r2, r0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2104      	movs	r1, #4
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 fde8 	bl	8008b36 <SDMMC_GetResponse>
 8006f66:	4602      	mov	r2, r0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2108      	movs	r1, #8
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fddf 	bl	8008b36 <SDMMC_GetResponse>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	210c      	movs	r1, #12
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fdd6 	bl	8008b36 <SDMMC_GetResponse>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2104      	movs	r1, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 fdcd 	bl	8008b36 <SDMMC_GetResponse>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	0d1a      	lsrs	r2, r3, #20
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fa4:	f107 030c 	add.w	r3, r7, #12
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fb8c 	bl	80066c8 <HAL_SD_GetCardCSD>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fba:	e00f      	b.n	8006fdc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f001 fedf 	bl	8008d8c <SDMMC_CmdSelDesel>
 8006fce:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <SD_InitCard+0x192>
  {
    return errorstate;
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	e000      	b.n	8006fdc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3740      	adds	r7, #64	; 0x40
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 fee8 	bl	8008dd2 <SDMMC_CmdGoIdleState>
 8007002:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <SD_PowerON+0x2a>
  {
    return errorstate;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	e072      	b.n	80070f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f001 fefb 	bl	8008e0e <SDMMC_CmdOperCond>
 8007018:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007020:	d10d      	bne.n	800703e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f001 fed0 	bl	8008dd2 <SDMMC_CmdGoIdleState>
 8007032:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <SD_PowerON+0x60>
    {
      return errorstate;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	e05a      	b.n	80070f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d137      	bne.n	80070bc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f001 fefb 	bl	8008e4e <SDMMC_CmdAppCommand>
 8007058:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d02d      	beq.n	80070bc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007064:	e046      	b.n	80070f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 feee 	bl	8008e4e <SDMMC_CmdAppCommand>
 8007072:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <SD_PowerON+0x9a>
    {
      return errorstate;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	e03a      	b.n	80070f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	491e      	ldr	r1, [pc, #120]	; (80070fc <SD_PowerON+0x118>)
 8007084:	4618      	mov	r0, r3
 8007086:	f001 ff05 	bl	8008e94 <SDMMC_CmdAppOperCommand>
 800708a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007092:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007096:	e02d      	b.n	80070f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 fd49 	bl	8008b36 <SDMMC_GetResponse>
 80070a4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	0fdb      	lsrs	r3, r3, #31
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <SD_PowerON+0xce>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <SD_PowerON+0xd0>
 80070b2:	2300      	movs	r3, #0
 80070b4:	613b      	str	r3, [r7, #16]

    count++;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d802      	bhi.n	80070cc <SD_PowerON+0xe8>
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0cc      	beq.n	8007066 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d902      	bls.n	80070dc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070da:	e00b      	b.n	80070f4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	c1100000 	.word	0xc1100000

08007100 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	; 0x30
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800710a:	f7fa fafd 	bl	8001708 <HAL_GetTick>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f001 fd0b 	bl	8008b36 <SDMMC_GetResponse>
 8007120:	4603      	mov	r3, r0
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712a:	d102      	bne.n	8007132 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800712c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007130:	e0b0      	b.n	8007294 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2140      	movs	r1, #64	; 0x40
 8007138:	4618      	mov	r0, r3
 800713a:	f001 fd3b 	bl	8008bb4 <SDMMC_CmdBlockLength>
 800713e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	e0a0      	b.n	8007294 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f001 fe75 	bl	8008e4e <SDMMC_CmdAppCommand>
 8007164:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	e08d      	b.n	8007294 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007182:	2360      	movs	r3, #96	; 0x60
 8007184:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007186:	2302      	movs	r3, #2
 8007188:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800718a:	2300      	movs	r3, #0
 800718c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800718e:	2301      	movs	r3, #1
 8007190:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f107 0208 	add.w	r2, r7, #8
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fcdd 	bl	8008b5c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 ff5d 	bl	8009066 <SDMMC_CmdStatusRegister>
 80071ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d02b      	beq.n	800720c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	e069      	b.n	8007294 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d013      	beq.n	80071f6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d2:	e00d      	b.n	80071f0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fc37 	bl	8008a4c <SDMMC_ReadFIFO>
 80071de:	4602      	mov	r2, r0
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	601a      	str	r2, [r3, #0]
        pData++;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	3304      	adds	r3, #4
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	3301      	adds	r3, #1
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	2b07      	cmp	r3, #7
 80071f4:	d9ee      	bls.n	80071d4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071f6:	f7fa fa87 	bl	8001708 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d102      	bne.n	800720c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007206:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800720a:	e043      	b.n	8007294 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007212:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0d2      	beq.n	80071c0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007228:	2308      	movs	r3, #8
 800722a:	e033      	b.n	8007294 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800723a:	2302      	movs	r3, #2
 800723c:	e02a      	b.n	8007294 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d017      	beq.n	800727c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800724c:	2320      	movs	r3, #32
 800724e:	e021      	b.n	8007294 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f001 fbf9 	bl	8008a4c <SDMMC_ReadFIFO>
 800725a:	4602      	mov	r2, r0
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	601a      	str	r2, [r3, #0]
    pData++;
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	3304      	adds	r3, #4
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007266:	f7fa fa4f 	bl	8001708 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d102      	bne.n	800727c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800727a:	e00b      	b.n	8007294 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e2      	bne.n	8007250 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a03      	ldr	r2, [pc, #12]	; (800729c <SD_SendSDStatus+0x19c>)
 8007290:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3730      	adds	r7, #48	; 0x30
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	18000f3a 	.word	0x18000f3a

080072a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072b4:	e018      	b.n	80072e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f001 feac 	bl	8009020 <SDMMC_CmdSendStatus>
 80072c8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	e009      	b.n	80072e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fc2b 	bl	8008b36 <SDMMC_GetResponse>
 80072e0:	4602      	mov	r2, r0
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fc15 	bl	8008b36 <SDMMC_GetResponse>
 800730c:	4603      	mov	r3, r0
 800730e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007316:	d102      	bne.n	800731e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800731c:	e02f      	b.n	800737e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800731e:	f107 030c 	add.w	r3, r7, #12
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f879 	bl	800741c <SD_FindSCR>
 800732a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	e023      	b.n	800737e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01c      	beq.n	800737a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f001 fd7e 	bl	8008e4e <SDMMC_CmdAppCommand>
 8007352:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	e00f      	b.n	800737e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2102      	movs	r1, #2
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fdb5 	bl	8008ed4 <SDMMC_CmdBusWidth>
 800736a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	e003      	b.n	800737e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007376:	2300      	movs	r3, #0
 8007378:	e001      	b.n	800737e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800737a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f001 fbca 	bl	8008b36 <SDMMC_GetResponse>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ac:	d102      	bne.n	80073b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073b2:	e02f      	b.n	8007414 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f82e 	bl	800741c <SD_FindSCR>
 80073c0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	e023      	b.n	8007414 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01c      	beq.n	8007410 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	041b      	lsls	r3, r3, #16
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f001 fd33 	bl	8008e4e <SDMMC_CmdAppCommand>
 80073e8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	e00f      	b.n	8007414 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fd6a 	bl	8008ed4 <SDMMC_CmdBusWidth>
 8007400:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	e003      	b.n	8007414 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800740c:	2300      	movs	r3, #0
 800740e:	e001      	b.n	8007414 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007410:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	; 0x38
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007426:	f7fa f96f 	bl	8001708 <HAL_GetTick>
 800742a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007430:	2300      	movs	r3, #0
 8007432:	60bb      	str	r3, [r7, #8]
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2108      	movs	r1, #8
 8007442:	4618      	mov	r0, r3
 8007444:	f001 fbb6 	bl	8008bb4 <SDMMC_CmdBlockLength>
 8007448:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	e0ad      	b.n	80075b0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f001 fcf4 	bl	8008e4e <SDMMC_CmdAppCommand>
 8007466:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <SD_FindSCR+0x56>
  {
    return errorstate;
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	e09e      	b.n	80075b0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007478:	2308      	movs	r3, #8
 800747a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800747c:	2330      	movs	r3, #48	; 0x30
 800747e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007480:	2302      	movs	r3, #2
 8007482:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007484:	2300      	movs	r3, #0
 8007486:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007488:	2301      	movs	r3, #1
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f107 0210 	add.w	r2, r7, #16
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f001 fb60 	bl	8008b5c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 fd3a 	bl	8008f1a <SDMMC_CmdSendSCR>
 80074a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d027      	beq.n	80074fe <SD_FindSCR+0xe2>
  {
    return errorstate;
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	e07e      	b.n	80075b0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d113      	bne.n	80074e8 <SD_FindSCR+0xcc>
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d110      	bne.n	80074e8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fabe 	bl	8008a4c <SDMMC_ReadFIFO>
 80074d0:	4603      	mov	r3, r0
 80074d2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fab7 	bl	8008a4c <SDMMC_ReadFIFO>
 80074de:	4603      	mov	r3, r0
 80074e0:	60fb      	str	r3, [r7, #12]
      index++;
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	3301      	adds	r3, #1
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074e8:	f7fa f90e 	bl	8001708 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d102      	bne.n	80074fe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074fc:	e058      	b.n	80075b0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007504:	f240 532a 	movw	r3, #1322	; 0x52a
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0d1      	beq.n	80074b2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2208      	movs	r2, #8
 8007522:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007524:	2308      	movs	r3, #8
 8007526:	e043      	b.n	80075b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2202      	movs	r2, #2
 800753c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800753e:	2302      	movs	r3, #2
 8007540:	e036      	b.n	80075b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2220      	movs	r2, #32
 8007556:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007558:	2320      	movs	r3, #32
 800755a:	e029      	b.n	80075b0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <SD_FindSCR+0x19c>)
 8007562:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	061a      	lsls	r2, r3, #24
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007570:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800757a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	0e1b      	lsrs	r3, r3, #24
 8007580:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	601a      	str	r2, [r3, #0]
    scr++;
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	3304      	adds	r3, #4
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	061a      	lsls	r2, r3, #24
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007598:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	0e1b      	lsrs	r3, r3, #24
 80075a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3738      	adds	r7, #56	; 0x38
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	18000f3a 	.word	0x18000f3a

080075bc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	2b1f      	cmp	r3, #31
 80075d0:	d936      	bls.n	8007640 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e027      	b.n	8007628 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 fa35 	bl	8008a4c <SDMMC_ReadFIFO>
 80075e2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	0a1b      	lsrs	r3, r3, #8
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	3301      	adds	r3, #1
 8007600:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	0c1b      	lsrs	r3, r3, #16
 8007606:	b2da      	uxtb	r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	0e1b      	lsrs	r3, r3, #24
 8007616:	b2da      	uxtb	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3301      	adds	r3, #1
 8007620:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	3301      	adds	r3, #1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b07      	cmp	r3, #7
 800762c:	d9d4      	bls.n	80075d8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f1a3 0220 	sub.w	r2, r3, #32
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007640:	bf00      	nop
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	2b1f      	cmp	r3, #31
 800765c:	d93a      	bls.n	80076d4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e02b      	b.n	80076bc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	60fb      	str	r3, [r7, #12]
      tmp++;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	3301      	adds	r3, #1
 800766e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	021a      	lsls	r2, r3, #8
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	3301      	adds	r3, #1
 8007680:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	041a      	lsls	r2, r3, #16
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3301      	adds	r3, #1
 8007692:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	061a      	lsls	r2, r3, #24
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
      tmp++;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3301      	adds	r3, #1
 80076a4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f107 020c 	add.w	r2, r7, #12
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 f9d8 	bl	8008a66 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	3301      	adds	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b07      	cmp	r3, #7
 80076c0:	d9d0      	bls.n	8007664 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	f1a3 0220 	sub.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	621a      	str	r2, [r3, #32]
  }
}
 80076d4:	bf00      	nop
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e042      	b.n	80077c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7f9 fdd7 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2224      	movs	r2, #36	; 0x24
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f82c 	bl	80077cc <UART_SetConfig>
 8007774:	4603      	mov	r3, r0
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e022      	b.n	80077c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fe7e 	bl	8008488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800779a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ff05 	bl	80085cc <UART_CheckIdleState>
 80077c2:	4603      	mov	r3, r0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077cc:	b5b0      	push	{r4, r5, r7, lr}
 80077ce:	b08e      	sub	sp, #56	; 0x38
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	4bbf      	ldr	r3, [pc, #764]	; (8007af8 <UART_SetConfig+0x32c>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007802:	430b      	orrs	r3, r1
 8007804:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68da      	ldr	r2, [r3, #12]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4ab5      	ldr	r2, [pc, #724]	; (8007afc <UART_SetConfig+0x330>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007832:	4313      	orrs	r3, r2
 8007834:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	4bb0      	ldr	r3, [pc, #704]	; (8007b00 <UART_SetConfig+0x334>)
 800783e:	4013      	ands	r3, r2
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007846:	430b      	orrs	r3, r1
 8007848:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	f023 010f 	bic.w	r1, r3, #15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4aa7      	ldr	r2, [pc, #668]	; (8007b04 <UART_SetConfig+0x338>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d176      	bne.n	8007958 <UART_SetConfig+0x18c>
 800786a:	4ba7      	ldr	r3, [pc, #668]	; (8007b08 <UART_SetConfig+0x33c>)
 800786c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007872:	2b28      	cmp	r3, #40	; 0x28
 8007874:	d86c      	bhi.n	8007950 <UART_SetConfig+0x184>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <UART_SetConfig+0xb0>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	08007921 	.word	0x08007921
 8007880:	08007951 	.word	0x08007951
 8007884:	08007951 	.word	0x08007951
 8007888:	08007951 	.word	0x08007951
 800788c:	08007951 	.word	0x08007951
 8007890:	08007951 	.word	0x08007951
 8007894:	08007951 	.word	0x08007951
 8007898:	08007951 	.word	0x08007951
 800789c:	08007929 	.word	0x08007929
 80078a0:	08007951 	.word	0x08007951
 80078a4:	08007951 	.word	0x08007951
 80078a8:	08007951 	.word	0x08007951
 80078ac:	08007951 	.word	0x08007951
 80078b0:	08007951 	.word	0x08007951
 80078b4:	08007951 	.word	0x08007951
 80078b8:	08007951 	.word	0x08007951
 80078bc:	08007931 	.word	0x08007931
 80078c0:	08007951 	.word	0x08007951
 80078c4:	08007951 	.word	0x08007951
 80078c8:	08007951 	.word	0x08007951
 80078cc:	08007951 	.word	0x08007951
 80078d0:	08007951 	.word	0x08007951
 80078d4:	08007951 	.word	0x08007951
 80078d8:	08007951 	.word	0x08007951
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007951 	.word	0x08007951
 80078e4:	08007951 	.word	0x08007951
 80078e8:	08007951 	.word	0x08007951
 80078ec:	08007951 	.word	0x08007951
 80078f0:	08007951 	.word	0x08007951
 80078f4:	08007951 	.word	0x08007951
 80078f8:	08007951 	.word	0x08007951
 80078fc:	08007941 	.word	0x08007941
 8007900:	08007951 	.word	0x08007951
 8007904:	08007951 	.word	0x08007951
 8007908:	08007951 	.word	0x08007951
 800790c:	08007951 	.word	0x08007951
 8007910:	08007951 	.word	0x08007951
 8007914:	08007951 	.word	0x08007951
 8007918:	08007951 	.word	0x08007951
 800791c:	08007949 	.word	0x08007949
 8007920:	2301      	movs	r3, #1
 8007922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007926:	e326      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792e:	e322      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007936:	e31e      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793e:	e31a      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007940:	2320      	movs	r3, #32
 8007942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007946:	e316      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794e:	e312      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007950:	2380      	movs	r3, #128	; 0x80
 8007952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007956:	e30e      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a6b      	ldr	r2, [pc, #428]	; (8007b0c <UART_SetConfig+0x340>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d130      	bne.n	80079c4 <UART_SetConfig+0x1f8>
 8007962:	4b69      	ldr	r3, [pc, #420]	; (8007b08 <UART_SetConfig+0x33c>)
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b05      	cmp	r3, #5
 800796c:	d826      	bhi.n	80079bc <UART_SetConfig+0x1f0>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x1a8>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007995 	.word	0x08007995
 800797c:	0800799d 	.word	0x0800799d
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079ad 	.word	0x080079ad
 8007988:	080079b5 	.word	0x080079b5
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007992:	e2f0      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007994:	2304      	movs	r3, #4
 8007996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800799a:	e2ec      	b.n	8007f76 <UART_SetConfig+0x7aa>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079a2:	e2e8      	b.n	8007f76 <UART_SetConfig+0x7aa>
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079aa:	e2e4      	b.n	8007f76 <UART_SetConfig+0x7aa>
 80079ac:	2320      	movs	r3, #32
 80079ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b2:	e2e0      	b.n	8007f76 <UART_SetConfig+0x7aa>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ba:	e2dc      	b.n	8007f76 <UART_SetConfig+0x7aa>
 80079bc:	2380      	movs	r3, #128	; 0x80
 80079be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079c2:	e2d8      	b.n	8007f76 <UART_SetConfig+0x7aa>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a51      	ldr	r2, [pc, #324]	; (8007b10 <UART_SetConfig+0x344>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d130      	bne.n	8007a30 <UART_SetConfig+0x264>
 80079ce:	4b4e      	ldr	r3, [pc, #312]	; (8007b08 <UART_SetConfig+0x33c>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d826      	bhi.n	8007a28 <UART_SetConfig+0x25c>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x214>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fe:	e2ba      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a06:	e2b6      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0e:	e2b2      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a16:	e2ae      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1e:	e2aa      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a26:	e2a6      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a2e:	e2a2      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a37      	ldr	r2, [pc, #220]	; (8007b14 <UART_SetConfig+0x348>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d130      	bne.n	8007a9c <UART_SetConfig+0x2d0>
 8007a3a:	4b33      	ldr	r3, [pc, #204]	; (8007b08 <UART_SetConfig+0x33c>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d826      	bhi.n	8007a94 <UART_SetConfig+0x2c8>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <UART_SetConfig+0x280>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a65 	.word	0x08007a65
 8007a50:	08007a6d 	.word	0x08007a6d
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6a:	e284      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a72:	e280      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a74:	2308      	movs	r3, #8
 8007a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7a:	e27c      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a82:	e278      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a84:	2320      	movs	r3, #32
 8007a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8a:	e274      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a92:	e270      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9a:	e26c      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <UART_SetConfig+0x34c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d142      	bne.n	8007b2c <UART_SetConfig+0x360>
 8007aa6:	4b18      	ldr	r3, [pc, #96]	; (8007b08 <UART_SetConfig+0x33c>)
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	d838      	bhi.n	8007b24 <UART_SetConfig+0x358>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <UART_SetConfig+0x2ec>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007ad1 	.word	0x08007ad1
 8007abc:	08007ad9 	.word	0x08007ad9
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007b1d 	.word	0x08007b1d
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad6:	e24e      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ad8:	2304      	movs	r3, #4
 8007ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ade:	e24a      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae6:	e246      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ae8:	2310      	movs	r3, #16
 8007aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aee:	e242      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007af0:	2320      	movs	r3, #32
 8007af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af6:	e23e      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007af8:	cfff69f3 	.word	0xcfff69f3
 8007afc:	58000c00 	.word	0x58000c00
 8007b00:	11fff4ff 	.word	0x11fff4ff
 8007b04:	40011000 	.word	0x40011000
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	40004400 	.word	0x40004400
 8007b10:	40004800 	.word	0x40004800
 8007b14:	40004c00 	.word	0x40004c00
 8007b18:	40005000 	.word	0x40005000
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b22:	e228      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007b24:	2380      	movs	r3, #128	; 0x80
 8007b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2a:	e224      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4ab1      	ldr	r2, [pc, #708]	; (8007df8 <UART_SetConfig+0x62c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d176      	bne.n	8007c24 <UART_SetConfig+0x458>
 8007b36:	4bb1      	ldr	r3, [pc, #708]	; (8007dfc <UART_SetConfig+0x630>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b3e:	2b28      	cmp	r3, #40	; 0x28
 8007b40:	d86c      	bhi.n	8007c1c <UART_SetConfig+0x450>
 8007b42:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <UART_SetConfig+0x37c>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007bed 	.word	0x08007bed
 8007b4c:	08007c1d 	.word	0x08007c1d
 8007b50:	08007c1d 	.word	0x08007c1d
 8007b54:	08007c1d 	.word	0x08007c1d
 8007b58:	08007c1d 	.word	0x08007c1d
 8007b5c:	08007c1d 	.word	0x08007c1d
 8007b60:	08007c1d 	.word	0x08007c1d
 8007b64:	08007c1d 	.word	0x08007c1d
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007c1d 	.word	0x08007c1d
 8007b70:	08007c1d 	.word	0x08007c1d
 8007b74:	08007c1d 	.word	0x08007c1d
 8007b78:	08007c1d 	.word	0x08007c1d
 8007b7c:	08007c1d 	.word	0x08007c1d
 8007b80:	08007c1d 	.word	0x08007c1d
 8007b84:	08007c1d 	.word	0x08007c1d
 8007b88:	08007bfd 	.word	0x08007bfd
 8007b8c:	08007c1d 	.word	0x08007c1d
 8007b90:	08007c1d 	.word	0x08007c1d
 8007b94:	08007c1d 	.word	0x08007c1d
 8007b98:	08007c1d 	.word	0x08007c1d
 8007b9c:	08007c1d 	.word	0x08007c1d
 8007ba0:	08007c1d 	.word	0x08007c1d
 8007ba4:	08007c1d 	.word	0x08007c1d
 8007ba8:	08007c05 	.word	0x08007c05
 8007bac:	08007c1d 	.word	0x08007c1d
 8007bb0:	08007c1d 	.word	0x08007c1d
 8007bb4:	08007c1d 	.word	0x08007c1d
 8007bb8:	08007c1d 	.word	0x08007c1d
 8007bbc:	08007c1d 	.word	0x08007c1d
 8007bc0:	08007c1d 	.word	0x08007c1d
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c0d 	.word	0x08007c0d
 8007bcc:	08007c1d 	.word	0x08007c1d
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007c1d 	.word	0x08007c1d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c1d 	.word	0x08007c1d
 8007be0:	08007c1d 	.word	0x08007c1d
 8007be4:	08007c1d 	.word	0x08007c1d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e1c0      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfa:	e1bc      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c02:	e1b8      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c04:	2310      	movs	r3, #16
 8007c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0a:	e1b4      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c12:	e1b0      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1a:	e1ac      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c1c:	2380      	movs	r3, #128	; 0x80
 8007c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c22:	e1a8      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a75      	ldr	r2, [pc, #468]	; (8007e00 <UART_SetConfig+0x634>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d130      	bne.n	8007c90 <UART_SetConfig+0x4c4>
 8007c2e:	4b73      	ldr	r3, [pc, #460]	; (8007dfc <UART_SetConfig+0x630>)
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d826      	bhi.n	8007c88 <UART_SetConfig+0x4bc>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <UART_SetConfig+0x474>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c59 	.word	0x08007c59
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5e:	e18a      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c66:	e186      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6e:	e182      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c76:	e17e      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e17a      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c80:	2340      	movs	r3, #64	; 0x40
 8007c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c86:	e176      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c8e:	e172      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a5b      	ldr	r2, [pc, #364]	; (8007e04 <UART_SetConfig+0x638>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d130      	bne.n	8007cfc <UART_SetConfig+0x530>
 8007c9a:	4b58      	ldr	r3, [pc, #352]	; (8007dfc <UART_SetConfig+0x630>)
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d826      	bhi.n	8007cf4 <UART_SetConfig+0x528>
 8007ca6:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <UART_SetConfig+0x4e0>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cca:	e154      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd2:	e150      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cda:	e14c      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce2:	e148      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cea:	e144      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007cec:	2340      	movs	r3, #64	; 0x40
 8007cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf2:	e140      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfa:	e13c      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a41      	ldr	r2, [pc, #260]	; (8007e08 <UART_SetConfig+0x63c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f040 8082 	bne.w	8007e0c <UART_SetConfig+0x640>
 8007d08:	4b3c      	ldr	r3, [pc, #240]	; (8007dfc <UART_SetConfig+0x630>)
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d10:	2b28      	cmp	r3, #40	; 0x28
 8007d12:	d86d      	bhi.n	8007df0 <UART_SetConfig+0x624>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <UART_SetConfig+0x550>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007dc1 	.word	0x08007dc1
 8007d20:	08007df1 	.word	0x08007df1
 8007d24:	08007df1 	.word	0x08007df1
 8007d28:	08007df1 	.word	0x08007df1
 8007d2c:	08007df1 	.word	0x08007df1
 8007d30:	08007df1 	.word	0x08007df1
 8007d34:	08007df1 	.word	0x08007df1
 8007d38:	08007df1 	.word	0x08007df1
 8007d3c:	08007dc9 	.word	0x08007dc9
 8007d40:	08007df1 	.word	0x08007df1
 8007d44:	08007df1 	.word	0x08007df1
 8007d48:	08007df1 	.word	0x08007df1
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007df1 	.word	0x08007df1
 8007d54:	08007df1 	.word	0x08007df1
 8007d58:	08007df1 	.word	0x08007df1
 8007d5c:	08007dd1 	.word	0x08007dd1
 8007d60:	08007df1 	.word	0x08007df1
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df1 	.word	0x08007df1
 8007d6c:	08007df1 	.word	0x08007df1
 8007d70:	08007df1 	.word	0x08007df1
 8007d74:	08007df1 	.word	0x08007df1
 8007d78:	08007df1 	.word	0x08007df1
 8007d7c:	08007dd9 	.word	0x08007dd9
 8007d80:	08007df1 	.word	0x08007df1
 8007d84:	08007df1 	.word	0x08007df1
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007df1 	.word	0x08007df1
 8007d90:	08007df1 	.word	0x08007df1
 8007d94:	08007df1 	.word	0x08007df1
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007de1 	.word	0x08007de1
 8007da0:	08007df1 	.word	0x08007df1
 8007da4:	08007df1 	.word	0x08007df1
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007df1 	.word	0x08007df1
 8007db8:	08007df1 	.word	0x08007df1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e0d6      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	e0d2      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd6:	e0ce      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e0ca      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007de0:	2320      	movs	r3, #32
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e0c6      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	e0c2      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df6:	e0be      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007df8:	40011400 	.word	0x40011400
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	40007800 	.word	0x40007800
 8007e04:	40007c00 	.word	0x40007c00
 8007e08:	40011800 	.word	0x40011800
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4aad      	ldr	r2, [pc, #692]	; (80080c8 <UART_SetConfig+0x8fc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d176      	bne.n	8007f04 <UART_SetConfig+0x738>
 8007e16:	4bad      	ldr	r3, [pc, #692]	; (80080cc <UART_SetConfig+0x900>)
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e1e:	2b28      	cmp	r3, #40	; 0x28
 8007e20:	d86c      	bhi.n	8007efc <UART_SetConfig+0x730>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <UART_SetConfig+0x65c>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007ecd 	.word	0x08007ecd
 8007e2c:	08007efd 	.word	0x08007efd
 8007e30:	08007efd 	.word	0x08007efd
 8007e34:	08007efd 	.word	0x08007efd
 8007e38:	08007efd 	.word	0x08007efd
 8007e3c:	08007efd 	.word	0x08007efd
 8007e40:	08007efd 	.word	0x08007efd
 8007e44:	08007efd 	.word	0x08007efd
 8007e48:	08007ed5 	.word	0x08007ed5
 8007e4c:	08007efd 	.word	0x08007efd
 8007e50:	08007efd 	.word	0x08007efd
 8007e54:	08007efd 	.word	0x08007efd
 8007e58:	08007efd 	.word	0x08007efd
 8007e5c:	08007efd 	.word	0x08007efd
 8007e60:	08007efd 	.word	0x08007efd
 8007e64:	08007efd 	.word	0x08007efd
 8007e68:	08007edd 	.word	0x08007edd
 8007e6c:	08007efd 	.word	0x08007efd
 8007e70:	08007efd 	.word	0x08007efd
 8007e74:	08007efd 	.word	0x08007efd
 8007e78:	08007efd 	.word	0x08007efd
 8007e7c:	08007efd 	.word	0x08007efd
 8007e80:	08007efd 	.word	0x08007efd
 8007e84:	08007efd 	.word	0x08007efd
 8007e88:	08007ee5 	.word	0x08007ee5
 8007e8c:	08007efd 	.word	0x08007efd
 8007e90:	08007efd 	.word	0x08007efd
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007efd 	.word	0x08007efd
 8007e9c:	08007efd 	.word	0x08007efd
 8007ea0:	08007efd 	.word	0x08007efd
 8007ea4:	08007efd 	.word	0x08007efd
 8007ea8:	08007eed 	.word	0x08007eed
 8007eac:	08007efd 	.word	0x08007efd
 8007eb0:	08007efd 	.word	0x08007efd
 8007eb4:	08007efd 	.word	0x08007efd
 8007eb8:	08007efd 	.word	0x08007efd
 8007ebc:	08007efd 	.word	0x08007efd
 8007ec0:	08007efd 	.word	0x08007efd
 8007ec4:	08007efd 	.word	0x08007efd
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed2:	e050      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eda:	e04c      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007edc:	2308      	movs	r3, #8
 8007ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee2:	e048      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eea:	e044      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007eec:	2320      	movs	r3, #32
 8007eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef2:	e040      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efa:	e03c      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007efc:	2380      	movs	r3, #128	; 0x80
 8007efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f02:	e038      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a71      	ldr	r2, [pc, #452]	; (80080d0 <UART_SetConfig+0x904>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d130      	bne.n	8007f70 <UART_SetConfig+0x7a4>
 8007f0e:	4b6f      	ldr	r3, [pc, #444]	; (80080cc <UART_SetConfig+0x900>)
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d826      	bhi.n	8007f68 <UART_SetConfig+0x79c>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x754>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f41 	.word	0x08007f41
 8007f28:	08007f49 	.word	0x08007f49
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f59 	.word	0x08007f59
 8007f34:	08007f61 	.word	0x08007f61
 8007f38:	2302      	movs	r3, #2
 8007f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3e:	e01a      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f40:	2304      	movs	r3, #4
 8007f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f46:	e016      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f48:	2308      	movs	r3, #8
 8007f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f4e:	e012      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f50:	2310      	movs	r3, #16
 8007f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f56:	e00e      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f58:	2320      	movs	r3, #32
 8007f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5e:	e00a      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f66:	e006      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f68:	2380      	movs	r3, #128	; 0x80
 8007f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6e:	e002      	b.n	8007f76 <UART_SetConfig+0x7aa>
 8007f70:	2380      	movs	r3, #128	; 0x80
 8007f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a55      	ldr	r2, [pc, #340]	; (80080d0 <UART_SetConfig+0x904>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	f040 80f0 	bne.w	8008162 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	dc46      	bgt.n	8008018 <UART_SetConfig+0x84c>
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	db75      	blt.n	800807a <UART_SetConfig+0x8ae>
 8007f8e:	3b02      	subs	r3, #2
 8007f90:	2b1e      	cmp	r3, #30
 8007f92:	d872      	bhi.n	800807a <UART_SetConfig+0x8ae>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <UART_SetConfig+0x7d0>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	0800801f 	.word	0x0800801f
 8007fa0:	0800807b 	.word	0x0800807b
 8007fa4:	08008027 	.word	0x08008027
 8007fa8:	0800807b 	.word	0x0800807b
 8007fac:	0800807b 	.word	0x0800807b
 8007fb0:	0800807b 	.word	0x0800807b
 8007fb4:	08008037 	.word	0x08008037
 8007fb8:	0800807b 	.word	0x0800807b
 8007fbc:	0800807b 	.word	0x0800807b
 8007fc0:	0800807b 	.word	0x0800807b
 8007fc4:	0800807b 	.word	0x0800807b
 8007fc8:	0800807b 	.word	0x0800807b
 8007fcc:	0800807b 	.word	0x0800807b
 8007fd0:	0800807b 	.word	0x0800807b
 8007fd4:	08008047 	.word	0x08008047
 8007fd8:	0800807b 	.word	0x0800807b
 8007fdc:	0800807b 	.word	0x0800807b
 8007fe0:	0800807b 	.word	0x0800807b
 8007fe4:	0800807b 	.word	0x0800807b
 8007fe8:	0800807b 	.word	0x0800807b
 8007fec:	0800807b 	.word	0x0800807b
 8007ff0:	0800807b 	.word	0x0800807b
 8007ff4:	0800807b 	.word	0x0800807b
 8007ff8:	0800807b 	.word	0x0800807b
 8007ffc:	0800807b 	.word	0x0800807b
 8008000:	0800807b 	.word	0x0800807b
 8008004:	0800807b 	.word	0x0800807b
 8008008:	0800807b 	.word	0x0800807b
 800800c:	0800807b 	.word	0x0800807b
 8008010:	0800807b 	.word	0x0800807b
 8008014:	0800806d 	.word	0x0800806d
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d02a      	beq.n	8008072 <UART_SetConfig+0x8a6>
 800801c:	e02d      	b.n	800807a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800801e:	f7fc ffed 	bl	8004ffc <HAL_RCCEx_GetD3PCLK1Freq>
 8008022:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008024:	e02f      	b.n	8008086 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	4618      	mov	r0, r3
 800802c:	f7fc fffc 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008034:	e027      	b.n	8008086 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008036:	f107 0308 	add.w	r3, r7, #8
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd f948 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008044:	e01f      	b.n	8008086 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008046:	4b21      	ldr	r3, [pc, #132]	; (80080cc <UART_SetConfig+0x900>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008052:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <UART_SetConfig+0x900>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	08db      	lsrs	r3, r3, #3
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <UART_SetConfig+0x908>)
 800805e:	fa22 f303 	lsr.w	r3, r2, r3
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008064:	e00f      	b.n	8008086 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <UART_SetConfig+0x908>)
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800806a:	e00c      	b.n	8008086 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <UART_SetConfig+0x90c>)
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008070:	e009      	b.n	8008086 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008078:	e005      	b.n	8008086 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 81e6 	beq.w	800845a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <UART_SetConfig+0x910>)
 8008094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008098:	461a      	mov	r2, r3
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	fbb3 f3f2 	udiv	r3, r3, r2
 80080a0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	6a3a      	ldr	r2, [r7, #32]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d305      	bcc.n	80080be <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d910      	bls.n	80080e0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080c4:	e1c9      	b.n	800845a <UART_SetConfig+0xc8e>
 80080c6:	bf00      	nop
 80080c8:	40011c00 	.word	0x40011c00
 80080cc:	58024400 	.word	0x58024400
 80080d0:	58000c00 	.word	0x58000c00
 80080d4:	03d09000 	.word	0x03d09000
 80080d8:	003d0900 	.word	0x003d0900
 80080dc:	0800ce50 	.word	0x0800ce50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	4618      	mov	r0, r3
 80080e4:	f04f 0100 	mov.w	r1, #0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	4ac1      	ldr	r2, [pc, #772]	; (80083f4 <UART_SetConfig+0xc28>)
 80080ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	f7f8 f962 	bl	80003c0 <__aeabi_uldivmod>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4610      	mov	r0, r2
 8008102:	4619      	mov	r1, r3
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	020b      	lsls	r3, r1, #8
 800810e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008112:	0202      	lsls	r2, r0, #8
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	6849      	ldr	r1, [r1, #4]
 8008118:	0849      	lsrs	r1, r1, #1
 800811a:	4608      	mov	r0, r1
 800811c:	f04f 0100 	mov.w	r1, #0
 8008120:	1814      	adds	r4, r2, r0
 8008122:	eb43 0501 	adc.w	r5, r3, r1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	461a      	mov	r2, r3
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	f7f8 f944 	bl	80003c0 <__aeabi_uldivmod>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4613      	mov	r3, r2
 800813e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008146:	d308      	bcc.n	800815a <UART_SetConfig+0x98e>
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814e:	d204      	bcs.n	800815a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008156:	60da      	str	r2, [r3, #12]
 8008158:	e17f      	b.n	800845a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008160:	e17b      	b.n	800845a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816a:	f040 80bd 	bne.w	80082e8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800816e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008172:	2b20      	cmp	r3, #32
 8008174:	dc48      	bgt.n	8008208 <UART_SetConfig+0xa3c>
 8008176:	2b00      	cmp	r3, #0
 8008178:	db7b      	blt.n	8008272 <UART_SetConfig+0xaa6>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d879      	bhi.n	8008272 <UART_SetConfig+0xaa6>
 800817e:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <UART_SetConfig+0x9b8>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	0800820f 	.word	0x0800820f
 8008188:	08008217 	.word	0x08008217
 800818c:	08008273 	.word	0x08008273
 8008190:	08008273 	.word	0x08008273
 8008194:	0800821f 	.word	0x0800821f
 8008198:	08008273 	.word	0x08008273
 800819c:	08008273 	.word	0x08008273
 80081a0:	08008273 	.word	0x08008273
 80081a4:	0800822f 	.word	0x0800822f
 80081a8:	08008273 	.word	0x08008273
 80081ac:	08008273 	.word	0x08008273
 80081b0:	08008273 	.word	0x08008273
 80081b4:	08008273 	.word	0x08008273
 80081b8:	08008273 	.word	0x08008273
 80081bc:	08008273 	.word	0x08008273
 80081c0:	08008273 	.word	0x08008273
 80081c4:	0800823f 	.word	0x0800823f
 80081c8:	08008273 	.word	0x08008273
 80081cc:	08008273 	.word	0x08008273
 80081d0:	08008273 	.word	0x08008273
 80081d4:	08008273 	.word	0x08008273
 80081d8:	08008273 	.word	0x08008273
 80081dc:	08008273 	.word	0x08008273
 80081e0:	08008273 	.word	0x08008273
 80081e4:	08008273 	.word	0x08008273
 80081e8:	08008273 	.word	0x08008273
 80081ec:	08008273 	.word	0x08008273
 80081f0:	08008273 	.word	0x08008273
 80081f4:	08008273 	.word	0x08008273
 80081f8:	08008273 	.word	0x08008273
 80081fc:	08008273 	.word	0x08008273
 8008200:	08008273 	.word	0x08008273
 8008204:	08008265 	.word	0x08008265
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d02e      	beq.n	800826a <UART_SetConfig+0xa9e>
 800820c:	e031      	b.n	8008272 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800820e:	f7fb fbab 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8008212:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008214:	e033      	b.n	800827e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008216:	f7fb fbbd 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 800821a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800821c:	e02f      	b.n	800827e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800821e:	f107 0314 	add.w	r3, r7, #20
 8008222:	4618      	mov	r0, r3
 8008224:	f7fc ff00 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800822c:	e027      	b.n	800827e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822e:	f107 0308 	add.w	r3, r7, #8
 8008232:	4618      	mov	r0, r3
 8008234:	f7fd f84c 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800823c:	e01f      	b.n	800827e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800823e:	4b6e      	ldr	r3, [pc, #440]	; (80083f8 <UART_SetConfig+0xc2c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800824a:	4b6b      	ldr	r3, [pc, #428]	; (80083f8 <UART_SetConfig+0xc2c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	08db      	lsrs	r3, r3, #3
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	4a69      	ldr	r2, [pc, #420]	; (80083fc <UART_SetConfig+0xc30>)
 8008256:	fa22 f303 	lsr.w	r3, r2, r3
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800825c:	e00f      	b.n	800827e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800825e:	4b67      	ldr	r3, [pc, #412]	; (80083fc <UART_SetConfig+0xc30>)
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008262:	e00c      	b.n	800827e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008264:	4b66      	ldr	r3, [pc, #408]	; (8008400 <UART_SetConfig+0xc34>)
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008268:	e009      	b.n	800827e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008270:	e005      	b.n	800827e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800827c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80ea 	beq.w	800845a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	4a5a      	ldr	r2, [pc, #360]	; (80083f4 <UART_SetConfig+0xc28>)
 800828c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008290:	461a      	mov	r2, r3
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	fbb3 f3f2 	udiv	r3, r3, r2
 8008298:	005a      	lsls	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	441a      	add	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	2b0f      	cmp	r3, #15
 80082b0:	d916      	bls.n	80082e0 <UART_SetConfig+0xb14>
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b8:	d212      	bcs.n	80082e0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f023 030f 	bic.w	r3, r3, #15
 80082c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082d2:	4313      	orrs	r3, r2
 80082d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e0bc      	b.n	800845a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082e6:	e0b8      	b.n	800845a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	dc4b      	bgt.n	8008388 <UART_SetConfig+0xbbc>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f2c0 8087 	blt.w	8008404 <UART_SetConfig+0xc38>
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	f200 8084 	bhi.w	8008404 <UART_SetConfig+0xc38>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <UART_SetConfig+0xb38>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	0800838f 	.word	0x0800838f
 8008308:	08008397 	.word	0x08008397
 800830c:	08008405 	.word	0x08008405
 8008310:	08008405 	.word	0x08008405
 8008314:	0800839f 	.word	0x0800839f
 8008318:	08008405 	.word	0x08008405
 800831c:	08008405 	.word	0x08008405
 8008320:	08008405 	.word	0x08008405
 8008324:	080083af 	.word	0x080083af
 8008328:	08008405 	.word	0x08008405
 800832c:	08008405 	.word	0x08008405
 8008330:	08008405 	.word	0x08008405
 8008334:	08008405 	.word	0x08008405
 8008338:	08008405 	.word	0x08008405
 800833c:	08008405 	.word	0x08008405
 8008340:	08008405 	.word	0x08008405
 8008344:	080083bf 	.word	0x080083bf
 8008348:	08008405 	.word	0x08008405
 800834c:	08008405 	.word	0x08008405
 8008350:	08008405 	.word	0x08008405
 8008354:	08008405 	.word	0x08008405
 8008358:	08008405 	.word	0x08008405
 800835c:	08008405 	.word	0x08008405
 8008360:	08008405 	.word	0x08008405
 8008364:	08008405 	.word	0x08008405
 8008368:	08008405 	.word	0x08008405
 800836c:	08008405 	.word	0x08008405
 8008370:	08008405 	.word	0x08008405
 8008374:	08008405 	.word	0x08008405
 8008378:	08008405 	.word	0x08008405
 800837c:	08008405 	.word	0x08008405
 8008380:	08008405 	.word	0x08008405
 8008384:	080083e5 	.word	0x080083e5
 8008388:	2b40      	cmp	r3, #64	; 0x40
 800838a:	d02e      	beq.n	80083ea <UART_SetConfig+0xc1e>
 800838c:	e03a      	b.n	8008404 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800838e:	f7fb faeb 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8008392:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008394:	e03c      	b.n	8008410 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008396:	f7fb fafd 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 800839a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800839c:	e038      	b.n	8008410 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fc fe40 	bl	8005028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083ac:	e030      	b.n	8008410 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fc ff8c 	bl	80052d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083bc:	e028      	b.n	8008410 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <UART_SetConfig+0xc2c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083ca:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <UART_SetConfig+0xc2c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	08db      	lsrs	r3, r3, #3
 80083d0:	f003 0303 	and.w	r3, r3, #3
 80083d4:	4a09      	ldr	r2, [pc, #36]	; (80083fc <UART_SetConfig+0xc30>)
 80083d6:	fa22 f303 	lsr.w	r3, r2, r3
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083dc:	e018      	b.n	8008410 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <UART_SetConfig+0xc30>)
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083e2:	e015      	b.n	8008410 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <UART_SetConfig+0xc34>)
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083e8:	e012      	b.n	8008410 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083f0:	e00e      	b.n	8008410 <UART_SetConfig+0xc44>
 80083f2:	bf00      	nop
 80083f4:	0800ce50 	.word	0x0800ce50
 80083f8:	58024400 	.word	0x58024400
 80083fc:	03d09000 	.word	0x03d09000
 8008400:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800840e:	bf00      	nop
    }

    if (pclk != 0U)
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d021      	beq.n	800845a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	4a1a      	ldr	r2, [pc, #104]	; (8008484 <UART_SetConfig+0xcb8>)
 800841c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008420:	461a      	mov	r2, r3
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	fbb3 f2f2 	udiv	r2, r3, r2
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	441a      	add	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	fbb2 f3f3 	udiv	r3, r2, r3
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	2b0f      	cmp	r3, #15
 800843e:	d909      	bls.n	8008454 <UART_SetConfig+0xc88>
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008446:	d205      	bcs.n	8008454 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	b29a      	uxth	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	60da      	str	r2, [r3, #12]
 8008452:	e002      	b.n	800845a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008476:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800847a:	4618      	mov	r0, r3
 800847c:	3738      	adds	r7, #56	; 0x38
 800847e:	46bd      	mov	sp, r7
 8008480:	bdb0      	pop	{r4, r5, r7, pc}
 8008482:	bf00      	nop
 8008484:	0800ce50 	.word	0x0800ce50

08008488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01a      	beq.n	800859e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008586:	d10a      	bne.n	800859e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	605a      	str	r2, [r3, #4]
  }
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085dc:	f7f9 f894 	bl	8001708 <HAL_GetTick>
 80085e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d10e      	bne.n	800860e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f82f 	bl	8008662 <UART_WaitOnFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e025      	b.n	800865a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b04      	cmp	r3, #4
 800861a:	d10e      	bne.n	800863a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800861c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f819 	bl	8008662 <UART_WaitOnFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e00f      	b.n	800865a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b09c      	sub	sp, #112	; 0x70
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	4613      	mov	r3, r2
 8008670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008672:	e0a9      	b.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867a:	f000 80a5 	beq.w	80087c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800867e:	f7f9 f843 	bl	8001708 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800868a:	429a      	cmp	r2, r3
 800868c:	d302      	bcc.n	8008694 <UART_WaitOnFlagUntilTimeout+0x32>
 800868e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008690:	2b00      	cmp	r3, #0
 8008692:	d140      	bne.n	8008716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086a8:	667b      	str	r3, [r7, #100]	; 0x64
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e6      	bne.n	8008694 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	663b      	str	r3, [r7, #96]	; 0x60
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80086e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e5      	bne.n	80086c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e069      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d051      	beq.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008732:	d149      	bne.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800873c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
 800875e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e6      	bne.n	800873e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	613b      	str	r3, [r7, #16]
   return(result);
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f023 0301 	bic.w	r3, r3, #1
 8008786:	66bb      	str	r3, [r7, #104]	; 0x68
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3308      	adds	r3, #8
 800878e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008790:	623a      	str	r2, [r7, #32]
 8008792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	69f9      	ldr	r1, [r7, #28]
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	61bb      	str	r3, [r7, #24]
   return(result);
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e5      	bne.n	8008770 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e010      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69da      	ldr	r2, [r3, #28]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f43f af46 	beq.w	8008674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3770      	adds	r7, #112	; 0x70
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_UARTEx_DisableFifoMode+0x16>
 8008804:	2302      	movs	r3, #2
 8008806:	e027      	b.n	8008858 <HAL_UARTEx_DisableFifoMode+0x66>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2224      	movs	r2, #36	; 0x24
 8008814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008878:	2302      	movs	r3, #2
 800887a:	e02d      	b.n	80088d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	; 0x24
 8008888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f84f 	bl	800895c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e02d      	b.n	8008954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	; 0x24
 8008904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f811 	bl	800895c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008968:	2b00      	cmp	r3, #0
 800896a:	d108      	bne.n	800897e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800897c:	e031      	b.n	80089e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800897e:	2310      	movs	r3, #16
 8008980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008982:	2310      	movs	r3, #16
 8008984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	0e5b      	lsrs	r3, r3, #25
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	0f5b      	lsrs	r3, r3, #29
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	7b3a      	ldrb	r2, [r7, #12]
 80089aa:	4911      	ldr	r1, [pc, #68]	; (80089f0 <UARTEx_SetNbDataToProcess+0x94>)
 80089ac:	5c8a      	ldrb	r2, [r1, r2]
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089b2:	7b3a      	ldrb	r2, [r7, #12]
 80089b4:	490f      	ldr	r1, [pc, #60]	; (80089f4 <UARTEx_SetNbDataToProcess+0x98>)
 80089b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80089bc:	b29a      	uxth	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	7b7a      	ldrb	r2, [r7, #13]
 80089c8:	4909      	ldr	r1, [pc, #36]	; (80089f0 <UARTEx_SetNbDataToProcess+0x94>)
 80089ca:	5c8a      	ldrb	r2, [r1, r2]
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089d0:	7b7a      	ldrb	r2, [r7, #13]
 80089d2:	4908      	ldr	r1, [pc, #32]	; (80089f4 <UARTEx_SetNbDataToProcess+0x98>)
 80089d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089e2:	bf00      	nop
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	0800ce68 	.word	0x0800ce68
 80089f4:	0800ce70 	.word	0x0800ce70

080089f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089f8:	b084      	sub	sp, #16
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	f107 001c 	add.w	r0, r7, #28
 8008a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008a0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008a10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008a12:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008a16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008a1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008a1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <SDMMC_Init+0x50>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	b004      	add	sp, #16
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	ffc02c00 	.word	0xffc02c00

08008a4c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f043 0203 	orr.w	r2, r3, #3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0303 	and.w	r3, r3, #3
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ae6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008aec:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008af2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <SDMMC_SendCommand+0x50>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	fffee0c0 	.word	0xfffee0c0

08008b1c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	b2db      	uxtb	r3, r3
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3314      	adds	r3, #20
 8008b44:	461a      	mov	r2, r3
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	4413      	add	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b82:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008b88:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008b8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0

}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff73 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be6:	2110      	movs	r1, #16
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa5f 	bl	80090ac <SDMMC_GetCmdResp1>
 8008bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008c08:	2311      	movs	r3, #17
 8008c0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1c:	f107 0308 	add.w	r3, r7, #8
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff ff50 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2c:	2111      	movs	r1, #17
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa3c 	bl	80090ac <SDMMC_GetCmdResp1>
 8008c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c36:	69fb      	ldr	r3, [r7, #28]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3720      	adds	r7, #32
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c4e:	2312      	movs	r3, #18
 8008c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff ff2d 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c72:	2112      	movs	r1, #18
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa19 	bl	80090ac <SDMMC_GetCmdResp1>
 8008c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b088      	sub	sp, #32
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c94:	2318      	movs	r3, #24
 8008c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ca8:	f107 0308 	add.w	r3, r7, #8
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff ff0a 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb8:	2118      	movs	r1, #24
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f9f6 	bl	80090ac <SDMMC_GetCmdResp1>
 8008cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3720      	adds	r7, #32
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008cda:	2319      	movs	r3, #25
 8008cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fee7 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cfe:	2119      	movs	r1, #25
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f9d3 	bl	80090ac <SDMMC_GetCmdResp1>
 8008d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d08:	69fb      	ldr	r3, [r7, #28]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008d20:	230c      	movs	r3, #12
 8008d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d32:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d4c:	f107 0308 	add.w	r3, r7, #8
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff feb8 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008d58:	4a0b      	ldr	r2, [pc, #44]	; (8008d88 <SDMMC_CmdStopTransfer+0x74>)
 8008d5a:	210c      	movs	r1, #12
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f9a5 	bl	80090ac <SDMMC_GetCmdResp1>
 8008d62:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d76:	d101      	bne.n	8008d7c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	05f5e100 	.word	0x05f5e100

08008d8c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d9a:	2307      	movs	r3, #7
 8008d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fe87 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbe:	2107      	movs	r1, #7
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f973 	bl	80090ac <SDMMC_GetCmdResp1>
 8008dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fe66 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fb97 	bl	8009530 <SDMMC_GetCmdError>
 8008e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e04:	69fb      	ldr	r3, [r7, #28]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b088      	sub	sp, #32
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008e16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008e1c:	2308      	movs	r3, #8
 8008e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e26:	2300      	movs	r3, #0
 8008e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e30:	f107 0308 	add.w	r3, r7, #8
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff fe46 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fb29 	bl	8009494 <SDMMC_GetCmdResp7>
 8008e42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e44:	69fb      	ldr	r3, [r7, #28]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3720      	adds	r7, #32
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b088      	sub	sp, #32
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e5c:	2337      	movs	r3, #55	; 0x37
 8008e5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e70:	f107 0308 	add.w	r3, r7, #8
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fe26 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e80:	2137      	movs	r1, #55	; 0x37
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f912 	bl	80090ac <SDMMC_GetCmdResp1>
 8008e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ea2:	2329      	movs	r3, #41	; 0x29
 8008ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eb6:	f107 0308 	add.w	r3, r7, #8
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff fe03 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa2e 	bl	8009324 <SDMMC_GetCmdResp3>
 8008ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eca:	69fb      	ldr	r3, [r7, #28]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ee2:	2306      	movs	r3, #6
 8008ee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fde3 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	2106      	movs	r1, #6
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f8cf 	bl	80090ac <SDMMC_GetCmdResp1>
 8008f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f10:	69fb      	ldr	r3, [r7, #28]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b088      	sub	sp, #32
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008f26:	2333      	movs	r3, #51	; 0x33
 8008f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f30:	2300      	movs	r3, #0
 8008f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f3a:	f107 0308 	add.w	r3, r7, #8
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fdc1 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f4a:	2133      	movs	r1, #51	; 0x33
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f8ad 	bl	80090ac <SDMMC_GetCmdResp1>
 8008f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f54:	69fb      	ldr	r3, [r7, #28]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3720      	adds	r7, #32
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b088      	sub	sp, #32
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f74:	2300      	movs	r3, #0
 8008f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f7e:	f107 0308 	add.w	r3, r7, #8
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fd9f 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f980 	bl	8009290 <SDMMC_GetCmdResp2>
 8008f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f92:	69fb      	ldr	r3, [r7, #28]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008faa:	2309      	movs	r3, #9
 8008fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff fd7f 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f960 	bl	8009290 <SDMMC_GetCmdResp2>
 8008fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008fea:	2303      	movs	r3, #3
 8008fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ffe:	f107 0308 	add.w	r3, r7, #8
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff fd5f 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	2103      	movs	r1, #3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9c8 	bl	80093a4 <SDMMC_GetCmdResp6>
 8009014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009016:	69fb      	ldr	r3, [r7, #28]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3720      	adds	r7, #32
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800902e:	230d      	movs	r3, #13
 8009030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800903c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009042:	f107 0308 	add.w	r3, r7, #8
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff fd3d 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800904e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009052:	210d      	movs	r1, #13
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f829 	bl	80090ac <SDMMC_GetCmdResp1>
 800905a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800905c:	69fb      	ldr	r3, [r7, #28]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3720      	adds	r7, #32
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b088      	sub	sp, #32
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009072:	230d      	movs	r3, #13
 8009074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800907a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009086:	f107 0308 	add.w	r3, r7, #8
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff fd1b 	bl	8008ac8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009092:	f241 3288 	movw	r2, #5000	; 0x1388
 8009096:	210d      	movs	r1, #13
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f807 	bl	80090ac <SDMMC_GetCmdResp1>
 800909e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a0:	69fb      	ldr	r3, [r7, #28]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3720      	adds	r7, #32
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	460b      	mov	r3, r1
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80090ba:	4b70      	ldr	r3, [pc, #448]	; (800927c <SDMMC_GetCmdResp1+0x1d0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a70      	ldr	r2, [pc, #448]	; (8009280 <SDMMC_GetCmdResp1+0x1d4>)
 80090c0:	fba2 2303 	umull	r2, r3, r2, r3
 80090c4:	0a5a      	lsrs	r2, r3, #9
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	fb02 f303 	mul.w	r3, r2, r3
 80090cc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	61fa      	str	r2, [r7, #28]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090dc:	e0c9      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	4b67      	ldr	r3, [pc, #412]	; (8009284 <SDMMC_GetCmdResp1+0x1d8>)
 80090e8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0ef      	beq.n	80090ce <SDMMC_GetCmdResp1+0x22>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1ea      	bne.n	80090ce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2204      	movs	r2, #4
 8009108:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800910a:	2304      	movs	r3, #4
 800910c:	e0b1      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d004      	beq.n	8009124 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009120:	2301      	movs	r3, #1
 8009122:	e0a6      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4a58      	ldr	r2, [pc, #352]	; (8009288 <SDMMC_GetCmdResp1+0x1dc>)
 8009128:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fcf6 	bl	8008b1c <SDMMC_GetCommandResponse>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	4293      	cmp	r3, r2
 8009138:	d001      	beq.n	800913e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800913a:	2301      	movs	r3, #1
 800913c:	e099      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f7ff fcf8 	bl	8008b36 <SDMMC_GetResponse>
 8009146:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	4b50      	ldr	r3, [pc, #320]	; (800928c <SDMMC_GetCmdResp1+0x1e0>)
 800914c:	4013      	ands	r3, r2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009152:	2300      	movs	r3, #0
 8009154:	e08d      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	da02      	bge.n	8009162 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800915c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009160:	e087      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800916c:	2340      	movs	r3, #64	; 0x40
 800916e:	e080      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	e079      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800918c:	e071      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800919c:	e069      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80091a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ac:	e061      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091bc:	e059      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091cc:	e051      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091dc:	e049      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091ec:	e041      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091fc:	e039      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800920c:	e031      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800921c:	e029      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009228:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800922c:	e021      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800923c:	e019      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009248:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800924c:	e011      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800925c:	e009      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009268:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800926c:	e001      	b.n	8009272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800926e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	2400002c 	.word	0x2400002c
 8009280:	10624dd3 	.word	0x10624dd3
 8009284:	00200045 	.word	0x00200045
 8009288:	002000c5 	.word	0x002000c5
 800928c:	fdffe008 	.word	0xfdffe008

08009290 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009298:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <SDMMC_GetCmdResp2+0x88>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1f      	ldr	r2, [pc, #124]	; (800931c <SDMMC_GetCmdResp2+0x8c>)
 800929e:	fba2 2303 	umull	r2, r3, r2, r3
 80092a2:	0a5b      	lsrs	r3, r3, #9
 80092a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1e5a      	subs	r2, r3, #1
 80092b2:	60fa      	str	r2, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d102      	bne.n	80092be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092bc:	e026      	b.n	800930c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0ef      	beq.n	80092ae <SDMMC_GetCmdResp2+0x1e>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1ea      	bne.n	80092ae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2204      	movs	r2, #4
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092ea:	2304      	movs	r3, #4
 80092ec:	e00e      	b.n	800930c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d004      	beq.n	8009304 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009300:	2301      	movs	r3, #1
 8009302:	e003      	b.n	800930c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a06      	ldr	r2, [pc, #24]	; (8009320 <SDMMC_GetCmdResp2+0x90>)
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	2400002c 	.word	0x2400002c
 800931c:	10624dd3 	.word	0x10624dd3
 8009320:	002000c5 	.word	0x002000c5

08009324 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800932c:	4b1a      	ldr	r3, [pc, #104]	; (8009398 <SDMMC_GetCmdResp3+0x74>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1a      	ldr	r2, [pc, #104]	; (800939c <SDMMC_GetCmdResp3+0x78>)
 8009332:	fba2 2303 	umull	r2, r3, r2, r3
 8009336:	0a5b      	lsrs	r3, r3, #9
 8009338:	f241 3288 	movw	r2, #5000	; 0x1388
 800933c:	fb02 f303 	mul.w	r3, r2, r3
 8009340:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	1e5a      	subs	r2, r3, #1
 8009346:	60fa      	str	r2, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800934c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009350:	e01b      	b.n	800938a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009356:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0ef      	beq.n	8009342 <SDMMC_GetCmdResp3+0x1e>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1ea      	bne.n	8009342 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2204      	movs	r2, #4
 800937c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800937e:	2304      	movs	r3, #4
 8009380:	e003      	b.n	800938a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a06      	ldr	r2, [pc, #24]	; (80093a0 <SDMMC_GetCmdResp3+0x7c>)
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	2400002c 	.word	0x2400002c
 800939c:	10624dd3 	.word	0x10624dd3
 80093a0:	002000c5 	.word	0x002000c5

080093a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	460b      	mov	r3, r1
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093b2:	4b35      	ldr	r3, [pc, #212]	; (8009488 <SDMMC_GetCmdResp6+0xe4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a35      	ldr	r2, [pc, #212]	; (800948c <SDMMC_GetCmdResp6+0xe8>)
 80093b8:	fba2 2303 	umull	r2, r3, r2, r3
 80093bc:	0a5b      	lsrs	r3, r3, #9
 80093be:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	1e5a      	subs	r2, r3, #1
 80093cc:	61fa      	str	r2, [r7, #28]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093d6:	e052      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d0ef      	beq.n	80093c8 <SDMMC_GetCmdResp6+0x24>
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1ea      	bne.n	80093c8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f6:	f003 0304 	and.w	r3, r3, #4
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d004      	beq.n	8009408 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2204      	movs	r2, #4
 8009402:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009404:	2304      	movs	r3, #4
 8009406:	e03a      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2201      	movs	r2, #1
 8009418:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800941a:	2301      	movs	r3, #1
 800941c:	e02f      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff fb7c 	bl	8008b1c <SDMMC_GetCommandResponse>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	4293      	cmp	r3, r2
 800942c:	d001      	beq.n	8009432 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800942e:	2301      	movs	r3, #1
 8009430:	e025      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4a16      	ldr	r2, [pc, #88]	; (8009490 <SDMMC_GetCmdResp6+0xec>)
 8009436:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009438:	2100      	movs	r1, #0
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fb7b 	bl	8008b36 <SDMMC_GetResponse>
 8009440:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d106      	bne.n	800945a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	b29a      	uxth	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009456:	2300      	movs	r3, #0
 8009458:	e011      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009468:	e009      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009478:	e001      	b.n	800947e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800947a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	2400002c 	.word	0x2400002c
 800948c:	10624dd3 	.word	0x10624dd3
 8009490:	002000c5 	.word	0x002000c5

08009494 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800949c:	4b22      	ldr	r3, [pc, #136]	; (8009528 <SDMMC_GetCmdResp7+0x94>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a22      	ldr	r2, [pc, #136]	; (800952c <SDMMC_GetCmdResp7+0x98>)
 80094a2:	fba2 2303 	umull	r2, r3, r2, r3
 80094a6:	0a5b      	lsrs	r3, r3, #9
 80094a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	1e5a      	subs	r2, r3, #1
 80094b6:	60fa      	str	r2, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094c0:	e02c      	b.n	800951c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0ef      	beq.n	80094b2 <SDMMC_GetCmdResp7+0x1e>
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1ea      	bne.n	80094b2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2204      	movs	r2, #4
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094ee:	2304      	movs	r3, #4
 80094f0:	e014      	b.n	800951c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009504:	2301      	movs	r3, #1
 8009506:	e009      	b.n	800951c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2240      	movs	r2, #64	; 0x40
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800951a:	2300      	movs	r3, #0

}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	2400002c 	.word	0x2400002c
 800952c:	10624dd3 	.word	0x10624dd3

08009530 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009538:	4b11      	ldr	r3, [pc, #68]	; (8009580 <SDMMC_GetCmdError+0x50>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a11      	ldr	r2, [pc, #68]	; (8009584 <SDMMC_GetCmdError+0x54>)
 800953e:	fba2 2303 	umull	r2, r3, r2, r3
 8009542:	0a5b      	lsrs	r3, r3, #9
 8009544:	f241 3288 	movw	r2, #5000	; 0x1388
 8009548:	fb02 f303 	mul.w	r3, r2, r3
 800954c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1e5a      	subs	r2, r3, #1
 8009552:	60fa      	str	r2, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800955c:	e009      	b.n	8009572 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0f1      	beq.n	800954e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a06      	ldr	r2, [pc, #24]	; (8009588 <SDMMC_GetCmdError+0x58>)
 800956e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	2400002c 	.word	0x2400002c
 8009584:	10624dd3 	.word	0x10624dd3
 8009588:	002000c5 	.word	0x002000c5

0800958c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009590:	4904      	ldr	r1, [pc, #16]	; (80095a4 <MX_FATFS_Init+0x18>)
 8009592:	4805      	ldr	r0, [pc, #20]	; (80095a8 <MX_FATFS_Init+0x1c>)
 8009594:	f002 ff9a 	bl	800c4cc <FATFS_LinkDriver>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	4b03      	ldr	r3, [pc, #12]	; (80095ac <MX_FATFS_Init+0x20>)
 800959e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095a0:	bf00      	nop
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	2403ee0c 	.word	0x2403ee0c
 80095a8:	0800ce78 	.word	0x0800ce78
 80095ac:	2403ee08 	.word	0x2403ee08

080095b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80095ca:	f000 f89b 	bl	8009704 <BSP_SD_IsDetected>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d001      	beq.n	80095d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80095d4:	2302      	movs	r3, #2
 80095d6:	e012      	b.n	80095fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80095d8:	480b      	ldr	r0, [pc, #44]	; (8009608 <BSP_SD_Init+0x48>)
 80095da:	f7fc fa83 	bl	8005ae4 <HAL_SD_Init>
 80095de:	4603      	mov	r3, r0
 80095e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80095e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80095ec:	4806      	ldr	r0, [pc, #24]	; (8009608 <BSP_SD_Init+0x48>)
 80095ee:	f7fd faf9 	bl	8006be4 <HAL_SD_ConfigWideBusOperation>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80095fc:	79fb      	ldrb	r3, [r7, #7]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	2403ea58 	.word	0x2403ea58

0800960c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	4806      	ldr	r0, [pc, #24]	; (8009644 <BSP_SD_ReadBlocks+0x38>)
 800962a:	f7fc fb75 	bl	8005d18 <HAL_SD_ReadBlocks>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009638:	7dfb      	ldrb	r3, [r7, #23]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	2403ea58 	.word	0x2403ea58

08009648 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	4806      	ldr	r0, [pc, #24]	; (8009680 <BSP_SD_WriteBlocks+0x38>)
 8009666:	f7fc fce1 	bl	800602c <HAL_SD_WriteBlocks>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	2403ea58 	.word	0x2403ea58

08009684 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009688:	4805      	ldr	r0, [pc, #20]	; (80096a0 <BSP_SD_GetCardState+0x1c>)
 800968a:	f7fd fbbd 	bl	8006e08 <HAL_SD_GetCardState>
 800968e:	4603      	mov	r3, r0
 8009690:	2b04      	cmp	r3, #4
 8009692:	bf14      	ite	ne
 8009694:	2301      	movne	r3, #1
 8009696:	2300      	moveq	r3, #0
 8009698:	b2db      	uxtb	r3, r3
}
 800969a:	4618      	mov	r0, r3
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	2403ea58 	.word	0x2403ea58

080096a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	4803      	ldr	r0, [pc, #12]	; (80096bc <BSP_SD_GetCardInfo+0x18>)
 80096b0:	f7fd fa6c 	bl	8006b8c <HAL_SD_GetCardInfo>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	2403ea58 	.word	0x2403ea58

080096c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80096c8:	f000 f80e 	bl	80096e8 <BSP_SD_WriteCpltCallback>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80096dc:	f000 f80b 	bl	80096f6 <BSP_SD_ReadCpltCallback>
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0

}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80096f6:	b480      	push	{r7}
 80096f8:	af00      	add	r7, sp, #0

}
 80096fa:	bf00      	nop
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800970a:	2301      	movs	r3, #1
 800970c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800970e:	f000 f80b 	bl	8009728 <BSP_PlatformIsDetected>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009718:	2300      	movs	r3, #0
 800971a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	b2db      	uxtb	r3, r3
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800972e:	2301      	movs	r3, #1
 8009730:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009736:	4806      	ldr	r0, [pc, #24]	; (8009750 <BSP_PlatformIsDetected+0x28>)
 8009738:	f7f8 fef8 	bl	800252c <HAL_GPIO_ReadPin>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009742:	2300      	movs	r3, #0
 8009744:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009746:	79fb      	ldrb	r3, [r7, #7]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	58020800 	.word	0x58020800

08009754 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800975e:	4b0b      	ldr	r3, [pc, #44]	; (800978c <SD_CheckStatus+0x38>)
 8009760:	2201      	movs	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009764:	f7ff ff8e 	bl	8009684 <BSP_SD_GetCardState>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d107      	bne.n	800977e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <SD_CheckStatus+0x38>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b04      	ldr	r3, [pc, #16]	; (800978c <SD_CheckStatus+0x38>)
 800977c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <SD_CheckStatus+0x38>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	24000039 	.word	0x24000039

08009790 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <SD_initialize+0x38>)
 800979c:	2201      	movs	r2, #1
 800979e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097a0:	f7ff ff0e 	bl	80095c0 <BSP_SD_Init>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d107      	bne.n	80097ba <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff ffd1 	bl	8009754 <SD_CheckStatus>
 80097b2:	4603      	mov	r3, r0
 80097b4:	461a      	mov	r2, r3
 80097b6:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <SD_initialize+0x38>)
 80097b8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097ba:	4b03      	ldr	r3, [pc, #12]	; (80097c8 <SD_initialize+0x38>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	24000039 	.word	0x24000039

080097cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff ffbb 	bl	8009754 <SD_CheckStatus>
 80097de:	4603      	mov	r3, r0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	68b8      	ldr	r0, [r7, #8]
 8009806:	f7ff ff01 	bl	800960c <BSP_SD_ReadBlocks>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d107      	bne.n	8009820 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009810:	bf00      	nop
 8009812:	f7ff ff37 	bl	8009684 <BSP_SD_GetCardState>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1fa      	bne.n	8009812 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af00      	add	r7, sp, #0
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f7ff fefe 	bl	8009648 <BSP_SD_WriteBlocks>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d107      	bne.n	8009862 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009852:	bf00      	nop
 8009854:	f7ff ff16 	bl	8009684 <BSP_SD_GetCardState>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1fa      	bne.n	8009854 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08c      	sub	sp, #48	; 0x30
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	603a      	str	r2, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
 8009878:	460b      	mov	r3, r1
 800987a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009882:	4b25      	ldr	r3, [pc, #148]	; (8009918 <SD_ioctl+0xac>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <SD_ioctl+0x28>
 8009890:	2303      	movs	r3, #3
 8009892:	e03c      	b.n	800990e <SD_ioctl+0xa2>

  switch (cmd)
 8009894:	79bb      	ldrb	r3, [r7, #6]
 8009896:	2b03      	cmp	r3, #3
 8009898:	d834      	bhi.n	8009904 <SD_ioctl+0x98>
 800989a:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <SD_ioctl+0x34>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	080098b1 	.word	0x080098b1
 80098a4:	080098b9 	.word	0x080098b9
 80098a8:	080098d1 	.word	0x080098d1
 80098ac:	080098eb 	.word	0x080098eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098b6:	e028      	b.n	800990a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff fef1 	bl	80096a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098c2:	6a3a      	ldr	r2, [r7, #32]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ce:	e01c      	b.n	800990a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098d0:	f107 0308 	add.w	r3, r7, #8
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fee5 	bl	80096a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	b29a      	uxth	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098e8:	e00f      	b.n	800990a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ea:	f107 0308 	add.w	r3, r7, #8
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fed8 	bl	80096a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	0a5a      	lsrs	r2, r3, #9
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009902:	e002      	b.n	800990a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009904:	2304      	movs	r3, #4
 8009906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800990a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800990e:	4618      	mov	r0, r3
 8009910:	3730      	adds	r7, #48	; 0x30
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	24000039 	.word	0x24000039

0800991c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	4a08      	ldr	r2, [pc, #32]	; (800994c <disk_status+0x30>)
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	79fa      	ldrb	r2, [r7, #7]
 8009934:	4905      	ldr	r1, [pc, #20]	; (800994c <disk_status+0x30>)
 8009936:	440a      	add	r2, r1
 8009938:	7a12      	ldrb	r2, [r2, #8]
 800993a:	4610      	mov	r0, r2
 800993c:	4798      	blx	r3
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	2403e9b0 	.word	0x2403e9b0

08009950 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	4a0d      	ldr	r2, [pc, #52]	; (8009998 <disk_initialize+0x48>)
 8009962:	5cd3      	ldrb	r3, [r2, r3]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d111      	bne.n	800998c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	4a0b      	ldr	r2, [pc, #44]	; (8009998 <disk_initialize+0x48>)
 800996c:	2101      	movs	r1, #1
 800996e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	4a09      	ldr	r2, [pc, #36]	; (8009998 <disk_initialize+0x48>)
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	79fa      	ldrb	r2, [r7, #7]
 800997e:	4906      	ldr	r1, [pc, #24]	; (8009998 <disk_initialize+0x48>)
 8009980:	440a      	add	r2, r1
 8009982:	7a12      	ldrb	r2, [r2, #8]
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	2403e9b0 	.word	0x2403e9b0

0800999c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4a0a      	ldr	r2, [pc, #40]	; (80099d8 <disk_read+0x3c>)
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	689c      	ldr	r4, [r3, #8]
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	4a07      	ldr	r2, [pc, #28]	; (80099d8 <disk_read+0x3c>)
 80099bc:	4413      	add	r3, r2
 80099be:	7a18      	ldrb	r0, [r3, #8]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	47a0      	blx	r4
 80099c8:	4603      	mov	r3, r0
 80099ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd90      	pop	{r4, r7, pc}
 80099d6:	bf00      	nop
 80099d8:	2403e9b0 	.word	0x2403e9b0

080099dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	607a      	str	r2, [r7, #4]
 80099e6:	603b      	str	r3, [r7, #0]
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <disk_write+0x3c>)
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	68dc      	ldr	r4, [r3, #12]
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	4a07      	ldr	r2, [pc, #28]	; (8009a18 <disk_write+0x3c>)
 80099fc:	4413      	add	r3, r2
 80099fe:	7a18      	ldrb	r0, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	47a0      	blx	r4
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd90      	pop	{r4, r7, pc}
 8009a16:	bf00      	nop
 8009a18:	2403e9b0 	.word	0x2403e9b0

08009a1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	603a      	str	r2, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	4a09      	ldr	r2, [pc, #36]	; (8009a54 <disk_ioctl+0x38>)
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	79fa      	ldrb	r2, [r7, #7]
 8009a3a:	4906      	ldr	r1, [pc, #24]	; (8009a54 <disk_ioctl+0x38>)
 8009a3c:	440a      	add	r2, r1
 8009a3e:	7a10      	ldrb	r0, [r2, #8]
 8009a40:	79b9      	ldrb	r1, [r7, #6]
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4798      	blx	r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	2403e9b0 	.word	0x2403e9b0

08009a58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3301      	adds	r3, #1
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a68:	89fb      	ldrh	r3, [r7, #14]
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	b21a      	sxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	b21b      	sxth	r3, r3
 8009a74:	4313      	orrs	r3, r2
 8009a76:	b21b      	sxth	r3, r3
 8009a78:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a7a:	89fb      	ldrh	r3, [r7, #14]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3303      	adds	r3, #3
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	3202      	adds	r2, #2
 8009aa0:	7812      	ldrb	r2, [r2, #0]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	3201      	adds	r2, #1
 8009aae:	7812      	ldrb	r2, [r2, #0]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7812      	ldrb	r2, [r2, #0]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	887a      	ldrh	r2, [r7, #2]
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	887b      	ldrh	r3, [r7, #2]
 8009ae8:	0a1b      	lsrs	r3, r3, #8
 8009aea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	607a      	str	r2, [r7, #4]
 8009af2:	887a      	ldrh	r2, [r7, #2]
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	0a1b      	lsrs	r3, r3, #8
 8009b30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	0a1b      	lsrs	r3, r3, #8
 8009b42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	b2d2      	uxtb	r2, r2
 8009b4e:	701a      	strb	r2, [r3, #0]
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00d      	beq.n	8009b92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	1c53      	adds	r3, r2, #1
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	1c59      	adds	r1, r3, #1
 8009b80:	6179      	str	r1, [r7, #20]
 8009b82:	7812      	ldrb	r2, [r2, #0]
 8009b84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f1      	bne.n	8009b76 <mem_cpy+0x1a>
	}
}
 8009b92:	bf00      	nop
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b9e:	b480      	push	{r7}
 8009ba0:	b087      	sub	sp, #28
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	617a      	str	r2, [r7, #20]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f3      	bne.n	8009bae <mem_set+0x10>
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	371c      	adds	r7, #28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bd4:	b480      	push	{r7}
 8009bd6:	b089      	sub	sp, #36	; 0x24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	61fa      	str	r2, [r7, #28]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	61ba      	str	r2, [r7, #24]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	1acb      	subs	r3, r1, r3
 8009c00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <mem_cmp+0x40>
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0eb      	beq.n	8009bec <mem_cmp+0x18>

	return r;
 8009c14:	697b      	ldr	r3, [r7, #20]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3724      	adds	r7, #36	; 0x24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c2c:	e002      	b.n	8009c34 <chk_chr+0x12>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3301      	adds	r3, #1
 8009c32:	607b      	str	r3, [r7, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d005      	beq.n	8009c48 <chk_chr+0x26>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d1f2      	bne.n	8009c2e <chk_chr+0xc>
	return *str;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	e029      	b.n	8009cc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c6c:	4a27      	ldr	r2, [pc, #156]	; (8009d0c <chk_lock+0xb4>)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	011b      	lsls	r3, r3, #4
 8009c72:	4413      	add	r3, r2
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01d      	beq.n	8009cb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c7a:	4a24      	ldr	r2, [pc, #144]	; (8009d0c <chk_lock+0xb4>)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	4413      	add	r3, r2
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d116      	bne.n	8009cba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c8c:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <chk_lock+0xb4>)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	4413      	add	r3, r2
 8009c94:	3304      	adds	r3, #4
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d10c      	bne.n	8009cba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ca0:	4a1a      	ldr	r2, [pc, #104]	; (8009d0c <chk_lock+0xb4>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	011b      	lsls	r3, r3, #4
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3308      	adds	r3, #8
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d102      	bne.n	8009cba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cb4:	e007      	b.n	8009cc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d9d2      	bls.n	8009c6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d109      	bne.n	8009ce0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <chk_lock+0x80>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d101      	bne.n	8009cdc <chk_lock+0x84>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e010      	b.n	8009cfe <chk_lock+0xa6>
 8009cdc:	2312      	movs	r3, #18
 8009cde:	e00e      	b.n	8009cfe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d108      	bne.n	8009cf8 <chk_lock+0xa0>
 8009ce6:	4a09      	ldr	r2, [pc, #36]	; (8009d0c <chk_lock+0xb4>)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	4413      	add	r3, r2
 8009cee:	330c      	adds	r3, #12
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf6:	d101      	bne.n	8009cfc <chk_lock+0xa4>
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	e000      	b.n	8009cfe <chk_lock+0xa6>
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	2403e990 	.word	0x2403e990

08009d10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d16:	2300      	movs	r3, #0
 8009d18:	607b      	str	r3, [r7, #4]
 8009d1a:	e002      	b.n	8009d22 <enq_lock+0x12>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	607b      	str	r3, [r7, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d806      	bhi.n	8009d36 <enq_lock+0x26>
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <enq_lock+0x40>)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	4413      	add	r3, r2
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1f2      	bne.n	8009d1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	bf14      	ite	ne
 8009d3c:	2301      	movne	r3, #1
 8009d3e:	2300      	moveq	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	2403e990 	.word	0x2403e990

08009d54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	e01f      	b.n	8009da4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d64:	4a41      	ldr	r2, [pc, #260]	; (8009e6c <inc_lock+0x118>)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	4413      	add	r3, r2
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d113      	bne.n	8009d9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d76:	4a3d      	ldr	r2, [pc, #244]	; (8009e6c <inc_lock+0x118>)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	4413      	add	r3, r2
 8009d7e:	3304      	adds	r3, #4
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d109      	bne.n	8009d9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d8a:	4a38      	ldr	r2, [pc, #224]	; (8009e6c <inc_lock+0x118>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	4413      	add	r3, r2
 8009d92:	3308      	adds	r3, #8
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d006      	beq.n	8009dac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d9dc      	bls.n	8009d64 <inc_lock+0x10>
 8009daa:	e000      	b.n	8009dae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009dac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d132      	bne.n	8009e1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	e002      	b.n	8009dc0 <inc_lock+0x6c>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d806      	bhi.n	8009dd4 <inc_lock+0x80>
 8009dc6:	4a29      	ldr	r2, [pc, #164]	; (8009e6c <inc_lock+0x118>)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	4413      	add	r3, r2
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1f2      	bne.n	8009dba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d101      	bne.n	8009dde <inc_lock+0x8a>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e040      	b.n	8009e60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4922      	ldr	r1, [pc, #136]	; (8009e6c <inc_lock+0x118>)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	440b      	add	r3, r1
 8009dea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	491e      	ldr	r1, [pc, #120]	; (8009e6c <inc_lock+0x118>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	440b      	add	r3, r1
 8009df8:	3304      	adds	r3, #4
 8009dfa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	695a      	ldr	r2, [r3, #20]
 8009e00:	491a      	ldr	r1, [pc, #104]	; (8009e6c <inc_lock+0x118>)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	440b      	add	r3, r1
 8009e08:	3308      	adds	r3, #8
 8009e0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e0c:	4a17      	ldr	r2, [pc, #92]	; (8009e6c <inc_lock+0x118>)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	4413      	add	r3, r2
 8009e14:	330c      	adds	r3, #12
 8009e16:	2200      	movs	r2, #0
 8009e18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d009      	beq.n	8009e34 <inc_lock+0xe0>
 8009e20:	4a12      	ldr	r2, [pc, #72]	; (8009e6c <inc_lock+0x118>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	4413      	add	r3, r2
 8009e28:	330c      	adds	r3, #12
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <inc_lock+0xe0>
 8009e30:	2300      	movs	r3, #0
 8009e32:	e015      	b.n	8009e60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d108      	bne.n	8009e4c <inc_lock+0xf8>
 8009e3a:	4a0c      	ldr	r2, [pc, #48]	; (8009e6c <inc_lock+0x118>)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	011b      	lsls	r3, r3, #4
 8009e40:	4413      	add	r3, r2
 8009e42:	330c      	adds	r3, #12
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	e001      	b.n	8009e50 <inc_lock+0xfc>
 8009e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e50:	4906      	ldr	r1, [pc, #24]	; (8009e6c <inc_lock+0x118>)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	440b      	add	r3, r1
 8009e58:	330c      	adds	r3, #12
 8009e5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3301      	adds	r3, #1
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	2403e990 	.word	0x2403e990

08009e70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d825      	bhi.n	8009ed0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e84:	4a17      	ldr	r2, [pc, #92]	; (8009ee4 <dec_lock+0x74>)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	4413      	add	r3, r2
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e92:	89fb      	ldrh	r3, [r7, #14]
 8009e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e98:	d101      	bne.n	8009e9e <dec_lock+0x2e>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e9e:	89fb      	ldrh	r3, [r7, #14]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <dec_lock+0x3a>
 8009ea4:	89fb      	ldrh	r3, [r7, #14]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009eaa:	4a0e      	ldr	r2, [pc, #56]	; (8009ee4 <dec_lock+0x74>)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	4413      	add	r3, r2
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	89fa      	ldrh	r2, [r7, #14]
 8009eb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <dec_lock+0x5a>
 8009ebe:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <dec_lock+0x74>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	737b      	strb	r3, [r7, #13]
 8009ece:	e001      	b.n	8009ed4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ed4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	2403e990 	.word	0x2403e990

08009ee8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	e010      	b.n	8009f18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ef6:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <clear_lock+0x44>)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	4413      	add	r3, r2
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d105      	bne.n	8009f12 <clear_lock+0x2a>
 8009f06:	4a09      	ldr	r2, [pc, #36]	; (8009f2c <clear_lock+0x44>)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	4413      	add	r3, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d9eb      	bls.n	8009ef6 <clear_lock+0xe>
	}
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	2403e990 	.word	0x2403e990

08009f30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	78db      	ldrb	r3, [r3, #3]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d034      	beq.n	8009fae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7858      	ldrb	r0, [r3, #1]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f54:	2301      	movs	r3, #1
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	f7ff fd40 	bl	80099dc <disk_write>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	73fb      	strb	r3, [r7, #15]
 8009f66:	e022      	b.n	8009fae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	1ad2      	subs	r2, r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d217      	bcs.n	8009fae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	789b      	ldrb	r3, [r3, #2]
 8009f82:	613b      	str	r3, [r7, #16]
 8009f84:	e010      	b.n	8009fa8 <sync_window+0x78>
					wsect += fs->fsize;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7858      	ldrb	r0, [r3, #1]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	f7ff fd1d 	bl	80099dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	613b      	str	r3, [r7, #16]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d8eb      	bhi.n	8009f86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d01b      	beq.n	800a008 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ffad 	bl	8009f30 <sync_window>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d113      	bne.n	800a008 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7858      	ldrb	r0, [r3, #1]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fea:	2301      	movs	r3, #1
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	f7ff fcd5 	bl	800999c <disk_read>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff87 	bl	8009f30 <sync_window>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d158      	bne.n	800a0de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d148      	bne.n	800a0c6 <sync_fs+0xb2>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	791b      	ldrb	r3, [r3, #4]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d144      	bne.n	800a0c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3330      	adds	r3, #48	; 0x30
 800a040:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a044:	2100      	movs	r1, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff fda9 	bl	8009b9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3330      	adds	r3, #48	; 0x30
 800a050:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a054:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fd38 	bl	8009ace <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3330      	adds	r3, #48	; 0x30
 800a062:	4921      	ldr	r1, [pc, #132]	; (800a0e8 <sync_fs+0xd4>)
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fd4d 	bl	8009b04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3330      	adds	r3, #48	; 0x30
 800a06e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a072:	491e      	ldr	r1, [pc, #120]	; (800a0ec <sync_fs+0xd8>)
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff fd45 	bl	8009b04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3330      	adds	r3, #48	; 0x30
 800a07e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7ff fd3b 	bl	8009b04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3330      	adds	r3, #48	; 0x30
 800a092:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	4619      	mov	r1, r3
 800a09c:	4610      	mov	r0, r2
 800a09e:	f7ff fd31 	bl	8009b04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7858      	ldrb	r0, [r3, #1]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f7ff fc8e 	bl	80099dc <disk_write>
			fs->fsi_flag = 0;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff fca4 	bl	8009a1c <disk_ioctl>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <sync_fs+0xca>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	41615252 	.word	0x41615252
 800a0ec:	61417272 	.word	0x61417272

0800a0f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	3b02      	subs	r3, #2
 800a0fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	3b02      	subs	r3, #2
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d301      	bcc.n	800a110 <clust2sect+0x20>
 800a10c:	2300      	movs	r3, #0
 800a10e:	e008      	b.n	800a122 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	895b      	ldrh	r3, [r3, #10]
 800a114:	461a      	mov	r2, r3
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	fb03 f202 	mul.w	r2, r3, r2
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	4413      	add	r3, r2
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d904      	bls.n	800a14e <get_fat+0x20>
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d302      	bcc.n	800a154 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a14e:	2301      	movs	r3, #1
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	e08f      	b.n	800a274 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a154:	f04f 33ff 	mov.w	r3, #4294967295
 800a158:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d062      	beq.n	800a228 <get_fat+0xfa>
 800a162:	2b03      	cmp	r3, #3
 800a164:	dc7c      	bgt.n	800a260 <get_fat+0x132>
 800a166:	2b01      	cmp	r3, #1
 800a168:	d002      	beq.n	800a170 <get_fat+0x42>
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d042      	beq.n	800a1f4 <get_fat+0xc6>
 800a16e:	e077      	b.n	800a260 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	085b      	lsrs	r3, r3, #1
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	6a1a      	ldr	r2, [r3, #32]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	0a5b      	lsrs	r3, r3, #9
 800a186:	4413      	add	r3, r2
 800a188:	4619      	mov	r1, r3
 800a18a:	6938      	ldr	r0, [r7, #16]
 800a18c:	f7ff ff14 	bl	8009fb8 <move_window>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d167      	bne.n	800a266 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	60fa      	str	r2, [r7, #12]
 800a19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6a1a      	ldr	r2, [r3, #32]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	0a5b      	lsrs	r3, r3, #9
 800a1b2:	4413      	add	r3, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f7ff fefe 	bl	8009fb8 <move_window>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d153      	bne.n	800a26a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1d0:	021b      	lsls	r3, r3, #8
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <get_fat+0xbc>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	091b      	lsrs	r3, r3, #4
 800a1e8:	e002      	b.n	800a1f0 <get_fat+0xc2>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1f0:	617b      	str	r3, [r7, #20]
			break;
 800a1f2:	e03f      	b.n	800a274 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	6a1a      	ldr	r2, [r3, #32]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	4413      	add	r3, r2
 800a1fe:	4619      	mov	r1, r3
 800a200:	6938      	ldr	r0, [r7, #16]
 800a202:	f7ff fed9 	bl	8009fb8 <move_window>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d130      	bne.n	800a26e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a21a:	4413      	add	r3, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7ff fc1b 	bl	8009a58 <ld_word>
 800a222:	4603      	mov	r3, r0
 800a224:	617b      	str	r3, [r7, #20]
			break;
 800a226:	e025      	b.n	800a274 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	6a1a      	ldr	r2, [r3, #32]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	09db      	lsrs	r3, r3, #7
 800a230:	4413      	add	r3, r2
 800a232:	4619      	mov	r1, r3
 800a234:	6938      	ldr	r0, [r7, #16]
 800a236:	f7ff febf 	bl	8009fb8 <move_window>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d118      	bne.n	800a272 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a24e:	4413      	add	r3, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fc19 	bl	8009a88 <ld_dword>
 800a256:	4603      	mov	r3, r0
 800a258:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a25c:	617b      	str	r3, [r7, #20]
			break;
 800a25e:	e009      	b.n	800a274 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a260:	2301      	movs	r3, #1
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	e006      	b.n	800a274 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a266:	bf00      	nop
 800a268:	e004      	b.n	800a274 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a26a:	bf00      	nop
 800a26c:	e002      	b.n	800a274 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a26e:	bf00      	nop
 800a270:	e000      	b.n	800a274 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a272:	bf00      	nop
		}
	}

	return val;
 800a274:	697b      	ldr	r3, [r7, #20]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a27e:	b590      	push	{r4, r7, lr}
 800a280:	b089      	sub	sp, #36	; 0x24
 800a282:	af00      	add	r7, sp, #0
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a28a:	2302      	movs	r3, #2
 800a28c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b01      	cmp	r3, #1
 800a292:	f240 80d2 	bls.w	800a43a <put_fat+0x1bc>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	f080 80cc 	bcs.w	800a43a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	f000 8096 	beq.w	800a3d8 <put_fat+0x15a>
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	f300 80cd 	bgt.w	800a44c <put_fat+0x1ce>
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d002      	beq.n	800a2bc <put_fat+0x3e>
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d06e      	beq.n	800a398 <put_fat+0x11a>
 800a2ba:	e0c7      	b.n	800a44c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	61bb      	str	r3, [r7, #24]
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a1a      	ldr	r2, [r3, #32]
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	0a5b      	lsrs	r3, r3, #9
 800a2d2:	4413      	add	r3, r2
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7ff fe6e 	bl	8009fb8 <move_window>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2e0:	7ffb      	ldrb	r3, [r7, #31]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 80ab 	bne.w	800a43e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	1c59      	adds	r1, r3, #1
 800a2f2:	61b9      	str	r1, [r7, #24]
 800a2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f8:	4413      	add	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00d      	beq.n	800a322 <put_fat+0xa4>
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b25b      	sxtb	r3, r3
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	b25a      	sxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	b25b      	sxtb	r3, r3
 800a31a:	4313      	orrs	r3, r2
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	e001      	b.n	800a326 <put_fat+0xa8>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a1a      	ldr	r2, [r3, #32]
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	0a5b      	lsrs	r3, r3, #9
 800a338:	4413      	add	r3, r2
 800a33a:	4619      	mov	r1, r3
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f7ff fe3b 	bl	8009fb8 <move_window>
 800a342:	4603      	mov	r3, r0
 800a344:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a346:	7ffb      	ldrb	r3, [r7, #31]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d17a      	bne.n	800a442 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a358:	4413      	add	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <put_fat+0xf0>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	091b      	lsrs	r3, r3, #4
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	e00e      	b.n	800a38c <put_fat+0x10e>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	b25b      	sxtb	r3, r3
 800a374:	f023 030f 	bic.w	r3, r3, #15
 800a378:	b25a      	sxtb	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	b25b      	sxtb	r3, r3
 800a380:	f003 030f 	and.w	r3, r3, #15
 800a384:	b25b      	sxtb	r3, r3
 800a386:	4313      	orrs	r3, r2
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	70da      	strb	r2, [r3, #3]
			break;
 800a396:	e059      	b.n	800a44c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1a      	ldr	r2, [r3, #32]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff fe07 	bl	8009fb8 <move_window>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3ae:	7ffb      	ldrb	r3, [r7, #31]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d148      	bne.n	800a446 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a3c2:	4413      	add	r3, r2
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fb7f 	bl	8009ace <st_word>
			fs->wflag = 1;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	70da      	strb	r2, [r3, #3]
			break;
 800a3d6:	e039      	b.n	800a44c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a1a      	ldr	r2, [r3, #32]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	09db      	lsrs	r3, r3, #7
 800a3e0:	4413      	add	r3, r2
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7ff fde7 	bl	8009fb8 <move_window>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3ee:	7ffb      	ldrb	r3, [r7, #31]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d12a      	bne.n	800a44a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a408:	4413      	add	r3, r2
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fb3c 	bl	8009a88 <ld_dword>
 800a410:	4603      	mov	r3, r0
 800a412:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a416:	4323      	orrs	r3, r4
 800a418:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a428:	4413      	add	r3, r2
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fb69 	bl	8009b04 <st_dword>
			fs->wflag = 1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	70da      	strb	r2, [r3, #3]
			break;
 800a438:	e008      	b.n	800a44c <put_fat+0x1ce>
		}
	}
 800a43a:	bf00      	nop
 800a43c:	e006      	b.n	800a44c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a43e:	bf00      	nop
 800a440:	e004      	b.n	800a44c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a442:	bf00      	nop
 800a444:	e002      	b.n	800a44c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a446:	bf00      	nop
 800a448:	e000      	b.n	800a44c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a44a:	bf00      	nop
	return res;
 800a44c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3724      	adds	r7, #36	; 0x24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd90      	pop	{r4, r7, pc}

0800a456 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b088      	sub	sp, #32
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d904      	bls.n	800a47c <remove_chain+0x26>
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d301      	bcc.n	800a480 <remove_chain+0x2a>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e04b      	b.n	800a518 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00c      	beq.n	800a4a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	69b8      	ldr	r0, [r7, #24]
 800a48e:	f7ff fef6 	bl	800a27e <put_fat>
 800a492:	4603      	mov	r3, r0
 800a494:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a496:	7ffb      	ldrb	r3, [r7, #31]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <remove_chain+0x4a>
 800a49c:	7ffb      	ldrb	r3, [r7, #31]
 800a49e:	e03b      	b.n	800a518 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7ff fe43 	bl	800a12e <get_fat>
 800a4a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d031      	beq.n	800a514 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d101      	bne.n	800a4ba <remove_chain+0x64>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	e02e      	b.n	800a518 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c0:	d101      	bne.n	800a4c6 <remove_chain+0x70>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e028      	b.n	800a518 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	69b8      	ldr	r0, [r7, #24]
 800a4cc:	f7ff fed7 	bl	800a27e <put_fat>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a4d4:	7ffb      	ldrb	r3, [r7, #31]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <remove_chain+0x88>
 800a4da:	7ffb      	ldrb	r3, [r7, #31]
 800a4dc:	e01c      	b.n	800a518 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	691a      	ldr	r2, [r3, #16]
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	3b02      	subs	r3, #2
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d20b      	bcs.n	800a504 <remove_chain+0xae>
			fs->free_clst++;
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	791b      	ldrb	r3, [r3, #4]
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d3c6      	bcc.n	800a4a0 <remove_chain+0x4a>
 800a512:	e000      	b.n	800a516 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a514:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10d      	bne.n	800a552 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d004      	beq.n	800a54c <create_chain+0x2c>
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d31b      	bcc.n	800a584 <create_chain+0x64>
 800a54c:	2301      	movs	r3, #1
 800a54e:	61bb      	str	r3, [r7, #24]
 800a550:	e018      	b.n	800a584 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fdea 	bl	800a12e <get_fat>
 800a55a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d801      	bhi.n	800a566 <create_chain+0x46>
 800a562:	2301      	movs	r3, #1
 800a564:	e070      	b.n	800a648 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56c:	d101      	bne.n	800a572 <create_chain+0x52>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	e06a      	b.n	800a648 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d201      	bcs.n	800a580 <create_chain+0x60>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	e063      	b.n	800a648 <create_chain+0x128>
		scl = clst;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	3301      	adds	r3, #1
 800a58c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	429a      	cmp	r2, r3
 800a596:	d307      	bcc.n	800a5a8 <create_chain+0x88>
				ncl = 2;
 800a598:	2302      	movs	r3, #2
 800a59a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a59c:	69fa      	ldr	r2, [r7, #28]
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d901      	bls.n	800a5a8 <create_chain+0x88>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e04f      	b.n	800a648 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5a8:	69f9      	ldr	r1, [r7, #28]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff fdbf 	bl	800a12e <get_fat>
 800a5b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00e      	beq.n	800a5d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d003      	beq.n	800a5c6 <create_chain+0xa6>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c4:	d101      	bne.n	800a5ca <create_chain+0xaa>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	e03e      	b.n	800a648 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d1da      	bne.n	800a588 <create_chain+0x68>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e038      	b.n	800a648 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a5d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5dc:	69f9      	ldr	r1, [r7, #28]
 800a5de:	6938      	ldr	r0, [r7, #16]
 800a5e0:	f7ff fe4d 	bl	800a27e <put_fat>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <create_chain+0xe2>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d006      	beq.n	800a602 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6938      	ldr	r0, [r7, #16]
 800a5fa:	f7ff fe40 	bl	800a27e <put_fat>
 800a5fe:	4603      	mov	r3, r0
 800a600:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d116      	bne.n	800a636 <create_chain+0x116>
		fs->last_clst = ncl;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	3b02      	subs	r3, #2
 800a618:	429a      	cmp	r2, r3
 800a61a:	d804      	bhi.n	800a626 <create_chain+0x106>
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	791b      	ldrb	r3, [r3, #4]
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	711a      	strb	r2, [r3, #4]
 800a634:	e007      	b.n	800a646 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d102      	bne.n	800a642 <create_chain+0x122>
 800a63c:	f04f 33ff 	mov.w	r3, #4294967295
 800a640:	e000      	b.n	800a644 <create_chain+0x124>
 800a642:	2301      	movs	r3, #1
 800a644:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a646:	69fb      	ldr	r3, [r7, #28]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	3304      	adds	r3, #4
 800a666:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	0a5b      	lsrs	r3, r3, #9
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	8952      	ldrh	r2, [r2, #10]
 800a670:	fbb3 f3f2 	udiv	r3, r3, r2
 800a674:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	1d1a      	adds	r2, r3, #4
 800a67a:	613a      	str	r2, [r7, #16]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <clmt_clust+0x3a>
 800a686:	2300      	movs	r3, #0
 800a688:	e010      	b.n	800a6ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d307      	bcc.n	800a6a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	3304      	adds	r3, #4
 800a69e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6a0:	e7e9      	b.n	800a676 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a6a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	4413      	add	r3, r2
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ce:	d204      	bcs.n	800a6da <dir_sdi+0x22>
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f003 031f 	and.w	r3, r3, #31
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e063      	b.n	800a7a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d106      	bne.n	800a6fe <dir_sdi+0x46>
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d902      	bls.n	800a6fe <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10c      	bne.n	800a71e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	8912      	ldrh	r2, [r2, #8]
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d301      	bcc.n	800a714 <dir_sdi+0x5c>
 800a710:	2302      	movs	r3, #2
 800a712:	e048      	b.n	800a7a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	61da      	str	r2, [r3, #28]
 800a71c:	e029      	b.n	800a772 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	895b      	ldrh	r3, [r3, #10]
 800a722:	025b      	lsls	r3, r3, #9
 800a724:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a726:	e019      	b.n	800a75c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6979      	ldr	r1, [r7, #20]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fcfe 	bl	800a12e <get_fat>
 800a732:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d101      	bne.n	800a740 <dir_sdi+0x88>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e032      	b.n	800a7a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d904      	bls.n	800a750 <dir_sdi+0x98>
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d301      	bcc.n	800a754 <dir_sdi+0x9c>
 800a750:	2302      	movs	r3, #2
 800a752:	e028      	b.n	800a7a6 <dir_sdi+0xee>
			ofs -= csz;
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	429a      	cmp	r2, r3
 800a762:	d2e1      	bcs.n	800a728 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a764:	6979      	ldr	r1, [r7, #20]
 800a766:	6938      	ldr	r0, [r7, #16]
 800a768:	f7ff fcc2 	bl	800a0f0 <clust2sect>
 800a76c:	4602      	mov	r2, r0
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <dir_sdi+0xcc>
 800a780:	2302      	movs	r3, #2
 800a782:	e010      	b.n	800a7a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69da      	ldr	r2, [r3, #28]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	0a5b      	lsrs	r3, r3, #9
 800a78c:	441a      	add	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79e:	441a      	add	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	3320      	adds	r3, #32
 800a7c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <dir_next+0x28>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7d4:	d301      	bcc.n	800a7da <dir_next+0x2c>
 800a7d6:	2304      	movs	r3, #4
 800a7d8:	e0aa      	b.n	800a930 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f040 8098 	bne.w	800a916 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	095b      	lsrs	r3, r3, #5
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	8912      	ldrh	r2, [r2, #8]
 800a800:	4293      	cmp	r3, r2
 800a802:	f0c0 8088 	bcc.w	800a916 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	61da      	str	r2, [r3, #28]
 800a80c:	2304      	movs	r3, #4
 800a80e:	e08f      	b.n	800a930 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	0a5b      	lsrs	r3, r3, #9
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	8952      	ldrh	r2, [r2, #10]
 800a818:	3a01      	subs	r2, #1
 800a81a:	4013      	ands	r3, r2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d17a      	bne.n	800a916 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7ff fc80 	bl	800a12e <get_fat>
 800a82e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d801      	bhi.n	800a83a <dir_next+0x8c>
 800a836:	2302      	movs	r3, #2
 800a838:	e07a      	b.n	800a930 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a840:	d101      	bne.n	800a846 <dir_next+0x98>
 800a842:	2301      	movs	r3, #1
 800a844:	e074      	b.n	800a930 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d358      	bcc.n	800a902 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d104      	bne.n	800a860 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	61da      	str	r2, [r3, #28]
 800a85c:	2304      	movs	r3, #4
 800a85e:	e067      	b.n	800a930 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f7ff fe59 	bl	800a520 <create_chain>
 800a86e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <dir_next+0xcc>
 800a876:	2307      	movs	r3, #7
 800a878:	e05a      	b.n	800a930 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <dir_next+0xd6>
 800a880:	2302      	movs	r3, #2
 800a882:	e055      	b.n	800a930 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d101      	bne.n	800a890 <dir_next+0xe2>
 800a88c:	2301      	movs	r3, #1
 800a88e:	e04f      	b.n	800a930 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff fb4d 	bl	8009f30 <sync_window>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <dir_next+0xf2>
 800a89c:	2301      	movs	r3, #1
 800a89e:	e047      	b.n	800a930 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3330      	adds	r3, #48	; 0x30
 800a8a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff f977 	bl	8009b9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	6979      	ldr	r1, [r7, #20]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fc1a 	bl	800a0f0 <clust2sect>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8c2:	e012      	b.n	800a8ea <dir_next+0x13c>
						fs->wflag = 1;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff fb30 	bl	8009f30 <sync_window>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <dir_next+0x12c>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e02a      	b.n	800a930 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	895b      	ldrh	r3, [r3, #10]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d3e6      	bcc.n	800a8c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1ad2      	subs	r2, r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a908:	6979      	ldr	r1, [r7, #20]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff fbf0 	bl	800a0f0 <clust2sect>
 800a910:	4602      	mov	r2, r0
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a928:	441a      	add	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff feb4 	bl	800a6b8 <dir_sdi>
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d12b      	bne.n	800a9b2 <dir_alloc+0x7a>
		n = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	4619      	mov	r1, r3
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7ff fb27 	bl	8009fb8 <move_window>
 800a96a:	4603      	mov	r3, r0
 800a96c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d11d      	bne.n	800a9b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2be5      	cmp	r3, #229	; 0xe5
 800a97c:	d004      	beq.n	800a988 <dir_alloc+0x50>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d107      	bne.n	800a998 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	3301      	adds	r3, #1
 800a98c:	613b      	str	r3, [r7, #16]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d102      	bne.n	800a99c <dir_alloc+0x64>
 800a996:	e00c      	b.n	800a9b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a998:	2300      	movs	r3, #0
 800a99a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a99c:	2101      	movs	r1, #1
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff ff05 	bl	800a7ae <dir_next>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0d7      	beq.n	800a95e <dir_alloc+0x26>
 800a9ae:	e000      	b.n	800a9b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a9b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d101      	bne.n	800a9bc <dir_alloc+0x84>
 800a9b8:	2307      	movs	r3, #7
 800a9ba:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	331a      	adds	r3, #26
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff f83f 	bl	8009a58 <ld_word>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d109      	bne.n	800a9fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	3314      	adds	r3, #20
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff f834 	bl	8009a58 <ld_word>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	331a      	adds	r3, #26
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	b292      	uxth	r2, r2
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff f857 	bl	8009ace <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d109      	bne.n	800aa3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f103 0214 	add.w	r2, r3, #20
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	0c1b      	lsrs	r3, r3, #16
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7ff f849 	bl	8009ace <st_word>
	}
}
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa52:	2100      	movs	r1, #0
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff fe2f 	bl	800a6b8 <dir_sdi>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <dir_find+0x24>
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	e03e      	b.n	800aae6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6938      	ldr	r0, [r7, #16]
 800aa70:	f7ff faa2 	bl	8009fb8 <move_window>
 800aa74:	4603      	mov	r3, r0
 800aa76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d12f      	bne.n	800aade <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <dir_find+0x4e>
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	75fb      	strb	r3, [r7, #23]
 800aa90:	e028      	b.n	800aae4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	330b      	adds	r3, #11
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	330b      	adds	r3, #11
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	f003 0308 	and.w	r3, r3, #8
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <dir_find+0x86>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a18      	ldr	r0, [r3, #32]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3324      	adds	r3, #36	; 0x24
 800aabc:	220b      	movs	r2, #11
 800aabe:	4619      	mov	r1, r3
 800aac0:	f7ff f888 	bl	8009bd4 <mem_cmp>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00b      	beq.n	800aae2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aaca:	2100      	movs	r1, #0
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fe6e 	bl	800a7ae <dir_next>
 800aad2:	4603      	mov	r3, r0
 800aad4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0c5      	beq.n	800aa68 <dir_find+0x24>
 800aadc:	e002      	b.n	800aae4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aade:	bf00      	nop
 800aae0:	e000      	b.n	800aae4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aae2:	bf00      	nop

	return res;
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aafc:	2101      	movs	r1, #1
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ff1a 	bl	800a938 <dir_alloc>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11c      	bne.n	800ab48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	4619      	mov	r1, r3
 800ab14:	68b8      	ldr	r0, [r7, #8]
 800ab16:	f7ff fa4f 	bl	8009fb8 <move_window>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d111      	bne.n	800ab48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff f836 	bl	8009b9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a18      	ldr	r0, [r3, #32]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3324      	adds	r3, #36	; 0x24
 800ab3a:	220b      	movs	r2, #11
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	f7ff f80d 	bl	8009b5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2201      	movs	r2, #1
 800ab46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3324      	adds	r3, #36	; 0x24
 800ab68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab6a:	220b      	movs	r2, #11
 800ab6c:	2120      	movs	r1, #32
 800ab6e:	68b8      	ldr	r0, [r7, #8]
 800ab70:	f7ff f815 	bl	8009b9e <mem_set>
	si = i = 0; ni = 8;
 800ab74:	2300      	movs	r3, #0
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	61fa      	str	r2, [r7, #28]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab8e:	7efb      	ldrb	r3, [r7, #27]
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	d94e      	bls.n	800ac32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ab94:	7efb      	ldrb	r3, [r7, #27]
 800ab96:	2b2f      	cmp	r3, #47	; 0x2f
 800ab98:	d006      	beq.n	800aba8 <create_name+0x54>
 800ab9a:	7efb      	ldrb	r3, [r7, #27]
 800ab9c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab9e:	d110      	bne.n	800abc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aba0:	e002      	b.n	800aba8 <create_name+0x54>
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	3301      	adds	r3, #1
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b2f      	cmp	r3, #47	; 0x2f
 800abb2:	d0f6      	beq.n	800aba2 <create_name+0x4e>
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	4413      	add	r3, r2
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b5c      	cmp	r3, #92	; 0x5c
 800abbe:	d0f0      	beq.n	800aba2 <create_name+0x4e>
			break;
 800abc0:	e038      	b.n	800ac34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800abc2:	7efb      	ldrb	r3, [r7, #27]
 800abc4:	2b2e      	cmp	r3, #46	; 0x2e
 800abc6:	d003      	beq.n	800abd0 <create_name+0x7c>
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d30c      	bcc.n	800abea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b0b      	cmp	r3, #11
 800abd4:	d002      	beq.n	800abdc <create_name+0x88>
 800abd6:	7efb      	ldrb	r3, [r7, #27]
 800abd8:	2b2e      	cmp	r3, #46	; 0x2e
 800abda:	d001      	beq.n	800abe0 <create_name+0x8c>
 800abdc:	2306      	movs	r3, #6
 800abde:	e044      	b.n	800ac6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800abe0:	2308      	movs	r3, #8
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	230b      	movs	r3, #11
 800abe6:	617b      	str	r3, [r7, #20]
			continue;
 800abe8:	e022      	b.n	800ac30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800abea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da04      	bge.n	800abfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800abf2:	7efb      	ldrb	r3, [r7, #27]
 800abf4:	3b80      	subs	r3, #128	; 0x80
 800abf6:	4a1f      	ldr	r2, [pc, #124]	; (800ac74 <create_name+0x120>)
 800abf8:	5cd3      	ldrb	r3, [r2, r3]
 800abfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800abfc:	7efb      	ldrb	r3, [r7, #27]
 800abfe:	4619      	mov	r1, r3
 800ac00:	481d      	ldr	r0, [pc, #116]	; (800ac78 <create_name+0x124>)
 800ac02:	f7ff f80e 	bl	8009c22 <chk_chr>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <create_name+0xbc>
 800ac0c:	2306      	movs	r3, #6
 800ac0e:	e02c      	b.n	800ac6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ac10:	7efb      	ldrb	r3, [r7, #27]
 800ac12:	2b60      	cmp	r3, #96	; 0x60
 800ac14:	d905      	bls.n	800ac22 <create_name+0xce>
 800ac16:	7efb      	ldrb	r3, [r7, #27]
 800ac18:	2b7a      	cmp	r3, #122	; 0x7a
 800ac1a:	d802      	bhi.n	800ac22 <create_name+0xce>
 800ac1c:	7efb      	ldrb	r3, [r7, #27]
 800ac1e:	3b20      	subs	r3, #32
 800ac20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	613a      	str	r2, [r7, #16]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	7efa      	ldrb	r2, [r7, #27]
 800ac2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac30:	e7a6      	b.n	800ab80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	441a      	add	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <create_name+0xf4>
 800ac44:	2306      	movs	r3, #6
 800ac46:	e010      	b.n	800ac6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2be5      	cmp	r3, #229	; 0xe5
 800ac4e:	d102      	bne.n	800ac56 <create_name+0x102>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2205      	movs	r2, #5
 800ac54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac56:	7efb      	ldrb	r3, [r7, #27]
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d801      	bhi.n	800ac60 <create_name+0x10c>
 800ac5c:	2204      	movs	r2, #4
 800ac5e:	e000      	b.n	800ac62 <create_name+0x10e>
 800ac60:	2200      	movs	r2, #0
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	330b      	adds	r3, #11
 800ac66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	0800ce8c 	.word	0x0800ce8c
 800ac78:	0800cdfc 	.word	0x0800cdfc

0800ac7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac90:	e002      	b.n	800ac98 <follow_path+0x1c>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	3301      	adds	r3, #1
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac9e:	d0f8      	beq.n	800ac92 <follow_path+0x16>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b5c      	cmp	r3, #92	; 0x5c
 800aca6:	d0f4      	beq.n	800ac92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2200      	movs	r2, #0
 800acac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	2b1f      	cmp	r3, #31
 800acb4:	d80a      	bhi.n	800accc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2280      	movs	r2, #128	; 0x80
 800acba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800acbe:	2100      	movs	r1, #0
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fcf9 	bl	800a6b8 <dir_sdi>
 800acc6:	4603      	mov	r3, r0
 800acc8:	75fb      	strb	r3, [r7, #23]
 800acca:	e043      	b.n	800ad54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800accc:	463b      	mov	r3, r7
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ff3f 	bl	800ab54 <create_name>
 800acd6:	4603      	mov	r3, r0
 800acd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acda:	7dfb      	ldrb	r3, [r7, #23]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d134      	bne.n	800ad4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff feaf 	bl	800aa44 <dir_find>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00a      	beq.n	800ad0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d127      	bne.n	800ad4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800acfe:	7afb      	ldrb	r3, [r7, #11]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d122      	bne.n	800ad4e <follow_path+0xd2>
 800ad08:	2305      	movs	r3, #5
 800ad0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad0c:	e01f      	b.n	800ad4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad0e:	7afb      	ldrb	r3, [r7, #11]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d11c      	bne.n	800ad52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	799b      	ldrb	r3, [r3, #6]
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad24:	2305      	movs	r3, #5
 800ad26:	75fb      	strb	r3, [r7, #23]
 800ad28:	e014      	b.n	800ad54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad38:	4413      	add	r3, r2
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fe42 	bl	800a9c6 <ld_clust>
 800ad42:	4602      	mov	r2, r0
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad48:	e7c0      	b.n	800accc <follow_path+0x50>
			if (res != FR_OK) break;
 800ad4a:	bf00      	nop
 800ad4c:	e002      	b.n	800ad54 <follow_path+0xd8>
				break;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad52:	bf00      	nop
			}
		}
	}

	return res;
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b087      	sub	sp, #28
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad66:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d031      	beq.n	800add8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	617b      	str	r3, [r7, #20]
 800ad7a:	e002      	b.n	800ad82 <get_ldnumber+0x24>
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	617b      	str	r3, [r7, #20]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b20      	cmp	r3, #32
 800ad88:	d903      	bls.n	800ad92 <get_ldnumber+0x34>
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b3a      	cmp	r3, #58	; 0x3a
 800ad90:	d1f4      	bne.n	800ad7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b3a      	cmp	r3, #58	; 0x3a
 800ad98:	d11c      	bne.n	800add4 <get_ldnumber+0x76>
			tp = *path;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	60fa      	str	r2, [r7, #12]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	3b30      	subs	r3, #48	; 0x30
 800adaa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b09      	cmp	r3, #9
 800adb0:	d80e      	bhi.n	800add0 <get_ldnumber+0x72>
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d10a      	bne.n	800add0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d107      	bne.n	800add0 <get_ldnumber+0x72>
					vol = (int)i;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	3301      	adds	r3, #1
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	e002      	b.n	800adda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800add4:	2300      	movs	r3, #0
 800add6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800add8:	693b      	ldr	r3, [r7, #16]
}
 800adda:	4618      	mov	r0, r3
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
	...

0800ade8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	70da      	strb	r2, [r3, #3]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f04f 32ff 	mov.w	r2, #4294967295
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff f8d8 	bl	8009fb8 <move_window>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <check_fs+0x2a>
 800ae0e:	2304      	movs	r3, #4
 800ae10:	e038      	b.n	800ae84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3330      	adds	r3, #48	; 0x30
 800ae16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fe1c 	bl	8009a58 <ld_word>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d001      	beq.n	800ae30 <check_fs+0x48>
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e029      	b.n	800ae84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae36:	2be9      	cmp	r3, #233	; 0xe9
 800ae38:	d009      	beq.n	800ae4e <check_fs+0x66>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae40:	2beb      	cmp	r3, #235	; 0xeb
 800ae42:	d11e      	bne.n	800ae82 <check_fs+0x9a>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae4a:	2b90      	cmp	r3, #144	; 0x90
 800ae4c:	d119      	bne.n	800ae82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3330      	adds	r3, #48	; 0x30
 800ae52:	3336      	adds	r3, #54	; 0x36
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fe fe17 	bl	8009a88 <ld_dword>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <check_fs+0xa4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d101      	bne.n	800ae6a <check_fs+0x82>
 800ae66:	2300      	movs	r3, #0
 800ae68:	e00c      	b.n	800ae84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3330      	adds	r3, #48	; 0x30
 800ae6e:	3352      	adds	r3, #82	; 0x52
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fe fe09 	bl	8009a88 <ld_dword>
 800ae76:	4603      	mov	r3, r0
 800ae78:	4a05      	ldr	r2, [pc, #20]	; (800ae90 <check_fs+0xa8>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d101      	bne.n	800ae82 <check_fs+0x9a>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e000      	b.n	800ae84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae82:	2302      	movs	r3, #2
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	00544146 	.word	0x00544146
 800ae90:	33544146 	.word	0x33544146

0800ae94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b096      	sub	sp, #88	; 0x58
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7ff ff58 	bl	800ad5e <get_ldnumber>
 800aeae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aeb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da01      	bge.n	800aeba <find_volume+0x26>
 800aeb6:	230b      	movs	r3, #11
 800aeb8:	e22e      	b.n	800b318 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aeba:	4aa8      	ldr	r2, [pc, #672]	; (800b15c <find_volume+0x2c8>)
 800aebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <find_volume+0x3a>
 800aeca:	230c      	movs	r3, #12
 800aecc:	e224      	b.n	800b318 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	f023 0301 	bic.w	r3, r3, #1
 800aeda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d01a      	beq.n	800af1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fd17 	bl	800991c <disk_status>
 800aeee:	4603      	mov	r3, r0
 800aef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10c      	bne.n	800af1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <find_volume+0x82>
 800af06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af0a:	f003 0304 	and.w	r3, r3, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af12:	230a      	movs	r3, #10
 800af14:	e200      	b.n	800b318 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800af16:	2300      	movs	r3, #0
 800af18:	e1fe      	b.n	800b318 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	2200      	movs	r2, #0
 800af1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af22:	b2da      	uxtb	r2, r3
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe fd0f 	bl	8009950 <disk_initialize>
 800af32:	4603      	mov	r3, r0
 800af34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af44:	2303      	movs	r3, #3
 800af46:	e1e7      	b.n	800b318 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d007      	beq.n	800af5e <find_volume+0xca>
 800af4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af5a:	230a      	movs	r3, #10
 800af5c:	e1dc      	b.n	800b318 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af66:	f7ff ff3f 	bl	800ade8 <check_fs>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af74:	2b02      	cmp	r3, #2
 800af76:	d14b      	bne.n	800b010 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af78:	2300      	movs	r3, #0
 800af7a:	643b      	str	r3, [r7, #64]	; 0x40
 800af7c:	e01f      	b.n	800afbe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af86:	011b      	lsls	r3, r3, #4
 800af88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af8c:	4413      	add	r3, r2
 800af8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	3304      	adds	r3, #4
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d006      	beq.n	800afa8 <find_volume+0x114>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	3308      	adds	r3, #8
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe fd72 	bl	8009a88 <ld_dword>
 800afa4:	4602      	mov	r2, r0
 800afa6:	e000      	b.n	800afaa <find_volume+0x116>
 800afa8:	2200      	movs	r2, #0
 800afaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800afb2:	440b      	add	r3, r1
 800afb4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afba:	3301      	adds	r3, #1
 800afbc:	643b      	str	r3, [r7, #64]	; 0x40
 800afbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d9dc      	bls.n	800af7e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800afc4:	2300      	movs	r3, #0
 800afc6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800afc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <find_volume+0x140>
 800afce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd0:	3b01      	subs	r3, #1
 800afd2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800afd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800afdc:	4413      	add	r3, r2
 800afde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800afe2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800afe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d005      	beq.n	800aff6 <find_volume+0x162>
 800afea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afee:	f7ff fefb 	bl	800ade8 <check_fs>
 800aff2:	4603      	mov	r3, r0
 800aff4:	e000      	b.n	800aff8 <find_volume+0x164>
 800aff6:	2303      	movs	r3, #3
 800aff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800affc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b000:	2b01      	cmp	r3, #1
 800b002:	d905      	bls.n	800b010 <find_volume+0x17c>
 800b004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b006:	3301      	adds	r3, #1
 800b008:	643b      	str	r3, [r7, #64]	; 0x40
 800b00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d9e1      	bls.n	800afd4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b014:	2b04      	cmp	r3, #4
 800b016:	d101      	bne.n	800b01c <find_volume+0x188>
 800b018:	2301      	movs	r3, #1
 800b01a:	e17d      	b.n	800b318 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b01c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b020:	2b01      	cmp	r3, #1
 800b022:	d901      	bls.n	800b028 <find_volume+0x194>
 800b024:	230d      	movs	r3, #13
 800b026:	e177      	b.n	800b318 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	3330      	adds	r3, #48	; 0x30
 800b02c:	330b      	adds	r3, #11
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fe fd12 	bl	8009a58 <ld_word>
 800b034:	4603      	mov	r3, r0
 800b036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b03a:	d001      	beq.n	800b040 <find_volume+0x1ac>
 800b03c:	230d      	movs	r3, #13
 800b03e:	e16b      	b.n	800b318 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	3330      	adds	r3, #48	; 0x30
 800b044:	3316      	adds	r3, #22
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe fd06 	bl	8009a58 <ld_word>
 800b04c:	4603      	mov	r3, r0
 800b04e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <find_volume+0x1d0>
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	3330      	adds	r3, #48	; 0x30
 800b05a:	3324      	adds	r3, #36	; 0x24
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fd13 	bl	8009a88 <ld_dword>
 800b062:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b068:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	789b      	ldrb	r3, [r3, #2]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d005      	beq.n	800b088 <find_volume+0x1f4>
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	789b      	ldrb	r3, [r3, #2]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d001      	beq.n	800b088 <find_volume+0x1f4>
 800b084:	230d      	movs	r3, #13
 800b086:	e147      	b.n	800b318 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	789b      	ldrb	r3, [r3, #2]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b090:	fb02 f303 	mul.w	r3, r2, r3
 800b094:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	895b      	ldrh	r3, [r3, #10]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d008      	beq.n	800b0bc <find_volume+0x228>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	895b      	ldrh	r3, [r3, #10]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b2:	895b      	ldrh	r3, [r3, #10]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <find_volume+0x22c>
 800b0bc:	230d      	movs	r3, #13
 800b0be:	e12b      	b.n	800b318 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	3330      	adds	r3, #48	; 0x30
 800b0c4:	3311      	adds	r3, #17
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fcc6 	bl	8009a58 <ld_word>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	891b      	ldrh	r3, [r3, #8]
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <find_volume+0x252>
 800b0e2:	230d      	movs	r3, #13
 800b0e4:	e118      	b.n	800b318 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	3330      	adds	r3, #48	; 0x30
 800b0ea:	3313      	adds	r3, #19
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fcb3 	bl	8009a58 <ld_word>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d106      	bne.n	800b10a <find_volume+0x276>
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	3330      	adds	r3, #48	; 0x30
 800b100:	3320      	adds	r3, #32
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe fcc0 	bl	8009a88 <ld_dword>
 800b108:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	3330      	adds	r3, #48	; 0x30
 800b10e:	330e      	adds	r3, #14
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fca1 	bl	8009a58 <ld_word>
 800b116:	4603      	mov	r3, r0
 800b118:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b11a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <find_volume+0x290>
 800b120:	230d      	movs	r3, #13
 800b122:	e0f9      	b.n	800b318 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b124:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b128:	4413      	add	r3, r2
 800b12a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b12c:	8912      	ldrh	r2, [r2, #8]
 800b12e:	0912      	lsrs	r2, r2, #4
 800b130:	b292      	uxth	r2, r2
 800b132:	4413      	add	r3, r2
 800b134:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d201      	bcs.n	800b142 <find_volume+0x2ae>
 800b13e:	230d      	movs	r3, #13
 800b140:	e0ea      	b.n	800b318 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b14a:	8952      	ldrh	r2, [r2, #10]
 800b14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d103      	bne.n	800b160 <find_volume+0x2cc>
 800b158:	230d      	movs	r3, #13
 800b15a:	e0dd      	b.n	800b318 <find_volume+0x484>
 800b15c:	2403e988 	.word	0x2403e988
		fmt = FS_FAT32;
 800b160:	2303      	movs	r3, #3
 800b162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d802      	bhi.n	800b176 <find_volume+0x2e2>
 800b170:	2302      	movs	r3, #2
 800b172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d802      	bhi.n	800b186 <find_volume+0x2f2>
 800b180:	2301      	movs	r3, #1
 800b182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	1c9a      	adds	r2, r3, #2
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b192:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b194:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b198:	441a      	add	r2, r3
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b19e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	441a      	add	r2, r3
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b1a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d11e      	bne.n	800b1ee <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	3330      	adds	r3, #48	; 0x30
 800b1b4:	332a      	adds	r3, #42	; 0x2a
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe fc4e 	bl	8009a58 <ld_word>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <find_volume+0x332>
 800b1c2:	230d      	movs	r3, #13
 800b1c4:	e0a8      	b.n	800b318 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	891b      	ldrh	r3, [r3, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <find_volume+0x33e>
 800b1ce:	230d      	movs	r3, #13
 800b1d0:	e0a2      	b.n	800b318 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	3330      	adds	r3, #48	; 0x30
 800b1d6:	332c      	adds	r3, #44	; 0x2c
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fc55 	bl	8009a88 <ld_dword>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	695b      	ldr	r3, [r3, #20]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b1ec:	e01f      	b.n	800b22e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	891b      	ldrh	r3, [r3, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <find_volume+0x366>
 800b1f6:	230d      	movs	r3, #13
 800b1f8:	e08e      	b.n	800b318 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	6a1a      	ldr	r2, [r3, #32]
 800b1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b200:	441a      	add	r2, r3
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d103      	bne.n	800b216 <find_volume+0x382>
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	e00a      	b.n	800b22c <find_volume+0x398>
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	695a      	ldr	r2, [r3, #20]
 800b21a:	4613      	mov	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4413      	add	r3, r2
 800b220:	085a      	lsrs	r2, r3, #1
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b22c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b234:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b238:	0a5b      	lsrs	r3, r3, #9
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d201      	bcs.n	800b242 <find_volume+0x3ae>
 800b23e:	230d      	movs	r3, #13
 800b240:	e06a      	b.n	800b318 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	f04f 32ff 	mov.w	r2, #4294967295
 800b248:	611a      	str	r2, [r3, #16]
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	2280      	movs	r2, #128	; 0x80
 800b256:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b258:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d149      	bne.n	800b2f4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	3330      	adds	r3, #48	; 0x30
 800b264:	3330      	adds	r3, #48	; 0x30
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fbf6 	bl	8009a58 <ld_word>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d140      	bne.n	800b2f4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b274:	3301      	adds	r3, #1
 800b276:	4619      	mov	r1, r3
 800b278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b27a:	f7fe fe9d 	bl	8009fb8 <move_window>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d137      	bne.n	800b2f4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	2200      	movs	r2, #0
 800b288:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	3330      	adds	r3, #48	; 0x30
 800b28e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fbe0 	bl	8009a58 <ld_word>
 800b298:	4603      	mov	r3, r0
 800b29a:	461a      	mov	r2, r3
 800b29c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d127      	bne.n	800b2f4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a6:	3330      	adds	r3, #48	; 0x30
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe fbed 	bl	8009a88 <ld_dword>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	4a1b      	ldr	r2, [pc, #108]	; (800b320 <find_volume+0x48c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d11e      	bne.n	800b2f4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	3330      	adds	r3, #48	; 0x30
 800b2ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fe fbe2 	bl	8009a88 <ld_dword>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	4a17      	ldr	r2, [pc, #92]	; (800b324 <find_volume+0x490>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d113      	bne.n	800b2f4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	3330      	adds	r3, #48	; 0x30
 800b2d0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe fbd7 	bl	8009a88 <ld_dword>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	3330      	adds	r3, #48	; 0x30
 800b2e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fbcd 	bl	8009a88 <ld_dword>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b2fa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <find_volume+0x494>)
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	3301      	adds	r3, #1
 800b302:	b29a      	uxth	r2, r3
 800b304:	4b08      	ldr	r3, [pc, #32]	; (800b328 <find_volume+0x494>)
 800b306:	801a      	strh	r2, [r3, #0]
 800b308:	4b07      	ldr	r3, [pc, #28]	; (800b328 <find_volume+0x494>)
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b312:	f7fe fde9 	bl	8009ee8 <clear_lock>
#endif
	return FR_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3758      	adds	r7, #88	; 0x58
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	41615252 	.word	0x41615252
 800b324:	61417272 	.word	0x61417272
 800b328:	2403e98c 	.word	0x2403e98c

0800b32c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b336:	2309      	movs	r3, #9
 800b338:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01c      	beq.n	800b37a <validate+0x4e>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d018      	beq.n	800b37a <validate+0x4e>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d013      	beq.n	800b37a <validate+0x4e>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	889a      	ldrh	r2, [r3, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	88db      	ldrh	r3, [r3, #6]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d10c      	bne.n	800b37a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	785b      	ldrb	r3, [r3, #1]
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe fad8 	bl	800991c <disk_status>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <validate+0x4e>
			res = FR_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <validate+0x5a>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	e000      	b.n	800b388 <validate+0x5c>
 800b386:	2300      	movs	r3, #0
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	6013      	str	r3, [r2, #0]
	return res;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b3aa:	f107 0310 	add.w	r3, r7, #16
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fcd5 	bl	800ad5e <get_ldnumber>
 800b3b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	da01      	bge.n	800b3c0 <f_mount+0x28>
 800b3bc:	230b      	movs	r3, #11
 800b3be:	e02b      	b.n	800b418 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b3c0:	4a17      	ldr	r2, [pc, #92]	; (800b420 <f_mount+0x88>)
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d005      	beq.n	800b3dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3d0:	69b8      	ldr	r0, [r7, #24]
 800b3d2:	f7fe fd89 	bl	8009ee8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	490d      	ldr	r1, [pc, #52]	; (800b420 <f_mount+0x88>)
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <f_mount+0x66>
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d001      	beq.n	800b402 <f_mount+0x6a>
 800b3fe:	2300      	movs	r3, #0
 800b400:	e00a      	b.n	800b418 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b402:	f107 010c 	add.w	r1, r7, #12
 800b406:	f107 0308 	add.w	r3, r7, #8
 800b40a:	2200      	movs	r2, #0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff fd41 	bl	800ae94 <find_volume>
 800b412:	4603      	mov	r3, r0
 800b414:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b416:	7dfb      	ldrb	r3, [r7, #23]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3720      	adds	r7, #32
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2403e988 	.word	0x2403e988

0800b424 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b098      	sub	sp, #96	; 0x60
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	4613      	mov	r3, r2
 800b430:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <f_open+0x18>
 800b438:	2309      	movs	r3, #9
 800b43a:	e1ad      	b.n	800b798 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b442:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b444:	79fa      	ldrb	r2, [r7, #7]
 800b446:	f107 0110 	add.w	r1, r7, #16
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fd20 	bl	800ae94 <find_volume>
 800b454:	4603      	mov	r3, r0
 800b456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b45a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f040 8191 	bne.w	800b786 <f_open+0x362>
		dj.obj.fs = fs;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	f107 0314 	add.w	r3, r7, #20
 800b46e:	4611      	mov	r1, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f7ff fc03 	bl	800ac7c <follow_path>
 800b476:	4603      	mov	r3, r0
 800b478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b47c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b480:	2b00      	cmp	r3, #0
 800b482:	d11a      	bne.n	800b4ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b484:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b488:	b25b      	sxtb	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	da03      	bge.n	800b496 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b48e:	2306      	movs	r3, #6
 800b490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b494:	e011      	b.n	800b4ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	f023 0301 	bic.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	bf14      	ite	ne
 800b4a0:	2301      	movne	r3, #1
 800b4a2:	2300      	moveq	r3, #0
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f107 0314 	add.w	r3, r7, #20
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe fbd2 	bl	8009c58 <chk_lock>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
 800b4bc:	f003 031c 	and.w	r3, r3, #28
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d07f      	beq.n	800b5c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d017      	beq.n	800b4fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4d0:	2b04      	cmp	r3, #4
 800b4d2:	d10e      	bne.n	800b4f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4d4:	f7fe fc1c 	bl	8009d10 <enq_lock>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d006      	beq.n	800b4ec <f_open+0xc8>
 800b4de:	f107 0314 	add.w	r3, r7, #20
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fb03 	bl	800aaee <dir_register>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	e000      	b.n	800b4ee <f_open+0xca>
 800b4ec:	2312      	movs	r3, #18
 800b4ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	f043 0308 	orr.w	r3, r3, #8
 800b4f8:	71fb      	strb	r3, [r7, #7]
 800b4fa:	e010      	b.n	800b51e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4fc:	7ebb      	ldrb	r3, [r7, #26]
 800b4fe:	f003 0311 	and.w	r3, r3, #17
 800b502:	2b00      	cmp	r3, #0
 800b504:	d003      	beq.n	800b50e <f_open+0xea>
					res = FR_DENIED;
 800b506:	2307      	movs	r3, #7
 800b508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b50c:	e007      	b.n	800b51e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <f_open+0xfa>
 800b518:	2308      	movs	r3, #8
 800b51a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b51e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b522:	2b00      	cmp	r3, #0
 800b524:	d168      	bne.n	800b5f8 <f_open+0x1d4>
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	f003 0308 	and.w	r3, r3, #8
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d063      	beq.n	800b5f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b530:	f7fe f83e 	bl	80095b0 <get_fattime>
 800b534:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b538:	330e      	adds	r3, #14
 800b53a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fae1 	bl	8009b04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b544:	3316      	adds	r3, #22
 800b546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe fadb 	bl	8009b04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	330b      	adds	r3, #11
 800b552:	2220      	movs	r2, #32
 800b554:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b55a:	4611      	mov	r1, r2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff fa32 	bl	800a9c6 <ld_clust>
 800b562:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b568:	2200      	movs	r2, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff fa4a 	bl	800aa04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b572:	331c      	adds	r3, #28
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fac4 	bl	8009b04 <st_dword>
					fs->wflag = 1;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2201      	movs	r2, #1
 800b580:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d037      	beq.n	800b5f8 <f_open+0x1d4>
						dw = fs->winsect;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b58e:	f107 0314 	add.w	r3, r7, #20
 800b592:	2200      	movs	r2, #0
 800b594:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe ff5d 	bl	800a456 <remove_chain>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b5a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d126      	bne.n	800b5f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe fd02 	bl	8009fb8 <move_window>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5be:	3a01      	subs	r2, #1
 800b5c0:	60da      	str	r2, [r3, #12]
 800b5c2:	e019      	b.n	800b5f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d115      	bne.n	800b5f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5cc:	7ebb      	ldrb	r3, [r7, #26]
 800b5ce:	f003 0310 	and.w	r3, r3, #16
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5d6:	2304      	movs	r3, #4
 800b5d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5dc:	e00c      	b.n	800b5f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	f003 0302 	and.w	r3, r3, #2
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d007      	beq.n	800b5f8 <f_open+0x1d4>
 800b5e8:	7ebb      	ldrb	r3, [r7, #26]
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <f_open+0x1d4>
						res = FR_DENIED;
 800b5f2:	2307      	movs	r3, #7
 800b5f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d128      	bne.n	800b652 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	f003 0308 	and.w	r3, r3, #8
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b610:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b61a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	f023 0301 	bic.w	r3, r3, #1
 800b626:	2b00      	cmp	r3, #0
 800b628:	bf14      	ite	ne
 800b62a:	2301      	movne	r3, #1
 800b62c:	2300      	moveq	r3, #0
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	461a      	mov	r2, r3
 800b632:	f107 0314 	add.w	r3, r7, #20
 800b636:	4611      	mov	r1, r2
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fe fb8b 	bl	8009d54 <inc_lock>
 800b63e:	4602      	mov	r2, r0
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <f_open+0x22e>
 800b64c:	2302      	movs	r3, #2
 800b64e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b656:	2b00      	cmp	r3, #0
 800b658:	f040 8095 	bne.w	800b786 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff f9af 	bl	800a9c6 <ld_clust>
 800b668:	4602      	mov	r2, r0
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b670:	331c      	adds	r3, #28
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fa08 	bl	8009a88 <ld_dword>
 800b678:	4602      	mov	r2, r0
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	88da      	ldrh	r2, [r3, #6]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	79fa      	ldrb	r2, [r7, #7]
 800b696:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3330      	adds	r3, #48	; 0x30
 800b6ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fa72 	bl	8009b9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6ba:	79fb      	ldrb	r3, [r7, #7]
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d060      	beq.n	800b786 <f_open+0x362>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d05c      	beq.n	800b786 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68da      	ldr	r2, [r3, #12]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	895b      	ldrh	r3, [r3, #10]
 800b6d8:	025b      	lsls	r3, r3, #9
 800b6da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b6e8:	e016      	b.n	800b718 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fd1d 	bl	800a12e <get_fat>
 800b6f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b6f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d802      	bhi.n	800b702 <f_open+0x2de>
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b708:	d102      	bne.n	800b710 <f_open+0x2ec>
 800b70a:	2301      	movs	r3, #1
 800b70c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b710:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	657b      	str	r3, [r7, #84]	; 0x54
 800b718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d103      	bne.n	800b728 <f_open+0x304>
 800b720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b724:	429a      	cmp	r2, r3
 800b726:	d8e0      	bhi.n	800b6ea <f_open+0x2c6>
				}
				fp->clust = clst;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b72c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b72e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b732:	2b00      	cmp	r3, #0
 800b734:	d127      	bne.n	800b786 <f_open+0x362>
 800b736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d022      	beq.n	800b786 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fcd3 	bl	800a0f0 <clust2sect>
 800b74a:	6478      	str	r0, [r7, #68]	; 0x44
 800b74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d103      	bne.n	800b75a <f_open+0x336>
						res = FR_INT_ERR;
 800b752:	2302      	movs	r3, #2
 800b754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b758:	e015      	b.n	800b786 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b75a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b75c:	0a5a      	lsrs	r2, r3, #9
 800b75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b760:	441a      	add	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	7858      	ldrb	r0, [r3, #1]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6a1a      	ldr	r2, [r3, #32]
 800b774:	2301      	movs	r3, #1
 800b776:	f7fe f911 	bl	800999c <disk_read>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <f_open+0x362>
 800b780:	2301      	movs	r3, #1
 800b782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <f_open+0x370>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3760      	adds	r7, #96	; 0x60
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08c      	sub	sp, #48	; 0x30
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f107 0210 	add.w	r2, r7, #16
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff fdb3 	bl	800b32c <validate>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d107      	bne.n	800b7e4 <f_write+0x44>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	7d5b      	ldrb	r3, [r3, #21]
 800b7d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <f_write+0x4a>
 800b7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e8:	e14b      	b.n	800ba82 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	7d1b      	ldrb	r3, [r3, #20]
 800b7ee:	f003 0302 	and.w	r3, r3, #2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <f_write+0x5a>
 800b7f6:	2307      	movs	r3, #7
 800b7f8:	e143      	b.n	800ba82 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699a      	ldr	r2, [r3, #24]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	441a      	add	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	429a      	cmp	r2, r3
 800b808:	f080 812d 	bcs.w	800ba66 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	43db      	mvns	r3, r3
 800b812:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b814:	e127      	b.n	800ba66 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f040 80e3 	bne.w	800b9ea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	0a5b      	lsrs	r3, r3, #9
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	8952      	ldrh	r2, [r2, #10]
 800b82e:	3a01      	subs	r2, #1
 800b830:	4013      	ands	r3, r2
 800b832:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d143      	bne.n	800b8c2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10c      	bne.n	800b85c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d11a      	bne.n	800b884 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2100      	movs	r1, #0
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fe64 	bl	800a520 <create_chain>
 800b858:	62b8      	str	r0, [r7, #40]	; 0x28
 800b85a:	e013      	b.n	800b884 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	2b00      	cmp	r3, #0
 800b862:	d007      	beq.n	800b874 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	4619      	mov	r1, r3
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7fe fef0 	bl	800a650 <clmt_clust>
 800b870:	62b8      	str	r0, [r7, #40]	; 0x28
 800b872:	e007      	b.n	800b884 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	4619      	mov	r1, r3
 800b87c:	4610      	mov	r0, r2
 800b87e:	f7fe fe4f 	bl	800a520 <create_chain>
 800b882:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80f2 	beq.w	800ba70 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d104      	bne.n	800b89c <f_write+0xfc>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2202      	movs	r2, #2
 800b896:	755a      	strb	r2, [r3, #21]
 800b898:	2302      	movs	r3, #2
 800b89a:	e0f2      	b.n	800ba82 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a2:	d104      	bne.n	800b8ae <f_write+0x10e>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	755a      	strb	r2, [r3, #21]
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e0e9      	b.n	800ba82 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <f_write+0x122>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	7d1b      	ldrb	r3, [r3, #20]
 800b8c6:	b25b      	sxtb	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	da18      	bge.n	800b8fe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	7858      	ldrb	r0, [r3, #1]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a1a      	ldr	r2, [r3, #32]
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f7fe f87e 	bl	80099dc <disk_write>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d004      	beq.n	800b8f0 <f_write+0x150>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	755a      	strb	r2, [r3, #21]
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e0c8      	b.n	800ba82 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	7d1b      	ldrb	r3, [r3, #20]
 800b8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8fe:	693a      	ldr	r2, [r7, #16]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	4619      	mov	r1, r3
 800b906:	4610      	mov	r0, r2
 800b908:	f7fe fbf2 	bl	800a0f0 <clust2sect>
 800b90c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d104      	bne.n	800b91e <f_write+0x17e>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2202      	movs	r2, #2
 800b918:	755a      	strb	r2, [r3, #21]
 800b91a:	2302      	movs	r3, #2
 800b91c:	e0b1      	b.n	800ba82 <f_write+0x2e2>
			sect += csect;
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	4413      	add	r3, r2
 800b924:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	0a5b      	lsrs	r3, r3, #9
 800b92a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d03c      	beq.n	800b9ac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	4413      	add	r3, r2
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	8952      	ldrh	r2, [r2, #10]
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d905      	bls.n	800b94c <f_write+0x1ac>
					cc = fs->csize - csect;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	895b      	ldrh	r3, [r3, #10]
 800b944:	461a      	mov	r2, r3
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	7858      	ldrb	r0, [r3, #1]
 800b950:	6a3b      	ldr	r3, [r7, #32]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	69f9      	ldr	r1, [r7, #28]
 800b956:	f7fe f841 	bl	80099dc <disk_write>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <f_write+0x1ca>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2201      	movs	r2, #1
 800b964:	755a      	strb	r2, [r3, #21]
 800b966:	2301      	movs	r3, #1
 800b968:	e08b      	b.n	800ba82 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a1a      	ldr	r2, [r3, #32]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	6a3a      	ldr	r2, [r7, #32]
 800b974:	429a      	cmp	r2, r3
 800b976:	d915      	bls.n	800b9a4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a1a      	ldr	r2, [r3, #32]
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	025b      	lsls	r3, r3, #9
 800b988:	69fa      	ldr	r2, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b990:	4619      	mov	r1, r3
 800b992:	f7fe f8e3 	bl	8009b5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	7d1b      	ldrb	r3, [r3, #20]
 800b99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	025b      	lsls	r3, r3, #9
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b9aa:	e03f      	b.n	800ba2c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6a1b      	ldr	r3, [r3, #32]
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d016      	beq.n	800b9e4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	699a      	ldr	r2, [r3, #24]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d210      	bcs.n	800b9e4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	7858      	ldrb	r0, [r3, #1]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	f7fd ffe4 	bl	800999c <disk_read>
 800b9d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d004      	beq.n	800b9e4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	755a      	strb	r2, [r3, #21]
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e04e      	b.n	800ba82 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b9f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d901      	bls.n	800ba04 <f_write+0x264>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	4413      	add	r3, r2
 800ba14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba16:	69f9      	ldr	r1, [r7, #28]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe f89f 	bl	8009b5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	7d1b      	ldrb	r3, [r3, #20]
 800ba22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba2c:	69fa      	ldr	r2, [r7, #28]
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	4413      	add	r3, r2
 800ba32:	61fb      	str	r3, [r7, #28]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	699a      	ldr	r2, [r3, #24]
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	441a      	add	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	619a      	str	r2, [r3, #24]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	bf38      	it	cc
 800ba4c:	461a      	movcc	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	60da      	str	r2, [r3, #12]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	441a      	add	r2, r3
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f47f aed4 	bne.w	800b816 <f_write+0x76>
 800ba6e:	e000      	b.n	800ba72 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	7d1b      	ldrb	r3, [r3, #20]
 800ba76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3730      	adds	r7, #48	; 0x30
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f107 0208 	add.w	r2, r7, #8
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff fc46 	bl	800b32c <validate>
 800baa0:	4603      	mov	r3, r0
 800baa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d168      	bne.n	800bb7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	7d1b      	ldrb	r3, [r3, #20]
 800baae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d062      	beq.n	800bb7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	7d1b      	ldrb	r3, [r3, #20]
 800baba:	b25b      	sxtb	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	da15      	bge.n	800baec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	7858      	ldrb	r0, [r3, #1]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1a      	ldr	r2, [r3, #32]
 800bace:	2301      	movs	r3, #1
 800bad0:	f7fd ff84 	bl	80099dc <disk_write>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <f_sync+0x54>
 800bada:	2301      	movs	r3, #1
 800badc:	e04f      	b.n	800bb7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7d1b      	ldrb	r3, [r3, #20]
 800bae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800baec:	f7fd fd60 	bl	80095b0 <get_fattime>
 800baf0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f7fe fa5c 	bl	8009fb8 <move_window>
 800bb00:	4603      	mov	r3, r0
 800bb02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d138      	bne.n	800bb7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	330b      	adds	r3, #11
 800bb14:	781a      	ldrb	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	330b      	adds	r3, #11
 800bb1a:	f042 0220 	orr.w	r2, r2, #32
 800bb1e:	b2d2      	uxtb	r2, r2
 800bb20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	68f9      	ldr	r1, [r7, #12]
 800bb2e:	f7fe ff69 	bl	800aa04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f103 021c 	add.w	r2, r3, #28
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4610      	mov	r0, r2
 800bb40:	f7fd ffe0 	bl	8009b04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	3316      	adds	r3, #22
 800bb48:	6939      	ldr	r1, [r7, #16]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fd ffda 	bl	8009b04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	3312      	adds	r3, #18
 800bb54:	2100      	movs	r1, #0
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fd ffb9 	bl	8009ace <st_word>
					fs->wflag = 1;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fa55 	bl	800a014 <sync_fs>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7d1b      	ldrb	r3, [r3, #20]
 800bb72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff ff7b 	bl	800ba8a <f_sync>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d118      	bne.n	800bbd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f107 0208 	add.w	r2, r7, #8
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fbc0 	bl	800b32c <validate>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10c      	bne.n	800bbd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe f958 	bl	8009e70 <dec_lock>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bbdc:	b590      	push	{r4, r7, lr}
 800bbde:	b09d      	sub	sp, #116	; 0x74
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	607a      	str	r2, [r7, #4]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bbec:	2301      	movs	r3, #1
 800bbee:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bbf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbf4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bbf6:	f107 030c 	add.w	r3, r7, #12
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff f8af 	bl	800ad5e <get_ldnumber>
 800bc00:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	da02      	bge.n	800bc0e <f_mkfs+0x32>
 800bc08:	230b      	movs	r3, #11
 800bc0a:	f000 bc0d 	b.w	800c428 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bc0e:	4a94      	ldr	r2, [pc, #592]	; (800be60 <f_mkfs+0x284>)
 800bc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <f_mkfs+0x4a>
 800bc1a:	4a91      	ldr	r2, [pc, #580]	; (800be60 <f_mkfs+0x284>)
 800bc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bc32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd fe8a 	bl	8009950 <disk_initialize>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bc42:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <f_mkfs+0x76>
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e3ea      	b.n	800c428 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bc52:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <f_mkfs+0x86>
 800bc5e:	230a      	movs	r3, #10
 800bc60:	e3e2      	b.n	800c428 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bc62:	f107 0214 	add.w	r2, r7, #20
 800bc66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc6a:	2103      	movs	r1, #3
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fd fed5 	bl	8009a1c <disk_ioctl>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10c      	bne.n	800bc92 <f_mkfs+0xb6>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d009      	beq.n	800bc92 <f_mkfs+0xb6>
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc84:	d805      	bhi.n	800bc92 <f_mkfs+0xb6>
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	1e5a      	subs	r2, r3, #1
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <f_mkfs+0xba>
 800bc92:	2301      	movs	r3, #1
 800bc94:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bc96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc9a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <f_mkfs+0xce>
 800bca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d309      	bcc.n	800bcbe <f_mkfs+0xe2>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcb0:	d805      	bhi.n	800bcbe <f_mkfs+0xe2>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	1e5a      	subs	r2, r3, #1
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4013      	ands	r3, r2
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <f_mkfs+0xe6>
 800bcbe:	2313      	movs	r3, #19
 800bcc0:	e3b2      	b.n	800c428 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bcc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcca:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bcd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcda:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bcdc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	fb02 f303 	mul.w	r3, r2, r3
 800bce4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <f_mkfs+0x114>
 800bcec:	230e      	movs	r3, #14
 800bcee:	e39b      	b.n	800c428 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bcf0:	f107 0210 	add.w	r2, r7, #16
 800bcf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fd fe8e 	bl	8009a1c <disk_ioctl>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <f_mkfs+0x12e>
 800bd06:	2301      	movs	r3, #1
 800bd08:	e38e      	b.n	800c428 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bd0a:	7afb      	ldrb	r3, [r7, #11]
 800bd0c:	f003 0308 	and.w	r3, r3, #8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <f_mkfs+0x13c>
 800bd14:	2300      	movs	r3, #0
 800bd16:	e000      	b.n	800bd1a <f_mkfs+0x13e>
 800bd18:	233f      	movs	r3, #63	; 0x3f
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d901      	bls.n	800bd28 <f_mkfs+0x14c>
 800bd24:	230e      	movs	r3, #14
 800bd26:	e37f      	b.n	800c428 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b7f      	cmp	r3, #127	; 0x7f
 800bd34:	d801      	bhi.n	800bd3a <f_mkfs+0x15e>
 800bd36:	230e      	movs	r3, #14
 800bd38:	e376      	b.n	800c428 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b80      	cmp	r3, #128	; 0x80
 800bd3e:	d901      	bls.n	800bd44 <f_mkfs+0x168>
 800bd40:	2313      	movs	r3, #19
 800bd42:	e371      	b.n	800c428 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bd44:	7afb      	ldrb	r3, [r7, #11]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00d      	beq.n	800bd6a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bd4e:	7afb      	ldrb	r3, [r7, #11]
 800bd50:	f003 0307 	and.w	r3, r3, #7
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d004      	beq.n	800bd62 <f_mkfs+0x186>
 800bd58:	7afb      	ldrb	r3, [r7, #11]
 800bd5a:	f003 0301 	and.w	r3, r3, #1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d103      	bne.n	800bd6a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bd62:	2303      	movs	r3, #3
 800bd64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bd68:	e009      	b.n	800bd7e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bd6a:	7afb      	ldrb	r3, [r7, #11]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <f_mkfs+0x19c>
 800bd74:	2313      	movs	r3, #19
 800bd76:	e357      	b.n	800c428 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bd78:	2302      	movs	r3, #2
 800bd7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bd82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d13c      	bne.n	800be04 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d11b      	bne.n	800bdc8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	0c5b      	lsrs	r3, r3, #17
 800bd94:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bd96:	2300      	movs	r3, #0
 800bd98:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd9e:	e005      	b.n	800bdac <f_mkfs+0x1d0>
 800bda0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda2:	3301      	adds	r3, #1
 800bda4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	653b      	str	r3, [r7, #80]	; 0x50
 800bdac:	4a2d      	ldr	r2, [pc, #180]	; (800be64 <f_mkfs+0x288>)
 800bdae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d007      	beq.n	800bdc8 <f_mkfs+0x1ec>
 800bdb8:	4a2a      	ldr	r2, [pc, #168]	; (800be64 <f_mkfs+0x288>)
 800bdba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d2eb      	bcs.n	800bda0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	3302      	adds	r3, #2
 800bdd6:	009a      	lsls	r2, r3, #2
 800bdd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdda:	4413      	add	r3, r2
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bde0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bde6:	2320      	movs	r3, #32
 800bde8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bdea:	2300      	movs	r3, #0
 800bdec:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d903      	bls.n	800be00 <f_mkfs+0x224>
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	4a1b      	ldr	r2, [pc, #108]	; (800be68 <f_mkfs+0x28c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d952      	bls.n	800bea6 <f_mkfs+0x2ca>
 800be00:	230e      	movs	r3, #14
 800be02:	e311      	b.n	800c428 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800be04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be06:	2b00      	cmp	r3, #0
 800be08:	d11b      	bne.n	800be42 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	0b1b      	lsrs	r3, r3, #12
 800be0e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800be10:	2300      	movs	r3, #0
 800be12:	64bb      	str	r3, [r7, #72]	; 0x48
 800be14:	2301      	movs	r3, #1
 800be16:	653b      	str	r3, [r7, #80]	; 0x50
 800be18:	e005      	b.n	800be26 <f_mkfs+0x24a>
 800be1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be1c:	3301      	adds	r3, #1
 800be1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800be20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	653b      	str	r3, [r7, #80]	; 0x50
 800be26:	4a11      	ldr	r2, [pc, #68]	; (800be6c <f_mkfs+0x290>)
 800be28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d007      	beq.n	800be42 <f_mkfs+0x266>
 800be32:	4a0e      	ldr	r2, [pc, #56]	; (800be6c <f_mkfs+0x290>)
 800be34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be3a:	461a      	mov	r2, r3
 800be3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be3e:	4293      	cmp	r3, r2
 800be40:	d2eb      	bcs.n	800be1a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be46:	fbb2 f3f3 	udiv	r3, r2, r3
 800be4a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be52:	4293      	cmp	r3, r2
 800be54:	d90c      	bls.n	800be70 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	3302      	adds	r3, #2
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be5e:	e012      	b.n	800be86 <f_mkfs+0x2aa>
 800be60:	2403e988 	.word	0x2403e988
 800be64:	0800cf0c 	.word	0x0800cf0c
 800be68:	0ffffff5 	.word	0x0ffffff5
 800be6c:	0800cf1c 	.word	0x0800cf1c
				} else {
					fmt = FS_FAT12;
 800be70:	2301      	movs	r3, #1
 800be72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800be76:	6a3a      	ldr	r2, [r7, #32]
 800be78:	4613      	mov	r3, r2
 800be7a:	005b      	lsls	r3, r3, #1
 800be7c:	4413      	add	r3, r2
 800be7e:	3301      	adds	r3, #1
 800be80:	085b      	lsrs	r3, r3, #1
 800be82:	3303      	adds	r3, #3
 800be84:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800be86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8a:	4413      	add	r3, r2
 800be8c:	1e5a      	subs	r2, r3, #1
 800be8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be90:	fbb2 f3f3 	udiv	r3, r2, r3
 800be94:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800be96:	2301      	movs	r3, #1
 800be98:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800be9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bea0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800bea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beaa:	4413      	add	r3, r2
 800beac:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800beae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb2:	fb02 f203 	mul.w	r2, r2, r3
 800beb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800beb8:	4413      	add	r3, r2
 800beba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bebc:	4413      	add	r3, r2
 800bebe:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	4413      	add	r3, r2
 800bec6:	1e5a      	subs	r2, r3, #1
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	425b      	negs	r3, r3
 800becc:	401a      	ands	r2, r3
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bed4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d108      	bne.n	800beee <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800bedc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bee0:	4413      	add	r3, r2
 800bee2:	657b      	str	r3, [r7, #84]	; 0x54
 800bee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bee8:	4413      	add	r3, r2
 800beea:	65bb      	str	r3, [r7, #88]	; 0x58
 800beec:	e006      	b.n	800befc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800beee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bef6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bef8:	4413      	add	r3, r2
 800befa:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800befc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800befe:	011a      	lsls	r2, r3, #4
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	441a      	add	r2, r3
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d901      	bls.n	800bf12 <f_mkfs+0x336>
 800bf0e:	230e      	movs	r3, #14
 800bf10:	e28a      	b.n	800c428 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bf12:	693a      	ldr	r2, [r7, #16]
 800bf14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf1c:	fb01 f303 	mul.w	r3, r1, r3
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf24:	1ad2      	subs	r2, r2, r3
 800bf26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf28:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bf2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d10f      	bne.n	800bf56 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d80a      	bhi.n	800bf56 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <f_mkfs+0x376>
 800bf46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf48:	085b      	lsrs	r3, r3, #1
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d144      	bne.n	800bfdc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800bf52:	230e      	movs	r3, #14
 800bf54:	e268      	b.n	800c428 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bf56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d133      	bne.n	800bfc6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d91e      	bls.n	800bfa6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d107      	bne.n	800bf7e <f_mkfs+0x3a2>
 800bf6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	2b40      	cmp	r3, #64	; 0x40
 800bf74:	d803      	bhi.n	800bf7e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	607b      	str	r3, [r7, #4]
 800bf7c:	e033      	b.n	800bfe6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bf7e:	7afb      	ldrb	r3, [r7, #11]
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bf88:	2303      	movs	r3, #3
 800bf8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf8e:	e02a      	b.n	800bfe6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <f_mkfs+0x3c6>
 800bf96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b80      	cmp	r3, #128	; 0x80
 800bfa0:	d91e      	bls.n	800bfe0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bfa2:	230e      	movs	r3, #14
 800bfa4:	e240      	b.n	800c428 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d80a      	bhi.n	800bfc6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d105      	bne.n	800bfc2 <f_mkfs+0x3e6>
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	607b      	str	r3, [r7, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b80      	cmp	r3, #128	; 0x80
 800bfc0:	d910      	bls.n	800bfe4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bfc2:	230e      	movs	r3, #14
 800bfc4:	e230      	b.n	800c428 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bfc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d10c      	bne.n	800bfe8 <f_mkfs+0x40c>
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d907      	bls.n	800bfe8 <f_mkfs+0x40c>
 800bfd8:	230e      	movs	r3, #14
 800bfda:	e225      	b.n	800c428 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bfdc:	bf00      	nop
 800bfde:	e6ce      	b.n	800bd7e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfe0:	bf00      	nop
 800bfe2:	e6cc      	b.n	800bd7e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfe4:	bf00      	nop
			pau = au;
 800bfe6:	e6ca      	b.n	800bd7e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bfe8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bfea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfec:	461a      	mov	r2, r3
 800bfee:	2100      	movs	r1, #0
 800bff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff2:	f7fd fdd4 	bl	8009b9e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bff6:	220b      	movs	r2, #11
 800bff8:	49bc      	ldr	r1, [pc, #752]	; (800c2ec <f_mkfs+0x710>)
 800bffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bffc:	f7fd fdae 	bl	8009b5c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	330b      	adds	r3, #11
 800c004:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fd fd60 	bl	8009ace <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	330d      	adds	r3, #13
 800c012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	330e      	adds	r3, #14
 800c01c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c01e:	b292      	uxth	r2, r2
 800c020:	4611      	mov	r1, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f7fd fd53 	bl	8009ace <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	3310      	adds	r3, #16
 800c02c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c02e:	b2d2      	uxtb	r2, r2
 800c030:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	f103 0211 	add.w	r2, r3, #17
 800c038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d002      	beq.n	800c046 <f_mkfs+0x46a>
 800c040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c042:	b29b      	uxth	r3, r3
 800c044:	e000      	b.n	800c048 <f_mkfs+0x46c>
 800c046:	2300      	movs	r3, #0
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7fd fd3f 	bl	8009ace <st_word>
		if (sz_vol < 0x10000) {
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c056:	d208      	bcs.n	800c06a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	3313      	adds	r3, #19
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	b292      	uxth	r2, r2
 800c060:	4611      	mov	r1, r2
 800c062:	4618      	mov	r0, r3
 800c064:	f7fd fd33 	bl	8009ace <st_word>
 800c068:	e006      	b.n	800c078 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	3320      	adds	r3, #32
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	4611      	mov	r1, r2
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd fd46 	bl	8009b04 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	3315      	adds	r3, #21
 800c07c:	22f8      	movs	r2, #248	; 0xf8
 800c07e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	3318      	adds	r3, #24
 800c084:	213f      	movs	r1, #63	; 0x3f
 800c086:	4618      	mov	r0, r3
 800c088:	f7fd fd21 	bl	8009ace <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	331a      	adds	r3, #26
 800c090:	21ff      	movs	r1, #255	; 0xff
 800c092:	4618      	mov	r0, r3
 800c094:	f7fd fd1b 	bl	8009ace <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	331c      	adds	r3, #28
 800c09c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fd fd30 	bl	8009b04 <st_dword>
		if (fmt == FS_FAT32) {
 800c0a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	d131      	bne.n	800c110 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c0b2:	f7fd fa7d 	bl	80095b0 <get_fattime>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f7fd fd22 	bl	8009b04 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	3324      	adds	r3, #36	; 0x24
 800c0c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fd fd1c 	bl	8009b04 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	332c      	adds	r3, #44	; 0x2c
 800c0d0:	2102      	movs	r1, #2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd fd16 	bl	8009b04 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	3330      	adds	r3, #48	; 0x30
 800c0dc:	2101      	movs	r1, #1
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fd fcf5 	bl	8009ace <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	3332      	adds	r3, #50	; 0x32
 800c0e8:	2106      	movs	r1, #6
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd fcef 	bl	8009ace <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	3340      	adds	r3, #64	; 0x40
 800c0f4:	2280      	movs	r2, #128	; 0x80
 800c0f6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	3342      	adds	r3, #66	; 0x42
 800c0fc:	2229      	movs	r2, #41	; 0x29
 800c0fe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	3347      	adds	r3, #71	; 0x47
 800c104:	2213      	movs	r2, #19
 800c106:	497a      	ldr	r1, [pc, #488]	; (800c2f0 <f_mkfs+0x714>)
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fd fd27 	bl	8009b5c <mem_cpy>
 800c10e:	e020      	b.n	800c152 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c116:	f7fd fa4b 	bl	80095b0 <get_fattime>
 800c11a:	4603      	mov	r3, r0
 800c11c:	4619      	mov	r1, r3
 800c11e:	4620      	mov	r0, r4
 800c120:	f7fd fcf0 	bl	8009b04 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	3316      	adds	r3, #22
 800c128:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c12a:	b292      	uxth	r2, r2
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fd fccd 	bl	8009ace <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	3324      	adds	r3, #36	; 0x24
 800c138:	2280      	movs	r2, #128	; 0x80
 800c13a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	3326      	adds	r3, #38	; 0x26
 800c140:	2229      	movs	r2, #41	; 0x29
 800c142:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	332b      	adds	r3, #43	; 0x2b
 800c148:	2213      	movs	r2, #19
 800c14a:	496a      	ldr	r1, [pc, #424]	; (800c2f4 <f_mkfs+0x718>)
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fd fd05 	bl	8009b5c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c158:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd fcb6 	bl	8009ace <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c162:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c166:	2301      	movs	r3, #1
 800c168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c16c:	f7fd fc36 	bl	80099dc <disk_write>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <f_mkfs+0x59e>
 800c176:	2301      	movs	r3, #1
 800c178:	e156      	b.n	800c428 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c17a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d140      	bne.n	800c204 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	1d9a      	adds	r2, r3, #6
 800c186:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c18a:	2301      	movs	r3, #1
 800c18c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c18e:	f7fd fc25 	bl	80099dc <disk_write>
			mem_set(buf, 0, ss);
 800c192:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c194:	461a      	mov	r2, r3
 800c196:	2100      	movs	r1, #0
 800c198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c19a:	f7fd fd00 	bl	8009b9e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c19e:	4956      	ldr	r1, [pc, #344]	; (800c2f8 <f_mkfs+0x71c>)
 800c1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1a2:	f7fd fcaf 	bl	8009b04 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1ac:	4953      	ldr	r1, [pc, #332]	; (800c2fc <f_mkfs+0x720>)
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fd fca8 	bl	8009b04 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	f7fd fc9f 	bl	8009b04 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1cc:	2102      	movs	r1, #2
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fd fc98 	bl	8009b04 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fd fc75 	bl	8009ace <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e6:	1dda      	adds	r2, r3, #7
 800c1e8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1f0:	f7fd fbf4 	bl	80099dc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	1c5a      	adds	r2, r3, #1
 800c1f8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c200:	f7fd fbec 	bl	80099dc <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c206:	2100      	movs	r1, #0
 800c208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c20a:	f7fd fcc8 	bl	8009b9e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c20e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c210:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c212:	2300      	movs	r3, #0
 800c214:	64bb      	str	r3, [r7, #72]	; 0x48
 800c216:	e04b      	b.n	800c2b0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c218:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d113      	bne.n	800c248 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c220:	f06f 0107 	mvn.w	r1, #7
 800c224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c226:	f7fd fc6d 	bl	8009b04 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	3304      	adds	r3, #4
 800c22e:	f04f 31ff 	mov.w	r1, #4294967295
 800c232:	4618      	mov	r0, r3
 800c234:	f7fd fc66 	bl	8009b04 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	3308      	adds	r3, #8
 800c23c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c240:	4618      	mov	r0, r3
 800c242:	f7fd fc5f 	bl	8009b04 <st_dword>
 800c246:	e00b      	b.n	800c260 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c248:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d101      	bne.n	800c254 <f_mkfs+0x678>
 800c250:	4b2b      	ldr	r3, [pc, #172]	; (800c300 <f_mkfs+0x724>)
 800c252:	e001      	b.n	800c258 <f_mkfs+0x67c>
 800c254:	f06f 0307 	mvn.w	r3, #7
 800c258:	4619      	mov	r1, r3
 800c25a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c25c:	f7fd fc52 	bl	8009b04 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c262:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	4293      	cmp	r3, r2
 800c26a:	bf28      	it	cs
 800c26c:	4613      	movcs	r3, r2
 800c26e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c270:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c276:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c27a:	f7fd fbaf 	bl	80099dc <disk_write>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <f_mkfs+0x6ac>
 800c284:	2301      	movs	r3, #1
 800c286:	e0cf      	b.n	800c428 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c28a:	461a      	mov	r2, r3
 800c28c:	2100      	movs	r1, #0
 800c28e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c290:	f7fd fc85 	bl	8009b9e <mem_set>
				sect += n; nsect -= n;
 800c294:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c298:	4413      	add	r3, r2
 800c29a:	667b      	str	r3, [r7, #100]	; 0x64
 800c29c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c2a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1dc      	bne.n	800c264 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d3af      	bcc.n	800c218 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c2b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2bc:	2b03      	cmp	r3, #3
 800c2be:	d101      	bne.n	800c2c4 <f_mkfs+0x6e8>
 800c2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c2:	e000      	b.n	800c2c6 <f_mkfs+0x6ea>
 800c2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c2c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	bf28      	it	cs
 800c2d0:	4613      	movcs	r3, r2
 800c2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c2d4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2de:	f7fd fb7d 	bl	80099dc <disk_write>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00d      	beq.n	800c304 <f_mkfs+0x728>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e09d      	b.n	800c428 <f_mkfs+0x84c>
 800c2ec:	0800ce0c 	.word	0x0800ce0c
 800c2f0:	0800ce18 	.word	0x0800ce18
 800c2f4:	0800ce2c 	.word	0x0800ce2c
 800c2f8:	41615252 	.word	0x41615252
 800c2fc:	61417272 	.word	0x61417272
 800c300:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c304:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c308:	4413      	add	r3, r2
 800c30a:	667b      	str	r3, [r7, #100]	; 0x64
 800c30c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1d6      	bne.n	800c2c8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c31a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d103      	bne.n	800c32a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c322:	230c      	movs	r3, #12
 800c324:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c328:	e010      	b.n	800c34c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c330:	d303      	bcc.n	800c33a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c332:	2306      	movs	r3, #6
 800c334:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c338:	e008      	b.n	800c34c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c33a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d101      	bne.n	800c346 <f_mkfs+0x76a>
 800c342:	2304      	movs	r3, #4
 800c344:	e000      	b.n	800c348 <f_mkfs+0x76c>
 800c346:	2301      	movs	r3, #1
 800c348:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b00      	cmp	r3, #0
 800c354:	d15b      	bne.n	800c40e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c356:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c358:	461a      	mov	r2, r3
 800c35a:	2100      	movs	r1, #0
 800c35c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c35e:	f7fd fc1e 	bl	8009b9e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c368:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fd fbae 	bl	8009ace <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c378:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	2200      	movs	r2, #0
 800c37e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	3301      	adds	r3, #1
 800c384:	2201      	movs	r2, #1
 800c386:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	3302      	adds	r3, #2
 800c38c:	2201      	movs	r2, #1
 800c38e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	3303      	adds	r3, #3
 800c394:	2200      	movs	r2, #0
 800c396:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	3304      	adds	r3, #4
 800c39c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c3a0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	441a      	add	r2, r3
 800c3a8:	4b21      	ldr	r3, [pc, #132]	; (800c430 <f_mkfs+0x854>)
 800c3aa:	fba3 1302 	umull	r1, r3, r3, r2
 800c3ae:	1ad2      	subs	r2, r2, r3
 800c3b0:	0852      	lsrs	r2, r2, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	0b5b      	lsrs	r3, r3, #13
 800c3b6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	3305      	adds	r3, #5
 800c3bc:	22fe      	movs	r2, #254	; 0xfe
 800c3be:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c3c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3c2:	089b      	lsrs	r3, r3, #2
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	3306      	adds	r3, #6
 800c3ca:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	3307      	adds	r3, #7
 800c3d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3d8:	b2d2      	uxtb	r2, r2
 800c3da:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fd fb8e 	bl	8009b04 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	330c      	adds	r3, #12
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd fb87 	bl	8009b04 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c3f6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c400:	f7fd faec 	bl	80099dc <disk_write>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <f_mkfs+0x832>
 800c40a:	2301      	movs	r3, #1
 800c40c:	e00c      	b.n	800c428 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c40e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c412:	2200      	movs	r2, #0
 800c414:	2100      	movs	r1, #0
 800c416:	4618      	mov	r0, r3
 800c418:	f7fd fb00 	bl	8009a1c <disk_ioctl>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <f_mkfs+0x84a>
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <f_mkfs+0x84c>

	return FR_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3774      	adds	r7, #116	; 0x74
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd90      	pop	{r4, r7, pc}
 800c430:	0515565b 	.word	0x0515565b

0800c434 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c434:	b480      	push	{r7}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	4613      	mov	r3, r2
 800c440:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c442:	2301      	movs	r3, #1
 800c444:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c44a:	4b1f      	ldr	r3, [pc, #124]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c44c:	7a5b      	ldrb	r3, [r3, #9]
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d131      	bne.n	800c4b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c454:	4b1c      	ldr	r3, [pc, #112]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c456:	7a5b      	ldrb	r3, [r3, #9]
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	461a      	mov	r2, r3
 800c45c:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c45e:	2100      	movs	r1, #0
 800c460:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c462:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c464:	7a5b      	ldrb	r3, [r3, #9]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	4a17      	ldr	r2, [pc, #92]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c472:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c474:	7a5b      	ldrb	r3, [r3, #9]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	461a      	mov	r2, r3
 800c47a:	4b13      	ldr	r3, [pc, #76]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c47c:	4413      	add	r3, r2
 800c47e:	79fa      	ldrb	r2, [r7, #7]
 800c480:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c482:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c484:	7a5b      	ldrb	r3, [r3, #9]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	b2d1      	uxtb	r1, r2
 800c48c:	4a0e      	ldr	r2, [pc, #56]	; (800c4c8 <FATFS_LinkDriverEx+0x94>)
 800c48e:	7251      	strb	r1, [r2, #9]
 800c490:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c492:	7dbb      	ldrb	r3, [r7, #22]
 800c494:	3330      	adds	r3, #48	; 0x30
 800c496:	b2da      	uxtb	r2, r3
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	223a      	movs	r2, #58	; 0x3a
 800c4a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	3302      	adds	r3, #2
 800c4a8:	222f      	movs	r2, #47	; 0x2f
 800c4aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	3303      	adds	r3, #3
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	371c      	adds	r7, #28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	2403e9b0 	.word	0x2403e9b0

0800c4cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff ffaa 	bl	800c434 <FATFS_LinkDriverEx>
 800c4e0:	4603      	mov	r3, r0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <__errno>:
 800c4ec:	4b01      	ldr	r3, [pc, #4]	; (800c4f4 <__errno+0x8>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	2400003c 	.word	0x2400003c

0800c4f8 <__libc_init_array>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	4d0d      	ldr	r5, [pc, #52]	; (800c530 <__libc_init_array+0x38>)
 800c4fc:	4c0d      	ldr	r4, [pc, #52]	; (800c534 <__libc_init_array+0x3c>)
 800c4fe:	1b64      	subs	r4, r4, r5
 800c500:	10a4      	asrs	r4, r4, #2
 800c502:	2600      	movs	r6, #0
 800c504:	42a6      	cmp	r6, r4
 800c506:	d109      	bne.n	800c51c <__libc_init_array+0x24>
 800c508:	4d0b      	ldr	r5, [pc, #44]	; (800c538 <__libc_init_array+0x40>)
 800c50a:	4c0c      	ldr	r4, [pc, #48]	; (800c53c <__libc_init_array+0x44>)
 800c50c:	f000 fc4e 	bl	800cdac <_init>
 800c510:	1b64      	subs	r4, r4, r5
 800c512:	10a4      	asrs	r4, r4, #2
 800c514:	2600      	movs	r6, #0
 800c516:	42a6      	cmp	r6, r4
 800c518:	d105      	bne.n	800c526 <__libc_init_array+0x2e>
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c520:	4798      	blx	r3
 800c522:	3601      	adds	r6, #1
 800c524:	e7ee      	b.n	800c504 <__libc_init_array+0xc>
 800c526:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52a:	4798      	blx	r3
 800c52c:	3601      	adds	r6, #1
 800c52e:	e7f2      	b.n	800c516 <__libc_init_array+0x1e>
 800c530:	0800cf68 	.word	0x0800cf68
 800c534:	0800cf68 	.word	0x0800cf68
 800c538:	0800cf68 	.word	0x0800cf68
 800c53c:	0800cf6c 	.word	0x0800cf6c

0800c540 <memset>:
 800c540:	4402      	add	r2, r0
 800c542:	4603      	mov	r3, r0
 800c544:	4293      	cmp	r3, r2
 800c546:	d100      	bne.n	800c54a <memset+0xa>
 800c548:	4770      	bx	lr
 800c54a:	f803 1b01 	strb.w	r1, [r3], #1
 800c54e:	e7f9      	b.n	800c544 <memset+0x4>

0800c550 <siprintf>:
 800c550:	b40e      	push	{r1, r2, r3}
 800c552:	b500      	push	{lr}
 800c554:	b09c      	sub	sp, #112	; 0x70
 800c556:	ab1d      	add	r3, sp, #116	; 0x74
 800c558:	9002      	str	r0, [sp, #8]
 800c55a:	9006      	str	r0, [sp, #24]
 800c55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c560:	4809      	ldr	r0, [pc, #36]	; (800c588 <siprintf+0x38>)
 800c562:	9107      	str	r1, [sp, #28]
 800c564:	9104      	str	r1, [sp, #16]
 800c566:	4909      	ldr	r1, [pc, #36]	; (800c58c <siprintf+0x3c>)
 800c568:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56c:	9105      	str	r1, [sp, #20]
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	a902      	add	r1, sp, #8
 800c574:	f000 f868 	bl	800c648 <_svfiprintf_r>
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	2200      	movs	r2, #0
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	b01c      	add	sp, #112	; 0x70
 800c580:	f85d eb04 	ldr.w	lr, [sp], #4
 800c584:	b003      	add	sp, #12
 800c586:	4770      	bx	lr
 800c588:	2400003c 	.word	0x2400003c
 800c58c:	ffff0208 	.word	0xffff0208

0800c590 <__ssputs_r>:
 800c590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c594:	688e      	ldr	r6, [r1, #8]
 800c596:	429e      	cmp	r6, r3
 800c598:	4682      	mov	sl, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	4690      	mov	r8, r2
 800c59e:	461f      	mov	r7, r3
 800c5a0:	d838      	bhi.n	800c614 <__ssputs_r+0x84>
 800c5a2:	898a      	ldrh	r2, [r1, #12]
 800c5a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5a8:	d032      	beq.n	800c610 <__ssputs_r+0x80>
 800c5aa:	6825      	ldr	r5, [r4, #0]
 800c5ac:	6909      	ldr	r1, [r1, #16]
 800c5ae:	eba5 0901 	sub.w	r9, r5, r1
 800c5b2:	6965      	ldr	r5, [r4, #20]
 800c5b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5bc:	3301      	adds	r3, #1
 800c5be:	444b      	add	r3, r9
 800c5c0:	106d      	asrs	r5, r5, #1
 800c5c2:	429d      	cmp	r5, r3
 800c5c4:	bf38      	it	cc
 800c5c6:	461d      	movcc	r5, r3
 800c5c8:	0553      	lsls	r3, r2, #21
 800c5ca:	d531      	bpl.n	800c630 <__ssputs_r+0xa0>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f000 fb47 	bl	800cc60 <_malloc_r>
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	b950      	cbnz	r0, 800c5ec <__ssputs_r+0x5c>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	f8ca 3000 	str.w	r3, [sl]
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ec:	6921      	ldr	r1, [r4, #16]
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	f000 fabe 	bl	800cb70 <memcpy>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	6126      	str	r6, [r4, #16]
 800c602:	6165      	str	r5, [r4, #20]
 800c604:	444e      	add	r6, r9
 800c606:	eba5 0509 	sub.w	r5, r5, r9
 800c60a:	6026      	str	r6, [r4, #0]
 800c60c:	60a5      	str	r5, [r4, #8]
 800c60e:	463e      	mov	r6, r7
 800c610:	42be      	cmp	r6, r7
 800c612:	d900      	bls.n	800c616 <__ssputs_r+0x86>
 800c614:	463e      	mov	r6, r7
 800c616:	4632      	mov	r2, r6
 800c618:	6820      	ldr	r0, [r4, #0]
 800c61a:	4641      	mov	r1, r8
 800c61c:	f000 fab6 	bl	800cb8c <memmove>
 800c620:	68a3      	ldr	r3, [r4, #8]
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	1b9b      	subs	r3, r3, r6
 800c626:	4432      	add	r2, r6
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	6022      	str	r2, [r4, #0]
 800c62c:	2000      	movs	r0, #0
 800c62e:	e7db      	b.n	800c5e8 <__ssputs_r+0x58>
 800c630:	462a      	mov	r2, r5
 800c632:	f000 fb6f 	bl	800cd14 <_realloc_r>
 800c636:	4606      	mov	r6, r0
 800c638:	2800      	cmp	r0, #0
 800c63a:	d1e1      	bne.n	800c600 <__ssputs_r+0x70>
 800c63c:	6921      	ldr	r1, [r4, #16]
 800c63e:	4650      	mov	r0, sl
 800c640:	f000 fabe 	bl	800cbc0 <_free_r>
 800c644:	e7c7      	b.n	800c5d6 <__ssputs_r+0x46>
	...

0800c648 <_svfiprintf_r>:
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	4698      	mov	r8, r3
 800c64e:	898b      	ldrh	r3, [r1, #12]
 800c650:	061b      	lsls	r3, r3, #24
 800c652:	b09d      	sub	sp, #116	; 0x74
 800c654:	4607      	mov	r7, r0
 800c656:	460d      	mov	r5, r1
 800c658:	4614      	mov	r4, r2
 800c65a:	d50e      	bpl.n	800c67a <_svfiprintf_r+0x32>
 800c65c:	690b      	ldr	r3, [r1, #16]
 800c65e:	b963      	cbnz	r3, 800c67a <_svfiprintf_r+0x32>
 800c660:	2140      	movs	r1, #64	; 0x40
 800c662:	f000 fafd 	bl	800cc60 <_malloc_r>
 800c666:	6028      	str	r0, [r5, #0]
 800c668:	6128      	str	r0, [r5, #16]
 800c66a:	b920      	cbnz	r0, 800c676 <_svfiprintf_r+0x2e>
 800c66c:	230c      	movs	r3, #12
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	f04f 30ff 	mov.w	r0, #4294967295
 800c674:	e0d1      	b.n	800c81a <_svfiprintf_r+0x1d2>
 800c676:	2340      	movs	r3, #64	; 0x40
 800c678:	616b      	str	r3, [r5, #20]
 800c67a:	2300      	movs	r3, #0
 800c67c:	9309      	str	r3, [sp, #36]	; 0x24
 800c67e:	2320      	movs	r3, #32
 800c680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c684:	f8cd 800c 	str.w	r8, [sp, #12]
 800c688:	2330      	movs	r3, #48	; 0x30
 800c68a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c834 <_svfiprintf_r+0x1ec>
 800c68e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c692:	f04f 0901 	mov.w	r9, #1
 800c696:	4623      	mov	r3, r4
 800c698:	469a      	mov	sl, r3
 800c69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69e:	b10a      	cbz	r2, 800c6a4 <_svfiprintf_r+0x5c>
 800c6a0:	2a25      	cmp	r2, #37	; 0x25
 800c6a2:	d1f9      	bne.n	800c698 <_svfiprintf_r+0x50>
 800c6a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a8:	d00b      	beq.n	800c6c2 <_svfiprintf_r+0x7a>
 800c6aa:	465b      	mov	r3, fp
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff ff6d 	bl	800c590 <__ssputs_r>
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	f000 80aa 	beq.w	800c810 <_svfiprintf_r+0x1c8>
 800c6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6be:	445a      	add	r2, fp
 800c6c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80a2 	beq.w	800c810 <_svfiprintf_r+0x1c8>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d6:	f10a 0a01 	add.w	sl, sl, #1
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	9307      	str	r3, [sp, #28]
 800c6de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c6e4:	4654      	mov	r4, sl
 800c6e6:	2205      	movs	r2, #5
 800c6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ec:	4851      	ldr	r0, [pc, #324]	; (800c834 <_svfiprintf_r+0x1ec>)
 800c6ee:	f7f3 fe17 	bl	8000320 <memchr>
 800c6f2:	9a04      	ldr	r2, [sp, #16]
 800c6f4:	b9d8      	cbnz	r0, 800c72e <_svfiprintf_r+0xe6>
 800c6f6:	06d0      	lsls	r0, r2, #27
 800c6f8:	bf44      	itt	mi
 800c6fa:	2320      	movmi	r3, #32
 800c6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c700:	0711      	lsls	r1, r2, #28
 800c702:	bf44      	itt	mi
 800c704:	232b      	movmi	r3, #43	; 0x2b
 800c706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c70a:	f89a 3000 	ldrb.w	r3, [sl]
 800c70e:	2b2a      	cmp	r3, #42	; 0x2a
 800c710:	d015      	beq.n	800c73e <_svfiprintf_r+0xf6>
 800c712:	9a07      	ldr	r2, [sp, #28]
 800c714:	4654      	mov	r4, sl
 800c716:	2000      	movs	r0, #0
 800c718:	f04f 0c0a 	mov.w	ip, #10
 800c71c:	4621      	mov	r1, r4
 800c71e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c722:	3b30      	subs	r3, #48	; 0x30
 800c724:	2b09      	cmp	r3, #9
 800c726:	d94e      	bls.n	800c7c6 <_svfiprintf_r+0x17e>
 800c728:	b1b0      	cbz	r0, 800c758 <_svfiprintf_r+0x110>
 800c72a:	9207      	str	r2, [sp, #28]
 800c72c:	e014      	b.n	800c758 <_svfiprintf_r+0x110>
 800c72e:	eba0 0308 	sub.w	r3, r0, r8
 800c732:	fa09 f303 	lsl.w	r3, r9, r3
 800c736:	4313      	orrs	r3, r2
 800c738:	9304      	str	r3, [sp, #16]
 800c73a:	46a2      	mov	sl, r4
 800c73c:	e7d2      	b.n	800c6e4 <_svfiprintf_r+0x9c>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	1d19      	adds	r1, r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	9103      	str	r1, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfbb      	ittet	lt
 800c74a:	425b      	neglt	r3, r3
 800c74c:	f042 0202 	orrlt.w	r2, r2, #2
 800c750:	9307      	strge	r3, [sp, #28]
 800c752:	9307      	strlt	r3, [sp, #28]
 800c754:	bfb8      	it	lt
 800c756:	9204      	strlt	r2, [sp, #16]
 800c758:	7823      	ldrb	r3, [r4, #0]
 800c75a:	2b2e      	cmp	r3, #46	; 0x2e
 800c75c:	d10c      	bne.n	800c778 <_svfiprintf_r+0x130>
 800c75e:	7863      	ldrb	r3, [r4, #1]
 800c760:	2b2a      	cmp	r3, #42	; 0x2a
 800c762:	d135      	bne.n	800c7d0 <_svfiprintf_r+0x188>
 800c764:	9b03      	ldr	r3, [sp, #12]
 800c766:	1d1a      	adds	r2, r3, #4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	9203      	str	r2, [sp, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfb8      	it	lt
 800c770:	f04f 33ff 	movlt.w	r3, #4294967295
 800c774:	3402      	adds	r4, #2
 800c776:	9305      	str	r3, [sp, #20]
 800c778:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c844 <_svfiprintf_r+0x1fc>
 800c77c:	7821      	ldrb	r1, [r4, #0]
 800c77e:	2203      	movs	r2, #3
 800c780:	4650      	mov	r0, sl
 800c782:	f7f3 fdcd 	bl	8000320 <memchr>
 800c786:	b140      	cbz	r0, 800c79a <_svfiprintf_r+0x152>
 800c788:	2340      	movs	r3, #64	; 0x40
 800c78a:	eba0 000a 	sub.w	r0, r0, sl
 800c78e:	fa03 f000 	lsl.w	r0, r3, r0
 800c792:	9b04      	ldr	r3, [sp, #16]
 800c794:	4303      	orrs	r3, r0
 800c796:	3401      	adds	r4, #1
 800c798:	9304      	str	r3, [sp, #16]
 800c79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79e:	4826      	ldr	r0, [pc, #152]	; (800c838 <_svfiprintf_r+0x1f0>)
 800c7a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7a4:	2206      	movs	r2, #6
 800c7a6:	f7f3 fdbb 	bl	8000320 <memchr>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d038      	beq.n	800c820 <_svfiprintf_r+0x1d8>
 800c7ae:	4b23      	ldr	r3, [pc, #140]	; (800c83c <_svfiprintf_r+0x1f4>)
 800c7b0:	bb1b      	cbnz	r3, 800c7fa <_svfiprintf_r+0x1b2>
 800c7b2:	9b03      	ldr	r3, [sp, #12]
 800c7b4:	3307      	adds	r3, #7
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	9303      	str	r3, [sp, #12]
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	4433      	add	r3, r6
 800c7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c4:	e767      	b.n	800c696 <_svfiprintf_r+0x4e>
 800c7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	e7a5      	b.n	800c71c <_svfiprintf_r+0xd4>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	3401      	adds	r4, #1
 800c7d4:	9305      	str	r3, [sp, #20]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	f04f 0c0a 	mov.w	ip, #10
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7e2:	3a30      	subs	r2, #48	; 0x30
 800c7e4:	2a09      	cmp	r2, #9
 800c7e6:	d903      	bls.n	800c7f0 <_svfiprintf_r+0x1a8>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0c5      	beq.n	800c778 <_svfiprintf_r+0x130>
 800c7ec:	9105      	str	r1, [sp, #20]
 800c7ee:	e7c3      	b.n	800c778 <_svfiprintf_r+0x130>
 800c7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e7f0      	b.n	800c7dc <_svfiprintf_r+0x194>
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	462a      	mov	r2, r5
 800c800:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <_svfiprintf_r+0x1f8>)
 800c802:	a904      	add	r1, sp, #16
 800c804:	4638      	mov	r0, r7
 800c806:	f3af 8000 	nop.w
 800c80a:	1c42      	adds	r2, r0, #1
 800c80c:	4606      	mov	r6, r0
 800c80e:	d1d6      	bne.n	800c7be <_svfiprintf_r+0x176>
 800c810:	89ab      	ldrh	r3, [r5, #12]
 800c812:	065b      	lsls	r3, r3, #25
 800c814:	f53f af2c 	bmi.w	800c670 <_svfiprintf_r+0x28>
 800c818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c81a:	b01d      	add	sp, #116	; 0x74
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c820:	ab03      	add	r3, sp, #12
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	462a      	mov	r2, r5
 800c826:	4b06      	ldr	r3, [pc, #24]	; (800c840 <_svfiprintf_r+0x1f8>)
 800c828:	a904      	add	r1, sp, #16
 800c82a:	4638      	mov	r0, r7
 800c82c:	f000 f87a 	bl	800c924 <_printf_i>
 800c830:	e7eb      	b.n	800c80a <_svfiprintf_r+0x1c2>
 800c832:	bf00      	nop
 800c834:	0800cf2a 	.word	0x0800cf2a
 800c838:	0800cf34 	.word	0x0800cf34
 800c83c:	00000000 	.word	0x00000000
 800c840:	0800c591 	.word	0x0800c591
 800c844:	0800cf30 	.word	0x0800cf30

0800c848 <_printf_common>:
 800c848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	4616      	mov	r6, r2
 800c84e:	4699      	mov	r9, r3
 800c850:	688a      	ldr	r2, [r1, #8]
 800c852:	690b      	ldr	r3, [r1, #16]
 800c854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c858:	4293      	cmp	r3, r2
 800c85a:	bfb8      	it	lt
 800c85c:	4613      	movlt	r3, r2
 800c85e:	6033      	str	r3, [r6, #0]
 800c860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c864:	4607      	mov	r7, r0
 800c866:	460c      	mov	r4, r1
 800c868:	b10a      	cbz	r2, 800c86e <_printf_common+0x26>
 800c86a:	3301      	adds	r3, #1
 800c86c:	6033      	str	r3, [r6, #0]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	0699      	lsls	r1, r3, #26
 800c872:	bf42      	ittt	mi
 800c874:	6833      	ldrmi	r3, [r6, #0]
 800c876:	3302      	addmi	r3, #2
 800c878:	6033      	strmi	r3, [r6, #0]
 800c87a:	6825      	ldr	r5, [r4, #0]
 800c87c:	f015 0506 	ands.w	r5, r5, #6
 800c880:	d106      	bne.n	800c890 <_printf_common+0x48>
 800c882:	f104 0a19 	add.w	sl, r4, #25
 800c886:	68e3      	ldr	r3, [r4, #12]
 800c888:	6832      	ldr	r2, [r6, #0]
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	42ab      	cmp	r3, r5
 800c88e:	dc26      	bgt.n	800c8de <_printf_common+0x96>
 800c890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c894:	1e13      	subs	r3, r2, #0
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	bf18      	it	ne
 800c89a:	2301      	movne	r3, #1
 800c89c:	0692      	lsls	r2, r2, #26
 800c89e:	d42b      	bmi.n	800c8f8 <_printf_common+0xb0>
 800c8a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	47c0      	blx	r8
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	d01e      	beq.n	800c8ec <_printf_common+0xa4>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	68e5      	ldr	r5, [r4, #12]
 800c8b2:	6832      	ldr	r2, [r6, #0]
 800c8b4:	f003 0306 	and.w	r3, r3, #6
 800c8b8:	2b04      	cmp	r3, #4
 800c8ba:	bf08      	it	eq
 800c8bc:	1aad      	subeq	r5, r5, r2
 800c8be:	68a3      	ldr	r3, [r4, #8]
 800c8c0:	6922      	ldr	r2, [r4, #16]
 800c8c2:	bf0c      	ite	eq
 800c8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8c8:	2500      	movne	r5, #0
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	bfc4      	itt	gt
 800c8ce:	1a9b      	subgt	r3, r3, r2
 800c8d0:	18ed      	addgt	r5, r5, r3
 800c8d2:	2600      	movs	r6, #0
 800c8d4:	341a      	adds	r4, #26
 800c8d6:	42b5      	cmp	r5, r6
 800c8d8:	d11a      	bne.n	800c910 <_printf_common+0xc8>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	e008      	b.n	800c8f0 <_printf_common+0xa8>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4652      	mov	r2, sl
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	47c0      	blx	r8
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d103      	bne.n	800c8f4 <_printf_common+0xac>
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f4:	3501      	adds	r5, #1
 800c8f6:	e7c6      	b.n	800c886 <_printf_common+0x3e>
 800c8f8:	18e1      	adds	r1, r4, r3
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	2030      	movs	r0, #48	; 0x30
 800c8fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c902:	4422      	add	r2, r4
 800c904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c90c:	3302      	adds	r3, #2
 800c90e:	e7c7      	b.n	800c8a0 <_printf_common+0x58>
 800c910:	2301      	movs	r3, #1
 800c912:	4622      	mov	r2, r4
 800c914:	4649      	mov	r1, r9
 800c916:	4638      	mov	r0, r7
 800c918:	47c0      	blx	r8
 800c91a:	3001      	adds	r0, #1
 800c91c:	d0e6      	beq.n	800c8ec <_printf_common+0xa4>
 800c91e:	3601      	adds	r6, #1
 800c920:	e7d9      	b.n	800c8d6 <_printf_common+0x8e>
	...

0800c924 <_printf_i>:
 800c924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c928:	460c      	mov	r4, r1
 800c92a:	4691      	mov	r9, r2
 800c92c:	7e27      	ldrb	r7, [r4, #24]
 800c92e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c930:	2f78      	cmp	r7, #120	; 0x78
 800c932:	4680      	mov	r8, r0
 800c934:	469a      	mov	sl, r3
 800c936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c93a:	d807      	bhi.n	800c94c <_printf_i+0x28>
 800c93c:	2f62      	cmp	r7, #98	; 0x62
 800c93e:	d80a      	bhi.n	800c956 <_printf_i+0x32>
 800c940:	2f00      	cmp	r7, #0
 800c942:	f000 80d8 	beq.w	800caf6 <_printf_i+0x1d2>
 800c946:	2f58      	cmp	r7, #88	; 0x58
 800c948:	f000 80a3 	beq.w	800ca92 <_printf_i+0x16e>
 800c94c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c954:	e03a      	b.n	800c9cc <_printf_i+0xa8>
 800c956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c95a:	2b15      	cmp	r3, #21
 800c95c:	d8f6      	bhi.n	800c94c <_printf_i+0x28>
 800c95e:	a001      	add	r0, pc, #4	; (adr r0, 800c964 <_printf_i+0x40>)
 800c960:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c964:	0800c9bd 	.word	0x0800c9bd
 800c968:	0800c9d1 	.word	0x0800c9d1
 800c96c:	0800c94d 	.word	0x0800c94d
 800c970:	0800c94d 	.word	0x0800c94d
 800c974:	0800c94d 	.word	0x0800c94d
 800c978:	0800c94d 	.word	0x0800c94d
 800c97c:	0800c9d1 	.word	0x0800c9d1
 800c980:	0800c94d 	.word	0x0800c94d
 800c984:	0800c94d 	.word	0x0800c94d
 800c988:	0800c94d 	.word	0x0800c94d
 800c98c:	0800c94d 	.word	0x0800c94d
 800c990:	0800cadd 	.word	0x0800cadd
 800c994:	0800ca01 	.word	0x0800ca01
 800c998:	0800cabf 	.word	0x0800cabf
 800c99c:	0800c94d 	.word	0x0800c94d
 800c9a0:	0800c94d 	.word	0x0800c94d
 800c9a4:	0800caff 	.word	0x0800caff
 800c9a8:	0800c94d 	.word	0x0800c94d
 800c9ac:	0800ca01 	.word	0x0800ca01
 800c9b0:	0800c94d 	.word	0x0800c94d
 800c9b4:	0800c94d 	.word	0x0800c94d
 800c9b8:	0800cac7 	.word	0x0800cac7
 800c9bc:	680b      	ldr	r3, [r1, #0]
 800c9be:	1d1a      	adds	r2, r3, #4
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	600a      	str	r2, [r1, #0]
 800c9c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e0a3      	b.n	800cb18 <_printf_i+0x1f4>
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	6808      	ldr	r0, [r1, #0]
 800c9d4:	062e      	lsls	r6, r5, #24
 800c9d6:	f100 0304 	add.w	r3, r0, #4
 800c9da:	d50a      	bpl.n	800c9f2 <_printf_i+0xce>
 800c9dc:	6805      	ldr	r5, [r0, #0]
 800c9de:	600b      	str	r3, [r1, #0]
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	da03      	bge.n	800c9ec <_printf_i+0xc8>
 800c9e4:	232d      	movs	r3, #45	; 0x2d
 800c9e6:	426d      	negs	r5, r5
 800c9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9ec:	485e      	ldr	r0, [pc, #376]	; (800cb68 <_printf_i+0x244>)
 800c9ee:	230a      	movs	r3, #10
 800c9f0:	e019      	b.n	800ca26 <_printf_i+0x102>
 800c9f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9f6:	6805      	ldr	r5, [r0, #0]
 800c9f8:	600b      	str	r3, [r1, #0]
 800c9fa:	bf18      	it	ne
 800c9fc:	b22d      	sxthne	r5, r5
 800c9fe:	e7ef      	b.n	800c9e0 <_printf_i+0xbc>
 800ca00:	680b      	ldr	r3, [r1, #0]
 800ca02:	6825      	ldr	r5, [r4, #0]
 800ca04:	1d18      	adds	r0, r3, #4
 800ca06:	6008      	str	r0, [r1, #0]
 800ca08:	0628      	lsls	r0, r5, #24
 800ca0a:	d501      	bpl.n	800ca10 <_printf_i+0xec>
 800ca0c:	681d      	ldr	r5, [r3, #0]
 800ca0e:	e002      	b.n	800ca16 <_printf_i+0xf2>
 800ca10:	0669      	lsls	r1, r5, #25
 800ca12:	d5fb      	bpl.n	800ca0c <_printf_i+0xe8>
 800ca14:	881d      	ldrh	r5, [r3, #0]
 800ca16:	4854      	ldr	r0, [pc, #336]	; (800cb68 <_printf_i+0x244>)
 800ca18:	2f6f      	cmp	r7, #111	; 0x6f
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2308      	moveq	r3, #8
 800ca1e:	230a      	movne	r3, #10
 800ca20:	2100      	movs	r1, #0
 800ca22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca26:	6866      	ldr	r6, [r4, #4]
 800ca28:	60a6      	str	r6, [r4, #8]
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	bfa2      	ittt	ge
 800ca2e:	6821      	ldrge	r1, [r4, #0]
 800ca30:	f021 0104 	bicge.w	r1, r1, #4
 800ca34:	6021      	strge	r1, [r4, #0]
 800ca36:	b90d      	cbnz	r5, 800ca3c <_printf_i+0x118>
 800ca38:	2e00      	cmp	r6, #0
 800ca3a:	d04d      	beq.n	800cad8 <_printf_i+0x1b4>
 800ca3c:	4616      	mov	r6, r2
 800ca3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca42:	fb03 5711 	mls	r7, r3, r1, r5
 800ca46:	5dc7      	ldrb	r7, [r0, r7]
 800ca48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca4c:	462f      	mov	r7, r5
 800ca4e:	42bb      	cmp	r3, r7
 800ca50:	460d      	mov	r5, r1
 800ca52:	d9f4      	bls.n	800ca3e <_printf_i+0x11a>
 800ca54:	2b08      	cmp	r3, #8
 800ca56:	d10b      	bne.n	800ca70 <_printf_i+0x14c>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	07df      	lsls	r7, r3, #31
 800ca5c:	d508      	bpl.n	800ca70 <_printf_i+0x14c>
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	6861      	ldr	r1, [r4, #4]
 800ca62:	4299      	cmp	r1, r3
 800ca64:	bfde      	ittt	le
 800ca66:	2330      	movle	r3, #48	; 0x30
 800ca68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca70:	1b92      	subs	r2, r2, r6
 800ca72:	6122      	str	r2, [r4, #16]
 800ca74:	f8cd a000 	str.w	sl, [sp]
 800ca78:	464b      	mov	r3, r9
 800ca7a:	aa03      	add	r2, sp, #12
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	4640      	mov	r0, r8
 800ca80:	f7ff fee2 	bl	800c848 <_printf_common>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d14c      	bne.n	800cb22 <_printf_i+0x1fe>
 800ca88:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8c:	b004      	add	sp, #16
 800ca8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca92:	4835      	ldr	r0, [pc, #212]	; (800cb68 <_printf_i+0x244>)
 800ca94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	680e      	ldr	r6, [r1, #0]
 800ca9c:	061f      	lsls	r7, r3, #24
 800ca9e:	f856 5b04 	ldr.w	r5, [r6], #4
 800caa2:	600e      	str	r6, [r1, #0]
 800caa4:	d514      	bpl.n	800cad0 <_printf_i+0x1ac>
 800caa6:	07d9      	lsls	r1, r3, #31
 800caa8:	bf44      	itt	mi
 800caaa:	f043 0320 	orrmi.w	r3, r3, #32
 800caae:	6023      	strmi	r3, [r4, #0]
 800cab0:	b91d      	cbnz	r5, 800caba <_printf_i+0x196>
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	f023 0320 	bic.w	r3, r3, #32
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	2310      	movs	r3, #16
 800cabc:	e7b0      	b.n	800ca20 <_printf_i+0xfc>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	f043 0320 	orr.w	r3, r3, #32
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	2378      	movs	r3, #120	; 0x78
 800cac8:	4828      	ldr	r0, [pc, #160]	; (800cb6c <_printf_i+0x248>)
 800caca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cace:	e7e3      	b.n	800ca98 <_printf_i+0x174>
 800cad0:	065e      	lsls	r6, r3, #25
 800cad2:	bf48      	it	mi
 800cad4:	b2ad      	uxthmi	r5, r5
 800cad6:	e7e6      	b.n	800caa6 <_printf_i+0x182>
 800cad8:	4616      	mov	r6, r2
 800cada:	e7bb      	b.n	800ca54 <_printf_i+0x130>
 800cadc:	680b      	ldr	r3, [r1, #0]
 800cade:	6826      	ldr	r6, [r4, #0]
 800cae0:	6960      	ldr	r0, [r4, #20]
 800cae2:	1d1d      	adds	r5, r3, #4
 800cae4:	600d      	str	r5, [r1, #0]
 800cae6:	0635      	lsls	r5, r6, #24
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	d501      	bpl.n	800caf0 <_printf_i+0x1cc>
 800caec:	6018      	str	r0, [r3, #0]
 800caee:	e002      	b.n	800caf6 <_printf_i+0x1d2>
 800caf0:	0671      	lsls	r1, r6, #25
 800caf2:	d5fb      	bpl.n	800caec <_printf_i+0x1c8>
 800caf4:	8018      	strh	r0, [r3, #0]
 800caf6:	2300      	movs	r3, #0
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	4616      	mov	r6, r2
 800cafc:	e7ba      	b.n	800ca74 <_printf_i+0x150>
 800cafe:	680b      	ldr	r3, [r1, #0]
 800cb00:	1d1a      	adds	r2, r3, #4
 800cb02:	600a      	str	r2, [r1, #0]
 800cb04:	681e      	ldr	r6, [r3, #0]
 800cb06:	6862      	ldr	r2, [r4, #4]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7f3 fc08 	bl	8000320 <memchr>
 800cb10:	b108      	cbz	r0, 800cb16 <_printf_i+0x1f2>
 800cb12:	1b80      	subs	r0, r0, r6
 800cb14:	6060      	str	r0, [r4, #4]
 800cb16:	6863      	ldr	r3, [r4, #4]
 800cb18:	6123      	str	r3, [r4, #16]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb20:	e7a8      	b.n	800ca74 <_printf_i+0x150>
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	4632      	mov	r2, r6
 800cb26:	4649      	mov	r1, r9
 800cb28:	4640      	mov	r0, r8
 800cb2a:	47d0      	blx	sl
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d0ab      	beq.n	800ca88 <_printf_i+0x164>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	079b      	lsls	r3, r3, #30
 800cb34:	d413      	bmi.n	800cb5e <_printf_i+0x23a>
 800cb36:	68e0      	ldr	r0, [r4, #12]
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	4298      	cmp	r0, r3
 800cb3c:	bfb8      	it	lt
 800cb3e:	4618      	movlt	r0, r3
 800cb40:	e7a4      	b.n	800ca8c <_printf_i+0x168>
 800cb42:	2301      	movs	r3, #1
 800cb44:	4632      	mov	r2, r6
 800cb46:	4649      	mov	r1, r9
 800cb48:	4640      	mov	r0, r8
 800cb4a:	47d0      	blx	sl
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d09b      	beq.n	800ca88 <_printf_i+0x164>
 800cb50:	3501      	adds	r5, #1
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	9903      	ldr	r1, [sp, #12]
 800cb56:	1a5b      	subs	r3, r3, r1
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	dcf2      	bgt.n	800cb42 <_printf_i+0x21e>
 800cb5c:	e7eb      	b.n	800cb36 <_printf_i+0x212>
 800cb5e:	2500      	movs	r5, #0
 800cb60:	f104 0619 	add.w	r6, r4, #25
 800cb64:	e7f5      	b.n	800cb52 <_printf_i+0x22e>
 800cb66:	bf00      	nop
 800cb68:	0800cf3b 	.word	0x0800cf3b
 800cb6c:	0800cf4c 	.word	0x0800cf4c

0800cb70 <memcpy>:
 800cb70:	440a      	add	r2, r1
 800cb72:	4291      	cmp	r1, r2
 800cb74:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb78:	d100      	bne.n	800cb7c <memcpy+0xc>
 800cb7a:	4770      	bx	lr
 800cb7c:	b510      	push	{r4, lr}
 800cb7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb86:	4291      	cmp	r1, r2
 800cb88:	d1f9      	bne.n	800cb7e <memcpy+0xe>
 800cb8a:	bd10      	pop	{r4, pc}

0800cb8c <memmove>:
 800cb8c:	4288      	cmp	r0, r1
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	eb01 0402 	add.w	r4, r1, r2
 800cb94:	d902      	bls.n	800cb9c <memmove+0x10>
 800cb96:	4284      	cmp	r4, r0
 800cb98:	4623      	mov	r3, r4
 800cb9a:	d807      	bhi.n	800cbac <memmove+0x20>
 800cb9c:	1e43      	subs	r3, r0, #1
 800cb9e:	42a1      	cmp	r1, r4
 800cba0:	d008      	beq.n	800cbb4 <memmove+0x28>
 800cba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbaa:	e7f8      	b.n	800cb9e <memmove+0x12>
 800cbac:	4402      	add	r2, r0
 800cbae:	4601      	mov	r1, r0
 800cbb0:	428a      	cmp	r2, r1
 800cbb2:	d100      	bne.n	800cbb6 <memmove+0x2a>
 800cbb4:	bd10      	pop	{r4, pc}
 800cbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbbe:	e7f7      	b.n	800cbb0 <memmove+0x24>

0800cbc0 <_free_r>:
 800cbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbc2:	2900      	cmp	r1, #0
 800cbc4:	d048      	beq.n	800cc58 <_free_r+0x98>
 800cbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbca:	9001      	str	r0, [sp, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f1a1 0404 	sub.w	r4, r1, #4
 800cbd2:	bfb8      	it	lt
 800cbd4:	18e4      	addlt	r4, r4, r3
 800cbd6:	f000 f8d3 	bl	800cd80 <__malloc_lock>
 800cbda:	4a20      	ldr	r2, [pc, #128]	; (800cc5c <_free_r+0x9c>)
 800cbdc:	9801      	ldr	r0, [sp, #4]
 800cbde:	6813      	ldr	r3, [r2, #0]
 800cbe0:	4615      	mov	r5, r2
 800cbe2:	b933      	cbnz	r3, 800cbf2 <_free_r+0x32>
 800cbe4:	6063      	str	r3, [r4, #4]
 800cbe6:	6014      	str	r4, [r2, #0]
 800cbe8:	b003      	add	sp, #12
 800cbea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbee:	f000 b8cd 	b.w	800cd8c <__malloc_unlock>
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	d90b      	bls.n	800cc0e <_free_r+0x4e>
 800cbf6:	6821      	ldr	r1, [r4, #0]
 800cbf8:	1862      	adds	r2, r4, r1
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	bf04      	itt	eq
 800cbfe:	681a      	ldreq	r2, [r3, #0]
 800cc00:	685b      	ldreq	r3, [r3, #4]
 800cc02:	6063      	str	r3, [r4, #4]
 800cc04:	bf04      	itt	eq
 800cc06:	1852      	addeq	r2, r2, r1
 800cc08:	6022      	streq	r2, [r4, #0]
 800cc0a:	602c      	str	r4, [r5, #0]
 800cc0c:	e7ec      	b.n	800cbe8 <_free_r+0x28>
 800cc0e:	461a      	mov	r2, r3
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	b10b      	cbz	r3, 800cc18 <_free_r+0x58>
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	d9fa      	bls.n	800cc0e <_free_r+0x4e>
 800cc18:	6811      	ldr	r1, [r2, #0]
 800cc1a:	1855      	adds	r5, r2, r1
 800cc1c:	42a5      	cmp	r5, r4
 800cc1e:	d10b      	bne.n	800cc38 <_free_r+0x78>
 800cc20:	6824      	ldr	r4, [r4, #0]
 800cc22:	4421      	add	r1, r4
 800cc24:	1854      	adds	r4, r2, r1
 800cc26:	42a3      	cmp	r3, r4
 800cc28:	6011      	str	r1, [r2, #0]
 800cc2a:	d1dd      	bne.n	800cbe8 <_free_r+0x28>
 800cc2c:	681c      	ldr	r4, [r3, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	6053      	str	r3, [r2, #4]
 800cc32:	4421      	add	r1, r4
 800cc34:	6011      	str	r1, [r2, #0]
 800cc36:	e7d7      	b.n	800cbe8 <_free_r+0x28>
 800cc38:	d902      	bls.n	800cc40 <_free_r+0x80>
 800cc3a:	230c      	movs	r3, #12
 800cc3c:	6003      	str	r3, [r0, #0]
 800cc3e:	e7d3      	b.n	800cbe8 <_free_r+0x28>
 800cc40:	6825      	ldr	r5, [r4, #0]
 800cc42:	1961      	adds	r1, r4, r5
 800cc44:	428b      	cmp	r3, r1
 800cc46:	bf04      	itt	eq
 800cc48:	6819      	ldreq	r1, [r3, #0]
 800cc4a:	685b      	ldreq	r3, [r3, #4]
 800cc4c:	6063      	str	r3, [r4, #4]
 800cc4e:	bf04      	itt	eq
 800cc50:	1949      	addeq	r1, r1, r5
 800cc52:	6021      	streq	r1, [r4, #0]
 800cc54:	6054      	str	r4, [r2, #4]
 800cc56:	e7c7      	b.n	800cbe8 <_free_r+0x28>
 800cc58:	b003      	add	sp, #12
 800cc5a:	bd30      	pop	{r4, r5, pc}
 800cc5c:	2403e9bc 	.word	0x2403e9bc

0800cc60 <_malloc_r>:
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc62:	1ccd      	adds	r5, r1, #3
 800cc64:	f025 0503 	bic.w	r5, r5, #3
 800cc68:	3508      	adds	r5, #8
 800cc6a:	2d0c      	cmp	r5, #12
 800cc6c:	bf38      	it	cc
 800cc6e:	250c      	movcc	r5, #12
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	4606      	mov	r6, r0
 800cc74:	db01      	blt.n	800cc7a <_malloc_r+0x1a>
 800cc76:	42a9      	cmp	r1, r5
 800cc78:	d903      	bls.n	800cc82 <_malloc_r+0x22>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	2000      	movs	r0, #0
 800cc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc82:	f000 f87d 	bl	800cd80 <__malloc_lock>
 800cc86:	4921      	ldr	r1, [pc, #132]	; (800cd0c <_malloc_r+0xac>)
 800cc88:	680a      	ldr	r2, [r1, #0]
 800cc8a:	4614      	mov	r4, r2
 800cc8c:	b99c      	cbnz	r4, 800ccb6 <_malloc_r+0x56>
 800cc8e:	4f20      	ldr	r7, [pc, #128]	; (800cd10 <_malloc_r+0xb0>)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	b923      	cbnz	r3, 800cc9e <_malloc_r+0x3e>
 800cc94:	4621      	mov	r1, r4
 800cc96:	4630      	mov	r0, r6
 800cc98:	f000 f862 	bl	800cd60 <_sbrk_r>
 800cc9c:	6038      	str	r0, [r7, #0]
 800cc9e:	4629      	mov	r1, r5
 800cca0:	4630      	mov	r0, r6
 800cca2:	f000 f85d 	bl	800cd60 <_sbrk_r>
 800cca6:	1c43      	adds	r3, r0, #1
 800cca8:	d123      	bne.n	800ccf2 <_malloc_r+0x92>
 800ccaa:	230c      	movs	r3, #12
 800ccac:	6033      	str	r3, [r6, #0]
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f000 f86c 	bl	800cd8c <__malloc_unlock>
 800ccb4:	e7e3      	b.n	800cc7e <_malloc_r+0x1e>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	1b5b      	subs	r3, r3, r5
 800ccba:	d417      	bmi.n	800ccec <_malloc_r+0x8c>
 800ccbc:	2b0b      	cmp	r3, #11
 800ccbe:	d903      	bls.n	800ccc8 <_malloc_r+0x68>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	441c      	add	r4, r3
 800ccc4:	6025      	str	r5, [r4, #0]
 800ccc6:	e004      	b.n	800ccd2 <_malloc_r+0x72>
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	42a2      	cmp	r2, r4
 800cccc:	bf0c      	ite	eq
 800ccce:	600b      	streq	r3, [r1, #0]
 800ccd0:	6053      	strne	r3, [r2, #4]
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f000 f85a 	bl	800cd8c <__malloc_unlock>
 800ccd8:	f104 000b 	add.w	r0, r4, #11
 800ccdc:	1d23      	adds	r3, r4, #4
 800ccde:	f020 0007 	bic.w	r0, r0, #7
 800cce2:	1ac2      	subs	r2, r0, r3
 800cce4:	d0cc      	beq.n	800cc80 <_malloc_r+0x20>
 800cce6:	1a1b      	subs	r3, r3, r0
 800cce8:	50a3      	str	r3, [r4, r2]
 800ccea:	e7c9      	b.n	800cc80 <_malloc_r+0x20>
 800ccec:	4622      	mov	r2, r4
 800ccee:	6864      	ldr	r4, [r4, #4]
 800ccf0:	e7cc      	b.n	800cc8c <_malloc_r+0x2c>
 800ccf2:	1cc4      	adds	r4, r0, #3
 800ccf4:	f024 0403 	bic.w	r4, r4, #3
 800ccf8:	42a0      	cmp	r0, r4
 800ccfa:	d0e3      	beq.n	800ccc4 <_malloc_r+0x64>
 800ccfc:	1a21      	subs	r1, r4, r0
 800ccfe:	4630      	mov	r0, r6
 800cd00:	f000 f82e 	bl	800cd60 <_sbrk_r>
 800cd04:	3001      	adds	r0, #1
 800cd06:	d1dd      	bne.n	800ccc4 <_malloc_r+0x64>
 800cd08:	e7cf      	b.n	800ccaa <_malloc_r+0x4a>
 800cd0a:	bf00      	nop
 800cd0c:	2403e9bc 	.word	0x2403e9bc
 800cd10:	2403e9c0 	.word	0x2403e9c0

0800cd14 <_realloc_r>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	4607      	mov	r7, r0
 800cd18:	4614      	mov	r4, r2
 800cd1a:	460e      	mov	r6, r1
 800cd1c:	b921      	cbnz	r1, 800cd28 <_realloc_r+0x14>
 800cd1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd22:	4611      	mov	r1, r2
 800cd24:	f7ff bf9c 	b.w	800cc60 <_malloc_r>
 800cd28:	b922      	cbnz	r2, 800cd34 <_realloc_r+0x20>
 800cd2a:	f7ff ff49 	bl	800cbc0 <_free_r>
 800cd2e:	4625      	mov	r5, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd34:	f000 f830 	bl	800cd98 <_malloc_usable_size_r>
 800cd38:	42a0      	cmp	r0, r4
 800cd3a:	d20f      	bcs.n	800cd5c <_realloc_r+0x48>
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff ff8e 	bl	800cc60 <_malloc_r>
 800cd44:	4605      	mov	r5, r0
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d0f2      	beq.n	800cd30 <_realloc_r+0x1c>
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	f7ff ff0f 	bl	800cb70 <memcpy>
 800cd52:	4631      	mov	r1, r6
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7ff ff33 	bl	800cbc0 <_free_r>
 800cd5a:	e7e9      	b.n	800cd30 <_realloc_r+0x1c>
 800cd5c:	4635      	mov	r5, r6
 800cd5e:	e7e7      	b.n	800cd30 <_realloc_r+0x1c>

0800cd60 <_sbrk_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d06      	ldr	r5, [pc, #24]	; (800cd7c <_sbrk_r+0x1c>)
 800cd64:	2300      	movs	r3, #0
 800cd66:	4604      	mov	r4, r0
 800cd68:	4608      	mov	r0, r1
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	f7f4 fb6e 	bl	800144c <_sbrk>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_sbrk_r+0x1a>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_sbrk_r+0x1a>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	2403f270 	.word	0x2403f270

0800cd80 <__malloc_lock>:
 800cd80:	4801      	ldr	r0, [pc, #4]	; (800cd88 <__malloc_lock+0x8>)
 800cd82:	f000 b811 	b.w	800cda8 <__retarget_lock_acquire_recursive>
 800cd86:	bf00      	nop
 800cd88:	2403f278 	.word	0x2403f278

0800cd8c <__malloc_unlock>:
 800cd8c:	4801      	ldr	r0, [pc, #4]	; (800cd94 <__malloc_unlock+0x8>)
 800cd8e:	f000 b80c 	b.w	800cdaa <__retarget_lock_release_recursive>
 800cd92:	bf00      	nop
 800cd94:	2403f278 	.word	0x2403f278

0800cd98 <_malloc_usable_size_r>:
 800cd98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd9c:	1f18      	subs	r0, r3, #4
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	bfbc      	itt	lt
 800cda2:	580b      	ldrlt	r3, [r1, r0]
 800cda4:	18c0      	addlt	r0, r0, r3
 800cda6:	4770      	bx	lr

0800cda8 <__retarget_lock_acquire_recursive>:
 800cda8:	4770      	bx	lr

0800cdaa <__retarget_lock_release_recursive>:
 800cdaa:	4770      	bx	lr

0800cdac <_init>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_fini>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr
