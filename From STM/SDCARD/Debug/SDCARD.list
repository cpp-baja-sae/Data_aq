
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc48  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800d0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000a0  0800d178  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000100  0800d1d8  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002920  24000160  0800d238  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24002a80  0800d238  00022a80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e626  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004829  00000000  00000000  0004e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00052fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  000543f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000367d4  00000000  00000000  00055698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccdc  00000000  00000000  0008be6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014f555  00000000  00000000  000a8b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f809d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  001f80f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000160 	.word	0x24000160
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cf00 	.word	0x0800cf00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000164 	.word	0x24000164
 800030c:	0800cf00 	.word	0x0800cf00

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <MountSD>:
#include "fatfs.h"
#include "SDInterface.h"
#include "stdio.h"

void MountSD()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80006be:	b084      	sub	sp, #16
 80006c0:	af02      	add	r7, sp, #8
	// Temporary memory allocation to setup file system
	// http://elm-chan.org/fsw/ff/doc/mkfs.html
	uint8_t rtext[_MAX_SS*32];
	FRESULT res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	4918      	ldr	r1, [pc, #96]	; (8000728 <MountSD+0x70>)
 80006c6:	4819      	ldr	r0, [pc, #100]	; (800072c <MountSD+0x74>)
 80006c8:	f00a ff10 	bl	800b4ec <f_mount>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f244 0207 	movw	r2, #16391	; 0x4007
 80006d2:	443a      	add	r2, r7
 80006d4:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK)
 80006d6:	f244 0307 	movw	r3, #16391	; 0x4007
 80006da:	443b      	add	r3, r7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <MountSD+0x30>
    {
        Error_Handler();
 80006e2:	f000 fc8d 	bl	8001000 <Error_Handler>
        if( res != FR_OK)
        {
            Error_Handler();
        }
    }
};
 80006e6:	e019      	b.n	800071c <MountSD+0x64>
    	FRESULT res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MountSD+0x78>)
 80006ea:	f244 0208 	movw	r2, #16392	; 0x4008
 80006ee:	443a      	add	r2, r7
 80006f0:	4413      	add	r3, r2
 80006f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	2107      	movs	r1, #7
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <MountSD+0x70>)
 80006fe:	f00b fb17 	bl	800bd30 <f_mkfs>
 8000702:	4603      	mov	r3, r0
 8000704:	f244 0206 	movw	r2, #16390	; 0x4006
 8000708:	443a      	add	r2, r7
 800070a:	7013      	strb	r3, [r2, #0]
        if( res != FR_OK)
 800070c:	f244 0306 	movw	r3, #16390	; 0x4006
 8000710:	443b      	add	r3, r7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MountSD+0x64>
            Error_Handler();
 8000718:	f000 fc72 	bl	8001000 <Error_Handler>
};
 800071c:	bf00      	nop
 800071e:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2400260c 	.word	0x2400260c
 800072c:	24002840 	.word	0x24002840
 8000730:	ffffbffc 	.word	0xffffbffc

08000734 <OpenSD>:

void OpenSD(const char **file_name,enum SD_FATFS_POSIX file_acces_type)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	FRESULT res = f_open(&SDFile, *file_name, file_acces_type);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	78fa      	ldrb	r2, [r7, #3]
 8000746:	4619      	mov	r1, r3
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <OpenSD+0x30>)
 800074a:	f00a ff15 	bl	800b578 <f_open>
 800074e:	4603      	mov	r3, r0
 8000750:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <OpenSD+0x28>
	{
		Error_Handler();
 8000758:	f000 fc52 	bl	8001000 <Error_Handler>
	}
};
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	24002610 	.word	0x24002610

08000768 <WriteSD>:

void WriteSD(char *wtext, uint32_t wtextSize, uint32_t *BytesWritten)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	FRESULT res = f_write(&SDFile, (char *)wtext, wtextSize, (void *)&BytesWritten);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	68f9      	ldr	r1, [r7, #12]
 800077a:	4808      	ldr	r0, [pc, #32]	; (800079c <WriteSD+0x34>)
 800077c:	f00b f8ba 	bl	800b8f4 <f_write>
 8000780:	4603      	mov	r3, r0
 8000782:	75fb      	strb	r3, [r7, #23]
	if((BytesWritten == 0) || (res != FR_OK))
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <WriteSD+0x28>
 800078a:	7dfb      	ldrb	r3, [r7, #23]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <WriteSD+0x2c>
	{
	  Error_Handler();
 8000790:	f000 fc36 	bl	8001000 <Error_Handler>
	}
};
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24002610 	.word	0x24002610

080007a0 <CloseSD>:

void CloseSD()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <CloseSD+0x10>)
 80007a6:	f00b fa98 	bl	800bcda <f_close>
};
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	24002610 	.word	0x24002610

080007b4 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	e024      	b.n	8000810 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	e01a      	b.n	8000802 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	2bff      	cmp	r3, #255	; 0xff
 80007d0:	dd0a      	ble.n	80007e8 <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	025a      	lsls	r2, r3, #9
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	4413      	add	r3, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e009      	b.n	80007fc <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	025a      	lsls	r2, r3, #9
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	3301      	adds	r3, #1
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000808:	dbe0      	blt.n	80007cc <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbd6      	blt.n	80007c6 <HalfKBWrite+0x12>
			}

		}

	}
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	; 0x70
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HalfKBWrite(wtext,chunk_mult);
 800082e:	2110      	movs	r1, #16
 8000830:	4882      	ldr	r0, [pc, #520]	; (8000a3c <main+0x214>)
 8000832:	f7ff ffbf 	bl	80007b4 <HalfKBWrite>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000836:	4b82      	ldr	r3, [pc, #520]	; (8000a40 <main+0x218>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d11b      	bne.n	800087a <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000842:	f3bf 8f4f 	dsb	sy
}
 8000846:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000848:	f3bf 8f6f 	isb	sy
}
 800084c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <main+0x218>)
 8000850:	2200      	movs	r2, #0
 8000852:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000856:	f3bf 8f4f 	dsb	sy
}
 800085a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085c:	f3bf 8f6f 	isb	sy
}
 8000860:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000862:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <main+0x218>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a76      	ldr	r2, [pc, #472]	; (8000a40 <main+0x218>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086e:	f3bf 8f4f 	dsb	sy
}
 8000872:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000874:	f3bf 8f6f 	isb	sy
}
 8000878:	e000      	b.n	800087c <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800087a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800087c:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <main+0x218>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d138      	bne.n	80008fa <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000888:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <main+0x218>)
 800088a:	2200      	movs	r2, #0
 800088c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000890:	f3bf 8f4f 	dsb	sy
}
 8000894:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000896:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <main+0x218>)
 8000898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800089c:	65fb      	str	r3, [r7, #92]	; 0x5c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800089e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008a0:	0b5b      	lsrs	r3, r3, #13
 80008a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008aa:	08db      	lsrs	r3, r3, #3
 80008ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008b4:	015a      	lsls	r2, r3, #5
 80008b6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008be:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c0:	495f      	ldr	r1, [pc, #380]	; (8000a40 <main+0x218>)
 80008c2:	4313      	orrs	r3, r2
 80008c4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	657a      	str	r2, [r7, #84]	; 0x54
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1ef      	bne.n	80008b2 <main+0x8a>
    } while(sets-- != 0U);
 80008d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1e5      	bne.n	80008a8 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 80008dc:	f3bf 8f4f 	dsb	sy
}
 80008e0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <main+0x218>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a56      	ldr	r2, [pc, #344]	; (8000a40 <main+0x218>)
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ee:	f3bf 8f4f 	dsb	sy
}
 80008f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f4:	f3bf 8f6f 	isb	sy
}
 80008f8:	e000      	b.n	80008fc <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008fa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fe92 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f8b0 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 fa42 	bl	8000d8c <MX_GPIO_Init>
  MX_ETH_Init();
 8000908:	f000 f91c 	bl	8000b44 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800090c:	f000 f986 	bl	8000c1c <MX_USART3_UART_Init>
  MX_MDMA_Init();
 8000910:	f000 f9d8 	bl	8000cc4 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000914:	f000 f962 	bl	8000bdc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000918:	f008 fee2 	bl	80096e0 <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 800091c:	f000 f9ca 	bl	8000cb4 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2101      	movs	r1, #1
 8000924:	4847      	ldr	r0, [pc, #284]	; (8000a44 <main+0x21c>)
 8000926:	f001 fe2d 	bl	8002584 <HAL_GPIO_WritePin>
	MountSD();
 800092a:	f7ff fec5 	bl	80006b8 <MountSD>
	WriteTime();
 800092e:	f000 fb29 	bl	8000f84 <WriteTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000936:	4843      	ldr	r0, [pc, #268]	; (8000a44 <main+0x21c>)
 8000938:	f001 fe3d 	bl	80025b6 <HAL_GPIO_TogglePin>

	int looper = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	66fb      	str	r3, [r7, #108]	; 0x6c
	char str[80]={0};
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	224c      	movs	r2, #76	; 0x4c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f00b fea1 	bl	800c694 <memset>
    while (1)
  {
	int timestart = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	667b      	str	r3, [r7, #100]	; 0x64
	int timestop = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	663b      	str	r3, [r7, #96]	; 0x60
	looper++;
 800095a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800095c:	3301      	adds	r3, #1
 800095e:	66fb      	str	r3, [r7, #108]	; 0x6c
  	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	4838      	ldr	r0, [pc, #224]	; (8000a48 <main+0x220>)
 8000966:	f001 fe0d 	bl	8002584 <HAL_GPIO_WritePin>

  	OpenSD(file_name,a);
 800096a:	2132      	movs	r1, #50	; 0x32
 800096c:	4837      	ldr	r0, [pc, #220]	; (8000a4c <main+0x224>)
 800096e:	f7ff fee1 	bl	8000734 <OpenSD>

	for(int a = 0 ; a<100;a++)
 8000972:	2300      	movs	r3, #0
 8000974:	66bb      	str	r3, [r7, #104]	; 0x68
 8000976:	e024      	b.n	80009c2 <main+0x19a>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097c:	4831      	ldr	r0, [pc, #196]	; (8000a44 <main+0x21c>)
 800097e:	f001 fe1a 	bl	80025b6 <HAL_GPIO_TogglePin>
		timestart = HAL_GetTick();
 8000982:	f000 fed5 	bl	8001730 <HAL_GetTick>
 8000986:	4603      	mov	r3, r0
 8000988:	667b      	str	r3, [r7, #100]	; 0x64
	  	//sprintf(wtext, "%d",a);
		WriteSD(wtext,chunk_size,&byteswritten);
 800098a:	4a31      	ldr	r2, [pc, #196]	; (8000a50 <main+0x228>)
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	482a      	ldr	r0, [pc, #168]	; (8000a3c <main+0x214>)
 8000992:	f7ff fee9 	bl	8000768 <WriteSD>
		timestop = HAL_GetTick();
 8000996:	f000 fecb 	bl	8001730 <HAL_GetTick>
 800099a:	4603      	mov	r3, r0
 800099c:	663b      	str	r3, [r7, #96]	; 0x60
		HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
 800099e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80009a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a2:	1ad2      	subs	r2, r2, r3
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	492b      	ldr	r1, [pc, #172]	; (8000a54 <main+0x22c>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00b fe7b 	bl	800c6a4 <siprintf>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	1d39      	adds	r1, r7, #4
 80009b4:	230a      	movs	r3, #10
 80009b6:	4828      	ldr	r0, [pc, #160]	; (8000a58 <main+0x230>)
 80009b8:	f006 ff1c 	bl	80077f4 <HAL_UART_Transmit>
	for(int a = 0 ; a<100;a++)
 80009bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009be:	3301      	adds	r3, #1
 80009c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80009c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c4:	2b63      	cmp	r3, #99	; 0x63
 80009c6:	ddd7      	ble.n	8000978 <main+0x150>
	}
	CloseSD();
 80009c8:	f7ff feea 	bl	80007a0 <CloseSD>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <main+0x21c>)
 80009d2:	f001 fdf0 	bl	80025b6 <HAL_GPIO_TogglePin>

	OpenSD(file_name,a);
 80009d6:	2132      	movs	r1, #50	; 0x32
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <main+0x224>)
 80009da:	f7ff feab 	bl	8000734 <OpenSD>
	sprintf(text, "\n");
 80009de:	491f      	ldr	r1, [pc, #124]	; (8000a5c <main+0x234>)
 80009e0:	481f      	ldr	r0, [pc, #124]	; (8000a60 <main+0x238>)
 80009e2:	f00b fe5f 	bl	800c6a4 <siprintf>
	WriteSD(text,strlen((char *)text),&byteswritten);
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <main+0x238>)
 80009e8:	f7ff fc92 	bl	8000310 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <main+0x228>)
 80009f0:	4619      	mov	r1, r3
 80009f2:	481b      	ldr	r0, [pc, #108]	; (8000a60 <main+0x238>)
 80009f4:	f7ff feb8 	bl	8000768 <WriteSD>
	CloseSD();
 80009f8:	f7ff fed2 	bl	80007a0 <CloseSD>

	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <main+0x220>)
 8000a02:	f001 fdbf 	bl	8002584 <HAL_GPIO_WritePin>
	if(looper == 20){
 8000a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a08:	2b14      	cmp	r3, #20
 8000a0a:	d1a2      	bne.n	8000952 <main+0x12a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <main+0x21c>)
 8000a12:	f001 fdd0 	bl	80025b6 <HAL_GPIO_TogglePin>
		WriteTime();
 8000a16:	f000 fab5 	bl	8000f84 <WriteTime>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <main+0x21c>)
 8000a20:	f001 fdb0 	bl	8002584 <HAL_GPIO_WritePin>
		CloseSD();
 8000a24:	f7ff febc 	bl	80007a0 <CloseSD>
		while(1){
			HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 fe8d 	bl	8001748 <HAL_Delay>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <main+0x21c>)
 8000a34:	f001 fdbf 	bl	80025b6 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000a38:	e7f6      	b.n	8000a28 <main+0x200>
 8000a3a:	bf00      	nop
 8000a3c:	2400017c 	.word	0x2400017c
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	24000028 	.word	0x24000028
 8000a50:	24002254 	.word	0x24002254
 8000a54:	0800cf24 	.word	0x0800cf24
 8000a58:	240021c4 	.word	0x240021c4
 8000a5c:	0800cf38 	.word	0x0800cf38
 8000a60:	24000000 	.word	0x24000000

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09c      	sub	sp, #112	; 0x70
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	224c      	movs	r2, #76	; 0x4c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00b fe0e 	bl	800c694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00b fe08 	bl	800c694 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f002 f83d 	bl	8002b04 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa6:	bf00      	nop
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <SystemClock_Config+0xdc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab4:	d1f8      	bne.n	8000aa8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ab6:	2321      	movs	r3, #33	; 0x21
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000ad0:	f240 1313 	movw	r3, #275	; 0x113
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f840 	bl	8002b78 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000afe:	f000 fa7f 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	233f      	movs	r3, #63	; 0x3f
 8000b04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2303      	movs	r3, #3
 8000b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b12:	2340      	movs	r3, #64	; 0x40
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b16:	2340      	movs	r3, #64	; 0x40
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b20:	2340      	movs	r3, #64	; 0x40
 8000b22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2103      	movs	r1, #3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 fbd1 	bl	80032d0 <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b34:	f000 fa64 	bl	8001000 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	; 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024800 	.word	0x58024800

08000b44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b5c:	22e1      	movs	r2, #225	; 0xe1
 8000b5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <MX_ETH_Init+0x90>)
 8000b88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b94:	f000 ff20 	bl	80019d8 <HAL_ETH_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b9e:	f000 fa2f 	bl	8001000 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ba2:	2234      	movs	r2, #52	; 0x34
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000ba8:	f00b fd74 	bl	800c694 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000bae:	2221      	movs	r2, #33	; 0x21
 8000bb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000bb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24002548 	.word	0x24002548
 8000bc8:	40028000 	.word	0x40028000
 8000bcc:	2400217c 	.word	0x2400217c
 8000bd0:	24000100 	.word	0x24000100
 8000bd4:	240000a0 	.word	0x240000a0
 8000bd8:	240025d0 	.word	0x240025d0

08000bdc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SDMMC1_SD_Init+0x38>)
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <MX_SDMMC1_SD_Init+0x3c>)
 8000be4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_SDMMC1_SD_Init+0x38>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SDMMC1_SD_Init+0x38>)
 8000bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf2:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_SDMMC1_SD_Init+0x38>)
 8000bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfa:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <MX_SDMMC1_SD_Init+0x38>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <MX_SDMMC1_SD_Init+0x38>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	24002258 	.word	0x24002258
 8000c18:	52007000 	.word	0x52007000

08000c1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c22:	4a23      	ldr	r2, [pc, #140]	; (8000cb0 <MX_USART3_UART_Init+0x94>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c66:	f006 fd75 	bl	8007754 <HAL_UART_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c70:	f000 f9c6 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c78:	f007 fe9e 	bl	80089b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f000 f9bd 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c8a:	f007 fed3 	bl	8008a34 <HAL_UARTEx_SetRxFifoThreshold>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f000 f9b4 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_USART3_UART_Init+0x90>)
 8000c9a:	f007 fe54 	bl	8008946 <HAL_UARTEx_DisableFifoMode>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f000 f9ac 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	240021c4 	.word	0x240021c4
 8000cb0:	40004800 	.word	0x40004800

08000cb4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <MX_MDMA_Init+0xbc>)
 8000ccc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <MX_MDMA_Init+0xbc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_MDMA_Init+0xbc>)
 8000cdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000cea:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <MX_MDMA_Init+0xc4>)
 8000cec:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000cf0:	221d      	movs	r2, #29
 8000cf2:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d46:	f001 fc50 	bl	80025ea <HAL_MDMA_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000d50:	f000 f956 	bl	8001000 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <MX_MDMA_Init+0xc0>)
 8000d5a:	f001 fc92 	bl	8002682 <HAL_MDMA_ConfigPostRequestMask>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000d64:	f000 f94c 	bl	8001000 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	207a      	movs	r0, #122	; 0x7a
 8000d6e:	f000 fdfe 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d72:	207a      	movs	r0, #122	; 0x7a
 8000d74:	f000 fe15 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58024400 	.word	0x58024400
 8000d84:	240024dc 	.word	0x240024dc
 8000d88:	52000040 	.word	0x52000040

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a6f      	ldr	r2, [pc, #444]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc0:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a68      	ldr	r2, [pc, #416]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b5e      	ldr	r3, [pc, #376]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a59      	ldr	r2, [pc, #356]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b56      	ldr	r3, [pc, #344]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a51      	ldr	r2, [pc, #324]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a4a      	ldr	r2, [pc, #296]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <MX_GPIO_Init+0x1dc>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e7a:	483c      	ldr	r0, [pc, #240]	; (8000f6c <MX_GPIO_Init+0x1e0>)
 8000e7c:	f001 fb82 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	483a      	ldr	r0, [pc, #232]	; (8000f70 <MX_GPIO_Init+0x1e4>)
 8000e88:	f001 fb7c 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4838      	ldr	r0, [pc, #224]	; (8000f74 <MX_GPIO_Init+0x1e8>)
 8000e92:	f001 fb77 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4833      	ldr	r0, [pc, #204]	; (8000f78 <MX_GPIO_Init+0x1ec>)
 8000eac:	f001 f9aa 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000eb0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4828      	ldr	r0, [pc, #160]	; (8000f6c <MX_GPIO_Init+0x1e0>)
 8000eca:	f001 f99b 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <MX_GPIO_Init+0x1e4>)
 8000ee8:	f001 f98c 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	481e      	ldr	r0, [pc, #120]	; (8000f7c <MX_GPIO_Init+0x1f0>)
 8000f02:	f001 f97f 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4819      	ldr	r0, [pc, #100]	; (8000f80 <MX_GPIO_Init+0x1f4>)
 8000f1c:	f001 f972 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f32:	230a      	movs	r3, #10
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4810      	ldr	r0, [pc, #64]	; (8000f80 <MX_GPIO_Init+0x1f4>)
 8000f3e:	f001 f961 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_GPIO_Init+0x1e8>)
 8000f5a:	f001 f953 	bl	8002204 <HAL_GPIO_Init>

}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	; 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58020c00 	.word	0x58020c00
 8000f74:	58021000 	.word	0x58021000
 8000f78:	58020800 	.word	0x58020800
 8000f7c:	58021800 	.word	0x58021800
 8000f80:	58020000 	.word	0x58020000

08000f84 <WriteTime>:

/* USER CODE BEGIN 4 */
void WriteTime()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000f88:	2232      	movs	r2, #50	; 0x32
 8000f8a:	4917      	ldr	r1, [pc, #92]	; (8000fe8 <WriteTime+0x64>)
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <WriteTime+0x68>)
 8000f8e:	f00a faf3 	bl	800b578 <f_open>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <WriteTime+0x18>
	{
		Error_Handler();
 8000f98:	f000 f832 	bl	8001000 <Error_Handler>
	}
		sprintf(text, "\n#######################%u\n",HAL_GetTick());
 8000f9c:	f000 fbc8 	bl	8001730 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4912      	ldr	r1, [pc, #72]	; (8000ff0 <WriteTime+0x6c>)
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <WriteTime+0x70>)
 8000fa8:	f00b fb7c 	bl	800c6a4 <siprintf>
		res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <WriteTime+0x70>)
 8000fae:	f7ff f9af 	bl	8000310 <strlen>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <WriteTime+0x74>)
 8000fb6:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <WriteTime+0x70>)
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <WriteTime+0x68>)
 8000fba:	f00a fc9b 	bl	800b8f4 <f_write>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <WriteTime+0x78>)
 8000fc4:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <WriteTime+0x74>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <WriteTime+0x52>
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <WriteTime+0x78>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <WriteTime+0x58>
	{
		Error_Handler();
 8000fd6:	f000 f813 	bl	8001000 <Error_Handler>
 8000fda:	e003      	b.n	8000fe4 <WriteTime+0x60>
	}
	else
	{
		f_close(&SDFile);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <WriteTime+0x68>)
 8000fde:	f00a fe7c 	bl	800bcda <f_close>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	0800cf3c 	.word	0x0800cf3c
 8000fec:	24002610 	.word	0x24002610
 8000ff0:	0800cf48 	.word	0x0800cf48
 8000ff4:	24000000 	.word	0x24000000
 8000ff8:	24002254 	.word	0x24002254
 8000ffc:	240024d8 	.word	0x240024d8

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <Error_Handler+0x2c>)
 800100a:	f001 fabb 	bl	8002584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2102      	movs	r1, #2
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <Error_Handler+0x30>)
 8001014:	f001 fab6 	bl	8002584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <Error_Handler+0x2c>)
 8001020:	f001 fab0 	bl	8002584 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x28>
 800102a:	bf00      	nop
 800102c:	58020400 	.word	0x58020400
 8001030:	58021000 	.word	0x58021000

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_MspInit+0x30>)
 800103c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x30>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x30>)
 800104c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	58024400 	.word	0x58024400

08001068 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a59      	ldr	r2, [pc, #356]	; (80011ec <HAL_ETH_MspInit+0x184>)
 8001086:	4293      	cmp	r3, r2
 8001088:	f040 80ab 	bne.w	80011e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800108c:	4b58      	ldr	r3, [pc, #352]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 800108e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001092:	4a57      	ldr	r2, [pc, #348]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001098:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800109c:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 800109e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010aa:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010d8:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a40      	ldr	r2, [pc, #256]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a39      	ldr	r2, [pc, #228]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_ETH_MspInit+0x188>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800115e:	2332      	movs	r3, #50	; 0x32
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116e:	230b      	movs	r3, #11
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	481e      	ldr	r0, [pc, #120]	; (80011f4 <HAL_ETH_MspInit+0x18c>)
 800117a:	f001 f843 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800117e:	2386      	movs	r3, #134	; 0x86
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118e:	230b      	movs	r3, #11
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <HAL_ETH_MspInit+0x190>)
 800119a:	f001 f833 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b0:	230b      	movs	r3, #11
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <HAL_ETH_MspInit+0x194>)
 80011bc:	f001 f822 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d2:	230b      	movs	r3, #11
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <HAL_ETH_MspInit+0x198>)
 80011de:	f001 f811 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3738      	adds	r7, #56	; 0x38
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40028000 	.word	0x40028000
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58020800 	.word	0x58020800
 80011f8:	58020000 	.word	0x58020000
 80011fc:	58020400 	.word	0x58020400
 8001200:	58021800 	.word	0x58021800

08001204 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0b8      	sub	sp, #224	; 0xe0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	22b4      	movs	r2, #180	; 0xb4
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00b fa35 	bl	800c694 <memset>
  if(hsd->Instance==SDMMC1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a3b      	ldr	r2, [pc, #236]	; (800131c <HAL_SD_MspInit+0x118>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d16e      	bne.n	8001312 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001238:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800123a:	2300      	movs	r3, #0
 800123c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fbd0 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800124e:	f7ff fed7 	bl	8001000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001254:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001258:	4a31      	ldr	r2, [pc, #196]	; (8001320 <HAL_SD_MspInit+0x11c>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001264:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <HAL_SD_MspInit+0x11c>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_SD_MspInit+0x11c>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012c6:	230c      	movs	r3, #12
 80012c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d0:	4619      	mov	r1, r3
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <HAL_SD_MspInit+0x120>)
 80012d4:	f000 ff96 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d8:	2304      	movs	r3, #4
 80012da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012f0:	230c      	movs	r3, #12
 80012f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012fa:	4619      	mov	r1, r3
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <HAL_SD_MspInit+0x124>)
 80012fe:	f000 ff81 	bl	8002204 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2031      	movs	r0, #49	; 0x31
 8001308:	f000 fb31 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800130c:	2031      	movs	r0, #49	; 0x31
 800130e:	f000 fb48 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	37e0      	adds	r7, #224	; 0xe0
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	52007000 	.word	0x52007000
 8001320:	58024400 	.word	0x58024400
 8001324:	58020800 	.word	0x58020800
 8001328:	58020c00 	.word	0x58020c00

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0b6      	sub	sp, #216	; 0xd8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	22b4      	movs	r2, #180	; 0xb4
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00b f9a1 	bl	800c694 <memset>
  if(huart->Instance==USART3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a25      	ldr	r2, [pc, #148]	; (80013ec <HAL_UART_MspInit+0xc0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d142      	bne.n	80013e2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800135c:	2302      	movs	r3, #2
 800135e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fb3c 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001376:	f7ff fe43 	bl	8001000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_UART_MspInit+0xc4>)
 800137c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_UART_MspInit+0xc4>)
 8001382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001386:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0xc4>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_UART_MspInit+0xc4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_UART_MspInit+0xc4>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_UART_MspInit+0xc4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80013b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d0:	2307      	movs	r3, #7
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <HAL_UART_MspInit+0xc8>)
 80013de:	f000 ff11 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	37d8      	adds	r7, #216	; 0xd8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40004800 	.word	0x40004800
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020c00 	.word	0x58020c00

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f960 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <SDMMC1_IRQHandler+0x10>)
 8001452:	f004 ff8d 	bl	8006370 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24002258 	.word	0x24002258

08001460 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <MDMA_IRQHandler+0x10>)
 8001466:	f001 f95f 	bl	8002728 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	240024dc 	.word	0x240024dc

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f00b f8cc 	bl	800c640 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	24050000 	.word	0x24050000
 80014d4:	00000800 	.word	0x00000800
 80014d8:	24002184 	.word	0x24002184
 80014dc:	24002a80 	.word	0x24002a80

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <SystemInit+0xd0>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ea:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <SystemInit+0xd0>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <SystemInit+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d807      	bhi.n	8001510 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <SystemInit+0xd4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 030f 	bic.w	r3, r3, #15
 8001508:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <SystemInit+0xd4>)
 800150a:	f043 0307 	orr.w	r3, r3, #7
 800150e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <SystemInit+0xd8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <SystemInit+0xd8>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <SystemInit+0xd8>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <SystemInit+0xd8>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4924      	ldr	r1, [pc, #144]	; (80015b8 <SystemInit+0xd8>)
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <SystemInit+0xdc>)
 800152a:	4013      	ands	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <SystemInit+0xd4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <SystemInit+0xd4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 030f 	bic.w	r3, r3, #15
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <SystemInit+0xd4>)
 8001544:	f043 0307 	orr.w	r3, r3, #7
 8001548:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <SystemInit+0xd8>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <SystemInit+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <SystemInit+0xd8>)
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <SystemInit+0xe0>)
 8001560:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <SystemInit+0xd8>)
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <SystemInit+0xe4>)
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <SystemInit+0xd8>)
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <SystemInit+0xe8>)
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SystemInit+0xd8>)
 8001570:	2200      	movs	r2, #0
 8001572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <SystemInit+0xd8>)
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <SystemInit+0xe8>)
 8001578:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <SystemInit+0xd8>)
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <SystemInit+0xe8>)
 8001584:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <SystemInit+0xd8>)
 8001588:	2200      	movs	r2, #0
 800158a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <SystemInit+0xd8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <SystemInit+0xd8>)
 8001592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001596:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <SystemInit+0xd8>)
 800159a:	2200      	movs	r2, #0
 800159c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <SystemInit+0xec>)
 80015a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015a4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	52002000 	.word	0x52002000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c0:	02020200 	.word	0x02020200
 80015c4:	01ff0000 	.word	0x01ff0000
 80015c8:	01010280 	.word	0x01010280
 80015cc:	52004000 	.word	0x52004000

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015d4:	f7ff ff84 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f00b f825 	bl	800c64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff f911 	bl	8000828 <main>
  bx  lr
 8001606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800160c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001610:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8001614:	0800d0d8 	.word	0x0800d0d8
  ldr r2, =_sbss
 8001618:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 800161c:	24002a80 	.word	0x24002a80

08001620 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC3_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162a:	2003      	movs	r0, #3
 800162c:	f000 f994 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001630:	f002 f804 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_Init+0x68>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	4913      	ldr	r1, [pc, #76]	; (8001690 <HAL_Init+0x6c>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_Init+0x68>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_Init+0x6c>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_Init+0x70>)
 8001666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_Init+0x74>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f814 	bl	800169c <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e002      	b.n	8001684 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800167e:	f7ff fcd9 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400
 8001690:	0800cfa8 	.word	0x0800cfa8
 8001694:	24000030 	.word	0x24000030
 8001698:	2400002c 	.word	0x2400002c

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_InitTick+0x60>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e021      	b.n	80016f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_InitTick+0x64>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f979 	bl	80019be <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f943 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x68>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	24000038 	.word	0x24000038
 8001700:	2400002c 	.word	0x2400002c
 8001704:	24000034 	.word	0x24000034

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	24000038 	.word	0x24000038
 800172c:	24002604 	.word	0x24002604

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	24002604 	.word	0x24002604

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24000038 	.word	0x24000038

08001790 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017a0:	4904      	ldr	r1, [pc, #16]	; (80017b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	58000400 	.word	0x58000400

080017b8 <__NVIC_SetPriorityGrouping>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	05fa0000 	.word	0x05fa0000

08001800 <__NVIC_GetPriorityGrouping>:
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0c6      	b.n	8001b78 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fb38 	bl	8001068 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2223      	movs	r2, #35	; 0x23
 80019fc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_ETH_Init+0x1a8>)
 8001a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a04:	4a5e      	ldr	r2, [pc, #376]	; (8001b80 <HAL_ETH_Init+0x1a8>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_ETH_Init+0x1a8>)
 8001a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7a1b      	ldrb	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff feb3 	bl	8001790 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a2a:	e003      	b.n	8001a34 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a2c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a30:	f7ff feae 	bl	8001790 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fe70 	bl	8001730 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a52:	e00f      	b.n	8001a74 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a54:	f7ff fe6c 	bl	8001730 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a62:	d907      	bls.n	8001a74 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	22e0      	movs	r2, #224	; 0xe0
 8001a6e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e081      	b.n	8001b78 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1e6      	bne.n	8001a54 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fac0 	bl	800200c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a8c:	f001 ff50 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HAL_ETH_Init+0x1ac>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9a      	lsrs	r2, r3, #18
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3a01      	subs	r2, #1
 8001aa0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fa13 	bl	8001ed0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ac0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	22e0      	movs	r2, #224	; 0xe0
 8001adc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e04a      	b.n	8001b78 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aea:	4413      	add	r3, r2
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_ETH_Init+0x1b0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6952      	ldr	r2, [r2, #20]
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b02:	440b      	add	r3, r1
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fad8 	bl	80020bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fb1c 	bl	800214a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	3305      	adds	r3, #5
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	021a      	lsls	r2, r3, #8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	3304      	adds	r3, #4
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	3303      	adds	r3, #3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	061a      	lsls	r2, r3, #24
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b5e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2210      	movs	r2, #16
 8001b74:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	58024400 	.word	0x58024400
 8001b84:	431bde83 	.word	0x431bde83
 8001b88:	ffff8001 	.word	0xffff8001

08001b8c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b9e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001ba6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
 8001bac:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bae:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7b5b      	ldrb	r3, [r3, #13]
 8001bb4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bb6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7b9b      	ldrb	r3, [r3, #14]
 8001bbc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7bdb      	ldrb	r3, [r3, #15]
 8001bc4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bc6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	7c12      	ldrb	r2, [r2, #16]
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d102      	bne.n	8001bd6 <ETH_SetMACConfig+0x4a>
 8001bd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bd4:	e000      	b.n	8001bd8 <ETH_SetMACConfig+0x4c>
 8001bd6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bd8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	7c52      	ldrb	r2, [r2, #17]
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d102      	bne.n	8001be8 <ETH_SetMACConfig+0x5c>
 8001be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be6:	e000      	b.n	8001bea <ETH_SetMACConfig+0x5e>
 8001be8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bea:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7c9b      	ldrb	r3, [r3, #18]
 8001bf0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bf2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bf8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001bfe:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	7f1b      	ldrb	r3, [r3, #28]
 8001c04:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001c06:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7f5b      	ldrb	r3, [r3, #29]
 8001c0c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c0e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	7f92      	ldrb	r2, [r2, #30]
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	d102      	bne.n	8001c1e <ETH_SetMACConfig+0x92>
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	e000      	b.n	8001c20 <ETH_SetMACConfig+0x94>
 8001c1e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c20:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7fdb      	ldrb	r3, [r3, #31]
 8001c26:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c28:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c30:	2a00      	cmp	r2, #0
 8001c32:	d102      	bne.n	8001c3a <ETH_SetMACConfig+0xae>
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c38:	e000      	b.n	8001c3c <ETH_SetMACConfig+0xb0>
 8001c3a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c3c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c42:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c4a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c4c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <ETH_SetMACConfig+0x22c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c76:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c78:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c80:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c82:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c8a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c8c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d102      	bne.n	8001c9e <ETH_SetMACConfig+0x112>
 8001c98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c9c:	e000      	b.n	8001ca0 <ETH_SetMACConfig+0x114>
 8001c9e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001ca0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <ETH_SetMACConfig+0x230>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <ETH_SetMACConfig+0x234>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ce8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cee:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d101      	bne.n	8001cfe <ETH_SetMACConfig+0x172>
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	e000      	b.n	8001d00 <ETH_SetMACConfig+0x174>
 8001cfe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d00:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d12:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d28:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d30:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f023 0103 	bic.w	r1, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d56:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d101      	bne.n	8001d7a <ETH_SetMACConfig+0x1ee>
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0x1f0>
 8001d7a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d7c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d84:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d86:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d8e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d9c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	00048083 	.word	0x00048083
 8001dbc:	c0f88000 	.word	0xc0f88000
 8001dc0:	fffffef0 	.word	0xfffffef0

08001dc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <ETH_SetDMAConfig+0xf8>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001dea:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001df6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	7b1b      	ldrb	r3, [r3, #12]
 8001dfc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e0a:	4413      	add	r3, r2
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <ETH_SetDMAConfig+0xfc>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e1e:	440b      	add	r3, r1
 8001e20:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7b5b      	ldrb	r3, [r3, #13]
 8001e26:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <ETH_SetDMAConfig+0x100>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6811      	ldr	r1, [r2, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e4a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7d1b      	ldrb	r3, [r3, #20]
 8001e54:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e56:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7f5b      	ldrb	r3, [r3, #29]
 8001e5c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e6a:	4413      	add	r3, r2
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <ETH_SetDMAConfig+0x104>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6811      	ldr	r1, [r2, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e7e:	440b      	add	r3, r1
 8001e80:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7f1b      	ldrb	r3, [r3, #28]
 8001e86:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e98:	4413      	add	r3, r2
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <ETH_SetDMAConfig+0x108>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6811      	ldr	r1, [r2, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eac:	440b      	add	r3, r1
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	ffff87fd 	.word	0xffff87fd
 8001ec0:	ffff2ffe 	.word	0xffff2ffe
 8001ec4:	fffec000 	.word	0xfffec000
 8001ec8:	ffc0efef 	.word	0xffc0efef
 8001ecc:	7fc0ffff 	.word	0x7fc0ffff

08001ed0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0a4      	sub	sp, #144	; 0x90
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f28:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f2c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f52:	2300      	movs	r3, #0
 8001f54:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f7a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f84:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001faa:	2300      	movs	r3, #0
 8001fac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fde6 	bl	8001b8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fde:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fe4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fe8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ff0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fee1 	bl	8001dc4 <ETH_SetDMAConfig>
}
 8002002:	bf00      	nop
 8002004:	3790      	adds	r7, #144	; 0x90
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800201c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002024:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002026:	f001 fc83 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 800202a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d908      	bls.n	8002046 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d804      	bhi.n	8002046 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e027      	b.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d908      	bls.n	8002060 <ETH_MAC_MDIO_ClkConfig+0x54>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d204      	bcs.n	8002060 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e01a      	b.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d303      	bcc.n	8002070 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d911      	bls.n	8002094 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d908      	bls.n	800208a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d804      	bhi.n	800208a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e005      	b.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e000      	b.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002094:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	01312cff 	.word	0x01312cff
 80020ac:	02160ebf 	.word	0x02160ebf
 80020b0:	03938700 	.word	0x03938700
 80020b4:	05f5e0ff 	.word	0x05f5e0ff
 80020b8:	08f0d17f 	.word	0x08f0d17f

080020bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e01d      	b.n	8002106 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	3206      	adds	r2, #6
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d9de      	bls.n	80020ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f241 132c 	movw	r3, #4396	; 0x112c
 800211a:	4413      	add	r3, r2
 800211c:	2203      	movs	r2, #3
 800211e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68d9      	ldr	r1, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f241 1314 	movw	r3, #4372	; 0x1114
 800212c:	4413      	add	r3, r2
 800212e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e024      	b.n	80021a2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6919      	ldr	r1, [r3, #16]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3310      	adds	r3, #16
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d9d7      	bls.n	8002158 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f241 1330 	movw	r3, #4400	; 0x1130
 80021ce:	4413      	add	r3, r2
 80021d0:	2203      	movs	r2, #3
 80021d2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80021e0:	4413      	add	r3, r2
 80021e2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f241 1328 	movw	r3, #4392	; 0x1128
 80021f4:	4413      	add	r3, r2
 80021f6:	6019      	str	r1, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002212:	4b86      	ldr	r3, [pc, #536]	; (800242c <HAL_GPIO_Init+0x228>)
 8002214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002216:	e18c      	b.n	8002532 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 817e 	beq.w	800252c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_GPIO_Init+0x44>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d017      	beq.n	80022e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d123      	bne.n	800233a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0203 	and.w	r2, r3, #3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80d8 	beq.w	800252c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <HAL_GPIO_Init+0x22c>)
 800237e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002382:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <HAL_GPIO_Init+0x22c>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_GPIO_Init+0x22c>)
 800238e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <HAL_GPIO_Init+0x230>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_GPIO_Init+0x234>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d04a      	beq.n	800245c <HAL_GPIO_Init+0x258>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_GPIO_Init+0x238>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <HAL_GPIO_Init+0x23c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x240>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_GPIO_Init+0x244>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_GPIO_Init+0x248>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_GPIO_Init+0x24c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_GPIO_Init+0x250>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x20a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a15      	ldr	r2, [pc, #84]	; (8002458 <HAL_GPIO_Init+0x254>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x206>
 8002406:	2309      	movs	r3, #9
 8002408:	e029      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800240a:	230a      	movs	r3, #10
 800240c:	e027      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800240e:	2307      	movs	r3, #7
 8002410:	e025      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002412:	2306      	movs	r3, #6
 8002414:	e023      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002416:	2305      	movs	r3, #5
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800241a:	2304      	movs	r3, #4
 800241c:	e01f      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800241e:	2303      	movs	r3, #3
 8002420:	e01d      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002422:	2302      	movs	r3, #2
 8002424:	e01b      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002426:	2301      	movs	r3, #1
 8002428:	e019      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800242a:	bf00      	nop
 800242c:	58000080 	.word	0x58000080
 8002430:	58024400 	.word	0x58024400
 8002434:	58000400 	.word	0x58000400
 8002438:	58020000 	.word	0x58020000
 800243c:	58020400 	.word	0x58020400
 8002440:	58020800 	.word	0x58020800
 8002444:	58020c00 	.word	0x58020c00
 8002448:	58021000 	.word	0x58021000
 800244c:	58021400 	.word	0x58021400
 8002450:	58021800 	.word	0x58021800
 8002454:	58021c00 	.word	0x58021c00
 8002458:	58022400 	.word	0x58022400
 800245c:	2300      	movs	r3, #0
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246e:	4938      	ldr	r1, [pc, #224]	; (8002550 <HAL_GPIO_Init+0x34c>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae6b 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3724      	adds	r7, #36	; 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	58000400 	.word	0x58000400

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	041a      	lsls	r2, r3, #16
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	400b      	ands	r3, r1
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f2:	f7ff f89d 	bl	8001730 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e03b      	b.n	800267a <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002622:	e00f      	b.n	8002644 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8002624:	f7ff f884 	bl	8001730 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d908      	bls.n	8002644 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e01a      	b.n	800267a <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e8      	bne.n	8002624 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9be 	bl	80029d4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e03e      	b.n	800271a <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_MDMA_ConfigPostRequestMask+0x28>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e037      	b.n	800271a <HAL_MDMA_ConfigPostRequestMask+0x98>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d126      	bne.n	800270c <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11c      	bne.n	8002706 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	e00d      	b.n	8002710 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	e004      	b.n	8002710 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
 800270a:	e001      	b.n	8002710 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002718:	7dfb      	ldrb	r3, [r7, #23]
}
 800271a:	4618      	mov	r0, r3
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002734:	4b9a      	ldr	r3, [pc, #616]	; (80029a0 <HAL_MDMA_IRQHandler+0x278>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a9a      	ldr	r2, [pc, #616]	; (80029a4 <HAL_MDMA_IRQHandler+0x27c>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	4b97      	ldr	r3, [pc, #604]	; (80029a8 <HAL_MDMA_IRQHandler+0x280>)
 800274a:	4413      	add	r3, r2
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2201      	movs	r2, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800275a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 812e 	beq.w	80029c6 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d054      	beq.n	8002822 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d04d      	beq.n	8002822 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0202 	bic.w	r2, r2, #2
 8002794:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	669a      	str	r2, [r3, #104]	; 0x68
 80027b4:	e005      	b.n	80027c2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ba:	f043 0202 	orr.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d0:	f043 0204 	orr.w	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e6:	f043 0208 	orr.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2210      	movs	r2, #16
 8002844:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2208      	movs	r2, #8
 8002878:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d039      	beq.n	8002940 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d032      	beq.n	8002940 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80028e8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d110      	bne.n	8002918 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	2b00      	cmp	r3, #0
 800290c:	d05d      	beq.n	80029ca <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
        }
        return;
 8002916:	e058      	b.n	80029ca <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2202      	movs	r2, #2
 800291e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002944:	2b00      	cmp	r3, #0
 8002946:	d041      	beq.n	80029cc <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2204      	movs	r2, #4
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d307      	bcc.n	800297c <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f2      	bne.n	8002960 <HAL_MDMA_IRQHandler+0x238>
 800297a:	e000      	b.n	800297e <HAL_MDMA_IRQHandler+0x256>
        break;
 800297c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2203      	movs	r2, #3
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800299c:	e00a      	b.n	80029b4 <HAL_MDMA_IRQHandler+0x28c>
 800299e:	bf00      	nop
 80029a0:	2400002c 	.word	0x2400002c
 80029a4:	1b4e81b5 	.word	0x1b4e81b5
 80029a8:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
 80029c4:	e002      	b.n	80029cc <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80029ca:	bf00      	nop
    }
  }
}
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop

080029d4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68d9      	ldr	r1, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029fa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8002a06:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002a12:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8002a1c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002a28:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002a2a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d107      	bne.n	8002a46 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002a44:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da11      	bge.n	8002a7a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a64:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	425b      	negs	r3, r3
 8002a6c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	b292      	uxth	r2, r2
 8002a76:	621a      	str	r2, [r3, #32]
 8002a78:	e006      	b.n	8002a88 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b292      	uxth	r2, r2
 8002a86:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da15      	bge.n	8002abc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002a9e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	425b      	negs	r3, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6a19      	ldr	r1, [r3, #32]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	621a      	str	r2, [r3, #32]
 8002aba:	e009      	b.n	8002ad0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a19      	ldr	r1, [r3, #32]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	041a      	lsls	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d006      	beq.n	8002ae8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae6:	e003      	b.n	8002af0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2200      	movs	r2, #0
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_PWREx_ConfigSupply+0x70>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00a      	beq.n	8002b2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_PWREx_ConfigSupply+0x70>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e01f      	b.n	8002b6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e01d      	b.n	8002b6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_PWREx_ConfigSupply+0x70>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	490f      	ldr	r1, [pc, #60]	; (8002b74 <HAL_PWREx_ConfigSupply+0x70>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b3e:	f7fe fdf7 	bl	8001730 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b44:	e009      	b.n	8002b5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b46:	f7fe fdf3 	bl	8001730 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b54:	d901      	bls.n	8002b5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_PWREx_ConfigSupply+0x70>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d1ee      	bne.n	8002b46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	58024800 	.word	0x58024800

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e397      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b98:	4b9e      	ldr	r3, [pc, #632]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d007      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46>
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	2b18      	cmp	r3, #24
 8002bb2:	d110      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b95      	ldr	r3, [pc, #596]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e371      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x76>
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a8b      	ldr	r2, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x98>
 8002bf6:	4b87      	ldr	r3, [pc, #540]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a86      	ldr	r2, [pc, #536]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xbc>
 8002c1a:	4b7e      	ldr	r3, [pc, #504]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7d      	ldr	r2, [pc, #500]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7a      	ldr	r2, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c34:	4b77      	ldr	r3, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a76      	ldr	r2, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b74      	ldr	r3, [pc, #464]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a73      	ldr	r2, [pc, #460]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fd6c 	bl	8001730 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fd68 	bl	8001730 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e325      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6e:	4b69      	ldr	r3, [pc, #420]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe4>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fd58 	bl	8001730 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fd54 	bl	8001730 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e311      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x10c>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 808a 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb4:	4b57      	ldr	r3, [pc, #348]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cbe:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_RCC_OscConfig+0x162>
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2b18      	cmp	r3, #24
 8002cce:	d137      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1c8>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d132      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cda:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e2e3      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cf2:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0219 	bic.w	r2, r3, #25
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4945      	ldr	r1, [pc, #276]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d04:	f7fe fd14 	bl	8001730 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fd10 	bl	8001730 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e2cd      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	4936      	ldr	r1, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3e:	e043      	b.n	8002dc8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d026      	beq.n	8002d96 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d48:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0219 	bic.w	r2, r3, #25
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	492f      	ldr	r1, [pc, #188]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fce9 	bl	8001730 <HAL_GetTick>
 8002d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d62:	f7fe fce5 	bl	8001730 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e2a2      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	4921      	ldr	r1, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	e018      	b.n	8002dc8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fcc5 	bl	8001730 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe fcc1 	bl	8001730 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e27e      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d06d      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ddc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d007      	beq.n	8002dfa <HAL_RCC_OscConfig+0x282>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b18      	cmp	r3, #24
 8002dee:	d11e      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2b6>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d119      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_OscConfig+0x29c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2a0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d004      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e253      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e18:	4ba3      	ldr	r3, [pc, #652]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	49a0      	ldr	r1, [pc, #640]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e2c:	e040      	b.n	8002eb0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d023      	beq.n	8002e7e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e36:	4b9c      	ldr	r3, [pc, #624]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a9b      	ldr	r2, [pc, #620]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe fc75 	bl	8001730 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fc71 	bl	8001730 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e22e      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5c:	4b92      	ldr	r3, [pc, #584]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e68:	4b8f      	ldr	r3, [pc, #572]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	498c      	ldr	r1, [pc, #560]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60cb      	str	r3, [r1, #12]
 8002e7c:	e018      	b.n	8002eb0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e7e:	4b8a      	ldr	r3, [pc, #552]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a89      	ldr	r2, [pc, #548]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fc51 	bl	8001730 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e92:	f7fe fc4d 	bl	8001730 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e20a      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ea4:	4b80      	ldr	r3, [pc, #512]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d036      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d019      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec4:	4b78      	ldr	r3, [pc, #480]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	4a77      	ldr	r2, [pc, #476]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fc2e 	bl	8001730 <HAL_GetTick>
 8002ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fe fc2a 	bl	8001730 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1e7      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eea:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x360>
 8002ef6:	e018      	b.n	8002f2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef8:	4b6b      	ldr	r3, [pc, #428]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe fc14 	bl	8001730 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fc10 	bl	8001730 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1cd      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f1e:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d036      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d019      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a59      	ldr	r2, [pc, #356]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fbf1 	bl	8001730 <HAL_GetTick>
 8002f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f52:	f7fe fbed 	bl	8001730 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1aa      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f64:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x3da>
 8002f70:	e018      	b.n	8002fa4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f72:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fbd7 	bl	8001730 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f86:	f7fe fbd3 	bl	8001730 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e190      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f98:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8085 	beq.w	80030bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <HAL_RCC_OscConfig+0x534>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <HAL_RCC_OscConfig+0x534>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fbb7 	bl	8001730 <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe fbb3 	bl	8001730 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e170      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCC_OscConfig+0x534>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x482>
 8002fec:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e02d      	b.n	8003056 <HAL_RCC_OscConfig+0x4de>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x4a4>
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e01c      	b.n	8003056 <HAL_RCC_OscConfig+0x4de>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x4c6>
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	6713      	str	r3, [r2, #112]	; 0x70
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x4de>
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d015      	beq.n	800308a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fe fb67 	bl	8001730 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe fb63 	bl	8001730 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e11e      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_OscConfig+0x530>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ee      	beq.n	8003066 <HAL_RCC_OscConfig+0x4ee>
 8003088:	e018      	b.n	80030bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe fb51 	bl	8001730 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003090:	e00e      	b.n	80030b0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fb4d 	bl	8001730 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d905      	bls.n	80030b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e108      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
 80030a8:	58024400 	.word	0x58024400
 80030ac:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80f9 	beq.w	80032b8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030c6:	4b7f      	ldr	r3, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ce:	2b18      	cmp	r3, #24
 80030d0:	f000 80b4 	beq.w	800323c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f040 8095 	bne.w	8003208 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b79      	ldr	r3, [pc, #484]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a78      	ldr	r2, [pc, #480]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fb21 	bl	8001730 <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fb1d 	bl	8001730 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0da      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003110:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003114:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x750>)
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	430a      	orrs	r2, r1
 8003124:	4967      	ldr	r1, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	628b      	str	r3, [r1, #40]	; 0x28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	3b01      	subs	r3, #1
 8003130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	3b01      	subs	r3, #1
 800313a:	025b      	lsls	r3, r3, #9
 800313c:	b29b      	uxth	r3, r3
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	3b01      	subs	r3, #1
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800315a:	495a      	ldr	r1, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800315c:	4313      	orrs	r3, r2
 800315e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800316c:	4b55      	ldr	r3, [pc, #340]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800316e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003170:	4b56      	ldr	r3, [pc, #344]	; (80032cc <HAL_RCC_OscConfig+0x754>)
 8003172:	4013      	ands	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003178:	00d2      	lsls	r2, r2, #3
 800317a:	4952      	ldr	r1, [pc, #328]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003180:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f023 020c 	bic.w	r2, r3, #12
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	494d      	ldr	r1, [pc, #308]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003192:	4b4c      	ldr	r3, [pc, #304]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	f023 0202 	bic.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	4949      	ldr	r1, [pc, #292]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031a4:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	4a46      	ldr	r2, [pc, #280]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80031c8:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	4a3d      	ldr	r2, [pc, #244]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe faa6 	bl	8001730 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe faa2 	bl	8001730 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e05f      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x670>
 8003206:	e057      	b.n	80032b8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800320e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fa8c 	bl	8001730 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fa88 	bl	8001730 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e045      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800322e:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x6a4>
 800323a:	e03d      	b.n	80032b8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCC_OscConfig+0x74c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b01      	cmp	r3, #1
 800324e:	d031      	beq.n	80032b4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 0203 	and.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d12a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d122      	bne.n	80032b4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d11a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0a5b      	lsrs	r3, r3, #9
 8003282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d111      	bne.n	80032b4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0e1b      	lsrs	r3, r3, #24
 80032a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3730      	adds	r7, #48	; 0x30
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
 80032c8:	fffffc0c 	.word	0xfffffc0c
 80032cc:	ffff0007 	.word	0xffff0007

080032d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e19c      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b87      	ldr	r3, [pc, #540]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4985      	ldr	r1, [pc, #532]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e184      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003330:	4b78      	ldr	r3, [pc, #480]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	4975      	ldr	r1, [pc, #468]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800333e:	4313      	orrs	r3, r2
 8003340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335a:	429a      	cmp	r2, r3
 800335c:	d908      	bls.n	8003370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	496a      	ldr	r1, [pc, #424]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003388:	429a      	cmp	r2, r3
 800338a:	d908      	bls.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800338c:	4b61      	ldr	r3, [pc, #388]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	495e      	ldr	r1, [pc, #376]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d908      	bls.n	80033cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4953      	ldr	r1, [pc, #332]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d908      	bls.n	80033fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f023 020f 	bic.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4947      	ldr	r1, [pc, #284]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d055      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003414:	4313      	orrs	r3, r2
 8003416:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d107      	bne.n	8003430 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003420:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d121      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0f6      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d107      	bne.n	8003448 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d115      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ea      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003450:	4b30      	ldr	r3, [pc, #192]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0de      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d6      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4925      	ldr	r1, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800347e:	4313      	orrs	r3, r2
 8003480:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe f955 	bl	8001730 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f7fe f951 	bl	8001730 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0be      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d1eb      	bne.n	800348a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d010      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d208      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	490e      	ldr	r1, [pc, #56]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d214      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 020f 	bic.w	r2, r3, #15
 80034f6:	4906      	ldr	r1, [pc, #24]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e086      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
 8003510:	52002000 	.word	0x52002000
 8003514:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003530:	429a      	cmp	r2, r3
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003534:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4939      	ldr	r1, [pc, #228]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003542:	4313      	orrs	r3, r2
 8003544:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355e:	429a      	cmp	r2, r3
 8003560:	d208      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003562:	4b31      	ldr	r3, [pc, #196]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	492e      	ldr	r1, [pc, #184]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003570:	4313      	orrs	r3, r2
 8003572:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800358c:	429a      	cmp	r2, r3
 800358e:	d208      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4922      	ldr	r1, [pc, #136]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d208      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4917      	ldr	r1, [pc, #92]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035d0:	f000 f834 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4912      	ldr	r1, [pc, #72]	; (800362c <HAL_RCC_ClockConfig+0x35c>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a0d      	ldr	r2, [pc, #52]	; (800362c <HAL_RCC_ClockConfig+0x35c>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x360>)
 8003606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x364>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x368>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe f842 	bl	800169c <HAL_InitTick>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	58024400 	.word	0x58024400
 800362c:	0800cfa8 	.word	0x0800cfa8
 8003630:	24000030 	.word	0x24000030
 8003634:	2400002c 	.word	0x2400002c
 8003638:	24000034 	.word	0x24000034

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003642:	4bb3      	ldr	r3, [pc, #716]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364a:	2b18      	cmp	r3, #24
 800364c:	f200 8155 	bhi.w	80038fa <HAL_RCC_GetSysClockFreq+0x2be>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	080036bd 	.word	0x080036bd
 800365c:	080038fb 	.word	0x080038fb
 8003660:	080038fb 	.word	0x080038fb
 8003664:	080038fb 	.word	0x080038fb
 8003668:	080038fb 	.word	0x080038fb
 800366c:	080038fb 	.word	0x080038fb
 8003670:	080038fb 	.word	0x080038fb
 8003674:	080038fb 	.word	0x080038fb
 8003678:	080036e3 	.word	0x080036e3
 800367c:	080038fb 	.word	0x080038fb
 8003680:	080038fb 	.word	0x080038fb
 8003684:	080038fb 	.word	0x080038fb
 8003688:	080038fb 	.word	0x080038fb
 800368c:	080038fb 	.word	0x080038fb
 8003690:	080038fb 	.word	0x080038fb
 8003694:	080038fb 	.word	0x080038fb
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080038fb 	.word	0x080038fb
 80036a0:	080038fb 	.word	0x080038fb
 80036a4:	080038fb 	.word	0x080038fb
 80036a8:	080038fb 	.word	0x080038fb
 80036ac:	080038fb 	.word	0x080038fb
 80036b0:	080038fb 	.word	0x080038fb
 80036b4:	080038fb 	.word	0x080038fb
 80036b8:	080036ef 	.word	0x080036ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036bc:	4b94      	ldr	r3, [pc, #592]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036c8:	4b91      	ldr	r3, [pc, #580]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	08db      	lsrs	r3, r3, #3
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	4a90      	ldr	r2, [pc, #576]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80036da:	e111      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036dc:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036de:	61bb      	str	r3, [r7, #24]
    break;
 80036e0:	e10e      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e4:	61bb      	str	r3, [r7, #24]
    break;
 80036e6:	e10b      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80036e8:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ea:	61bb      	str	r3, [r7, #24]
    break;
 80036ec:	e108      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ee:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036f8:	4b85      	ldr	r3, [pc, #532]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003702:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003704:	4b82      	ldr	r3, [pc, #520]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800370e:	4b80      	ldr	r3, [pc, #512]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80e1 	beq.w	80038f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b02      	cmp	r3, #2
 8003736:	f000 8083 	beq.w	8003840 <HAL_RCC_GetSysClockFreq+0x204>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b02      	cmp	r3, #2
 800373e:	f200 80a1 	bhi.w	8003884 <HAL_RCC_GetSysClockFreq+0x248>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x114>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d056      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800374e:	e099      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003750:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02d      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800375c:	4b6c      	ldr	r3, [pc, #432]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	4a6b      	ldr	r2, [pc, #428]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b62      	ldr	r3, [pc, #392]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a02 	vldr	s12, [r7, #8]
 800379a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80037b6:	e087      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b51      	ldr	r3, [pc, #324]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037fa:	e065      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003928 <HAL_RCC_GetSysClockFreq+0x2ec>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800383e:	e043      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800392c <HAL_RCC_GetSysClockFreq+0x2f0>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a02 	vldr	s12, [r7, #8]
 8003866:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003882:	e021      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003928 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d2:	3301      	adds	r3, #1
 80038d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ec:	ee17 3a90 	vmov	r3, s15
 80038f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80038f2:	e005      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
    break;
 80038f8:	e002      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038fc:	61bb      	str	r3, [r7, #24]
    break;
 80038fe:	bf00      	nop
  }

  return sysclockfreq;
 8003900:	69bb      	ldr	r3, [r7, #24]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	03d09000 	.word	0x03d09000
 8003918:	003d0900 	.word	0x003d0900
 800391c:	007a1200 	.word	0x007a1200
 8003920:	46000000 	.word	0x46000000
 8003924:	4c742400 	.word	0x4c742400
 8003928:	4a742400 	.word	0x4a742400
 800392c:	4af42400 	.word	0x4af42400

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003936:	f7ff fe81 	bl	800363c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_GetHCLKFreq+0x50>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490f      	ldr	r1, [pc, #60]	; (8003984 <HAL_RCC_GetHCLKFreq+0x54>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_RCC_GetHCLKFreq+0x50>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_RCC_GetHCLKFreq+0x54>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_RCC_GetHCLKFreq+0x58>)
 800396c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_RCC_GetHCLKFreq+0x58>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400
 8003984:	0800cfa8 	.word	0x0800cfa8
 8003988:	24000030 	.word	0x24000030
 800398c:	2400002c 	.word	0x2400002c

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003994:	f7ff ffcc 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	58024400 	.word	0x58024400
 80039b8:	0800cfa8 	.word	0x0800cfa8

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039c0:	f7ff ffb6 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4904      	ldr	r1, [pc, #16]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	58024400 	.word	0x58024400
 80039e4:	0800cfa8 	.word	0x0800cfa8

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f4:	2300      	movs	r3, #0
 80039f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03f      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a0c:	d02a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a12:	d824      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a18:	d018      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1e:	d81e      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a28:	d007      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a2a:	e018      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2c:	4bab      	ldr	r3, [pc, #684]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	4aaa      	ldr	r2, [pc, #680]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a38:	e015      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 feff 	bl	8005844 <RCCEx_PLL2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a4a:	e00c      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	2102      	movs	r1, #2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 ffa8 	bl	80059a8 <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a5c:	e003      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
      break;
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a6c:	4b9b      	ldr	r3, [pc, #620]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	4998      	ldr	r1, [pc, #608]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a7e:	e001      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03d      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d826      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab5 	.word	0x08003ab5
 8003aa4:	08003ac3 	.word	0x08003ac3
 8003aa8:	08003ad5 	.word	0x08003ad5
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab4:	4b89      	ldr	r3, [pc, #548]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4a88      	ldr	r2, [pc, #544]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ac0:	e015      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 febb 	bl	8005844 <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ad2:	e00c      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3324      	adds	r3, #36	; 0x24
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 ff64 	bl	80059a8 <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aea:	e000      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af4:	4b79      	ldr	r3, [pc, #484]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	f023 0207 	bic.w	r2, r3, #7
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	4976      	ldr	r1, [pc, #472]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	650b      	str	r3, [r1, #80]	; 0x50
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d051      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b1e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003b22:	d036      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003b28:	d830      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b2e:	d032      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b34:	d82a      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b3a:	d02e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003b3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b40:	d824      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b46:	d018      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4c:	d81e      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b56:	d007      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b58:	e018      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a5f      	ldr	r2, [pc, #380]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b66:	e019      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fe68 	bl	8005844 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b78:	e010      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3324      	adds	r3, #36	; 0x24
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 ff11 	bl	80059a8 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e007      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b90:	e004      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b92:	bf00      	nop
 8003b94:	e002      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ba2:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bb0:	494a      	ldr	r1, [pc, #296]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	658b      	str	r3, [r1, #88]	; 0x58
 8003bb6:	e001      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d051      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bd2:	d036      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003bd4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bd8:	d830      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bde:	d032      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be4:	d82a      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bea:	d02e      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003bec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf0:	d824      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf6:	d018      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfc:	d81e      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c06:	d007      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003c08:	e018      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4a33      	ldr	r2, [pc, #204]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c16:	e019      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fe10 	bl	8005844 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c28:	e010      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3324      	adds	r3, #36	; 0x24
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 feb9 	bl	80059a8 <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c3a:	e007      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e004      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c60:	491e      	ldr	r1, [pc, #120]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	658b      	str	r3, [r1, #88]	; 0x58
 8003c66:	e001      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d035      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d01c      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d817      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d813      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d10f      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 fdcb 	bl	8005844 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	4902      	ldr	r1, [pc, #8]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d047      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf8:	d030      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfe:	d82a      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d04:	d02c      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d0a:	d824      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d10:	d018      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d81e      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d007      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d22:	e018      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d24:	4bac      	ldr	r3, [pc, #688]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4aab      	ldr	r2, [pc, #684]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d30:	e017      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fd83 	bl	8005844 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d42:	e00e      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 fe2c 	bl	80059a8 <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d54:	e005      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d68:	4b9b      	ldr	r3, [pc, #620]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4998      	ldr	r1, [pc, #608]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	650b      	str	r3, [r1, #80]	; 0x50
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d049      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d02e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d9a:	d828      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da0:	d02a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da6:	d822      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dac:	d026      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003db2:	d81c      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db8:	d010      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dbe:	d816      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01d      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d111      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fd37 	bl	8005844 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dda:	e012      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 fde0 	bl	80059a8 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dec:	e009      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
      break;
 8003df2:	e006      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003df4:	bf00      	nop
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e002      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e08:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	4970      	ldr	r1, [pc, #448]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	650b      	str	r3, [r1, #80]	; 0x50
 8003e1a:	e001      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04b      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e36:	d02e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e3c:	d828      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d02a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e48:	d822      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e4e:	d026      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e54:	d81c      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e60:	d816      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01d      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fce6 	bl	8005844 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e7c:	e012      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3324      	adds	r3, #36	; 0x24
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fd8f 	bl	80059a8 <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
      break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003eaa:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eb8:	4947      	ldr	r1, [pc, #284]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	658b      	str	r3, [r1, #88]	; 0x58
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ede:	d814      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ef6:	e00c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fca0 	bl	8005844 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f18:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	492c      	ldr	r1, [pc, #176]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	650b      	str	r3, [r1, #80]	; 0x50
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d032      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d81b      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f5d 	.word	0x08003f5d
 8003f54:	08003f6b 	.word	0x08003f6b
 8003f58:	08003f83 	.word	0x08003f83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 fc67 	bl	8005844 <RCCEx_PLL2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4910      	ldr	r1, [pc, #64]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f9c:	e001      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 808a 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fbb8 	bl	8001730 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc2:	e00d      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fd fbb4 	bl	8001730 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d906      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	75fb      	strb	r3, [r7, #23]
        break;
 8003fd6:	e009      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe0:	4bb9      	ldr	r3, [pc, #740]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0eb      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d166      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ff2:	4bb6      	ldr	r3, [pc, #728]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ffc:	4053      	eors	r3, r2
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	2b00      	cmp	r3, #0
 8004004:	d013      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004006:	4bb1      	ldr	r3, [pc, #708]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004010:	4bae      	ldr	r3, [pc, #696]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4aad      	ldr	r2, [pc, #692]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401c:	4bab      	ldr	r3, [pc, #684]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4aaa      	ldr	r2, [pc, #680]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004028:	4aa8      	ldr	r2, [pc, #672]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d115      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd fb79 	bl	8001730 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004040:	e00b      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd fb75 	bl	8001730 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d902      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	75fb      	strb	r3, [r7, #23]
            break;
 8004058:	e005      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405a:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ed      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d126      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407a:	d10d      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800407c:	4b93      	ldr	r3, [pc, #588]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800408a:	0919      	lsrs	r1, r3, #4
 800408c:	4b90      	ldr	r3, [pc, #576]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800408e:	400b      	ands	r3, r1
 8004090:	498e      	ldr	r1, [pc, #568]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	610b      	str	r3, [r1, #16]
 8004096:	e005      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004098:	4b8c      	ldr	r3, [pc, #560]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4a8b      	ldr	r2, [pc, #556]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800409e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040a2:	6113      	str	r3, [r2, #16]
 80040a4:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	4986      	ldr	r1, [pc, #536]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	670b      	str	r3, [r1, #112]	; 0x70
 80040b8:	e004      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	75bb      	strb	r3, [r7, #22]
 80040be:	e001      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d07e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d4:	2b28      	cmp	r3, #40	; 0x28
 80040d6:	d867      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	080041af 	.word	0x080041af
 80040e4:	080041a9 	.word	0x080041a9
 80040e8:	080041a9 	.word	0x080041a9
 80040ec:	080041a9 	.word	0x080041a9
 80040f0:	080041a9 	.word	0x080041a9
 80040f4:	080041a9 	.word	0x080041a9
 80040f8:	080041a9 	.word	0x080041a9
 80040fc:	080041a9 	.word	0x080041a9
 8004100:	08004185 	.word	0x08004185
 8004104:	080041a9 	.word	0x080041a9
 8004108:	080041a9 	.word	0x080041a9
 800410c:	080041a9 	.word	0x080041a9
 8004110:	080041a9 	.word	0x080041a9
 8004114:	080041a9 	.word	0x080041a9
 8004118:	080041a9 	.word	0x080041a9
 800411c:	080041a9 	.word	0x080041a9
 8004120:	08004197 	.word	0x08004197
 8004124:	080041a9 	.word	0x080041a9
 8004128:	080041a9 	.word	0x080041a9
 800412c:	080041a9 	.word	0x080041a9
 8004130:	080041a9 	.word	0x080041a9
 8004134:	080041a9 	.word	0x080041a9
 8004138:	080041a9 	.word	0x080041a9
 800413c:	080041a9 	.word	0x080041a9
 8004140:	080041af 	.word	0x080041af
 8004144:	080041a9 	.word	0x080041a9
 8004148:	080041a9 	.word	0x080041a9
 800414c:	080041a9 	.word	0x080041a9
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041a9 	.word	0x080041a9
 8004158:	080041a9 	.word	0x080041a9
 800415c:	080041a9 	.word	0x080041a9
 8004160:	080041af 	.word	0x080041af
 8004164:	080041a9 	.word	0x080041a9
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041a9 	.word	0x080041a9
 8004170:	080041a9 	.word	0x080041a9
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041a9 	.word	0x080041a9
 8004180:	080041af 	.word	0x080041af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f001 fb5a 	bl	8005844 <RCCEx_PLL2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004194:	e00c      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3324      	adds	r3, #36	; 0x24
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fc03 	bl	80059a8 <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80041a6:	e003      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041b6:	4b45      	ldr	r3, [pc, #276]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c2:	4942      	ldr	r1, [pc, #264]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	654b      	str	r3, [r1, #84]	; 0x54
 80041c8:	e001      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d037      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d820      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800422b 	.word	0x0800422b
 80041ec:	08004201 	.word	0x08004201
 80041f0:	08004213 	.word	0x08004213
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fb1c 	bl	8005844 <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004210:	e00c      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3324      	adds	r3, #36	; 0x24
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fbc5 	bl	80059a8 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004222:	e003      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
      break;
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800422a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4923      	ldr	r1, [pc, #140]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004240:	4313      	orrs	r3, r2
 8004242:	654b      	str	r3, [r1, #84]	; 0x54
 8004244:	e001      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d040      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	2b05      	cmp	r3, #5
 800425e:	d821      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	080042ab 	.word	0x080042ab
 800426c:	08004281 	.word	0x08004281
 8004270:	08004293 	.word	0x08004293
 8004274:	080042ab 	.word	0x080042ab
 8004278:	080042ab 	.word	0x080042ab
 800427c:	080042ab 	.word	0x080042ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f001 fadc 	bl	8005844 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004290:	e00c      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fb85 	bl	80059a8 <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80042a2:	e003      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
      break;
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80042aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d110      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f023 0207 	bic.w	r2, r3, #7
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	4902      	ldr	r1, [pc, #8]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	658b      	str	r3, [r1, #88]	; 0x58
 80042c6:	e007      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80042c8:	58024800 	.word	0x58024800
 80042cc:	58024400 	.word	0x58024400
 80042d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d04b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ee:	d02e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80042f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f4:	d828      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d02a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d822      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004306:	d026      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800430c:	d81c      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004312:	d010      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004318:	d816      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01d      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800431e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004322:	d111      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fa8a 	bl	8005844 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004334:	e012      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fb33 	bl	80059a8 <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800435a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004362:	4bb2      	ldr	r3, [pc, #712]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	49ae      	ldr	r1, [pc, #696]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004372:	4313      	orrs	r3, r2
 8004374:	654b      	str	r3, [r1, #84]	; 0x54
 8004376:	e001      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d04b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004392:	d02e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004394:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004398:	d828      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d02a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	d822      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80043a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043aa:	d026      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80043ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b0:	d81c      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d010      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80043b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043bc:	d816      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01d      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d111      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fa38 	bl	8005844 <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043d8:	e012      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 fae1 	bl	80059a8 <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043ea:	e009      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75fb      	strb	r3, [r7, #23]
      break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004414:	4985      	ldr	r1, [pc, #532]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004416:	4313      	orrs	r3, r2
 8004418:	658b      	str	r3, [r1, #88]	; 0x58
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d04b      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004432:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004436:	d02e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004438:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800443c:	d828      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d02a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d822      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800444a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800444e:	d026      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004450:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004454:	d81c      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445a:	d010      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800445c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004460:	d816      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01d      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446a:	d111      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f9e6 	bl	8005844 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800447c:	e012      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3324      	adds	r3, #36	; 0x24
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fa8f 	bl	80059a8 <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004496:	bf00      	nop
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80044a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044aa:	4b60      	ldr	r3, [pc, #384]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b8:	495c      	ldr	r1, [pc, #368]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	658b      	str	r3, [r1, #88]	; 0x58
 80044be:	e001      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d018      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d10a      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3324      	adds	r3, #36	; 0x24
 80044de:	2102      	movs	r1, #2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 fa61 	bl	80059a8 <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80044f0:	4b4e      	ldr	r3, [pc, #312]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fc:	494b      	ldr	r1, [pc, #300]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004518:	d10a      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3324      	adds	r3, #36	; 0x24
 800451e:	2102      	movs	r1, #2
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fa41 	bl	80059a8 <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004530:	4b3e      	ldr	r3, [pc, #248]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	493b      	ldr	r1, [pc, #236]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004540:	4313      	orrs	r3, r2
 8004542:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d034      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455a:	d01d      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800455c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004560:	d817      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456a:	d009      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800456c:	e011      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f965 	bl	8005844 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800457e:	e00c      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3324      	adds	r3, #36	; 0x24
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f001 fa0e 	bl	80059a8 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
      break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a0:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ae:	491f      	ldr	r1, [pc, #124]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	658b      	str	r3, [r1, #88]	; 0x58
 80045b4:	e001      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d036      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045d0:	d01c      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80045d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045d6:	d816      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045dc:	d003      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80045de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e2:	d007      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80045e4:	e00f      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045f2:	e00c      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f9d4 	bl	80059a8 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
      break;
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800460c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	4902      	ldr	r1, [pc, #8]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004624:	4313      	orrs	r3, r2
 8004626:	654b      	str	r3, [r1, #84]	; 0x54
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800462a:	bf00      	nop
 800462c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d029      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d007      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800464e:	e00f      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a60      	ldr	r2, [pc, #384]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800465c:	e00b      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f8ed 	bl	8005844 <RCCEx_PLL2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800466e:	e002      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
      break;
 8004674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800467c:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	4953      	ldr	r1, [pc, #332]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800468e:	e001      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3324      	adds	r3, #36	; 0x24
 80046a4:	2102      	movs	r1, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f97e 	bl	80059a8 <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d030      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ca:	d017      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d0:	d811      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d6:	d013      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046dc:	d80b      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d010      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d106      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4a3a      	ldr	r2, [pc, #232]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046f4:	e007      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
      break;
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046fc:	bf00      	nop
 80046fe:	e002      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004718:	492f      	ldr	r1, [pc, #188]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	654b      	str	r3, [r1, #84]	; 0x54
 800471e:	e001      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473c:	4926      	ldr	r1, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475a:	491f      	ldr	r1, [pc, #124]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800476c:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004776:	6113      	str	r3, [r2, #16]
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004782:	4915      	ldr	r1, [pc, #84]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	da08      	bge.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	490e      	ldr	r1, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80047c2:	7dbb      	ldrb	r3, [r7, #22]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400

080047dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b090      	sub	sp, #64	; 0x40
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	f040 8089 	bne.w	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80047ee:	4b95      	ldr	r3, [pc, #596]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d87d      	bhi.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004819 	.word	0x08004819
 8004808:	0800483d 	.word	0x0800483d
 800480c:	08004861 	.word	0x08004861
 8004810:	080048f5 	.word	0x080048f5
 8004814:	08004885 	.word	0x08004885

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004818:	4b8a      	ldr	r3, [pc, #552]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004824:	d107      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800482a:	4618      	mov	r0, r3
 800482c:	f000 feb8 	bl	80055a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004834:	e3ed      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800483a:	e3ea      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800483c:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004848:	d107      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800484a:	f107 0318 	add.w	r3, r7, #24
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fbfe 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004858:	e3db      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800485e:	e3d8      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004860:	4b78      	ldr	r3, [pc, #480]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800486c:	d107      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800486e:	f107 030c 	add.w	r3, r7, #12
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd40 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800487c:	e3c9      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004882:	e3c6      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004884:	4b6f      	ldr	r3, [pc, #444]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800488c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800488e:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b04      	cmp	r3, #4
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	4a67      	ldr	r2, [pc, #412]	; (8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b2:	e01e      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048b4:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c0:	d106      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c8:	d102      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048ca:	4b60      	ldr	r3, [pc, #384]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ce:	e010      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048d0:	4b5c      	ldr	r3, [pc, #368]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048dc:	d106      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e4:	d102      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048e6:	4b5a      	ldr	r3, [pc, #360]	; (8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ea:	e002      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048f0:	e38f      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80048f2:	e38e      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048f4:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048f8:	e38b      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048fe:	e388      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	f040 80a7 	bne.w	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800490a:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004912:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491a:	d054      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004922:	f200 808b 	bhi.w	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800492c:	f000 8083 	beq.w	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004936:	f200 8081 	bhi.w	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004940:	d02f      	beq.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004948:	d878      	bhi.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004956:	d012      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004958:	e070      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800495a:	4b3a      	ldr	r3, [pc, #232]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004966:	d107      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fe17 	bl	80055a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004976:	e34c      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800497c:	e349      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800498a:	d107      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800498c:	f107 0318 	add.w	r3, r7, #24
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fb5d 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800499a:	e33a      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a0:	e337      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049a2:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ae:	d107      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049b0:	f107 030c 	add.w	r3, r7, #12
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fc9f 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049be:	e328      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049c4:	e325      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049c6:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049d0:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d10c      	bne.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049e2:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	08db      	lsrs	r3, r3, #3
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f4:	e01e      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d106      	bne.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a10:	e010      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a26:	d102      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2c:	e002      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a32:	e2ee      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a34:	e2ed      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a3a:	e2ea      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a40:	e2e7      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	03d09000 	.word	0x03d09000
 8004a4c:	003d0900 	.word	0x003d0900
 8004a50:	007a1200 	.word	0x007a1200
 8004a54:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5e:	f040 809c 	bne.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a62:	4b9e      	ldr	r3, [pc, #632]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a72:	d054      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a7a:	f200 808b 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a84:	f000 8083 	beq.w	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a8e:	f200 8081 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a98:	d02f      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa0:	d878      	bhi.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aae:	d012      	beq.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004ab0:	e070      	b.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ab2:	4b8a      	ldr	r3, [pc, #552]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fd6b 	bl	80055a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ace:	e2a0      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad4:	e29d      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ad6:	4b81      	ldr	r3, [pc, #516]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ae4:	f107 0318 	add.w	r3, r7, #24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fab1 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004af2:	e28e      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af8:	e28b      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004afa:	4b78      	ldr	r3, [pc, #480]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b06:	d107      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fbf3 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b16:	e27c      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b1c:	e279      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b1e:	4b6f      	ldr	r3, [pc, #444]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b28:	4b6c      	ldr	r3, [pc, #432]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d10c      	bne.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b3a:	4b68      	ldr	r3, [pc, #416]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	4a66      	ldr	r2, [pc, #408]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4c:	e01e      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b4e:	4b63      	ldr	r3, [pc, #396]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b62:	d102      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b64:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b68:	e010      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b6a:	4b5c      	ldr	r3, [pc, #368]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7e:	d102      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b80:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b8a:	e242      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004b8c:	e241      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b8e:	4b57      	ldr	r3, [pc, #348]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b92:	e23e      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b98:	e23b      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	f040 80a6 	bne.w	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004ba4:	4b4d      	ldr	r3, [pc, #308]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d054      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bbc:	f200 808b 	bhi.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc6:	f000 8083 	beq.w	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd0:	f200 8081 	bhi.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bda:	d02f      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d878      	bhi.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d012      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004bf2:	e070      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bf4:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c00:	d107      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fcca 	bl	80055a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c10:	e1ff      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c16:	e1fc      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c24:	d107      	bne.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c26:	f107 0318 	add.w	r3, r7, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fa10 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c34:	e1ed      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3a:	e1ea      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c48:	d107      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c4a:	f107 030c 	add.w	r3, r7, #12
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fb52 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c58:	e1db      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c5e:	e1d8      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c60:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c7c:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8e:	e01e      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9c:	d106      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ca4:	d102      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004caa:	e010      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc0:	d102      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc6:	e002      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ccc:	e1a1      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004cce:	e1a0      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd4:	e19d      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cda:	e19a      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	03d09000 	.word	0x03d09000
 8004ce4:	003d0900 	.word	0x003d0900
 8004ce8:	007a1200 	.word	0x007a1200
 8004cec:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cf6:	d173      	bne.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004cf8:	4b9a      	ldr	r3, [pc, #616]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d08:	d02f      	beq.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d10:	d863      	bhi.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1e:	d012      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004d20:	e05b      	b.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d22:	4b90      	ldr	r3, [pc, #576]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d30:	f107 0318 	add.w	r3, r7, #24
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f98b 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d3e:	e168      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d44:	e165      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d46:	4b87      	ldr	r3, [pc, #540]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d52:	d107      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d54:	f107 030c 	add.w	r3, r7, #12
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 facd 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d62:	e156      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d68:	e153      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d6a:	4b7e      	ldr	r3, [pc, #504]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d74:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d86:	4b77      	ldr	r3, [pc, #476]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	08db      	lsrs	r3, r3, #3
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	4a75      	ldr	r2, [pc, #468]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	e01e      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d9a:	4b72      	ldr	r3, [pc, #456]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da6:	d106      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dae:	d102      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004db0:	4b6e      	ldr	r3, [pc, #440]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	e010      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004db6:	4b6b      	ldr	r3, [pc, #428]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004dcc:	4b68      	ldr	r3, [pc, #416]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd0:	e002      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004dd6:	e11c      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004dd8:	e11b      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dde:	e118      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d133      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004de8:	4b5e      	ldr	r3, [pc, #376]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d012      	beq.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004e00:	e023      	b.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e02:	4b58      	ldr	r3, [pc, #352]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fbc3 	bl	80055a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e1e:	e0f8      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e24:	e0f5      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e26:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	d107      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e34:	f107 0318 	add.w	r3, r7, #24
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f909 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e42:	e0e6      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e48:	e0e3      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e4e:	e0e0      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e56:	f040 808d 	bne.w	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e5a:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e6a:	d06b      	beq.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e72:	d874      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d056      	beq.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d86c      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e8a:	d03b      	beq.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e92:	d864      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9a:	d021      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea2:	d85c      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eb0:	d004      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004eb2:	e054      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004eb4:	f000 f8b6 	bl	8005024 <HAL_RCCEx_GetD3PCLK1Freq>
 8004eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004eba:	e0aa      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ebc:	4b29      	ldr	r3, [pc, #164]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec8:	d107      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eca:	f107 0318 	add.w	r3, r7, #24
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f8be 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ed8:	e09b      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ede:	e098      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eec:	d107      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eee:	f107 030c 	add.w	r3, r7, #12
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa00 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004efc:	e089      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f02:	e086      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f04:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d109      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f22:	e076      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f28:	e073      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f36:	d102      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f3c:	e069      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f42:	e066      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f50:	d102      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f56:	e05c      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f5c:	e059      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f62:	e056      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f64:	58024400 	.word	0x58024400
 8004f68:	03d09000 	.word	0x03d09000
 8004f6c:	003d0900 	.word	0x003d0900
 8004f70:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7a:	d148      	bne.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f8c:	d02a      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f94:	d838      	bhi.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004fa4:	e030      	b.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb2:	d102      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fb8:	e02b      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fbe:	e028      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fcc:	d107      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fae4 	bl	80055a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fdc:	e019      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe2:	e016      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff0:	d107      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ff2:	f107 0318 	add.w	r3, r7, #24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f82a 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005000:	e007      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005006:	e004      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800500c:	e001      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005014:	4618      	mov	r0, r3
 8005016:	3740      	adds	r7, #64	; 0x40
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	58024400 	.word	0x58024400
 8005020:	007a1200 	.word	0x007a1200

08005024 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005028:	f7fe fc82 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4904      	ldr	r1, [pc, #16]	; (800504c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	58024400 	.word	0x58024400
 800504c:	0800cfa8 	.word	0x0800cfa8

08005050 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005058:	4ba1      	ldr	r3, [pc, #644]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005062:	4b9f      	ldr	r3, [pc, #636]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	0b1b      	lsrs	r3, r3, #12
 8005068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800506e:	4b9c      	ldr	r3, [pc, #624]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800507a:	4b99      	ldr	r3, [pc, #612]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	08db      	lsrs	r3, r3, #3
 8005080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8111 	beq.w	80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	f000 8083 	beq.w	80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	f200 80a1 	bhi.w	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d056      	beq.n	8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050ba:	e099      	b.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050bc:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02d      	beq.n	8005124 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050c8:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	4a84      	ldr	r2, [pc, #528]	; (80052e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f2:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005102:	ed97 6a03 	vldr	s12, [r7, #12]
 8005106:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800510a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005122:	e087      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005136:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a03 	vldr	s12, [r7, #12]
 800514a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005166:	e065      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517a:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518a:	ed97 6a03 	vldr	s12, [r7, #12]
 800518e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051aa:	e043      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	4b48      	ldr	r3, [pc, #288]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ee:	e021      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b37      	ldr	r3, [pc, #220]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005232:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005234:	4b2a      	ldr	r3, [pc, #168]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	ee17 2a90 	vmov	r2, s15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005262:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526c:	ee07 3a90 	vmov	s15, r3
 8005270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005288:	ee17 2a90 	vmov	r2, s15
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b6:	ee17 2a90 	vmov	r2, s15
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	46000000 	.word	0x46000000
 80052ec:	4c742400 	.word	0x4c742400
 80052f0:	4a742400 	.word	0x4a742400
 80052f4:	4af42400 	.word	0x4af42400

080052f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b089      	sub	sp, #36	; 0x24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005300:	4ba1      	ldr	r3, [pc, #644]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800530a:	4b9f      	ldr	r3, [pc, #636]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	0d1b      	lsrs	r3, r3, #20
 8005310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005314:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005316:	4b9c      	ldr	r3, [pc, #624]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005322:	4b99      	ldr	r3, [pc, #612]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	08db      	lsrs	r3, r3, #3
 8005328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8111 	beq.w	8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b02      	cmp	r3, #2
 800534a:	f000 8083 	beq.w	8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b02      	cmp	r3, #2
 8005352:	f200 80a1 	bhi.w	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d056      	beq.n	8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005362:	e099      	b.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005364:	4b88      	ldr	r3, [pc, #544]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02d      	beq.n	80053cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005370:	4b85      	ldr	r3, [pc, #532]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	08db      	lsrs	r3, r3, #3
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	4a84      	ldr	r2, [pc, #528]	; (800558c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
 8005380:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b7b      	ldr	r3, [pc, #492]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053ca:	e087      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005594 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b6a      	ldr	r3, [pc, #424]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800540e:	e065      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b59      	ldr	r3, [pc, #356]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	ed97 6a03 	vldr	s12, [r7, #12]
 8005436:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005452:	e043      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800559c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b48      	ldr	r3, [pc, #288]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005496:	e021      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054dc:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	0a5b      	lsrs	r3, r3, #9
 80054e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005502:	ee17 2a90 	vmov	r2, s15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800550a:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005524:	edd7 6a07 	vldr	s13, [r7, #28]
 8005528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005530:	ee17 2a90 	vmov	r2, s15
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	0e1b      	lsrs	r3, r3, #24
 800553e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800554e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005552:	edd7 6a07 	vldr	s13, [r7, #28]
 8005556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800555e:	ee17 2a90 	vmov	r2, s15
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005566:	e008      	b.n	800557a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
}
 800557a:	bf00      	nop
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	03d09000 	.word	0x03d09000
 8005590:	46000000 	.word	0x46000000
 8005594:	4c742400 	.word	0x4c742400
 8005598:	4a742400 	.word	0x4a742400
 800559c:	4af42400 	.word	0x4af42400

080055a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b089      	sub	sp, #36	; 0x24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055a8:	4ba0      	ldr	r3, [pc, #640]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80055b2:	4b9e      	ldr	r3, [pc, #632]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80055be:	4b9b      	ldr	r3, [pc, #620]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055c8:	4b98      	ldr	r3, [pc, #608]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	08db      	lsrs	r3, r3, #3
 80055ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	fb02 f303 	mul.w	r3, r2, r3
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8111 	beq.w	800580e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	f000 8083 	beq.w	80056fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	f200 80a1 	bhi.w	800573e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d056      	beq.n	80056b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005608:	e099      	b.n	800573e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d02d      	beq.n	8005672 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005616:	4b85      	ldr	r3, [pc, #532]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	4a83      	ldr	r2, [pc, #524]	; (8005830 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005622:	fa22 f303 	lsr.w	r3, r2, r3
 8005626:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005640:	4b7a      	ldr	r3, [pc, #488]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005650:	ed97 6a03 	vldr	s12, [r7, #12]
 8005654:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005670:	e087      	b.n	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005684:	4b69      	ldr	r3, [pc, #420]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005694:	ed97 6a03 	vldr	s12, [r7, #12]
 8005698:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800569c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056b4:	e065      	b.n	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800583c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80056c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c8:	4b58      	ldr	r3, [pc, #352]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80056dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056f8:	e043      	b.n	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005704:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570c:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005720:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800573c:	e021      	b.n	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800574c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005750:	4b36      	ldr	r3, [pc, #216]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005760:	ed97 6a03 	vldr	s12, [r7, #12]
 8005764:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005780:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005782:	4b2a      	ldr	r3, [pc, #168]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	0a5b      	lsrs	r3, r3, #9
 8005788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800579c:	edd7 6a07 	vldr	s13, [r7, #28]
 80057a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a8:	ee17 2a90 	vmov	r2, s15
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d6:	ee17 2a90 	vmov	r2, s15
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	0e1b      	lsrs	r3, r3, #24
 80057e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005804:	ee17 2a90 	vmov	r2, s15
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	3724      	adds	r7, #36	; 0x24
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	58024400 	.word	0x58024400
 8005830:	03d09000 	.word	0x03d09000
 8005834:	46000000 	.word	0x46000000
 8005838:	4c742400 	.word	0x4c742400
 800583c:	4a742400 	.word	0x4a742400
 8005840:	4af42400 	.word	0x4af42400

08005844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005852:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b03      	cmp	r3, #3
 800585c:	d101      	bne.n	8005862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e099      	b.n	8005996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005862:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a4e      	ldr	r2, [pc, #312]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800586c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586e:	f7fb ff5f 	bl	8001730 <HAL_GetTick>
 8005872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005874:	e008      	b.n	8005888 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005876:	f7fb ff5b 	bl	8001730 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e086      	b.n	8005996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005888:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005894:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	031b      	lsls	r3, r3, #12
 80058a2:	493f      	ldr	r1, [pc, #252]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	628b      	str	r3, [r1, #40]	; 0x28
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	025b      	lsls	r3, r3, #9
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d8:	4931      	ldr	r1, [pc, #196]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058de:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	492d      	ldr	r1, [pc, #180]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058f0:	4b2b      	ldr	r3, [pc, #172]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	f023 0220 	bic.w	r2, r3, #32
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4928      	ldr	r1, [pc, #160]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005902:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005908:	f023 0310 	bic.w	r3, r3, #16
 800590c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <RCCEx_PLL2_Config+0x160>)
 8005914:	4013      	ands	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	69d2      	ldr	r2, [r2, #28]
 800591a:	00d2      	lsls	r2, r2, #3
 800591c:	4920      	ldr	r1, [pc, #128]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005922:	4b1f      	ldr	r3, [pc, #124]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005928:	f043 0310 	orr.w	r3, r3, #16
 800592c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800593a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005940:	e00f      	b.n	8005962 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d106      	bne.n	8005956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800594e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005954:	e005      	b.n	8005962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005956:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a11      	ldr	r2, [pc, #68]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800595c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 8005968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800596c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596e:	f7fb fedf 	bl	8001730 <HAL_GetTick>
 8005972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005974:	e008      	b.n	8005988 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005976:	f7fb fedb 	bl	8001730 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <RCCEx_PLL2_Config+0x15c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0f0      	beq.n	8005976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
 80059a4:	ffff0007 	.word	0xffff0007

080059a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059b6:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d101      	bne.n	80059c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e099      	b.n	8005afa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059c6:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4e      	ldr	r2, [pc, #312]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 80059cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d2:	f7fb fead 	bl	8001730 <HAL_GetTick>
 80059d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059d8:	e008      	b.n	80059ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059da:	f7fb fea9 	bl	8001730 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e086      	b.n	8005afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059ec:	4b45      	ldr	r3, [pc, #276]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	051b      	lsls	r3, r3, #20
 8005a06:	493f      	ldr	r1, [pc, #252]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	025b      	lsls	r3, r3, #9
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	061b      	lsls	r3, r3, #24
 8005a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a3c:	4931      	ldr	r1, [pc, #196]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a42:	4b30      	ldr	r3, [pc, #192]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	492d      	ldr	r1, [pc, #180]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	4928      	ldr	r1, [pc, #160]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a66:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a76:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <RCCEx_PLL3_Config+0x160>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	69d2      	ldr	r2, [r2, #28]
 8005a7e:	00d2      	lsls	r2, r2, #3
 8005a80:	4920      	ldr	r1, [pc, #128]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a86:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a98:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aa4:	e00f      	b.n	8005ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d106      	bne.n	8005aba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005aac:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ab8:	e005      	b.n	8005ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	4a11      	ldr	r2, [pc, #68]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad2:	f7fb fe2d 	bl	8001730 <HAL_GetTick>
 8005ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ad8:	e008      	b.n	8005aec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ada:	f7fb fe29 	bl	8001730 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e006      	b.n	8005afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <RCCEx_PLL3_Config+0x15c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	58024400 	.word	0x58024400
 8005b08:	ffff0007 	.word	0xffff0007

08005b0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e075      	b.n	8005c0a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fb fb67 	bl	8001204 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f868 	bl	8005c14 <HAL_SD_InitCard>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e05d      	b.n	8005c0a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005b4e:	f107 0308 	add.w	r3, r7, #8
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 ff6f 	bl	8006a38 <HAL_SD_GetCardStatus>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e052      	b.n	8005c0a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b64:	7e3b      	ldrb	r3, [r7, #24]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b6a:	7e7b      	ldrb	r3, [r7, #25]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10a      	bne.n	8005b8e <HAL_SD_Init+0x82>
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_SD_Init+0x78>
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b8c:	e00b      	b.n	8005ba6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d104      	bne.n	8005ba0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b9e:	e002      	b.n	8005ba6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f82d 	bl	8006c0c <HAL_SD_ConfigWideBusOperation>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e026      	b.n	8005c0a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005bbc:	f7fb fdb8 	bl	8001730 <HAL_GetTick>
 8005bc0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005bc2:	e011      	b.n	8005be8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005bc4:	f7fb fdb4 	bl	8001730 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d109      	bne.n	8005be8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bda:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e010      	b.n	8005c0a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 f921 	bl	8006e30 <HAL_SD_GetCardState>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d1e7      	bne.n	8005bc4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b08d      	sub	sp, #52	; 0x34
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005c30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005c34:	f7fe fdd2 	bl	80047dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e06a      	b.n	8005d2a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	0a1b      	lsrs	r3, r3, #8
 8005c58:	4a36      	ldr	r2, [pc, #216]	; (8005d34 <HAL_SD_InitCard+0x120>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681c      	ldr	r4, [r3, #0]
 8005c66:	466a      	mov	r2, sp
 8005c68:	f107 0318 	add.w	r3, r7, #24
 8005c6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c70:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c74:	f107 030c 	add.w	r3, r7, #12
 8005c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f002 ff66 	bl	8008b4c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f002 ffa9 	bl	8008bdc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c96:	4a28      	ldr	r2, [pc, #160]	; (8005d38 <HAL_SD_InitCard+0x124>)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fb fd51 	bl	8001748 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 f9b0 	bl	800700c <SD_PowerON>
 8005cac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e02e      	b.n	8005d2a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 f8cf 	bl	8006e70 <SD_InitCard>
 8005cd2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e01b      	b.n	8005d2a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f003 f804 	bl	8008d08 <SDMMC_CmdBlockLength>
 8005d00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a0b      	ldr	r2, [pc, #44]	; (8005d3c <HAL_SD_InitCard+0x128>)
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	372c      	adds	r7, #44	; 0x2c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	014f8b59 	.word	0x014f8b59
 8005d38:	00012110 	.word	0x00012110
 8005d3c:	1fe00fff 	.word	0x1fe00fff

08005d40 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b092      	sub	sp, #72	; 0x48
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d4e:	f7fb fcef 	bl	8001730 <HAL_GetTick>
 8005d52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d107      	bne.n	8005d72 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e167      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	f040 815a 	bne.w	8006034 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d907      	bls.n	8005da4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e14e      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2203      	movs	r2, #3
 8005da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2200      	movs	r2, #0
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d002      	beq.n	8005dc2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	025b      	lsls	r3, r3, #9
 8005dc0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	025b      	lsls	r3, r3, #9
 8005dcc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005dce:	2390      	movs	r3, #144	; 0x90
 8005dd0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f107 0214 	add.w	r2, r7, #20
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f002 ff61 	bl	8008cb0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d90a      	bls.n	8005e1a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2202      	movs	r2, #2
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e10:	4618      	mov	r0, r3
 8005e12:	f002 ffbf 	bl	8008d94 <SDMMC_CmdReadMultiBlock>
 8005e16:	6478      	str	r0, [r7, #68]	; 0x44
 8005e18:	e009      	b.n	8005e2e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e26:	4618      	mov	r0, r3
 8005e28:	f002 ff91 	bl	8008d4e <SDMMC_CmdReadSingleBlock>
 8005e2c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a84      	ldr	r2, [pc, #528]	; (800604c <HAL_SD_ReadBlocks+0x30c>)
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0f3      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e5e:	e058      	b.n	8005f12 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d033      	beq.n	8005ed6 <HAL_SD_ReadBlocks+0x196>
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	2b1f      	cmp	r3, #31
 8005e72:	d930      	bls.n	8005ed6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005e74:	2300      	movs	r3, #0
 8005e76:	643b      	str	r3, [r7, #64]	; 0x40
 8005e78:	e027      	b.n	8005eca <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f002 fe8e 	bl	8008ba0 <SDMMC_ReadFIFO>
 8005e84:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e90:	3301      	adds	r3, #1
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	0e1b      	lsrs	r3, r3, #24
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	2b07      	cmp	r3, #7
 8005ece:	d9d4      	bls.n	8005e7a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	3b20      	subs	r3, #32
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005ed6:	f7fb fc2b 	bl	8001730 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d902      	bls.n	8005eec <HAL_SD_ReadBlocks+0x1ac>
 8005ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d112      	bne.n	8005f12 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a56      	ldr	r2, [pc, #344]	; (800604c <HAL_SD_ReadBlocks+0x30c>)
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e097      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d09f      	beq.n	8005e60 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d022      	beq.n	8005f84 <HAL_SD_ReadBlocks+0x244>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d91f      	bls.n	8005f84 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d01b      	beq.n	8005f84 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 ff89 	bl	8008e68 <SDMMC_CmdStopTransfer>
 8005f56:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d012      	beq.n	8005f84 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a3a      	ldr	r2, [pc, #232]	; (800604c <HAL_SD_ReadBlocks+0x30c>)
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e05e      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2d      	ldr	r2, [pc, #180]	; (800604c <HAL_SD_ReadBlocks+0x30c>)
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	f043 0208 	orr.w	r2, r3, #8
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e044      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a20      	ldr	r2, [pc, #128]	; (800604c <HAL_SD_ReadBlocks+0x30c>)
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f043 0202 	orr.w	r2, r3, #2
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e02a      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <HAL_SD_ReadBlocks+0x30c>)
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e010      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0a      	ldr	r2, [pc, #40]	; (8006050 <HAL_SD_ReadBlocks+0x310>)
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e006      	b.n	8006042 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3748      	adds	r7, #72	; 0x48
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	1fe00fff 	.word	0x1fe00fff
 8006050:	18000f3a 	.word	0x18000f3a

08006054 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b092      	sub	sp, #72	; 0x48
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006062:	f7fb fb65 	bl	8001730 <HAL_GetTick>
 8006066:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d107      	bne.n	8006086 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e16b      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	f040 815e 	bne.w	8006350 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800609a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d907      	bls.n	80060b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e152      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2203      	movs	r2, #3
 80060bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2200      	movs	r2, #0
 80060c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d002      	beq.n	80060d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	025b      	lsls	r3, r3, #9
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	025b      	lsls	r3, r3, #9
 80060e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060e2:	2390      	movs	r3, #144	; 0x90
 80060e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f107 0218 	add.w	r2, r7, #24
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 fdd7 	bl	8008cb0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006110:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d90a      	bls.n	800612e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006124:	4618      	mov	r0, r3
 8006126:	f002 fe7b 	bl	8008e20 <SDMMC_CmdWriteMultiBlock>
 800612a:	6478      	str	r0, [r7, #68]	; 0x44
 800612c:	e009      	b.n	8006142 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2210      	movs	r2, #16
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800613a:	4618      	mov	r0, r3
 800613c:	f002 fe4d 	bl	8008dda <SDMMC_CmdWriteSingleBlock>
 8006140:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006144:	2b00      	cmp	r3, #0
 8006146:	d012      	beq.n	800616e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a86      	ldr	r2, [pc, #536]	; (8006368 <HAL_SD_WriteBlocks+0x314>)
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006156:	431a      	orrs	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e0f7      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006172:	e05c      	b.n	800622e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d037      	beq.n	80061f2 <HAL_SD_WriteBlocks+0x19e>
 8006182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006184:	2b1f      	cmp	r3, #31
 8006186:	d934      	bls.n	80061f2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006188:	2300      	movs	r3, #0
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	e02b      	b.n	80061e6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	3301      	adds	r3, #1
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	021a      	lsls	r2, r3, #8
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	3301      	adds	r3, #1
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80061ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	041a      	lsls	r2, r3, #16
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	3301      	adds	r3, #1
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	061a      	lsls	r2, r3, #24
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	3301      	adds	r3, #1
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f107 0214 	add.w	r2, r7, #20
 80061d8:	4611      	mov	r1, r2
 80061da:	4618      	mov	r0, r3
 80061dc:	f002 fced 	bl	8008bba <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	3301      	adds	r3, #1
 80061e4:	643b      	str	r3, [r7, #64]	; 0x40
 80061e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e8:	2b07      	cmp	r3, #7
 80061ea:	d9d0      	bls.n	800618e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	3b20      	subs	r3, #32
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061f2:	f7fb fa9d 	bl	8001730 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061fe:	429a      	cmp	r2, r3
 8006200:	d902      	bls.n	8006208 <HAL_SD_WriteBlocks+0x1b4>
 8006202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006204:	2b00      	cmp	r3, #0
 8006206:	d112      	bne.n	800622e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a56      	ldr	r2, [pc, #344]	; (8006368 <HAL_SD_WriteBlocks+0x314>)
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006216:	431a      	orrs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e097      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006238:	2b00      	cmp	r3, #0
 800623a:	d09b      	beq.n	8006174 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d022      	beq.n	80062a0 <HAL_SD_WriteBlocks+0x24c>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d91f      	bls.n	80062a0 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	2b03      	cmp	r3, #3
 8006266:	d01b      	beq.n	80062a0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f002 fdfb 	bl	8008e68 <SDMMC_CmdStopTransfer>
 8006272:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006276:	2b00      	cmp	r3, #0
 8006278:	d012      	beq.n	80062a0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <HAL_SD_WriteBlocks+0x314>)
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006288:	431a      	orrs	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e05e      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d012      	beq.n	80062d4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <HAL_SD_WriteBlocks+0x314>)
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	f043 0208 	orr.w	r2, r3, #8
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e044      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d012      	beq.n	8006308 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a20      	ldr	r2, [pc, #128]	; (8006368 <HAL_SD_WriteBlocks+0x314>)
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	f043 0202 	orr.w	r2, r3, #2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e02a      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b00      	cmp	r3, #0
 8006314:	d012      	beq.n	800633c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a13      	ldr	r2, [pc, #76]	; (8006368 <HAL_SD_WriteBlocks+0x314>)
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	f043 0210 	orr.w	r2, r3, #16
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e010      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <HAL_SD_WriteBlocks+0x318>)
 8006342:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e006      	b.n	800635e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3748      	adds	r7, #72	; 0x48
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	1fe00fff 	.word	0x1fe00fff
 800636c:	18000f3a 	.word	0x18000f3a

08006370 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_SD_IRQHandler+0x2e>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 f924 	bl	80075e4 <SD_Read_IT>
 800639c:	e19a      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80ac 	beq.w	8006506 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b9d      	ldr	r3, [pc, #628]	; (8006638 <HAL_SD_IRQHandler+0x2c8>)
 80063c4:	400b      	ands	r3, r1
 80063c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063d6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d038      	beq.n	8006464 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_SD_IRQHandler+0x96>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d011      	beq.n	800642a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f002 fd2c 	bl	8008e68 <SDMMC_CmdStopTransfer>
 8006410:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f959 	bl	80066dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a83      	ldr	r2, [pc, #524]	; (800663c <HAL_SD_IRQHandler+0x2cc>)
 8006430:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <HAL_SD_IRQHandler+0xe4>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f003 f9e7 	bl	8009828 <HAL_SD_RxCpltCallback>
 800645a:	e13b      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f003 f9d9 	bl	8009814 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006462:	e137      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8132 	beq.w	80066d4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2200      	movs	r2, #0
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2200      	movs	r2, #0
 8006486:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_SD_IRQHandler+0x12c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d011      	beq.n	80064c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f002 fce1 	bl	8008e68 <SDMMC_CmdStopTransfer>
 80064a6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f90e 	bl	80066dc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <HAL_SD_IRQHandler+0x172>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f003 f996 	bl	8009814 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <HAL_SD_IRQHandler+0x18e>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80eb 	beq.w	80066d4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f003 f992 	bl	8009828 <HAL_SD_RxCpltCallback>
}
 8006504:	e0e6      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <HAL_SD_IRQHandler+0x1b6>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 f8a6 	bl	8007670 <SD_Write_IT>
 8006524:	e0d6      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80a2 	beq.w	800667a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	f043 0202 	orr.w	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f043 0208 	orr.w	r2, r3, #8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	f043 0210 	orr.w	r2, r3, #16
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a26      	ldr	r2, [pc, #152]	; (800663c <HAL_SD_IRQHandler+0x2cc>)
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065e4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f002 fc3c 	bl	8008e68 <SDMMC_CmdStopTransfer>
 80065f0:	4602      	mov	r2, r0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800660a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00f      	beq.n	8006640 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f854 	bl	80066dc <HAL_SD_ErrorCallback>
}
 8006634:	e04e      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
 8006636:	bf00      	nop
 8006638:	ffff3ec5 	.word	0xffff3ec5
 800663c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d044      	beq.n	80066d4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	2b00      	cmp	r3, #0
 8006650:	d040      	beq.n	80066d4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006660:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f832 	bl	80066dc <HAL_SD_ErrorCallback>
}
 8006678:	e02c      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d025      	beq.n	80066d4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10c      	bne.n	80066ba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 f848 	bl	8007740 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80066b0:	e010      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f830 	bl	8007718 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80066b8:	e00c      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 f831 	bl	800772c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80066ca:	e003      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f819 	bl	8007704 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80066d2:	e7ff      	b.n	80066d4 <HAL_SD_IRQHandler+0x364>
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	0f9b      	lsrs	r3, r3, #30
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670a:	0e9b      	lsrs	r3, r3, #26
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	b2da      	uxtb	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	b2da      	uxtb	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672e:	0c1b      	lsrs	r3, r3, #16
 8006730:	b2da      	uxtb	r2, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	b2da      	uxtb	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	0d1b      	lsrs	r3, r3, #20
 8006752:	b29a      	uxth	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	b2da      	uxtb	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	0bdb      	lsrs	r3, r3, #15
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	0b9b      	lsrs	r3, r3, #14
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006792:	0b5b      	lsrs	r3, r3, #13
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a4:	0b1b      	lsrs	r3, r3, #12
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2200      	movs	r2, #0
 80067b6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d163      	bne.n	8006888 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	009a      	lsls	r2, r3, #2
 80067c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067ca:	4013      	ands	r3, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80067d0:	0f92      	lsrs	r2, r2, #30
 80067d2:	431a      	orrs	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067dc:	0edb      	lsrs	r3, r3, #27
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ee:	0e1b      	lsrs	r3, r3, #24
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006800:	0d5b      	lsrs	r3, r3, #21
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	b2da      	uxtb	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006812:	0c9b      	lsrs	r3, r3, #18
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	b2da      	uxtb	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006824:	0bdb      	lsrs	r3, r3, #15
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	b2da      	uxtb	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	7e1b      	ldrb	r3, [r3, #24]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	3302      	adds	r3, #2
 8006848:	2201      	movs	r2, #1
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006852:	fb02 f203 	mul.w	r2, r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	7a1b      	ldrb	r3, [r3, #8]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	2201      	movs	r2, #1
 8006866:	409a      	lsls	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006874:	0a52      	lsrs	r2, r2, #9
 8006876:	fb02 f203 	mul.w	r2, r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
 8006886:	e031      	b.n	80068ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	2b01      	cmp	r3, #1
 800688e:	d11d      	bne.n	80068cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	431a      	orrs	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	3301      	adds	r3, #1
 80068ac:	029a      	lsls	r2, r3, #10
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	655a      	str	r2, [r3, #84]	; 0x54
 80068ca:	e00f      	b.n	80068ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a58      	ldr	r2, [pc, #352]	; (8006a34 <HAL_SD_GetCardCSD+0x344>)
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e09d      	b.n	8006a28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	0b9b      	lsrs	r3, r3, #14
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691a:	b2da      	uxtb	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	0fdb      	lsrs	r3, r3, #31
 8006926:	b2da      	uxtb	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006930:	0f5b      	lsrs	r3, r3, #29
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	b2da      	uxtb	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006942:	0e9b      	lsrs	r3, r3, #26
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	b2da      	uxtb	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006954:	0d9b      	lsrs	r3, r3, #22
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	b2da      	uxtb	r2, r3
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006966:	0d5b      	lsrs	r3, r3, #21
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006996:	0bdb      	lsrs	r3, r3, #15
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069aa:	0b9b      	lsrs	r3, r3, #14
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069be:	0b5b      	lsrs	r3, r3, #13
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	0b1b      	lsrs	r3, r3, #12
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e6:	0a9b      	lsrs	r3, r3, #10
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	1fe00fff 	.word	0x1fe00fff

08006a38 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b094      	sub	sp, #80	; 0x50
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d101      	bne.n	8006a58 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e0a7      	b.n	8006ba8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a58:	f107 0308 	add.w	r3, r7, #8
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb62 	bl	8007128 <SD_SendSDStatus>
 8006a64:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d011      	beq.n	8006a90 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a4f      	ldr	r2, [pc, #316]	; (8006bb0 <HAL_SD_GetCardStatus+0x178>)
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a8e:	e070      	b.n	8006b72 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	099b      	lsrs	r3, r3, #6
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	0e1b      	lsrs	r3, r3, #24
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	061a      	lsls	r2, r3, #24
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ae0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	0d1b      	lsrs	r3, r3, #20
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	0a9b      	lsrs	r3, r3, #10
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	0e1b      	lsrs	r3, r3, #24
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f002 f8c4 	bl	8008d08 <SDMMC_CmdBlockLength>
 8006b80:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <HAL_SD_GetCardStatus+0x178>)
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b94:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006ba4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3750      	adds	r7, #80	; 0x50
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	1fe00fff 	.word	0x1fe00fff

08006bb4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b08d      	sub	sp, #52	; 0x34
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2203      	movs	r2, #3
 8006c24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d02e      	beq.n	8006c8e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c36:	d106      	bne.n	8006c46 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	635a      	str	r2, [r3, #52]	; 0x34
 8006c44:	e029      	b.n	8006c9a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4c:	d10a      	bne.n	8006c64 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fb62 	bl	8007318 <SD_WideBus_Enable>
 8006c54:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	635a      	str	r2, [r3, #52]	; 0x34
 8006c62:	e01a      	b.n	8006c9a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb9f 	bl	80073ae <SD_WideBus_Disable>
 8006c70:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c7e:	e00c      	b.n	8006c9a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8006c8c:	e005      	b.n	8006c9a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cb0:	e094      	b.n	8006ddc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006cb2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006cb6:	f7fd fd91 	bl	80047dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006cba:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8083 	beq.w	8006dca <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	4950      	ldr	r1, [pc, #320]	; (8006e24 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ce2:	fba1 1303 	umull	r1, r3, r1, r3
 8006ce6:	0e1b      	lsrs	r3, r3, #24
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d303      	bcc.n	8006cf4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e05a      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfc:	d103      	bne.n	8006d06 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e051      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0e:	d126      	bne.n	8006d5e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10e      	bne.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	4a43      	ldr	r2, [pc, #268]	; (8006e28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d906      	bls.n	8006d2e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	4a40      	ldr	r2, [pc, #256]	; (8006e24 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	0e5b      	lsrs	r3, r3, #25
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	e03d      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	e039      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	4a39      	ldr	r2, [pc, #228]	; (8006e28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d906      	bls.n	8006d56 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	4a36      	ldr	r2, [pc, #216]	; (8006e24 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	0e5b      	lsrs	r3, r3, #25
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e029      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	e025      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10e      	bne.n	8006d84 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	4a30      	ldr	r2, [pc, #192]	; (8006e2c <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d906      	bls.n	8006d7c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	4a2c      	ldr	r2, [pc, #176]	; (8006e24 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e016      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	e012      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	6a3a      	ldr	r2, [r7, #32]
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d906      	bls.n	8006da4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	4a22      	ldr	r2, [pc, #136]	; (8006e24 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	0e1b      	lsrs	r3, r3, #24
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	e002      	b.n	8006daa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681c      	ldr	r4, [r3, #0]
 8006dae:	466a      	mov	r2, sp
 8006db0:	f107 0314 	add.w	r3, r7, #20
 8006db4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006db8:	e882 0003 	stmia.w	r2, {r0, r1}
 8006dbc:	f107 0308 	add.w	r3, r7, #8
 8006dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f001 fec2 	bl	8008b4c <SDMMC_Init>
 8006dc8:	e008      	b.n	8006ddc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 ff8f 	bl	8008d08 <SDMMC_CmdBlockLength>
 8006dea:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	372c      	adds	r7, #44	; 0x2c
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd90      	pop	{r4, r7, pc}
 8006e20:	1fe00fff 	.word	0x1fe00fff
 8006e24:	55e63b89 	.word	0x55e63b89
 8006e28:	02faf080 	.word	0x02faf080
 8006e2c:	017d7840 	.word	0x017d7840

08006e30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e3c:	f107 030c 	add.w	r3, r7, #12
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa40 	bl	80072c8 <SD_SendStatus>
 8006e48:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	0a5b      	lsrs	r3, r3, #9
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e66:	693b      	ldr	r3, [r7, #16]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b090      	sub	sp, #64	; 0x40
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e7c:	f7fa fc58 	bl	8001730 <HAL_GetTick>
 8006e80:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 feb9 	bl	8008bfe <SDMMC_GetPowerState>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e96:	e0b5      	b.n	8007004 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d02e      	beq.n	8006efe <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 f904 	bl	80090b2 <SDMMC_CmdSendCID>
 8006eaa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <SD_InitCard+0x46>
    {
      return errorstate;
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	e0a6      	b.n	8007004 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fee4 	bl	8008c8a <SDMMC_GetResponse>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2104      	movs	r1, #4
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fedb 	bl	8008c8a <SDMMC_GetResponse>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2108      	movs	r1, #8
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fed2 	bl	8008c8a <SDMMC_GetResponse>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	210c      	movs	r1, #12
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fec9 	bl	8008c8a <SDMMC_GetResponse>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d01d      	beq.n	8006f42 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006f06:	e019      	b.n	8006f3c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f107 020a 	add.w	r2, r7, #10
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f002 f90c 	bl	8009130 <SDMMC_CmdSetRelAdd>
 8006f18:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	e06f      	b.n	8007004 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006f24:	f7fa fc04 	bl	8001730 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3287 	movw	r2, #4999	; 0x1387
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d902      	bls.n	8006f3c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006f36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f3a:	e063      	b.n	8007004 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006f3c:	897b      	ldrh	r3, [r7, #10]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0e2      	beq.n	8006f08 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d036      	beq.n	8006fb8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f4a:	897b      	ldrh	r3, [r7, #10]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f002 f8c6 	bl	80090f0 <SDMMC_CmdSendCSD>
 8006f64:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	e049      	b.n	8007004 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fe87 	bl	8008c8a <SDMMC_GetResponse>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2104      	movs	r1, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fe7e 	bl	8008c8a <SDMMC_GetResponse>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2108      	movs	r1, #8
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fe75 	bl	8008c8a <SDMMC_GetResponse>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	210c      	movs	r1, #12
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fe6c 	bl	8008c8a <SDMMC_GetResponse>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2104      	movs	r1, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fe63 	bl	8008c8a <SDMMC_GetResponse>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	0d1a      	lsrs	r2, r3, #20
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fcc:	f107 030c 	add.w	r3, r7, #12
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fb8c 	bl	80066f0 <HAL_SD_GetCardCSD>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fe2:	e00f      	b.n	8007004 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f001 ff75 	bl	8008ee0 <SDMMC_CmdSelDesel>
 8006ff6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <SD_InitCard+0x192>
  {
    return errorstate;
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	e000      	b.n	8007004 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3740      	adds	r7, #64	; 0x40
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f001 ff7e 	bl	8008f26 <SDMMC_CmdGoIdleState>
 800702a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	e072      	b.n	800711c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f001 ff91 	bl	8008f62 <SDMMC_CmdOperCond>
 8007040:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007048:	d10d      	bne.n	8007066 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f001 ff66 	bl	8008f26 <SDMMC_CmdGoIdleState>
 800705a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <SD_PowerON+0x60>
    {
      return errorstate;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	e05a      	b.n	800711c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d137      	bne.n	80070e4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f001 ff91 	bl	8008fa2 <SDMMC_CmdAppCommand>
 8007080:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02d      	beq.n	80070e4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007088:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800708c:	e046      	b.n	800711c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 ff84 	bl	8008fa2 <SDMMC_CmdAppCommand>
 800709a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	e03a      	b.n	800711c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	491e      	ldr	r1, [pc, #120]	; (8007124 <SD_PowerON+0x118>)
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 ff9b 	bl	8008fe8 <SDMMC_CmdAppOperCommand>
 80070b2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070be:	e02d      	b.n	800711c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fddf 	bl	8008c8a <SDMMC_GetResponse>
 80070cc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	0fdb      	lsrs	r3, r3, #31
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <SD_PowerON+0xce>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <SD_PowerON+0xd0>
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]

    count++;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d802      	bhi.n	80070f4 <SD_PowerON+0xe8>
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0cc      	beq.n	800708e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d902      	bls.n	8007104 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007102:	e00b      	b.n	800711c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	c1100000 	.word	0xc1100000

08007128 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08c      	sub	sp, #48	; 0x30
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007132:	f7fa fafd 	bl	8001730 <HAL_GetTick>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fda1 	bl	8008c8a <SDMMC_GetResponse>
 8007148:	4603      	mov	r3, r0
 800714a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007152:	d102      	bne.n	800715a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007158:	e0b0      	b.n	80072bc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2140      	movs	r1, #64	; 0x40
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fdd1 	bl	8008d08 <SDMMC_CmdBlockLength>
 8007166:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	e0a0      	b.n	80072bc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f001 ff0b 	bl	8008fa2 <SDMMC_CmdAppCommand>
 800718c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	e08d      	b.n	80072bc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295
 80071a4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80071aa:	2360      	movs	r3, #96	; 0x60
 80071ac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80071ae:	2302      	movs	r3, #2
 80071b0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f107 0208 	add.w	r2, r7, #8
 80071c2:	4611      	mov	r1, r2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fd73 	bl	8008cb0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 fff3 	bl	80091ba <SDMMC_CmdStatusRegister>
 80071d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d02b      	beq.n	8007234 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	e069      	b.n	80072bc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80071f6:	2300      	movs	r3, #0
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fa:	e00d      	b.n	8007218 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f001 fccd 	bl	8008ba0 <SDMMC_ReadFIFO>
 8007206:	4602      	mov	r2, r0
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	601a      	str	r2, [r3, #0]
        pData++;
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	3304      	adds	r3, #4
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	3301      	adds	r3, #1
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	2b07      	cmp	r3, #7
 800721c:	d9ee      	bls.n	80071fc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800721e:	f7fa fa87 	bl	8001730 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d102      	bne.n	8007234 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800722e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007232:	e043      	b.n	80072bc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0d2      	beq.n	80071e8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007250:	2308      	movs	r3, #8
 8007252:	e033      	b.n	80072bc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007262:	2302      	movs	r3, #2
 8007264:	e02a      	b.n	80072bc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726c:	f003 0320 	and.w	r3, r3, #32
 8007270:	2b00      	cmp	r3, #0
 8007272:	d017      	beq.n	80072a4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007274:	2320      	movs	r3, #32
 8007276:	e021      	b.n	80072bc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fc8f 	bl	8008ba0 <SDMMC_ReadFIFO>
 8007282:	4602      	mov	r2, r0
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	601a      	str	r2, [r3, #0]
    pData++;
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	3304      	adds	r3, #4
 800728c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800728e:	f7fa fa4f 	bl	8001730 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d102      	bne.n	80072a4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800729e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072a2:	e00b      	b.n	80072bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e2      	bne.n	8007278 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a03      	ldr	r2, [pc, #12]	; (80072c4 <SD_SendSDStatus+0x19c>)
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3730      	adds	r7, #48	; 0x30
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	18000f3a 	.word	0x18000f3a

080072c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072dc:	e018      	b.n	8007310 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f001 ff42 	bl	8009174 <SDMMC_CmdSendStatus>
 80072f0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	e009      	b.n	8007310 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fcc1 	bl	8008c8a <SDMMC_GetResponse>
 8007308:	4602      	mov	r2, r0
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f001 fcab 	bl	8008c8a <SDMMC_GetResponse>
 8007334:	4603      	mov	r3, r0
 8007336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800733e:	d102      	bne.n	8007346 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007344:	e02f      	b.n	80073a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007346:	f107 030c 	add.w	r3, r7, #12
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f879 	bl	8007444 <SD_FindSCR>
 8007352:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	e023      	b.n	80073a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01c      	beq.n	80073a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f001 fe14 	bl	8008fa2 <SDMMC_CmdAppCommand>
 800737a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	e00f      	b.n	80073a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2102      	movs	r1, #2
 800738c:	4618      	mov	r0, r3
 800738e:	f001 fe4b 	bl	8009028 <SDMMC_CmdBusWidth>
 8007392:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	e003      	b.n	80073a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800739e:	2300      	movs	r3, #0
 80073a0:	e001      	b.n	80073a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fc60 	bl	8008c8a <SDMMC_GetResponse>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d4:	d102      	bne.n	80073dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073da:	e02f      	b.n	800743c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f82e 	bl	8007444 <SD_FindSCR>
 80073e8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	e023      	b.n	800743c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01c      	beq.n	8007438 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f001 fdc9 	bl	8008fa2 <SDMMC_CmdAppCommand>
 8007410:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	e00f      	b.n	800743c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fe00 	bl	8009028 <SDMMC_CmdBusWidth>
 8007428:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	e003      	b.n	800743c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007434:	2300      	movs	r3, #0
 8007436:	e001      	b.n	800743c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007438:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08e      	sub	sp, #56	; 0x38
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800744e:	f7fa f96f 	bl	8001730 <HAL_GetTick>
 8007452:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007458:	2300      	movs	r3, #0
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2108      	movs	r1, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fc4c 	bl	8008d08 <SDMMC_CmdBlockLength>
 8007470:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	e0ad      	b.n	80075d8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f001 fd8a 	bl	8008fa2 <SDMMC_CmdAppCommand>
 800748e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	e09e      	b.n	80075d8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800749a:	f04f 33ff 	mov.w	r3, #4294967295
 800749e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80074a0:	2308      	movs	r3, #8
 80074a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80074a4:	2330      	movs	r3, #48	; 0x30
 80074a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80074a8:	2302      	movs	r3, #2
 80074aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f107 0210 	add.w	r2, r7, #16
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fbf6 	bl	8008cb0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 fdd0 	bl	800906e <SDMMC_CmdSendSCR>
 80074ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d027      	beq.n	8007526 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	e07e      	b.n	80075d8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d113      	bne.n	8007510 <SD_FindSCR+0xcc>
 80074e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d110      	bne.n	8007510 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 fb54 	bl	8008ba0 <SDMMC_ReadFIFO>
 80074f8:	4603      	mov	r3, r0
 80074fa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fb4d 	bl	8008ba0 <SDMMC_ReadFIFO>
 8007506:	4603      	mov	r3, r0
 8007508:	60fb      	str	r3, [r7, #12]
      index++;
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750c:	3301      	adds	r3, #1
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007510:	f7fa f90e 	bl	8001730 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d102      	bne.n	8007526 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007524:	e058      	b.n	80075d8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0d1      	beq.n	80074da <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2208      	movs	r2, #8
 800754a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800754c:	2308      	movs	r3, #8
 800754e:	e043      	b.n	80075d8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2202      	movs	r2, #2
 8007564:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007566:	2302      	movs	r3, #2
 8007568:	e036      	b.n	80075d8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2220      	movs	r2, #32
 800757e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007580:	2320      	movs	r3, #32
 8007582:	e029      	b.n	80075d8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <SD_FindSCR+0x19c>)
 800758a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	061a      	lsls	r2, r3, #24
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007598:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80075a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	0e1b      	lsrs	r3, r3, #24
 80075a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	601a      	str	r2, [r3, #0]
    scr++;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	3304      	adds	r3, #4
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	061a      	lsls	r2, r3, #24
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	0e1b      	lsrs	r3, r3, #24
 80075d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3738      	adds	r7, #56	; 0x38
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	18000f3a 	.word	0x18000f3a

080075e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	2b1f      	cmp	r3, #31
 80075f8:	d936      	bls.n	8007668 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	e027      	b.n	8007650 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f001 facb 	bl	8008ba0 <SDMMC_ReadFIFO>
 800760a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3301      	adds	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	0a1b      	lsrs	r3, r3, #8
 800761e:	b2da      	uxtb	r2, r3
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3301      	adds	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	b2da      	uxtb	r2, r3
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3301      	adds	r3, #1
 8007638:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	b2da      	uxtb	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	3301      	adds	r3, #1
 8007648:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	3301      	adds	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b07      	cmp	r3, #7
 8007654:	d9d4      	bls.n	8007600 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	f1a3 0220 	sub.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007668:	bf00      	nop
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	2b1f      	cmp	r3, #31
 8007684:	d93a      	bls.n	80076fc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	e02b      	b.n	80076e4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3301      	adds	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3301      	adds	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	041a      	lsls	r2, r3, #16
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	3301      	adds	r3, #1
 80076ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	061a      	lsls	r2, r3, #24
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3301      	adds	r3, #1
 80076cc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f107 020c 	add.w	r2, r7, #12
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 fa6e 	bl	8008bba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3301      	adds	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b07      	cmp	r3, #7
 80076e8:	d9d0      	bls.n	800768c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f1a3 0220 	sub.w	r2, r3, #32
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	621a      	str	r2, [r3, #32]
  }
}
 80076fc:	bf00      	nop
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e042      	b.n	80077ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7f9 fdd7 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2224      	movs	r2, #36	; 0x24
 8007782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8c2 	bl	8007920 <UART_SetConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e022      	b.n	80077ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ff14 	bl	80085dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 ff9b 	bl	8008720 <UART_CheckIdleState>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800780a:	2b20      	cmp	r3, #32
 800780c:	f040 8083 	bne.w	8007916 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_UART_Transmit+0x28>
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e07b      	b.n	8007918 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_UART_Transmit+0x3a>
 800782a:	2302      	movs	r3, #2
 800782c:	e074      	b.n	8007918 <HAL_UART_Transmit+0x124>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2221      	movs	r2, #33	; 0x21
 8007842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007846:	f7f9 ff73 	bl	8001730 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007864:	d108      	bne.n	8007878 <HAL_UART_Transmit+0x84>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	e003      	b.n	8007880 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007888:	e02c      	b.n	80078e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 ff8e 	bl	80087b6 <UART_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e039      	b.n	8007918 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3302      	adds	r3, #2
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	e007      	b.n	80078d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	3301      	adds	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1cc      	bne.n	800788a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2200      	movs	r2, #0
 80078f8:	2140      	movs	r1, #64	; 0x40
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 ff5b 	bl	80087b6 <UART_WaitOnFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e006      	b.n	8007918 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e000      	b.n	8007918 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007916:	2302      	movs	r3, #2
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	b5b0      	push	{r4, r5, r7, lr}
 8007922:	b08e      	sub	sp, #56	; 0x38
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	4313      	orrs	r3, r2
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4bbf      	ldr	r3, [pc, #764]	; (8007c4c <UART_SetConfig+0x32c>)
 800794e:	4013      	ands	r3, r2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6812      	ldr	r2, [r2, #0]
 8007954:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007956:	430b      	orrs	r3, r1
 8007958:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4ab5      	ldr	r2, [pc, #724]	; (8007c50 <UART_SetConfig+0x330>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007986:	4313      	orrs	r3, r2
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	4bb0      	ldr	r3, [pc, #704]	; (8007c54 <UART_SetConfig+0x334>)
 8007992:	4013      	ands	r3, r2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800799a:	430b      	orrs	r3, r1
 800799c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	f023 010f 	bic.w	r1, r3, #15
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4aa7      	ldr	r2, [pc, #668]	; (8007c58 <UART_SetConfig+0x338>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d176      	bne.n	8007aac <UART_SetConfig+0x18c>
 80079be:	4ba7      	ldr	r3, [pc, #668]	; (8007c5c <UART_SetConfig+0x33c>)
 80079c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c6:	2b28      	cmp	r3, #40	; 0x28
 80079c8:	d86c      	bhi.n	8007aa4 <UART_SetConfig+0x184>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0xb0>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a75 	.word	0x08007a75
 80079d4:	08007aa5 	.word	0x08007aa5
 80079d8:	08007aa5 	.word	0x08007aa5
 80079dc:	08007aa5 	.word	0x08007aa5
 80079e0:	08007aa5 	.word	0x08007aa5
 80079e4:	08007aa5 	.word	0x08007aa5
 80079e8:	08007aa5 	.word	0x08007aa5
 80079ec:	08007aa5 	.word	0x08007aa5
 80079f0:	08007a7d 	.word	0x08007a7d
 80079f4:	08007aa5 	.word	0x08007aa5
 80079f8:	08007aa5 	.word	0x08007aa5
 80079fc:	08007aa5 	.word	0x08007aa5
 8007a00:	08007aa5 	.word	0x08007aa5
 8007a04:	08007aa5 	.word	0x08007aa5
 8007a08:	08007aa5 	.word	0x08007aa5
 8007a0c:	08007aa5 	.word	0x08007aa5
 8007a10:	08007a85 	.word	0x08007a85
 8007a14:	08007aa5 	.word	0x08007aa5
 8007a18:	08007aa5 	.word	0x08007aa5
 8007a1c:	08007aa5 	.word	0x08007aa5
 8007a20:	08007aa5 	.word	0x08007aa5
 8007a24:	08007aa5 	.word	0x08007aa5
 8007a28:	08007aa5 	.word	0x08007aa5
 8007a2c:	08007aa5 	.word	0x08007aa5
 8007a30:	08007a8d 	.word	0x08007a8d
 8007a34:	08007aa5 	.word	0x08007aa5
 8007a38:	08007aa5 	.word	0x08007aa5
 8007a3c:	08007aa5 	.word	0x08007aa5
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007aa5 	.word	0x08007aa5
 8007a48:	08007aa5 	.word	0x08007aa5
 8007a4c:	08007aa5 	.word	0x08007aa5
 8007a50:	08007a95 	.word	0x08007a95
 8007a54:	08007aa5 	.word	0x08007aa5
 8007a58:	08007aa5 	.word	0x08007aa5
 8007a5c:	08007aa5 	.word	0x08007aa5
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007aa5 	.word	0x08007aa5
 8007a68:	08007aa5 	.word	0x08007aa5
 8007a6c:	08007aa5 	.word	0x08007aa5
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7a:	e326      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a82:	e322      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8a:	e31e      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a92:	e31a      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007a94:	2320      	movs	r3, #32
 8007a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9a:	e316      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa2:	e312      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aaa:	e30e      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a6b      	ldr	r2, [pc, #428]	; (8007c60 <UART_SetConfig+0x340>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d130      	bne.n	8007b18 <UART_SetConfig+0x1f8>
 8007ab6:	4b69      	ldr	r3, [pc, #420]	; (8007c5c <UART_SetConfig+0x33c>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d826      	bhi.n	8007b10 <UART_SetConfig+0x1f0>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0x1a8>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b01 	.word	0x08007b01
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae6:	e2f0      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aee:	e2ec      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af6:	e2e8      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afe:	e2e4      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b00:	2320      	movs	r3, #32
 8007b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b06:	e2e0      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b08:	2340      	movs	r3, #64	; 0x40
 8007b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0e:	e2dc      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b10:	2380      	movs	r3, #128	; 0x80
 8007b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b16:	e2d8      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a51      	ldr	r2, [pc, #324]	; (8007c64 <UART_SetConfig+0x344>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d130      	bne.n	8007b84 <UART_SetConfig+0x264>
 8007b22:	4b4e      	ldr	r3, [pc, #312]	; (8007c5c <UART_SetConfig+0x33c>)
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	d826      	bhi.n	8007b7c <UART_SetConfig+0x25c>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <UART_SetConfig+0x214>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b4d 	.word	0x08007b4d
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	08007b5d 	.word	0x08007b5d
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b52:	e2ba      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b54:	2304      	movs	r3, #4
 8007b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b5a:	e2b6      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b62:	e2b2      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b64:	2310      	movs	r3, #16
 8007b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b6a:	e2ae      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b72:	e2aa      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b74:	2340      	movs	r3, #64	; 0x40
 8007b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7a:	e2a6      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b82:	e2a2      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a37      	ldr	r2, [pc, #220]	; (8007c68 <UART_SetConfig+0x348>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d130      	bne.n	8007bf0 <UART_SetConfig+0x2d0>
 8007b8e:	4b33      	ldr	r3, [pc, #204]	; (8007c5c <UART_SetConfig+0x33c>)
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	d826      	bhi.n	8007be8 <UART_SetConfig+0x2c8>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0x280>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bc9 	.word	0x08007bc9
 8007bac:	08007bd1 	.word	0x08007bd1
 8007bb0:	08007bd9 	.word	0x08007bd9
 8007bb4:	08007be1 	.word	0x08007be1
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bbe:	e284      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc6:	e280      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bce:	e27c      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bd6:	e278      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bde:	e274      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be6:	e270      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007be8:	2380      	movs	r3, #128	; 0x80
 8007bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bee:	e26c      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	; (8007c6c <UART_SetConfig+0x34c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d142      	bne.n	8007c80 <UART_SetConfig+0x360>
 8007bfa:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <UART_SetConfig+0x33c>)
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d838      	bhi.n	8007c78 <UART_SetConfig+0x358>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <UART_SetConfig+0x2ec>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c25 	.word	0x08007c25
 8007c10:	08007c2d 	.word	0x08007c2d
 8007c14:	08007c35 	.word	0x08007c35
 8007c18:	08007c3d 	.word	0x08007c3d
 8007c1c:	08007c45 	.word	0x08007c45
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2a:	e24e      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c32:	e24a      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c34:	2308      	movs	r3, #8
 8007c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c3a:	e246      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c42:	e242      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c44:	2320      	movs	r3, #32
 8007c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c4a:	e23e      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c4c:	cfff69f3 	.word	0xcfff69f3
 8007c50:	58000c00 	.word	0x58000c00
 8007c54:	11fff4ff 	.word	0x11fff4ff
 8007c58:	40011000 	.word	0x40011000
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	40004400 	.word	0x40004400
 8007c64:	40004800 	.word	0x40004800
 8007c68:	40004c00 	.word	0x40004c00
 8007c6c:	40005000 	.word	0x40005000
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c76:	e228      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e224      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4ab1      	ldr	r2, [pc, #708]	; (8007f4c <UART_SetConfig+0x62c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d176      	bne.n	8007d78 <UART_SetConfig+0x458>
 8007c8a:	4bb1      	ldr	r3, [pc, #708]	; (8007f50 <UART_SetConfig+0x630>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c92:	2b28      	cmp	r3, #40	; 0x28
 8007c94:	d86c      	bhi.n	8007d70 <UART_SetConfig+0x450>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x37c>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007d41 	.word	0x08007d41
 8007ca0:	08007d71 	.word	0x08007d71
 8007ca4:	08007d71 	.word	0x08007d71
 8007ca8:	08007d71 	.word	0x08007d71
 8007cac:	08007d71 	.word	0x08007d71
 8007cb0:	08007d71 	.word	0x08007d71
 8007cb4:	08007d71 	.word	0x08007d71
 8007cb8:	08007d71 	.word	0x08007d71
 8007cbc:	08007d49 	.word	0x08007d49
 8007cc0:	08007d71 	.word	0x08007d71
 8007cc4:	08007d71 	.word	0x08007d71
 8007cc8:	08007d71 	.word	0x08007d71
 8007ccc:	08007d71 	.word	0x08007d71
 8007cd0:	08007d71 	.word	0x08007d71
 8007cd4:	08007d71 	.word	0x08007d71
 8007cd8:	08007d71 	.word	0x08007d71
 8007cdc:	08007d51 	.word	0x08007d51
 8007ce0:	08007d71 	.word	0x08007d71
 8007ce4:	08007d71 	.word	0x08007d71
 8007ce8:	08007d71 	.word	0x08007d71
 8007cec:	08007d71 	.word	0x08007d71
 8007cf0:	08007d71 	.word	0x08007d71
 8007cf4:	08007d71 	.word	0x08007d71
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d59 	.word	0x08007d59
 8007d00:	08007d71 	.word	0x08007d71
 8007d04:	08007d71 	.word	0x08007d71
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d71 	.word	0x08007d71
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d61 	.word	0x08007d61
 8007d20:	08007d71 	.word	0x08007d71
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d71 	.word	0x08007d71
 8007d2c:	08007d71 	.word	0x08007d71
 8007d30:	08007d71 	.word	0x08007d71
 8007d34:	08007d71 	.word	0x08007d71
 8007d38:	08007d71 	.word	0x08007d71
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d46:	e1c0      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d4e:	e1bc      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e1b8      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e1b4      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e1b0      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e1ac      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e1a8      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a75      	ldr	r2, [pc, #468]	; (8007f54 <UART_SetConfig+0x634>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d130      	bne.n	8007de4 <UART_SetConfig+0x4c4>
 8007d82:	4b73      	ldr	r3, [pc, #460]	; (8007f50 <UART_SetConfig+0x630>)
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d826      	bhi.n	8007ddc <UART_SetConfig+0x4bc>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0x474>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007dad 	.word	0x08007dad
 8007d98:	08007db5 	.word	0x08007db5
 8007d9c:	08007dbd 	.word	0x08007dbd
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db2:	e18a      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007db4:	2304      	movs	r3, #4
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dba:	e186      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc2:	e182      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e17e      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007dcc:	2320      	movs	r3, #32
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e17a      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e176      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007ddc:	2380      	movs	r3, #128	; 0x80
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e172      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a5b      	ldr	r2, [pc, #364]	; (8007f58 <UART_SetConfig+0x638>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d130      	bne.n	8007e50 <UART_SetConfig+0x530>
 8007dee:	4b58      	ldr	r3, [pc, #352]	; (8007f50 <UART_SetConfig+0x630>)
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d826      	bhi.n	8007e48 <UART_SetConfig+0x528>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x4e0>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e21 	.word	0x08007e21
 8007e08:	08007e29 	.word	0x08007e29
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e39 	.word	0x08007e39
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e1e:	e154      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e20:	2304      	movs	r3, #4
 8007e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e26:	e150      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2e:	e14c      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e148      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e144      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e40:	2340      	movs	r3, #64	; 0x40
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e140      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e13c      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a41      	ldr	r2, [pc, #260]	; (8007f5c <UART_SetConfig+0x63c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	f040 8082 	bne.w	8007f60 <UART_SetConfig+0x640>
 8007e5c:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <UART_SetConfig+0x630>)
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e64:	2b28      	cmp	r3, #40	; 0x28
 8007e66:	d86d      	bhi.n	8007f44 <UART_SetConfig+0x624>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x550>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f45 	.word	0x08007f45
 8007e78:	08007f45 	.word	0x08007f45
 8007e7c:	08007f45 	.word	0x08007f45
 8007e80:	08007f45 	.word	0x08007f45
 8007e84:	08007f45 	.word	0x08007f45
 8007e88:	08007f45 	.word	0x08007f45
 8007e8c:	08007f45 	.word	0x08007f45
 8007e90:	08007f1d 	.word	0x08007f1d
 8007e94:	08007f45 	.word	0x08007f45
 8007e98:	08007f45 	.word	0x08007f45
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f45 	.word	0x08007f45
 8007ea4:	08007f45 	.word	0x08007f45
 8007ea8:	08007f45 	.word	0x08007f45
 8007eac:	08007f45 	.word	0x08007f45
 8007eb0:	08007f25 	.word	0x08007f25
 8007eb4:	08007f45 	.word	0x08007f45
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f45 	.word	0x08007f45
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	08007f45 	.word	0x08007f45
 8007ec8:	08007f45 	.word	0x08007f45
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f45 	.word	0x08007f45
 8007ed8:	08007f45 	.word	0x08007f45
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f45 	.word	0x08007f45
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f35 	.word	0x08007f35
 8007ef4:	08007f45 	.word	0x08007f45
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1a:	e0d6      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f22:	e0d2      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2a:	e0ce      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f32:	e0ca      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3a:	e0c6      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f42:	e0c2      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f4a:	e0be      	b.n	80080ca <UART_SetConfig+0x7aa>
 8007f4c:	40011400 	.word	0x40011400
 8007f50:	58024400 	.word	0x58024400
 8007f54:	40007800 	.word	0x40007800
 8007f58:	40007c00 	.word	0x40007c00
 8007f5c:	40011800 	.word	0x40011800
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4aad      	ldr	r2, [pc, #692]	; (800821c <UART_SetConfig+0x8fc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d176      	bne.n	8008058 <UART_SetConfig+0x738>
 8007f6a:	4bad      	ldr	r3, [pc, #692]	; (8008220 <UART_SetConfig+0x900>)
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f72:	2b28      	cmp	r3, #40	; 0x28
 8007f74:	d86c      	bhi.n	8008050 <UART_SetConfig+0x730>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <UART_SetConfig+0x65c>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08008021 	.word	0x08008021
 8007f80:	08008051 	.word	0x08008051
 8007f84:	08008051 	.word	0x08008051
 8007f88:	08008051 	.word	0x08008051
 8007f8c:	08008051 	.word	0x08008051
 8007f90:	08008051 	.word	0x08008051
 8007f94:	08008051 	.word	0x08008051
 8007f98:	08008051 	.word	0x08008051
 8007f9c:	08008029 	.word	0x08008029
 8007fa0:	08008051 	.word	0x08008051
 8007fa4:	08008051 	.word	0x08008051
 8007fa8:	08008051 	.word	0x08008051
 8007fac:	08008051 	.word	0x08008051
 8007fb0:	08008051 	.word	0x08008051
 8007fb4:	08008051 	.word	0x08008051
 8007fb8:	08008051 	.word	0x08008051
 8007fbc:	08008031 	.word	0x08008031
 8007fc0:	08008051 	.word	0x08008051
 8007fc4:	08008051 	.word	0x08008051
 8007fc8:	08008051 	.word	0x08008051
 8007fcc:	08008051 	.word	0x08008051
 8007fd0:	08008051 	.word	0x08008051
 8007fd4:	08008051 	.word	0x08008051
 8007fd8:	08008051 	.word	0x08008051
 8007fdc:	08008039 	.word	0x08008039
 8007fe0:	08008051 	.word	0x08008051
 8007fe4:	08008051 	.word	0x08008051
 8007fe8:	08008051 	.word	0x08008051
 8007fec:	08008051 	.word	0x08008051
 8007ff0:	08008051 	.word	0x08008051
 8007ff4:	08008051 	.word	0x08008051
 8007ff8:	08008051 	.word	0x08008051
 8007ffc:	08008041 	.word	0x08008041
 8008000:	08008051 	.word	0x08008051
 8008004:	08008051 	.word	0x08008051
 8008008:	08008051 	.word	0x08008051
 800800c:	08008051 	.word	0x08008051
 8008010:	08008051 	.word	0x08008051
 8008014:	08008051 	.word	0x08008051
 8008018:	08008051 	.word	0x08008051
 800801c:	08008049 	.word	0x08008049
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008026:	e050      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008028:	2304      	movs	r3, #4
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e04c      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008030:	2308      	movs	r3, #8
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e048      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008038:	2310      	movs	r3, #16
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e044      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008040:	2320      	movs	r3, #32
 8008042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008046:	e040      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e03c      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008050:	2380      	movs	r3, #128	; 0x80
 8008052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008056:	e038      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a71      	ldr	r2, [pc, #452]	; (8008224 <UART_SetConfig+0x904>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d130      	bne.n	80080c4 <UART_SetConfig+0x7a4>
 8008062:	4b6f      	ldr	r3, [pc, #444]	; (8008220 <UART_SetConfig+0x900>)
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b05      	cmp	r3, #5
 800806c:	d826      	bhi.n	80080bc <UART_SetConfig+0x79c>
 800806e:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <UART_SetConfig+0x754>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	0800808d 	.word	0x0800808d
 8008078:	08008095 	.word	0x08008095
 800807c:	0800809d 	.word	0x0800809d
 8008080:	080080a5 	.word	0x080080a5
 8008084:	080080ad 	.word	0x080080ad
 8008088:	080080b5 	.word	0x080080b5
 800808c:	2302      	movs	r3, #2
 800808e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008092:	e01a      	b.n	80080ca <UART_SetConfig+0x7aa>
 8008094:	2304      	movs	r3, #4
 8008096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809a:	e016      	b.n	80080ca <UART_SetConfig+0x7aa>
 800809c:	2308      	movs	r3, #8
 800809e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a2:	e012      	b.n	80080ca <UART_SetConfig+0x7aa>
 80080a4:	2310      	movs	r3, #16
 80080a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080aa:	e00e      	b.n	80080ca <UART_SetConfig+0x7aa>
 80080ac:	2320      	movs	r3, #32
 80080ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b2:	e00a      	b.n	80080ca <UART_SetConfig+0x7aa>
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ba:	e006      	b.n	80080ca <UART_SetConfig+0x7aa>
 80080bc:	2380      	movs	r3, #128	; 0x80
 80080be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c2:	e002      	b.n	80080ca <UART_SetConfig+0x7aa>
 80080c4:	2380      	movs	r3, #128	; 0x80
 80080c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a55      	ldr	r2, [pc, #340]	; (8008224 <UART_SetConfig+0x904>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	f040 80f0 	bne.w	80082b6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080da:	2b20      	cmp	r3, #32
 80080dc:	dc46      	bgt.n	800816c <UART_SetConfig+0x84c>
 80080de:	2b02      	cmp	r3, #2
 80080e0:	db75      	blt.n	80081ce <UART_SetConfig+0x8ae>
 80080e2:	3b02      	subs	r3, #2
 80080e4:	2b1e      	cmp	r3, #30
 80080e6:	d872      	bhi.n	80081ce <UART_SetConfig+0x8ae>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x7d0>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008173 	.word	0x08008173
 80080f4:	080081cf 	.word	0x080081cf
 80080f8:	0800817b 	.word	0x0800817b
 80080fc:	080081cf 	.word	0x080081cf
 8008100:	080081cf 	.word	0x080081cf
 8008104:	080081cf 	.word	0x080081cf
 8008108:	0800818b 	.word	0x0800818b
 800810c:	080081cf 	.word	0x080081cf
 8008110:	080081cf 	.word	0x080081cf
 8008114:	080081cf 	.word	0x080081cf
 8008118:	080081cf 	.word	0x080081cf
 800811c:	080081cf 	.word	0x080081cf
 8008120:	080081cf 	.word	0x080081cf
 8008124:	080081cf 	.word	0x080081cf
 8008128:	0800819b 	.word	0x0800819b
 800812c:	080081cf 	.word	0x080081cf
 8008130:	080081cf 	.word	0x080081cf
 8008134:	080081cf 	.word	0x080081cf
 8008138:	080081cf 	.word	0x080081cf
 800813c:	080081cf 	.word	0x080081cf
 8008140:	080081cf 	.word	0x080081cf
 8008144:	080081cf 	.word	0x080081cf
 8008148:	080081cf 	.word	0x080081cf
 800814c:	080081cf 	.word	0x080081cf
 8008150:	080081cf 	.word	0x080081cf
 8008154:	080081cf 	.word	0x080081cf
 8008158:	080081cf 	.word	0x080081cf
 800815c:	080081cf 	.word	0x080081cf
 8008160:	080081cf 	.word	0x080081cf
 8008164:	080081cf 	.word	0x080081cf
 8008168:	080081c1 	.word	0x080081c1
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d02a      	beq.n	80081c6 <UART_SetConfig+0x8a6>
 8008170:	e02d      	b.n	80081ce <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008172:	f7fc ff57 	bl	8005024 <HAL_RCCEx_GetD3PCLK1Freq>
 8008176:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008178:	e02f      	b.n	80081da <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800817a:	f107 0314 	add.w	r3, r7, #20
 800817e:	4618      	mov	r0, r3
 8008180:	f7fc ff66 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008188:	e027      	b.n	80081da <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd f8b2 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008198:	e01f      	b.n	80081da <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800819a:	4b21      	ldr	r3, [pc, #132]	; (8008220 <UART_SetConfig+0x900>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <UART_SetConfig+0x900>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	08db      	lsrs	r3, r3, #3
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	4a1d      	ldr	r2, [pc, #116]	; (8008228 <UART_SetConfig+0x908>)
 80081b2:	fa22 f303 	lsr.w	r3, r2, r3
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081b8:	e00f      	b.n	80081da <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80081ba:	4b1b      	ldr	r3, [pc, #108]	; (8008228 <UART_SetConfig+0x908>)
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081be:	e00c      	b.n	80081da <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081c0:	4b1a      	ldr	r3, [pc, #104]	; (800822c <UART_SetConfig+0x90c>)
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081c4:	e009      	b.n	80081da <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081cc:	e005      	b.n	80081da <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80081d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 81e6 	beq.w	80085ae <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	4a12      	ldr	r2, [pc, #72]	; (8008230 <UART_SetConfig+0x910>)
 80081e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4413      	add	r3, r2
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	429a      	cmp	r2, r3
 8008204:	d305      	bcc.n	8008212 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800820c:	6a3a      	ldr	r2, [r7, #32]
 800820e:	429a      	cmp	r2, r3
 8008210:	d910      	bls.n	8008234 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008218:	e1c9      	b.n	80085ae <UART_SetConfig+0xc8e>
 800821a:	bf00      	nop
 800821c:	40011c00 	.word	0x40011c00
 8008220:	58024400 	.word	0x58024400
 8008224:	58000c00 	.word	0x58000c00
 8008228:	03d09000 	.word	0x03d09000
 800822c:	003d0900 	.word	0x003d0900
 8008230:	0800cfb8 	.word	0x0800cfb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	4618      	mov	r0, r3
 8008238:	f04f 0100 	mov.w	r1, #0
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	4ac1      	ldr	r2, [pc, #772]	; (8008548 <UART_SetConfig+0xc28>)
 8008242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008246:	b29a      	uxth	r2, r3
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	f7f8 f8b8 	bl	80003c0 <__aeabi_uldivmod>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	020b      	lsls	r3, r1, #8
 8008262:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008266:	0202      	lsls	r2, r0, #8
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	6849      	ldr	r1, [r1, #4]
 800826c:	0849      	lsrs	r1, r1, #1
 800826e:	4608      	mov	r0, r1
 8008270:	f04f 0100 	mov.w	r1, #0
 8008274:	1814      	adds	r4, r2, r0
 8008276:	eb43 0501 	adc.w	r5, r3, r1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	461a      	mov	r2, r3
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 f89a 	bl	80003c0 <__aeabi_uldivmod>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4613      	mov	r3, r2
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800829a:	d308      	bcc.n	80082ae <UART_SetConfig+0x98e>
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a2:	d204      	bcs.n	80082ae <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082aa:	60da      	str	r2, [r3, #12]
 80082ac:	e17f      	b.n	80085ae <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082b4:	e17b      	b.n	80085ae <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082be:	f040 80bd 	bne.w	800843c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80082c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	dc48      	bgt.n	800835c <UART_SetConfig+0xa3c>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	db7b      	blt.n	80083c6 <UART_SetConfig+0xaa6>
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d879      	bhi.n	80083c6 <UART_SetConfig+0xaa6>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <UART_SetConfig+0x9b8>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	08008363 	.word	0x08008363
 80082dc:	0800836b 	.word	0x0800836b
 80082e0:	080083c7 	.word	0x080083c7
 80082e4:	080083c7 	.word	0x080083c7
 80082e8:	08008373 	.word	0x08008373
 80082ec:	080083c7 	.word	0x080083c7
 80082f0:	080083c7 	.word	0x080083c7
 80082f4:	080083c7 	.word	0x080083c7
 80082f8:	08008383 	.word	0x08008383
 80082fc:	080083c7 	.word	0x080083c7
 8008300:	080083c7 	.word	0x080083c7
 8008304:	080083c7 	.word	0x080083c7
 8008308:	080083c7 	.word	0x080083c7
 800830c:	080083c7 	.word	0x080083c7
 8008310:	080083c7 	.word	0x080083c7
 8008314:	080083c7 	.word	0x080083c7
 8008318:	08008393 	.word	0x08008393
 800831c:	080083c7 	.word	0x080083c7
 8008320:	080083c7 	.word	0x080083c7
 8008324:	080083c7 	.word	0x080083c7
 8008328:	080083c7 	.word	0x080083c7
 800832c:	080083c7 	.word	0x080083c7
 8008330:	080083c7 	.word	0x080083c7
 8008334:	080083c7 	.word	0x080083c7
 8008338:	080083c7 	.word	0x080083c7
 800833c:	080083c7 	.word	0x080083c7
 8008340:	080083c7 	.word	0x080083c7
 8008344:	080083c7 	.word	0x080083c7
 8008348:	080083c7 	.word	0x080083c7
 800834c:	080083c7 	.word	0x080083c7
 8008350:	080083c7 	.word	0x080083c7
 8008354:	080083c7 	.word	0x080083c7
 8008358:	080083b9 	.word	0x080083b9
 800835c:	2b40      	cmp	r3, #64	; 0x40
 800835e:	d02e      	beq.n	80083be <UART_SetConfig+0xa9e>
 8008360:	e031      	b.n	80083c6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008362:	f7fb fb15 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8008366:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008368:	e033      	b.n	80083d2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800836a:	f7fb fb27 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 800836e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008370:	e02f      	b.n	80083d2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008372:	f107 0314 	add.w	r3, r7, #20
 8008376:	4618      	mov	r0, r3
 8008378:	f7fc fe6a 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008380:	e027      	b.n	80083d2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	4618      	mov	r0, r3
 8008388:	f7fc ffb6 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008390:	e01f      	b.n	80083d2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008392:	4b6e      	ldr	r3, [pc, #440]	; (800854c <UART_SetConfig+0xc2c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	d009      	beq.n	80083b2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800839e:	4b6b      	ldr	r3, [pc, #428]	; (800854c <UART_SetConfig+0xc2c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	08db      	lsrs	r3, r3, #3
 80083a4:	f003 0303 	and.w	r3, r3, #3
 80083a8:	4a69      	ldr	r2, [pc, #420]	; (8008550 <UART_SetConfig+0xc30>)
 80083aa:	fa22 f303 	lsr.w	r3, r2, r3
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083b0:	e00f      	b.n	80083d2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80083b2:	4b67      	ldr	r3, [pc, #412]	; (8008550 <UART_SetConfig+0xc30>)
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083b6:	e00c      	b.n	80083d2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083b8:	4b66      	ldr	r3, [pc, #408]	; (8008554 <UART_SetConfig+0xc34>)
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083bc:	e009      	b.n	80083d2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083c4:	e005      	b.n	80083d2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 80ea 	beq.w	80085ae <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	4a5a      	ldr	r2, [pc, #360]	; (8008548 <UART_SetConfig+0xc28>)
 80083e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ec:	005a      	lsls	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	441a      	add	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d916      	bls.n	8008434 <UART_SetConfig+0xb14>
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840c:	d212      	bcs.n	8008434 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	b29b      	uxth	r3, r3
 8008412:	f023 030f 	bic.w	r3, r3, #15
 8008416:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	b29b      	uxth	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b29a      	uxth	r2, r3
 8008424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008426:	4313      	orrs	r3, r2
 8008428:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e0bc      	b.n	80085ae <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800843a:	e0b8      	b.n	80085ae <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800843c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008440:	2b20      	cmp	r3, #32
 8008442:	dc4b      	bgt.n	80084dc <UART_SetConfig+0xbbc>
 8008444:	2b00      	cmp	r3, #0
 8008446:	f2c0 8087 	blt.w	8008558 <UART_SetConfig+0xc38>
 800844a:	2b20      	cmp	r3, #32
 800844c:	f200 8084 	bhi.w	8008558 <UART_SetConfig+0xc38>
 8008450:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <UART_SetConfig+0xb38>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	080084e3 	.word	0x080084e3
 800845c:	080084eb 	.word	0x080084eb
 8008460:	08008559 	.word	0x08008559
 8008464:	08008559 	.word	0x08008559
 8008468:	080084f3 	.word	0x080084f3
 800846c:	08008559 	.word	0x08008559
 8008470:	08008559 	.word	0x08008559
 8008474:	08008559 	.word	0x08008559
 8008478:	08008503 	.word	0x08008503
 800847c:	08008559 	.word	0x08008559
 8008480:	08008559 	.word	0x08008559
 8008484:	08008559 	.word	0x08008559
 8008488:	08008559 	.word	0x08008559
 800848c:	08008559 	.word	0x08008559
 8008490:	08008559 	.word	0x08008559
 8008494:	08008559 	.word	0x08008559
 8008498:	08008513 	.word	0x08008513
 800849c:	08008559 	.word	0x08008559
 80084a0:	08008559 	.word	0x08008559
 80084a4:	08008559 	.word	0x08008559
 80084a8:	08008559 	.word	0x08008559
 80084ac:	08008559 	.word	0x08008559
 80084b0:	08008559 	.word	0x08008559
 80084b4:	08008559 	.word	0x08008559
 80084b8:	08008559 	.word	0x08008559
 80084bc:	08008559 	.word	0x08008559
 80084c0:	08008559 	.word	0x08008559
 80084c4:	08008559 	.word	0x08008559
 80084c8:	08008559 	.word	0x08008559
 80084cc:	08008559 	.word	0x08008559
 80084d0:	08008559 	.word	0x08008559
 80084d4:	08008559 	.word	0x08008559
 80084d8:	08008539 	.word	0x08008539
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d02e      	beq.n	800853e <UART_SetConfig+0xc1e>
 80084e0:	e03a      	b.n	8008558 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084e2:	f7fb fa55 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80084e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084e8:	e03c      	b.n	8008564 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084ea:	f7fb fa67 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 80084ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084f0:	e038      	b.n	8008564 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f2:	f107 0314 	add.w	r3, r7, #20
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fc fdaa 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008500:	e030      	b.n	8008564 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	4618      	mov	r0, r3
 8008508:	f7fc fef6 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008510:	e028      	b.n	8008564 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <UART_SetConfig+0xc2c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <UART_SetConfig+0xc2c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <UART_SetConfig+0xc30>)
 800852a:	fa22 f303 	lsr.w	r3, r2, r3
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008530:	e018      	b.n	8008564 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8008532:	4b07      	ldr	r3, [pc, #28]	; (8008550 <UART_SetConfig+0xc30>)
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008536:	e015      	b.n	8008564 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <UART_SetConfig+0xc34>)
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800853c:	e012      	b.n	8008564 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800853e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008544:	e00e      	b.n	8008564 <UART_SetConfig+0xc44>
 8008546:	bf00      	nop
 8008548:	0800cfb8 	.word	0x0800cfb8
 800854c:	58024400 	.word	0x58024400
 8008550:	03d09000 	.word	0x03d09000
 8008554:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008562:	bf00      	nop
    }

    if (pclk != 0U)
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d021      	beq.n	80085ae <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	4a1a      	ldr	r2, [pc, #104]	; (80085d8 <UART_SetConfig+0xcb8>)
 8008570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008574:	461a      	mov	r2, r3
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	fbb3 f2f2 	udiv	r2, r3, r2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	441a      	add	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	fbb2 f3f3 	udiv	r3, r2, r3
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	2b0f      	cmp	r3, #15
 8008592:	d909      	bls.n	80085a8 <UART_SetConfig+0xc88>
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859a:	d205      	bcs.n	80085a8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	e002      	b.n	80085ae <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80085ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3738      	adds	r7, #56	; 0x38
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bdb0      	pop	{r4, r5, r7, pc}
 80085d6:	bf00      	nop
 80085d8:	0800cfb8 	.word	0x0800cfb8

080085dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f003 0310 	and.w	r3, r3, #16
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01a      	beq.n	80086f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086da:	d10a      	bne.n	80086f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	605a      	str	r2, [r3, #4]
  }
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af02      	add	r7, sp, #8
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008730:	f7f8 fffe 	bl	8001730 <HAL_GetTick>
 8008734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0308 	and.w	r3, r3, #8
 8008740:	2b08      	cmp	r3, #8
 8008742:	d10e      	bne.n	8008762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f82f 	bl	80087b6 <UART_WaitOnFlagUntilTimeout>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e025      	b.n	80087ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b04      	cmp	r3, #4
 800876e:	d10e      	bne.n	800878e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f819 	bl	80087b6 <UART_WaitOnFlagUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e00f      	b.n	80087ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b09c      	sub	sp, #112	; 0x70
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	603b      	str	r3, [r7, #0]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c6:	e0a9      	b.n	800891c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	f000 80a5 	beq.w	800891c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d2:	f7f8 ffad 	bl	8001730 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80087de:	429a      	cmp	r2, r3
 80087e0:	d302      	bcc.n	80087e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80087e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d140      	bne.n	800886a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087fc:	667b      	str	r3, [r7, #100]	; 0x64
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008808:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800880c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e6      	bne.n	80087e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	663b      	str	r3, [r7, #96]	; 0x60
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800883a:	64ba      	str	r2, [r7, #72]	; 0x48
 800883c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e5      	bne.n	800881a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e069      	b.n	800893e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d051      	beq.n	800891c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008886:	d149      	bne.n	800891c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008890:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34
 80088b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e6      	bne.n	8008892 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3308      	adds	r3, #8
 80088ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	613b      	str	r3, [r7, #16]
   return(result);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f023 0301 	bic.w	r3, r3, #1
 80088da:	66bb      	str	r3, [r7, #104]	; 0x68
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3308      	adds	r3, #8
 80088e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088e4:	623a      	str	r2, [r7, #32]
 80088e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	69f9      	ldr	r1, [r7, #28]
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e5      	bne.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e010      	b.n	800893e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69da      	ldr	r2, [r3, #28]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4013      	ands	r3, r2
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	429a      	cmp	r2, r3
 800892a:	bf0c      	ite	eq
 800892c:	2301      	moveq	r3, #1
 800892e:	2300      	movne	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	429a      	cmp	r2, r3
 8008938:	f43f af46 	beq.w	80087c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3770      	adds	r7, #112	; 0x70
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_UARTEx_DisableFifoMode+0x16>
 8008958:	2302      	movs	r3, #2
 800895a:	e027      	b.n	80089ac <HAL_UARTEx_DisableFifoMode+0x66>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2224      	movs	r2, #36	; 0x24
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0201 	bic.w	r2, r2, #1
 8008982:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800898a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d101      	bne.n	80089d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e02d      	b.n	8008a2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	; 0x24
 80089dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f84f 	bl	8008ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e02d      	b.n	8008aa8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2224      	movs	r2, #36	; 0x24
 8008a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f811 	bl	8008ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d108      	bne.n	8008ad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ad0:	e031      	b.n	8008b36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ad2:	2310      	movs	r3, #16
 8008ad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	0e5b      	lsrs	r3, r3, #25
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	0f5b      	lsrs	r3, r3, #29
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	7b3a      	ldrb	r2, [r7, #12]
 8008afe:	4911      	ldr	r1, [pc, #68]	; (8008b44 <UARTEx_SetNbDataToProcess+0x94>)
 8008b00:	5c8a      	ldrb	r2, [r1, r2]
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b06:	7b3a      	ldrb	r2, [r7, #12]
 8008b08:	490f      	ldr	r1, [pc, #60]	; (8008b48 <UARTEx_SetNbDataToProcess+0x98>)
 8008b0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	7b7a      	ldrb	r2, [r7, #13]
 8008b1c:	4909      	ldr	r1, [pc, #36]	; (8008b44 <UARTEx_SetNbDataToProcess+0x94>)
 8008b1e:	5c8a      	ldrb	r2, [r1, r2]
 8008b20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b24:	7b7a      	ldrb	r2, [r7, #13]
 8008b26:	4908      	ldr	r1, [pc, #32]	; (8008b48 <UARTEx_SetNbDataToProcess+0x98>)
 8008b28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b36:	bf00      	nop
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	0800cfd0 	.word	0x0800cfd0
 8008b48:	0800cfd8 	.word	0x0800cfd8

08008b4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	f107 001c 	add.w	r0, r7, #28
 8008b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008b62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008b64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008b66:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008b6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008b6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008b72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <SDMMC_Init+0x50>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	b004      	add	sp, #16
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	ffc02c00 	.word	0xffc02c00

08008ba0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f043 0203 	orr.w	r2, r3, #3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
	...

08008c1c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008c3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008c40:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008c46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <SDMMC_SendCommand+0x50>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	fffee0c0 	.word	0xfffee0c0

08008c70 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	b2db      	uxtb	r3, r3
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3314      	adds	r3, #20
 8008c98:	461a      	mov	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008cd6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008cdc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008ce2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0

}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d16:	2310      	movs	r3, #16
 8008d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d2a:	f107 0308 	add.w	r3, r7, #8
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff ff73 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa5f 	bl	8009200 <SDMMC_GetCmdResp1>
 8008d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d44:	69fb      	ldr	r3, [r7, #28]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b088      	sub	sp, #32
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008d5c:	2311      	movs	r3, #17
 8008d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d70:	f107 0308 	add.w	r3, r7, #8
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff ff50 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d80:	2111      	movs	r1, #17
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa3c 	bl	8009200 <SDMMC_GetCmdResp1>
 8008d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3720      	adds	r7, #32
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008da2:	2312      	movs	r3, #18
 8008da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff2d 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc6:	2112      	movs	r1, #18
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fa19 	bl	8009200 <SDMMC_GetCmdResp1>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008de8:	2318      	movs	r3, #24
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dfc:	f107 0308 	add.w	r3, r7, #8
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ff0a 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0c:	2118      	movs	r1, #24
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f9f6 	bl	8009200 <SDMMC_GetCmdResp1>
 8008e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e16:	69fb      	ldr	r3, [r7, #28]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e2e:	2319      	movs	r3, #25
 8008e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e42:	f107 0308 	add.w	r3, r7, #8
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fee7 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e52:	2119      	movs	r1, #25
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f9d3 	bl	8009200 <SDMMC_GetCmdResp1>
 8008e5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008e74:	230c      	movs	r3, #12
 8008e76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e86:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea0:	f107 0308 	add.w	r3, r7, #8
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff feb8 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008eac:	4a0b      	ldr	r2, [pc, #44]	; (8008edc <SDMMC_CmdStopTransfer+0x74>)
 8008eae:	210c      	movs	r1, #12
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f9a5 	bl	8009200 <SDMMC_GetCmdResp1>
 8008eb6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eca:	d101      	bne.n	8008ed0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	05f5e100 	.word	0x05f5e100

08008ee0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008eee:	2307      	movs	r3, #7
 8008ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff fe87 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f12:	2107      	movs	r1, #7
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f973 	bl	8009200 <SDMMC_GetCmdResp1>
 8008f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f36:	2300      	movs	r3, #0
 8008f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f44:	f107 0308 	add.w	r3, r7, #8
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff fe66 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fb97 	bl	8009684 <SDMMC_GetCmdError>
 8008f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f58:	69fb      	ldr	r3, [r7, #28]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3720      	adds	r7, #32
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b088      	sub	sp, #32
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f70:	2308      	movs	r3, #8
 8008f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fe46 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fb29 	bl	80095e8 <SDMMC_GetCmdResp7>
 8008f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f98:	69fb      	ldr	r3, [r7, #28]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b088      	sub	sp, #32
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fb0:	2337      	movs	r3, #55	; 0x37
 8008fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc4:	f107 0308 	add.w	r3, r7, #8
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff fe26 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd4:	2137      	movs	r1, #55	; 0x37
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f912 	bl	8009200 <SDMMC_GetCmdResp1>
 8008fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fde:	69fb      	ldr	r3, [r7, #28]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ff6:	2329      	movs	r3, #41	; 0x29
 8008ff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009008:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fe03 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa2e 	bl	8009478 <SDMMC_GetCmdResp3>
 800901c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901e:	69fb      	ldr	r3, [r7, #28]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009036:	2306      	movs	r3, #6
 8009038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800903a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800903e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800904a:	f107 0308 	add.w	r3, r7, #8
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff fde3 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009056:	f241 3288 	movw	r2, #5000	; 0x1388
 800905a:	2106      	movs	r1, #6
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f8cf 	bl	8009200 <SDMMC_GetCmdResp1>
 8009062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009064:	69fb      	ldr	r3, [r7, #28]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b088      	sub	sp, #32
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800907a:	2333      	movs	r3, #51	; 0x33
 800907c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800907e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800908c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fdc1 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800909a:	f241 3288 	movw	r2, #5000	; 0x1388
 800909e:	2133      	movs	r1, #51	; 0x33
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f8ad 	bl	8009200 <SDMMC_GetCmdResp1>
 80090a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a8:	69fb      	ldr	r3, [r7, #28]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b088      	sub	sp, #32
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090be:	2302      	movs	r3, #2
 80090c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fd9f 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f980 	bl	80093e4 <SDMMC_GetCmdResp2>
 80090e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80090fe:	2309      	movs	r3, #9
 8009100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800910c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fd7f 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f960 	bl	80093e4 <SDMMC_GetCmdResp2>
 8009124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009126:	69fb      	ldr	r3, [r7, #28]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800913e:	2303      	movs	r3, #3
 8009140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff fd5f 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	2103      	movs	r1, #3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9c8 	bl	80094f8 <SDMMC_GetCmdResp6>
 8009168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800916a:	69fb      	ldr	r3, [r7, #28]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009182:	230d      	movs	r3, #13
 8009184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800918a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009196:	f107 0308 	add.w	r3, r7, #8
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fd3d 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a6:	210d      	movs	r1, #13
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f829 	bl	8009200 <SDMMC_GetCmdResp1>
 80091ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b0:	69fb      	ldr	r3, [r7, #28]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b088      	sub	sp, #32
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80091c6:	230d      	movs	r3, #13
 80091c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091da:	f107 0308 	add.w	r3, r7, #8
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fd1b 	bl	8008c1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80091e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ea:	210d      	movs	r1, #13
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f807 	bl	8009200 <SDMMC_GetCmdResp1>
 80091f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f4:	69fb      	ldr	r3, [r7, #28]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	460b      	mov	r3, r1
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800920e:	4b70      	ldr	r3, [pc, #448]	; (80093d0 <SDMMC_GetCmdResp1+0x1d0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a70      	ldr	r2, [pc, #448]	; (80093d4 <SDMMC_GetCmdResp1+0x1d4>)
 8009214:	fba2 2303 	umull	r2, r3, r2, r3
 8009218:	0a5a      	lsrs	r2, r3, #9
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	61fa      	str	r2, [r7, #28]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800922c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009230:	e0c9      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	4b67      	ldr	r3, [pc, #412]	; (80093d8 <SDMMC_GetCmdResp1+0x1d8>)
 800923c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0ef      	beq.n	8009222 <SDMMC_GetCmdResp1+0x22>
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1ea      	bne.n	8009222 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2204      	movs	r2, #4
 800925c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800925e:	2304      	movs	r3, #4
 8009260:	e0b1      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009274:	2301      	movs	r3, #1
 8009276:	e0a6      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4a58      	ldr	r2, [pc, #352]	; (80093dc <SDMMC_GetCmdResp1+0x1dc>)
 800927c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f7ff fcf6 	bl	8008c70 <SDMMC_GetCommandResponse>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	7afb      	ldrb	r3, [r7, #11]
 800928a:	4293      	cmp	r3, r2
 800928c:	d001      	beq.n	8009292 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800928e:	2301      	movs	r3, #1
 8009290:	e099      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009292:	2100      	movs	r1, #0
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff fcf8 	bl	8008c8a <SDMMC_GetResponse>
 800929a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	4b50      	ldr	r3, [pc, #320]	; (80093e0 <SDMMC_GetCmdResp1+0x1e0>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	e08d      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da02      	bge.n	80092b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092b4:	e087      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092c0:	2340      	movs	r3, #64	; 0x40
 80092c2:	e080      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092ce:	2380      	movs	r3, #128	; 0x80
 80092d0:	e079      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092e0:	e071      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f0:	e069      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009300:	e061      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800930c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009310:	e059      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800931c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009320:	e051      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800932c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009330:	e049      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800933c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009340:	e041      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800934c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009350:	e039      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800935c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009360:	e031      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800936c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009370:	e029      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800937c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009380:	e021      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800938c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009390:	e019      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800939c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093a0:	e011      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093b0:	e009      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093c0:	e001      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	2400002c 	.word	0x2400002c
 80093d4:	10624dd3 	.word	0x10624dd3
 80093d8:	00200045 	.word	0x00200045
 80093dc:	002000c5 	.word	0x002000c5
 80093e0:	fdffe008 	.word	0xfdffe008

080093e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093ec:	4b1f      	ldr	r3, [pc, #124]	; (800946c <SDMMC_GetCmdResp2+0x88>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1f      	ldr	r2, [pc, #124]	; (8009470 <SDMMC_GetCmdResp2+0x8c>)
 80093f2:	fba2 2303 	umull	r2, r3, r2, r3
 80093f6:	0a5b      	lsrs	r3, r3, #9
 80093f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1e5a      	subs	r2, r3, #1
 8009406:	60fa      	str	r2, [r7, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800940c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009410:	e026      	b.n	8009460 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0ef      	beq.n	8009402 <SDMMC_GetCmdResp2+0x1e>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1ea      	bne.n	8009402 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2204      	movs	r2, #4
 800943c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800943e:	2304      	movs	r3, #4
 8009440:	e00e      	b.n	8009460 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009454:	2301      	movs	r3, #1
 8009456:	e003      	b.n	8009460 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a06      	ldr	r2, [pc, #24]	; (8009474 <SDMMC_GetCmdResp2+0x90>)
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	2400002c 	.word	0x2400002c
 8009470:	10624dd3 	.word	0x10624dd3
 8009474:	002000c5 	.word	0x002000c5

08009478 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009480:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <SDMMC_GetCmdResp3+0x74>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1a      	ldr	r2, [pc, #104]	; (80094f0 <SDMMC_GetCmdResp3+0x78>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0a5b      	lsrs	r3, r3, #9
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	fb02 f303 	mul.w	r3, r2, r3
 8009494:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	60fa      	str	r2, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a4:	e01b      	b.n	80094de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0ef      	beq.n	8009496 <SDMMC_GetCmdResp3+0x1e>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ea      	bne.n	8009496 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2204      	movs	r2, #4
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094d2:	2304      	movs	r3, #4
 80094d4:	e003      	b.n	80094de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a06      	ldr	r2, [pc, #24]	; (80094f4 <SDMMC_GetCmdResp3+0x7c>)
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	2400002c 	.word	0x2400002c
 80094f0:	10624dd3 	.word	0x10624dd3
 80094f4:	002000c5 	.word	0x002000c5

080094f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	460b      	mov	r3, r1
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009506:	4b35      	ldr	r3, [pc, #212]	; (80095dc <SDMMC_GetCmdResp6+0xe4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a35      	ldr	r2, [pc, #212]	; (80095e0 <SDMMC_GetCmdResp6+0xe8>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	0a5b      	lsrs	r3, r3, #9
 8009512:	f241 3288 	movw	r2, #5000	; 0x1388
 8009516:	fb02 f303 	mul.w	r3, r2, r3
 800951a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	61fa      	str	r2, [r7, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009526:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800952a:	e052      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009530:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0ef      	beq.n	800951c <SDMMC_GetCmdResp6+0x24>
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1ea      	bne.n	800951c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2204      	movs	r2, #4
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009558:	2304      	movs	r3, #4
 800955a:	e03a      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800956e:	2301      	movs	r3, #1
 8009570:	e02f      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff fb7c 	bl	8008c70 <SDMMC_GetCommandResponse>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	7afb      	ldrb	r3, [r7, #11]
 800957e:	4293      	cmp	r3, r2
 8009580:	d001      	beq.n	8009586 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009582:	2301      	movs	r3, #1
 8009584:	e025      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <SDMMC_GetCmdResp6+0xec>)
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800958c:	2100      	movs	r1, #0
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fb7b 	bl	8008c8a <SDMMC_GetResponse>
 8009594:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e011      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095bc:	e009      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095cc:	e001      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	2400002c 	.word	0x2400002c
 80095e0:	10624dd3 	.word	0x10624dd3
 80095e4:	002000c5 	.word	0x002000c5

080095e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80095f0:	4b22      	ldr	r3, [pc, #136]	; (800967c <SDMMC_GetCmdResp7+0x94>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a22      	ldr	r2, [pc, #136]	; (8009680 <SDMMC_GetCmdResp7+0x98>)
 80095f6:	fba2 2303 	umull	r2, r3, r2, r3
 80095fa:	0a5b      	lsrs	r3, r3, #9
 80095fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009600:	fb02 f303 	mul.w	r3, r2, r3
 8009604:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	1e5a      	subs	r2, r3, #1
 800960a:	60fa      	str	r2, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009614:	e02c      	b.n	8009670 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0ef      	beq.n	8009606 <SDMMC_GetCmdResp7+0x1e>
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1ea      	bne.n	8009606 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2204      	movs	r2, #4
 8009640:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009642:	2304      	movs	r3, #4
 8009644:	e014      	b.n	8009670 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009658:	2301      	movs	r3, #1
 800965a:	e009      	b.n	8009670 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2240      	movs	r2, #64	; 0x40
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800966e:	2300      	movs	r3, #0

}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	2400002c 	.word	0x2400002c
 8009680:	10624dd3 	.word	0x10624dd3

08009684 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <SDMMC_GetCmdError+0x50>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a11      	ldr	r2, [pc, #68]	; (80096d8 <SDMMC_GetCmdError+0x54>)
 8009692:	fba2 2303 	umull	r2, r3, r2, r3
 8009696:	0a5b      	lsrs	r3, r3, #9
 8009698:	f241 3288 	movw	r2, #5000	; 0x1388
 800969c:	fb02 f303 	mul.w	r3, r2, r3
 80096a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	1e5a      	subs	r2, r3, #1
 80096a6:	60fa      	str	r2, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d102      	bne.n	80096b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b0:	e009      	b.n	80096c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f1      	beq.n	80096a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a06      	ldr	r2, [pc, #24]	; (80096dc <SDMMC_GetCmdError+0x58>)
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	2400002c 	.word	0x2400002c
 80096d8:	10624dd3 	.word	0x10624dd3
 80096dc:	002000c5 	.word	0x002000c5

080096e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80096e4:	4904      	ldr	r1, [pc, #16]	; (80096f8 <MX_FATFS_Init+0x18>)
 80096e6:	4805      	ldr	r0, [pc, #20]	; (80096fc <MX_FATFS_Init+0x1c>)
 80096e8:	f002 ff9a 	bl	800c620 <FATFS_LinkDriver>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <MX_FATFS_Init+0x20>)
 80096f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80096f4:	bf00      	nop
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	2400260c 	.word	0x2400260c
 80096fc:	0800cfe0 	.word	0x0800cfe0
 8009700:	24002608 	.word	0x24002608

08009704 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009708:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800970a:	4618      	mov	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800971e:	f000 f89b 	bl	8009858 <BSP_SD_IsDetected>
 8009722:	4603      	mov	r3, r0
 8009724:	2b01      	cmp	r3, #1
 8009726:	d001      	beq.n	800972c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009728:	2302      	movs	r3, #2
 800972a:	e012      	b.n	8009752 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800972c:	480b      	ldr	r0, [pc, #44]	; (800975c <BSP_SD_Init+0x48>)
 800972e:	f7fc f9ed 	bl	8005b0c <HAL_SD_Init>
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800973c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009740:	4806      	ldr	r0, [pc, #24]	; (800975c <BSP_SD_Init+0x48>)
 8009742:	f7fd fa63 	bl	8006c0c <HAL_SD_ConfigWideBusOperation>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009750:	79fb      	ldrb	r3, [r7, #7]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	24002258 	.word	0x24002258

08009760 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af02      	add	r7, sp, #8
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	4806      	ldr	r0, [pc, #24]	; (8009798 <BSP_SD_ReadBlocks+0x38>)
 800977e:	f7fc fadf 	bl	8005d40 <HAL_SD_ReadBlocks>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	24002258 	.word	0x24002258

0800979c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	4806      	ldr	r0, [pc, #24]	; (80097d4 <BSP_SD_WriteBlocks+0x38>)
 80097ba:	f7fc fc4b 	bl	8006054 <HAL_SD_WriteBlocks>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	24002258 	.word	0x24002258

080097d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80097dc:	4805      	ldr	r0, [pc, #20]	; (80097f4 <BSP_SD_GetCardState+0x1c>)
 80097de:	f7fd fb27 	bl	8006e30 <HAL_SD_GetCardState>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	bf14      	ite	ne
 80097e8:	2301      	movne	r3, #1
 80097ea:	2300      	moveq	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	24002258 	.word	0x24002258

080097f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	4803      	ldr	r0, [pc, #12]	; (8009810 <BSP_SD_GetCardInfo+0x18>)
 8009804:	f7fd f9d6 	bl	8006bb4 <HAL_SD_GetCardInfo>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	24002258 	.word	0x24002258

08009814 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800981c:	f000 f80e 	bl	800983c <BSP_SD_WriteCpltCallback>
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009830:	f000 f80b 	bl	800984a <BSP_SD_ReadCpltCallback>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0

}
 8009840:	bf00      	nop
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800984a:	b480      	push	{r7}
 800984c:	af00      	add	r7, sp, #0

}
 800984e:	bf00      	nop
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800985e:	2301      	movs	r3, #1
 8009860:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009862:	f000 f80b 	bl	800987c <BSP_PlatformIsDetected>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800986c:	2300      	movs	r3, #0
 800986e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	b2db      	uxtb	r3, r3
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009882:	2301      	movs	r3, #1
 8009884:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800988a:	4806      	ldr	r0, [pc, #24]	; (80098a4 <BSP_PlatformIsDetected+0x28>)
 800988c:	f7f8 fe62 	bl	8002554 <HAL_GPIO_ReadPin>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009896:	2300      	movs	r3, #0
 8009898:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800989a:	79fb      	ldrb	r3, [r7, #7]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	58020800 	.word	0x58020800

080098a8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80098b2:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <SD_CheckStatus+0x38>)
 80098b4:	2201      	movs	r2, #1
 80098b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80098b8:	f7ff ff8e 	bl	80097d8 <BSP_SD_GetCardState>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d107      	bne.n	80098d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80098c2:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <SD_CheckStatus+0x38>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f023 0301 	bic.w	r3, r3, #1
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <SD_CheckStatus+0x38>)
 80098d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80098d2:	4b03      	ldr	r3, [pc, #12]	; (80098e0 <SD_CheckStatus+0x38>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b2db      	uxtb	r3, r3
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	24000039 	.word	0x24000039

080098e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80098ee:	4b0b      	ldr	r3, [pc, #44]	; (800991c <SD_initialize+0x38>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80098f4:	f7ff ff0e 	bl	8009714 <BSP_SD_Init>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d107      	bne.n	800990e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff ffd1 	bl	80098a8 <SD_CheckStatus>
 8009906:	4603      	mov	r3, r0
 8009908:	461a      	mov	r2, r3
 800990a:	4b04      	ldr	r3, [pc, #16]	; (800991c <SD_initialize+0x38>)
 800990c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800990e:	4b03      	ldr	r3, [pc, #12]	; (800991c <SD_initialize+0x38>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	b2db      	uxtb	r3, r3
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	24000039 	.word	0x24000039

08009920 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff ffbb 	bl	80098a8 <SD_CheckStatus>
 8009932:	4603      	mov	r3, r0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009950:	f04f 33ff 	mov.w	r3, #4294967295
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	68b8      	ldr	r0, [r7, #8]
 800995a:	f7ff ff01 	bl	8009760 <BSP_SD_ReadBlocks>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d107      	bne.n	8009974 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009964:	bf00      	nop
 8009966:	f7ff ff37 	bl	80097d8 <BSP_SD_GetCardState>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1fa      	bne.n	8009966 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009992:	f04f 33ff 	mov.w	r3, #4294967295
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	68b8      	ldr	r0, [r7, #8]
 800999c:	f7ff fefe 	bl	800979c <BSP_SD_WriteBlocks>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d107      	bne.n	80099b6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80099a6:	bf00      	nop
 80099a8:	f7ff ff16 	bl	80097d8 <BSP_SD_GetCardState>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1fa      	bne.n	80099a8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08c      	sub	sp, #48	; 0x30
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	603a      	str	r2, [r7, #0]
 80099ca:	71fb      	strb	r3, [r7, #7]
 80099cc:	460b      	mov	r3, r1
 80099ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099d6:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <SD_ioctl+0xac>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <SD_ioctl+0x28>
 80099e4:	2303      	movs	r3, #3
 80099e6:	e03c      	b.n	8009a62 <SD_ioctl+0xa2>

  switch (cmd)
 80099e8:	79bb      	ldrb	r3, [r7, #6]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d834      	bhi.n	8009a58 <SD_ioctl+0x98>
 80099ee:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <SD_ioctl+0x34>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a05 	.word	0x08009a05
 80099f8:	08009a0d 	.word	0x08009a0d
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a3f 	.word	0x08009a3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a0a:	e028      	b.n	8009a5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a0c:	f107 0308 	add.w	r3, r7, #8
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fef1 	bl	80097f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009a16:	6a3a      	ldr	r2, [r7, #32]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a22:	e01c      	b.n	8009a5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fee5 	bl	80097f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a3c:	e00f      	b.n	8009a5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a3e:	f107 0308 	add.w	r3, r7, #8
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fed8 	bl	80097f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	0a5a      	lsrs	r2, r3, #9
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a56:	e002      	b.n	8009a5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009a58:	2304      	movs	r3, #4
 8009a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3730      	adds	r7, #48	; 0x30
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	24000039 	.word	0x24000039

08009a70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	4a08      	ldr	r2, [pc, #32]	; (8009aa0 <disk_status+0x30>)
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	79fa      	ldrb	r2, [r7, #7]
 8009a88:	4905      	ldr	r1, [pc, #20]	; (8009aa0 <disk_status+0x30>)
 8009a8a:	440a      	add	r2, r1
 8009a8c:	7a12      	ldrb	r2, [r2, #8]
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4798      	blx	r3
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	240021b0 	.word	0x240021b0

08009aa4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	4a0d      	ldr	r2, [pc, #52]	; (8009aec <disk_initialize+0x48>)
 8009ab6:	5cd3      	ldrb	r3, [r2, r3]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d111      	bne.n	8009ae0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	4a0b      	ldr	r2, [pc, #44]	; (8009aec <disk_initialize+0x48>)
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	4a09      	ldr	r2, [pc, #36]	; (8009aec <disk_initialize+0x48>)
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	79fa      	ldrb	r2, [r7, #7]
 8009ad2:	4906      	ldr	r1, [pc, #24]	; (8009aec <disk_initialize+0x48>)
 8009ad4:	440a      	add	r2, r1
 8009ad6:	7a12      	ldrb	r2, [r2, #8]
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4798      	blx	r3
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	240021b0 	.word	0x240021b0

08009af0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	4a0a      	ldr	r2, [pc, #40]	; (8009b2c <disk_read+0x3c>)
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	689c      	ldr	r4, [r3, #8]
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	4a07      	ldr	r2, [pc, #28]	; (8009b2c <disk_read+0x3c>)
 8009b10:	4413      	add	r3, r2
 8009b12:	7a18      	ldrb	r0, [r3, #8]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	47a0      	blx	r4
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd90      	pop	{r4, r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	240021b0 	.word	0x240021b0

08009b30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b30:	b590      	push	{r4, r7, lr}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	4a0a      	ldr	r2, [pc, #40]	; (8009b6c <disk_write+0x3c>)
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	68dc      	ldr	r4, [r3, #12]
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4a07      	ldr	r2, [pc, #28]	; (8009b6c <disk_write+0x3c>)
 8009b50:	4413      	add	r3, r2
 8009b52:	7a18      	ldrb	r0, [r3, #8]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	47a0      	blx	r4
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd90      	pop	{r4, r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	240021b0 	.word	0x240021b0

08009b70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	603a      	str	r2, [r7, #0]
 8009b7a:	71fb      	strb	r3, [r7, #7]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	4a09      	ldr	r2, [pc, #36]	; (8009ba8 <disk_ioctl+0x38>)
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	79fa      	ldrb	r2, [r7, #7]
 8009b8e:	4906      	ldr	r1, [pc, #24]	; (8009ba8 <disk_ioctl+0x38>)
 8009b90:	440a      	add	r2, r1
 8009b92:	7a10      	ldrb	r0, [r2, #8]
 8009b94:	79b9      	ldrb	r1, [r7, #6]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	4798      	blx	r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	240021b0 	.word	0x240021b0

08009bac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009bbc:	89fb      	ldrh	r3, [r7, #14]
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	b21a      	sxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	b21b      	sxth	r3, r3
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	b21b      	sxth	r3, r3
 8009bcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009bce:	89fb      	ldrh	r3, [r7, #14]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3303      	adds	r3, #3
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	021b      	lsls	r3, r3, #8
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	3202      	adds	r2, #2
 8009bf4:	7812      	ldrb	r2, [r2, #0]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	3201      	adds	r2, #1
 8009c02:	7812      	ldrb	r2, [r2, #0]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	021b      	lsls	r3, r3, #8
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c14:	68fb      	ldr	r3, [r7, #12]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	887a      	ldrh	r2, [r7, #2]
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	701a      	strb	r2, [r3, #0]
 8009c3a:	887b      	ldrh	r3, [r7, #2]
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	607a      	str	r2, [r7, #4]
 8009c46:	887a      	ldrh	r2, [r7, #2]
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	0a1b      	lsrs	r3, r3, #8
 8009c72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	0a1b      	lsrs	r3, r3, #8
 8009c96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	607a      	str	r2, [r7, #4]
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00d      	beq.n	8009ce6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	1c53      	adds	r3, r2, #1
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	1c59      	adds	r1, r3, #1
 8009cd4:	6179      	str	r1, [r7, #20]
 8009cd6:	7812      	ldrb	r2, [r2, #0]
 8009cd8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	607b      	str	r3, [r7, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f1      	bne.n	8009cca <mem_cpy+0x1a>
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009cf2:	b480      	push	{r7}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	617a      	str	r2, [r7, #20]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	607b      	str	r3, [r7, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1f3      	bne.n	8009d02 <mem_set+0x10>
}
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d28:	b480      	push	{r7}
 8009d2a:	b089      	sub	sp, #36	; 0x24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	61fb      	str	r3, [r7, #28]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	61fa      	str	r2, [r7, #28]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	61ba      	str	r2, [r7, #24]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	1acb      	subs	r3, r1, r3
 8009d54:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	607b      	str	r3, [r7, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <mem_cmp+0x40>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0eb      	beq.n	8009d40 <mem_cmp+0x18>

	return r;
 8009d68:	697b      	ldr	r3, [r7, #20]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3724      	adds	r7, #36	; 0x24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d80:	e002      	b.n	8009d88 <chk_chr+0x12>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3301      	adds	r3, #1
 8009d86:	607b      	str	r3, [r7, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <chk_chr+0x26>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d1f2      	bne.n	8009d82 <chk_chr+0xc>
	return *str;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009db6:	2300      	movs	r3, #0
 8009db8:	60bb      	str	r3, [r7, #8]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e029      	b.n	8009e14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009dc0:	4a27      	ldr	r2, [pc, #156]	; (8009e60 <chk_lock+0xb4>)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	4413      	add	r3, r2
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d01d      	beq.n	8009e0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009dce:	4a24      	ldr	r2, [pc, #144]	; (8009e60 <chk_lock+0xb4>)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	4413      	add	r3, r2
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d116      	bne.n	8009e0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009de0:	4a1f      	ldr	r2, [pc, #124]	; (8009e60 <chk_lock+0xb4>)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	4413      	add	r3, r2
 8009de8:	3304      	adds	r3, #4
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d10c      	bne.n	8009e0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009df4:	4a1a      	ldr	r2, [pc, #104]	; (8009e60 <chk_lock+0xb4>)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	4413      	add	r3, r2
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d102      	bne.n	8009e0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e08:	e007      	b.n	8009e1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3301      	adds	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d9d2      	bls.n	8009dc0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d109      	bne.n	8009e34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <chk_lock+0x80>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d101      	bne.n	8009e30 <chk_lock+0x84>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e010      	b.n	8009e52 <chk_lock+0xa6>
 8009e30:	2312      	movs	r3, #18
 8009e32:	e00e      	b.n	8009e52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d108      	bne.n	8009e4c <chk_lock+0xa0>
 8009e3a:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <chk_lock+0xb4>)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	011b      	lsls	r3, r3, #4
 8009e40:	4413      	add	r3, r2
 8009e42:	330c      	adds	r3, #12
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4a:	d101      	bne.n	8009e50 <chk_lock+0xa4>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	e000      	b.n	8009e52 <chk_lock+0xa6>
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	24002190 	.word	0x24002190

08009e64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	607b      	str	r3, [r7, #4]
 8009e6e:	e002      	b.n	8009e76 <enq_lock+0x12>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3301      	adds	r3, #1
 8009e74:	607b      	str	r3, [r7, #4]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d806      	bhi.n	8009e8a <enq_lock+0x26>
 8009e7c:	4a09      	ldr	r2, [pc, #36]	; (8009ea4 <enq_lock+0x40>)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	4413      	add	r3, r2
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1f2      	bne.n	8009e70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	bf14      	ite	ne
 8009e90:	2301      	movne	r3, #1
 8009e92:	2300      	moveq	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	24002190 	.word	0x24002190

08009ea8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	e01f      	b.n	8009ef8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009eb8:	4a41      	ldr	r2, [pc, #260]	; (8009fc0 <inc_lock+0x118>)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	4413      	add	r3, r2
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d113      	bne.n	8009ef2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009eca:	4a3d      	ldr	r2, [pc, #244]	; (8009fc0 <inc_lock+0x118>)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	4413      	add	r3, r2
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d109      	bne.n	8009ef2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009ede:	4a38      	ldr	r2, [pc, #224]	; (8009fc0 <inc_lock+0x118>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	4413      	add	r3, r2
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d006      	beq.n	8009f00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d9dc      	bls.n	8009eb8 <inc_lock+0x10>
 8009efe:	e000      	b.n	8009f02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d132      	bne.n	8009f6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e002      	b.n	8009f14 <inc_lock+0x6c>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3301      	adds	r3, #1
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d806      	bhi.n	8009f28 <inc_lock+0x80>
 8009f1a:	4a29      	ldr	r2, [pc, #164]	; (8009fc0 <inc_lock+0x118>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	4413      	add	r3, r2
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1f2      	bne.n	8009f0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d101      	bne.n	8009f32 <inc_lock+0x8a>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e040      	b.n	8009fb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4922      	ldr	r1, [pc, #136]	; (8009fc0 <inc_lock+0x118>)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	440b      	add	r3, r1
 8009f3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	491e      	ldr	r1, [pc, #120]	; (8009fc0 <inc_lock+0x118>)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	440b      	add	r3, r1
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	695a      	ldr	r2, [r3, #20]
 8009f54:	491a      	ldr	r1, [pc, #104]	; (8009fc0 <inc_lock+0x118>)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f60:	4a17      	ldr	r2, [pc, #92]	; (8009fc0 <inc_lock+0x118>)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	4413      	add	r3, r2
 8009f68:	330c      	adds	r3, #12
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d009      	beq.n	8009f88 <inc_lock+0xe0>
 8009f74:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <inc_lock+0x118>)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	011b      	lsls	r3, r3, #4
 8009f7a:	4413      	add	r3, r2
 8009f7c:	330c      	adds	r3, #12
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <inc_lock+0xe0>
 8009f84:	2300      	movs	r3, #0
 8009f86:	e015      	b.n	8009fb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d108      	bne.n	8009fa0 <inc_lock+0xf8>
 8009f8e:	4a0c      	ldr	r2, [pc, #48]	; (8009fc0 <inc_lock+0x118>)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	4413      	add	r3, r2
 8009f96:	330c      	adds	r3, #12
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	e001      	b.n	8009fa4 <inc_lock+0xfc>
 8009fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fa4:	4906      	ldr	r1, [pc, #24]	; (8009fc0 <inc_lock+0x118>)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	440b      	add	r3, r1
 8009fac:	330c      	adds	r3, #12
 8009fae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	24002190 	.word	0x24002190

08009fc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	607b      	str	r3, [r7, #4]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d825      	bhi.n	800a024 <dec_lock+0x60>
		n = Files[i].ctr;
 8009fd8:	4a17      	ldr	r2, [pc, #92]	; (800a038 <dec_lock+0x74>)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	4413      	add	r3, r2
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009fe6:	89fb      	ldrh	r3, [r7, #14]
 8009fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fec:	d101      	bne.n	8009ff2 <dec_lock+0x2e>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ff2:	89fb      	ldrh	r3, [r7, #14]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <dec_lock+0x3a>
 8009ff8:	89fb      	ldrh	r3, [r7, #14]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ffe:	4a0e      	ldr	r2, [pc, #56]	; (800a038 <dec_lock+0x74>)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	4413      	add	r3, r2
 800a006:	330c      	adds	r3, #12
 800a008:	89fa      	ldrh	r2, [r7, #14]
 800a00a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a00c:	89fb      	ldrh	r3, [r7, #14]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d105      	bne.n	800a01e <dec_lock+0x5a>
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <dec_lock+0x74>)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	4413      	add	r3, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	737b      	strb	r3, [r7, #13]
 800a022:	e001      	b.n	800a028 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a024:	2302      	movs	r3, #2
 800a026:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a028:	7b7b      	ldrb	r3, [r7, #13]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	24002190 	.word	0x24002190

0800a03c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	e010      	b.n	800a06c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a04a:	4a0d      	ldr	r2, [pc, #52]	; (800a080 <clear_lock+0x44>)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	4413      	add	r3, r2
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d105      	bne.n	800a066 <clear_lock+0x2a>
 800a05a:	4a09      	ldr	r2, [pc, #36]	; (800a080 <clear_lock+0x44>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	4413      	add	r3, r2
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d9eb      	bls.n	800a04a <clear_lock+0xe>
	}
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	24002190 	.word	0x24002190

0800a084 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	78db      	ldrb	r3, [r3, #3]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d034      	beq.n	800a102 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7858      	ldrb	r0, [r3, #1]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	f7ff fd40 	bl	8009b30 <disk_write>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	73fb      	strb	r3, [r7, #15]
 800a0ba:	e022      	b.n	800a102 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	1ad2      	subs	r2, r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d217      	bcs.n	800a102 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	789b      	ldrb	r3, [r3, #2]
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	e010      	b.n	800a0fc <sync_window+0x78>
					wsect += fs->fsize;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7858      	ldrb	r0, [r3, #1]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	f7ff fd1d 	bl	8009b30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d8eb      	bhi.n	800a0da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d01b      	beq.n	800a15c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff ffad 	bl	800a084 <sync_window>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d113      	bne.n	800a15c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	7858      	ldrb	r0, [r3, #1]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a13e:	2301      	movs	r3, #1
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	f7ff fcd5 	bl	8009af0 <disk_read>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d004      	beq.n	800a156 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a14c:	f04f 33ff 	mov.w	r3, #4294967295
 800a150:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ff87 	bl	800a084 <sync_window>
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d158      	bne.n	800a232 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b03      	cmp	r3, #3
 800a186:	d148      	bne.n	800a21a <sync_fs+0xb2>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	791b      	ldrb	r3, [r3, #4]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d144      	bne.n	800a21a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3330      	adds	r3, #48	; 0x30
 800a194:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff fda9 	bl	8009cf2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3330      	adds	r3, #48	; 0x30
 800a1a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff fd38 	bl	8009c22 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3330      	adds	r3, #48	; 0x30
 800a1b6:	4921      	ldr	r1, [pc, #132]	; (800a23c <sync_fs+0xd4>)
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff fd4d 	bl	8009c58 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3330      	adds	r3, #48	; 0x30
 800a1c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1c6:	491e      	ldr	r1, [pc, #120]	; (800a240 <sync_fs+0xd8>)
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fd45 	bl	8009c58 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3330      	adds	r3, #48	; 0x30
 800a1d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f7ff fd3b 	bl	8009c58 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3330      	adds	r3, #48	; 0x30
 800a1e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	f7ff fd31 	bl	8009c58 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7858      	ldrb	r0, [r3, #1]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20e:	2301      	movs	r3, #1
 800a210:	f7ff fc8e 	bl	8009b30 <disk_write>
			fs->fsi_flag = 0;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	785b      	ldrb	r3, [r3, #1]
 800a21e:	2200      	movs	r2, #0
 800a220:	2100      	movs	r1, #0
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff fca4 	bl	8009b70 <disk_ioctl>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <sync_fs+0xca>
 800a22e:	2301      	movs	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	41615252 	.word	0x41615252
 800a240:	61417272 	.word	0x61417272

0800a244 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	3b02      	subs	r3, #2
 800a252:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	3b02      	subs	r3, #2
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d301      	bcc.n	800a264 <clust2sect+0x20>
 800a260:	2300      	movs	r3, #0
 800a262:	e008      	b.n	800a276 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	895b      	ldrh	r3, [r3, #10]
 800a268:	461a      	mov	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	fb03 f202 	mul.w	r2, r3, r2
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a274:	4413      	add	r3, r2
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b086      	sub	sp, #24
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d904      	bls.n	800a2a2 <get_fat+0x20>
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	e08f      	b.n	800a3c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d062      	beq.n	800a37c <get_fat+0xfa>
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	dc7c      	bgt.n	800a3b4 <get_fat+0x132>
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d002      	beq.n	800a2c4 <get_fat+0x42>
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d042      	beq.n	800a348 <get_fat+0xc6>
 800a2c2:	e077      	b.n	800a3b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6a1a      	ldr	r2, [r3, #32]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	0a5b      	lsrs	r3, r3, #9
 800a2da:	4413      	add	r3, r2
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6938      	ldr	r0, [r7, #16]
 800a2e0:	f7ff ff14 	bl	800a10c <move_window>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d167      	bne.n	800a3ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	60fa      	str	r2, [r7, #12]
 800a2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	0a5b      	lsrs	r3, r3, #9
 800a306:	4413      	add	r3, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f7ff fefe 	bl	800a10c <move_window>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d153      	bne.n	800a3be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4413      	add	r3, r2
 800a320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	461a      	mov	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <get_fat+0xbc>
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	091b      	lsrs	r3, r3, #4
 800a33c:	e002      	b.n	800a344 <get_fat+0xc2>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a344:	617b      	str	r3, [r7, #20]
			break;
 800a346:	e03f      	b.n	800a3c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	4413      	add	r3, r2
 800a352:	4619      	mov	r1, r3
 800a354:	6938      	ldr	r0, [r7, #16]
 800a356:	f7ff fed9 	bl	800a10c <move_window>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d130      	bne.n	800a3c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a36e:	4413      	add	r3, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff fc1b 	bl	8009bac <ld_word>
 800a376:	4603      	mov	r3, r0
 800a378:	617b      	str	r3, [r7, #20]
			break;
 800a37a:	e025      	b.n	800a3c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	6a1a      	ldr	r2, [r3, #32]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	09db      	lsrs	r3, r3, #7
 800a384:	4413      	add	r3, r2
 800a386:	4619      	mov	r1, r3
 800a388:	6938      	ldr	r0, [r7, #16]
 800a38a:	f7ff febf 	bl	800a10c <move_window>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d118      	bne.n	800a3c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3a2:	4413      	add	r3, r2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fc19 	bl	8009bdc <ld_dword>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3b0:	617b      	str	r3, [r7, #20]
			break;
 800a3b2:	e009      	b.n	800a3c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e006      	b.n	800a3c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3ba:	bf00      	nop
 800a3bc:	e004      	b.n	800a3c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3be:	bf00      	nop
 800a3c0:	e002      	b.n	800a3c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3c6:	bf00      	nop
		}
	}

	return val;
 800a3c8:	697b      	ldr	r3, [r7, #20]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a3d2:	b590      	push	{r4, r7, lr}
 800a3d4:	b089      	sub	sp, #36	; 0x24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	f240 80d2 	bls.w	800a58e <put_fat+0x1bc>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	f080 80cc 	bcs.w	800a58e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	f000 8096 	beq.w	800a52c <put_fat+0x15a>
 800a400:	2b03      	cmp	r3, #3
 800a402:	f300 80cd 	bgt.w	800a5a0 <put_fat+0x1ce>
 800a406:	2b01      	cmp	r3, #1
 800a408:	d002      	beq.n	800a410 <put_fat+0x3e>
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d06e      	beq.n	800a4ec <put_fat+0x11a>
 800a40e:	e0c7      	b.n	800a5a0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	61bb      	str	r3, [r7, #24]
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	085b      	lsrs	r3, r3, #1
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	4413      	add	r3, r2
 800a41c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6a1a      	ldr	r2, [r3, #32]
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	0a5b      	lsrs	r3, r3, #9
 800a426:	4413      	add	r3, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fe6e 	bl	800a10c <move_window>
 800a430:	4603      	mov	r3, r0
 800a432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a434:	7ffb      	ldrb	r3, [r7, #31]
 800a436:	2b00      	cmp	r3, #0
 800a438:	f040 80ab 	bne.w	800a592 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	1c59      	adds	r1, r3, #1
 800a446:	61b9      	str	r1, [r7, #24]
 800a448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44c:	4413      	add	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00d      	beq.n	800a476 <put_fat+0xa4>
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	b25b      	sxtb	r3, r3
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	b25a      	sxtb	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	b25b      	sxtb	r3, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	b25b      	sxtb	r3, r3
 800a472:	b2db      	uxtb	r3, r3
 800a474:	e001      	b.n	800a47a <put_fat+0xa8>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a1a      	ldr	r2, [r3, #32]
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	0a5b      	lsrs	r3, r3, #9
 800a48c:	4413      	add	r3, r2
 800a48e:	4619      	mov	r1, r3
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff fe3b 	bl	800a10c <move_window>
 800a496:	4603      	mov	r3, r0
 800a498:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a49a:	7ffb      	ldrb	r3, [r7, #31]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d17a      	bne.n	800a596 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ac:	4413      	add	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <put_fat+0xf0>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	e00e      	b.n	800a4e0 <put_fat+0x10e>
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	f023 030f 	bic.w	r3, r3, #15
 800a4cc:	b25a      	sxtb	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	0a1b      	lsrs	r3, r3, #8
 800a4d2:	b25b      	sxtb	r3, r3
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	b25b      	sxtb	r3, r3
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	b25b      	sxtb	r3, r3
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	70da      	strb	r2, [r3, #3]
			break;
 800a4ea:	e059      	b.n	800a5a0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6a1a      	ldr	r2, [r3, #32]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	0a1b      	lsrs	r3, r3, #8
 800a4f4:	4413      	add	r3, r2
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7ff fe07 	bl	800a10c <move_window>
 800a4fe:	4603      	mov	r3, r0
 800a500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a502:	7ffb      	ldrb	r3, [r7, #31]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d148      	bne.n	800a59a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a516:	4413      	add	r3, r2
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	b292      	uxth	r2, r2
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fb7f 	bl	8009c22 <st_word>
			fs->wflag = 1;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	70da      	strb	r2, [r3, #3]
			break;
 800a52a:	e039      	b.n	800a5a0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6a1a      	ldr	r2, [r3, #32]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	09db      	lsrs	r3, r3, #7
 800a534:	4413      	add	r3, r2
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff fde7 	bl	800a10c <move_window>
 800a53e:	4603      	mov	r3, r0
 800a540:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d12a      	bne.n	800a59e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a55c:	4413      	add	r3, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fb3c 	bl	8009bdc <ld_dword>
 800a564:	4603      	mov	r3, r0
 800a566:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a56a:	4323      	orrs	r3, r4
 800a56c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a57c:	4413      	add	r3, r2
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff fb69 	bl	8009c58 <st_dword>
			fs->wflag = 1;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	70da      	strb	r2, [r3, #3]
			break;
 800a58c:	e008      	b.n	800a5a0 <put_fat+0x1ce>
		}
	}
 800a58e:	bf00      	nop
 800a590:	e006      	b.n	800a5a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a592:	bf00      	nop
 800a594:	e004      	b.n	800a5a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a596:	bf00      	nop
 800a598:	e002      	b.n	800a5a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a59a:	bf00      	nop
 800a59c:	e000      	b.n	800a5a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a59e:	bf00      	nop
	return res;
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3724      	adds	r7, #36	; 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}

0800a5aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b088      	sub	sp, #32
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d904      	bls.n	800a5d0 <remove_chain+0x26>
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d301      	bcc.n	800a5d4 <remove_chain+0x2a>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e04b      	b.n	800a66c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00c      	beq.n	800a5f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a5da:	f04f 32ff 	mov.w	r2, #4294967295
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	69b8      	ldr	r0, [r7, #24]
 800a5e2:	f7ff fef6 	bl	800a3d2 <put_fat>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a5ea:	7ffb      	ldrb	r3, [r7, #31]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <remove_chain+0x4a>
 800a5f0:	7ffb      	ldrb	r3, [r7, #31]
 800a5f2:	e03b      	b.n	800a66c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff fe43 	bl	800a282 <get_fat>
 800a5fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d031      	beq.n	800a668 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <remove_chain+0x64>
 800a60a:	2302      	movs	r3, #2
 800a60c:	e02e      	b.n	800a66c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a614:	d101      	bne.n	800a61a <remove_chain+0x70>
 800a616:	2301      	movs	r3, #1
 800a618:	e028      	b.n	800a66c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a61a:	2200      	movs	r2, #0
 800a61c:	68b9      	ldr	r1, [r7, #8]
 800a61e:	69b8      	ldr	r0, [r7, #24]
 800a620:	f7ff fed7 	bl	800a3d2 <put_fat>
 800a624:	4603      	mov	r3, r0
 800a626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a628:	7ffb      	ldrb	r3, [r7, #31]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <remove_chain+0x88>
 800a62e:	7ffb      	ldrb	r3, [r7, #31]
 800a630:	e01c      	b.n	800a66c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	691a      	ldr	r2, [r3, #16]
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	3b02      	subs	r3, #2
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d20b      	bcs.n	800a658 <remove_chain+0xae>
			fs->free_clst++;
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	d3c6      	bcc.n	800a5f4 <remove_chain+0x4a>
 800a666:	e000      	b.n	800a66a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a668:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3720      	adds	r7, #32
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10d      	bne.n	800a6a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <create_chain+0x2c>
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d31b      	bcc.n	800a6d8 <create_chain+0x64>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	61bb      	str	r3, [r7, #24]
 800a6a4:	e018      	b.n	800a6d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff fdea 	bl	800a282 <get_fat>
 800a6ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d801      	bhi.n	800a6ba <create_chain+0x46>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e070      	b.n	800a79c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c0:	d101      	bne.n	800a6c6 <create_chain+0x52>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	e06a      	b.n	800a79c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d201      	bcs.n	800a6d4 <create_chain+0x60>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	e063      	b.n	800a79c <create_chain+0x128>
		scl = clst;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d307      	bcc.n	800a6fc <create_chain+0x88>
				ncl = 2;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a6f0:	69fa      	ldr	r2, [r7, #28]
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d901      	bls.n	800a6fc <create_chain+0x88>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e04f      	b.n	800a79c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a6fc:	69f9      	ldr	r1, [r7, #28]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff fdbf 	bl	800a282 <get_fat>
 800a704:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00e      	beq.n	800a72a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d003      	beq.n	800a71a <create_chain+0xa6>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a718:	d101      	bne.n	800a71e <create_chain+0xaa>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e03e      	b.n	800a79c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	429a      	cmp	r2, r3
 800a724:	d1da      	bne.n	800a6dc <create_chain+0x68>
 800a726:	2300      	movs	r3, #0
 800a728:	e038      	b.n	800a79c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a72a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a72c:	f04f 32ff 	mov.w	r2, #4294967295
 800a730:	69f9      	ldr	r1, [r7, #28]
 800a732:	6938      	ldr	r0, [r7, #16]
 800a734:	f7ff fe4d 	bl	800a3d2 <put_fat>
 800a738:	4603      	mov	r3, r0
 800a73a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d109      	bne.n	800a756 <create_chain+0xe2>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d006      	beq.n	800a756 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6938      	ldr	r0, [r7, #16]
 800a74e:	f7ff fe40 	bl	800a3d2 <put_fat>
 800a752:	4603      	mov	r3, r0
 800a754:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d116      	bne.n	800a78a <create_chain+0x116>
		fs->last_clst = ncl;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	691a      	ldr	r2, [r3, #16]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	3b02      	subs	r3, #2
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d804      	bhi.n	800a77a <create_chain+0x106>
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	791b      	ldrb	r3, [r3, #4]
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	711a      	strb	r2, [r3, #4]
 800a788:	e007      	b.n	800a79a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d102      	bne.n	800a796 <create_chain+0x122>
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e000      	b.n	800a798 <create_chain+0x124>
 800a796:	2301      	movs	r3, #1
 800a798:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a79a:	69fb      	ldr	r3, [r7, #28]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	0a5b      	lsrs	r3, r3, #9
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	8952      	ldrh	r2, [r2, #10]
 800a7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	613a      	str	r2, [r7, #16]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <clmt_clust+0x3a>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e010      	b.n	800a800 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d307      	bcc.n	800a7f6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7f4:	e7e9      	b.n	800a7ca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a7f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	4413      	add	r3, r2
}
 800a800:	4618      	mov	r0, r3
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a822:	d204      	bcs.n	800a82e <dir_sdi+0x22>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a82e:	2302      	movs	r3, #2
 800a830:	e063      	b.n	800a8fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <dir_sdi+0x46>
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d902      	bls.n	800a852 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10c      	bne.n	800a872 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	8912      	ldrh	r2, [r2, #8]
 800a860:	4293      	cmp	r3, r2
 800a862:	d301      	bcc.n	800a868 <dir_sdi+0x5c>
 800a864:	2302      	movs	r3, #2
 800a866:	e048      	b.n	800a8fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	61da      	str	r2, [r3, #28]
 800a870:	e029      	b.n	800a8c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	895b      	ldrh	r3, [r3, #10]
 800a876:	025b      	lsls	r3, r3, #9
 800a878:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a87a:	e019      	b.n	800a8b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6979      	ldr	r1, [r7, #20]
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff fcfe 	bl	800a282 <get_fat>
 800a886:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88e:	d101      	bne.n	800a894 <dir_sdi+0x88>
 800a890:	2301      	movs	r3, #1
 800a892:	e032      	b.n	800a8fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d904      	bls.n	800a8a4 <dir_sdi+0x98>
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d301      	bcc.n	800a8a8 <dir_sdi+0x9c>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e028      	b.n	800a8fa <dir_sdi+0xee>
			ofs -= csz;
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d2e1      	bcs.n	800a87c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a8b8:	6979      	ldr	r1, [r7, #20]
 800a8ba:	6938      	ldr	r0, [r7, #16]
 800a8bc:	f7ff fcc2 	bl	800a244 <clust2sect>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <dir_sdi+0xcc>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e010      	b.n	800a8fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	69da      	ldr	r2, [r3, #28]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	0a5b      	lsrs	r3, r3, #9
 800a8e0:	441a      	add	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f2:	441a      	add	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b086      	sub	sp, #24
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	3320      	adds	r3, #32
 800a918:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <dir_next+0x28>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a928:	d301      	bcc.n	800a92e <dir_next+0x2c>
 800a92a:	2304      	movs	r3, #4
 800a92c:	e0aa      	b.n	800aa84 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a934:	2b00      	cmp	r3, #0
 800a936:	f040 8098 	bne.w	800aa6a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10b      	bne.n	800a964 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	095b      	lsrs	r3, r3, #5
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	8912      	ldrh	r2, [r2, #8]
 800a954:	4293      	cmp	r3, r2
 800a956:	f0c0 8088 	bcc.w	800aa6a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	61da      	str	r2, [r3, #28]
 800a960:	2304      	movs	r3, #4
 800a962:	e08f      	b.n	800aa84 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	0a5b      	lsrs	r3, r3, #9
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	8952      	ldrh	r2, [r2, #10]
 800a96c:	3a01      	subs	r2, #1
 800a96e:	4013      	ands	r3, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d17a      	bne.n	800aa6a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7ff fc80 	bl	800a282 <get_fat>
 800a982:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d801      	bhi.n	800a98e <dir_next+0x8c>
 800a98a:	2302      	movs	r3, #2
 800a98c:	e07a      	b.n	800aa84 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a994:	d101      	bne.n	800a99a <dir_next+0x98>
 800a996:	2301      	movs	r3, #1
 800a998:	e074      	b.n	800aa84 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d358      	bcc.n	800aa56 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	61da      	str	r2, [r3, #28]
 800a9b0:	2304      	movs	r3, #4
 800a9b2:	e067      	b.n	800aa84 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7ff fe59 	bl	800a674 <create_chain>
 800a9c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <dir_next+0xcc>
 800a9ca:	2307      	movs	r3, #7
 800a9cc:	e05a      	b.n	800aa84 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d101      	bne.n	800a9d8 <dir_next+0xd6>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e055      	b.n	800aa84 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d101      	bne.n	800a9e4 <dir_next+0xe2>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e04f      	b.n	800aa84 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f7ff fb4d 	bl	800a084 <sync_window>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <dir_next+0xf2>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e047      	b.n	800aa84 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3330      	adds	r3, #48	; 0x30
 800a9f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff f977 	bl	8009cf2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa04:	2300      	movs	r3, #0
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	6979      	ldr	r1, [r7, #20]
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7ff fc1a 	bl	800a244 <clust2sect>
 800aa10:	4602      	mov	r2, r0
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa16:	e012      	b.n	800aa3e <dir_next+0x13c>
						fs->wflag = 1;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff fb30 	bl	800a084 <sync_window>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <dir_next+0x12c>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e02a      	b.n	800aa84 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	3301      	adds	r3, #1
 800aa32:	613b      	str	r3, [r7, #16]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	895b      	ldrh	r3, [r3, #10]
 800aa42:	461a      	mov	r2, r3
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d3e6      	bcc.n	800aa18 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	1ad2      	subs	r2, r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa5c:	6979      	ldr	r1, [r7, #20]
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fbf0 	bl	800a244 <clust2sect>
 800aa64:	4602      	mov	r2, r0
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7c:	441a      	add	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff feb4 	bl	800a80c <dir_sdi>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d12b      	bne.n	800ab06 <dir_alloc+0x7a>
		n = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	4619      	mov	r1, r3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f7ff fb27 	bl	800a10c <move_window>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d11d      	bne.n	800ab04 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2be5      	cmp	r3, #229	; 0xe5
 800aad0:	d004      	beq.n	800aadc <dir_alloc+0x50>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d107      	bne.n	800aaec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	3301      	adds	r3, #1
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d102      	bne.n	800aaf0 <dir_alloc+0x64>
 800aaea:	e00c      	b.n	800ab06 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aaec:	2300      	movs	r3, #0
 800aaee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff ff05 	bl	800a902 <dir_next>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0d7      	beq.n	800aab2 <dir_alloc+0x26>
 800ab02:	e000      	b.n	800ab06 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d101      	bne.n	800ab10 <dir_alloc+0x84>
 800ab0c:	2307      	movs	r3, #7
 800ab0e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	331a      	adds	r3, #26
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff f83f 	bl	8009bac <ld_word>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d109      	bne.n	800ab4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff f834 	bl	8009bac <ld_word>
 800ab44:	4603      	mov	r3, r0
 800ab46:	041b      	lsls	r3, r3, #16
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	331a      	adds	r3, #26
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	b292      	uxth	r2, r2
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff f857 	bl	8009c22 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d109      	bne.n	800ab90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f103 0214 	add.w	r2, r3, #20
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	0c1b      	lsrs	r3, r3, #16
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	f7ff f849 	bl	8009c22 <st_word>
	}
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aba6:	2100      	movs	r1, #0
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fe2f 	bl	800a80c <dir_sdi>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <dir_find+0x24>
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	e03e      	b.n	800ac3a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6938      	ldr	r0, [r7, #16]
 800abc4:	f7ff faa2 	bl	800a10c <move_window>
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d12f      	bne.n	800ac32 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d102      	bne.n	800abe6 <dir_find+0x4e>
 800abe0:	2304      	movs	r3, #4
 800abe2:	75fb      	strb	r3, [r7, #23]
 800abe4:	e028      	b.n	800ac38 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	330b      	adds	r3, #11
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	330b      	adds	r3, #11
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <dir_find+0x86>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a18      	ldr	r0, [r3, #32]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3324      	adds	r3, #36	; 0x24
 800ac10:	220b      	movs	r2, #11
 800ac12:	4619      	mov	r1, r3
 800ac14:	f7ff f888 	bl	8009d28 <mem_cmp>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ac1e:	2100      	movs	r1, #0
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff fe6e 	bl	800a902 <dir_next>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac2a:	7dfb      	ldrb	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0c5      	beq.n	800abbc <dir_find+0x24>
 800ac30:	e002      	b.n	800ac38 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ac32:	bf00      	nop
 800ac34:	e000      	b.n	800ac38 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac36:	bf00      	nop

	return res;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ac50:	2101      	movs	r1, #1
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff ff1a 	bl	800aa8c <dir_alloc>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d11c      	bne.n	800ac9c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	4619      	mov	r1, r3
 800ac68:	68b8      	ldr	r0, [r7, #8]
 800ac6a:	f7ff fa4f 	bl	800a10c <move_window>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d111      	bne.n	800ac9c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff f836 	bl	8009cf2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a18      	ldr	r0, [r3, #32]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3324      	adds	r3, #36	; 0x24
 800ac8e:	220b      	movs	r2, #11
 800ac90:	4619      	mov	r1, r3
 800ac92:	f7ff f80d 	bl	8009cb0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3324      	adds	r3, #36	; 0x24
 800acbc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800acbe:	220b      	movs	r2, #11
 800acc0:	2120      	movs	r1, #32
 800acc2:	68b8      	ldr	r0, [r7, #8]
 800acc4:	f7ff f815 	bl	8009cf2 <mem_set>
	si = i = 0; ni = 8;
 800acc8:	2300      	movs	r3, #0
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	2308      	movs	r3, #8
 800acd2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	61fa      	str	r2, [r7, #28]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4413      	add	r3, r2
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ace2:	7efb      	ldrb	r3, [r7, #27]
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	d94e      	bls.n	800ad86 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ace8:	7efb      	ldrb	r3, [r7, #27]
 800acea:	2b2f      	cmp	r3, #47	; 0x2f
 800acec:	d006      	beq.n	800acfc <create_name+0x54>
 800acee:	7efb      	ldrb	r3, [r7, #27]
 800acf0:	2b5c      	cmp	r3, #92	; 0x5c
 800acf2:	d110      	bne.n	800ad16 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800acf4:	e002      	b.n	800acfc <create_name+0x54>
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	3301      	adds	r3, #1
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	4413      	add	r3, r2
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b2f      	cmp	r3, #47	; 0x2f
 800ad06:	d0f6      	beq.n	800acf6 <create_name+0x4e>
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b5c      	cmp	r3, #92	; 0x5c
 800ad12:	d0f0      	beq.n	800acf6 <create_name+0x4e>
			break;
 800ad14:	e038      	b.n	800ad88 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad16:	7efb      	ldrb	r3, [r7, #27]
 800ad18:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1a:	d003      	beq.n	800ad24 <create_name+0x7c>
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d30c      	bcc.n	800ad3e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2b0b      	cmp	r3, #11
 800ad28:	d002      	beq.n	800ad30 <create_name+0x88>
 800ad2a:	7efb      	ldrb	r3, [r7, #27]
 800ad2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2e:	d001      	beq.n	800ad34 <create_name+0x8c>
 800ad30:	2306      	movs	r3, #6
 800ad32:	e044      	b.n	800adbe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ad34:	2308      	movs	r3, #8
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	230b      	movs	r3, #11
 800ad3a:	617b      	str	r3, [r7, #20]
			continue;
 800ad3c:	e022      	b.n	800ad84 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da04      	bge.n	800ad50 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad46:	7efb      	ldrb	r3, [r7, #27]
 800ad48:	3b80      	subs	r3, #128	; 0x80
 800ad4a:	4a1f      	ldr	r2, [pc, #124]	; (800adc8 <create_name+0x120>)
 800ad4c:	5cd3      	ldrb	r3, [r2, r3]
 800ad4e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad50:	7efb      	ldrb	r3, [r7, #27]
 800ad52:	4619      	mov	r1, r3
 800ad54:	481d      	ldr	r0, [pc, #116]	; (800adcc <create_name+0x124>)
 800ad56:	f7ff f80e 	bl	8009d76 <chk_chr>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <create_name+0xbc>
 800ad60:	2306      	movs	r3, #6
 800ad62:	e02c      	b.n	800adbe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ad64:	7efb      	ldrb	r3, [r7, #27]
 800ad66:	2b60      	cmp	r3, #96	; 0x60
 800ad68:	d905      	bls.n	800ad76 <create_name+0xce>
 800ad6a:	7efb      	ldrb	r3, [r7, #27]
 800ad6c:	2b7a      	cmp	r3, #122	; 0x7a
 800ad6e:	d802      	bhi.n	800ad76 <create_name+0xce>
 800ad70:	7efb      	ldrb	r3, [r7, #27]
 800ad72:	3b20      	subs	r3, #32
 800ad74:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	613a      	str	r2, [r7, #16]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	4413      	add	r3, r2
 800ad80:	7efa      	ldrb	r2, [r7, #27]
 800ad82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ad84:	e7a6      	b.n	800acd4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	441a      	add	r2, r3
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <create_name+0xf4>
 800ad98:	2306      	movs	r3, #6
 800ad9a:	e010      	b.n	800adbe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2be5      	cmp	r3, #229	; 0xe5
 800ada2:	d102      	bne.n	800adaa <create_name+0x102>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2205      	movs	r2, #5
 800ada8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800adaa:	7efb      	ldrb	r3, [r7, #27]
 800adac:	2b20      	cmp	r3, #32
 800adae:	d801      	bhi.n	800adb4 <create_name+0x10c>
 800adb0:	2204      	movs	r2, #4
 800adb2:	e000      	b.n	800adb6 <create_name+0x10e>
 800adb4:	2200      	movs	r2, #0
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	330b      	adds	r3, #11
 800adba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800adbc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3720      	adds	r7, #32
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	0800cff4 	.word	0x0800cff4
 800adcc:	0800cf64 	.word	0x0800cf64

0800add0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ade4:	e002      	b.n	800adec <follow_path+0x1c>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	3301      	adds	r3, #1
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b2f      	cmp	r3, #47	; 0x2f
 800adf2:	d0f8      	beq.n	800ade6 <follow_path+0x16>
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b5c      	cmp	r3, #92	; 0x5c
 800adfa:	d0f4      	beq.n	800ade6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	2200      	movs	r2, #0
 800ae00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b1f      	cmp	r3, #31
 800ae08:	d80a      	bhi.n	800ae20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2280      	movs	r2, #128	; 0x80
 800ae0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff fcf9 	bl	800a80c <dir_sdi>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]
 800ae1e:	e043      	b.n	800aea8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae20:	463b      	mov	r3, r7
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff ff3f 	bl	800aca8 <create_name>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d134      	bne.n	800ae9e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff feaf 	bl	800ab98 <dir_find>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d127      	bne.n	800aea2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d122      	bne.n	800aea2 <follow_path+0xd2>
 800ae5c:	2305      	movs	r3, #5
 800ae5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae60:	e01f      	b.n	800aea2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d11c      	bne.n	800aea6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	799b      	ldrb	r3, [r3, #6]
 800ae70:	f003 0310 	and.w	r3, r3, #16
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae78:	2305      	movs	r3, #5
 800ae7a:	75fb      	strb	r3, [r7, #23]
 800ae7c:	e014      	b.n	800aea8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8c:	4413      	add	r3, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7ff fe42 	bl	800ab1a <ld_clust>
 800ae96:	4602      	mov	r2, r0
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae9c:	e7c0      	b.n	800ae20 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae9e:	bf00      	nop
 800aea0:	e002      	b.n	800aea8 <follow_path+0xd8>
				break;
 800aea2:	bf00      	nop
 800aea4:	e000      	b.n	800aea8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aea6:	bf00      	nop
			}
		}
	}

	return res;
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b087      	sub	sp, #28
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aeba:	f04f 33ff 	mov.w	r3, #4294967295
 800aebe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d031      	beq.n	800af2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	e002      	b.n	800aed6 <get_ldnumber+0x24>
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	3301      	adds	r3, #1
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	2b20      	cmp	r3, #32
 800aedc:	d903      	bls.n	800aee6 <get_ldnumber+0x34>
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2b3a      	cmp	r3, #58	; 0x3a
 800aee4:	d1f4      	bne.n	800aed0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b3a      	cmp	r3, #58	; 0x3a
 800aeec:	d11c      	bne.n	800af28 <get_ldnumber+0x76>
			tp = *path;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	60fa      	str	r2, [r7, #12]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	3b30      	subs	r3, #48	; 0x30
 800aefe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b09      	cmp	r3, #9
 800af04:	d80e      	bhi.n	800af24 <get_ldnumber+0x72>
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d10a      	bne.n	800af24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d107      	bne.n	800af24 <get_ldnumber+0x72>
					vol = (int)i;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	3301      	adds	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	e002      	b.n	800af2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af28:	2300      	movs	r3, #0
 800af2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af2c:	693b      	ldr	r3, [r7, #16]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
	...

0800af3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	70da      	strb	r2, [r3, #3]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff f8d8 	bl	800a10c <move_window>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <check_fs+0x2a>
 800af62:	2304      	movs	r3, #4
 800af64:	e038      	b.n	800afd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3330      	adds	r3, #48	; 0x30
 800af6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fe1c 	bl	8009bac <ld_word>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d001      	beq.n	800af84 <check_fs+0x48>
 800af80:	2303      	movs	r3, #3
 800af82:	e029      	b.n	800afd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af8a:	2be9      	cmp	r3, #233	; 0xe9
 800af8c:	d009      	beq.n	800afa2 <check_fs+0x66>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af94:	2beb      	cmp	r3, #235	; 0xeb
 800af96:	d11e      	bne.n	800afd6 <check_fs+0x9a>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800af9e:	2b90      	cmp	r3, #144	; 0x90
 800afa0:	d119      	bne.n	800afd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3330      	adds	r3, #48	; 0x30
 800afa6:	3336      	adds	r3, #54	; 0x36
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe fe17 	bl	8009bdc <ld_dword>
 800afae:	4603      	mov	r3, r0
 800afb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afb4:	4a0a      	ldr	r2, [pc, #40]	; (800afe0 <check_fs+0xa4>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d101      	bne.n	800afbe <check_fs+0x82>
 800afba:	2300      	movs	r3, #0
 800afbc:	e00c      	b.n	800afd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3330      	adds	r3, #48	; 0x30
 800afc2:	3352      	adds	r3, #82	; 0x52
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe fe09 	bl	8009bdc <ld_dword>
 800afca:	4603      	mov	r3, r0
 800afcc:	4a05      	ldr	r2, [pc, #20]	; (800afe4 <check_fs+0xa8>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d101      	bne.n	800afd6 <check_fs+0x9a>
 800afd2:	2300      	movs	r3, #0
 800afd4:	e000      	b.n	800afd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800afd6:	2302      	movs	r3, #2
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	00544146 	.word	0x00544146
 800afe4:	33544146 	.word	0x33544146

0800afe8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b096      	sub	sp, #88	; 0x58
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff ff58 	bl	800aeb2 <get_ldnumber>
 800b002:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b006:	2b00      	cmp	r3, #0
 800b008:	da01      	bge.n	800b00e <find_volume+0x26>
 800b00a:	230b      	movs	r3, #11
 800b00c:	e22e      	b.n	800b46c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b00e:	4aa8      	ldr	r2, [pc, #672]	; (800b2b0 <find_volume+0x2c8>)
 800b010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b016:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <find_volume+0x3a>
 800b01e:	230c      	movs	r3, #12
 800b020:	e224      	b.n	800b46c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b026:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	f023 0301 	bic.w	r3, r3, #1
 800b02e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d01a      	beq.n	800b06e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	785b      	ldrb	r3, [r3, #1]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fe fd17 	bl	8009a70 <disk_status>
 800b042:	4603      	mov	r3, r0
 800b044:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b048:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10c      	bne.n	800b06e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <find_volume+0x82>
 800b05a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b05e:	f003 0304 	and.w	r3, r3, #4
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b066:	230a      	movs	r3, #10
 800b068:	e200      	b.n	800b46c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b06a:	2300      	movs	r3, #0
 800b06c:	e1fe      	b.n	800b46c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	2200      	movs	r2, #0
 800b072:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b076:	b2da      	uxtb	r2, r3
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	785b      	ldrb	r3, [r3, #1]
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fd0f 	bl	8009aa4 <disk_initialize>
 800b086:	4603      	mov	r3, r0
 800b088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b08c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b098:	2303      	movs	r3, #3
 800b09a:	e1e7      	b.n	800b46c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <find_volume+0xca>
 800b0a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0a6:	f003 0304 	and.w	r3, r3, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b0ae:	230a      	movs	r3, #10
 800b0b0:	e1dc      	b.n	800b46c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b0b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ba:	f7ff ff3f 	bl	800af3c <check_fs>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d14b      	bne.n	800b164 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b0d0:	e01f      	b.n	800b112 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0da:	011b      	lsls	r3, r3, #4
 800b0dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b0e0:	4413      	add	r3, r2
 800b0e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d006      	beq.n	800b0fc <find_volume+0x114>
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe fd72 	bl	8009bdc <ld_dword>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	e000      	b.n	800b0fe <find_volume+0x116>
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b106:	440b      	add	r3, r1
 800b108:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b10e:	3301      	adds	r3, #1
 800b110:	643b      	str	r3, [r7, #64]	; 0x40
 800b112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b114:	2b03      	cmp	r3, #3
 800b116:	d9dc      	bls.n	800b0d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b118:	2300      	movs	r3, #0
 800b11a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <find_volume+0x140>
 800b122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b124:	3b01      	subs	r3, #1
 800b126:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b130:	4413      	add	r3, r2
 800b132:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b136:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d005      	beq.n	800b14a <find_volume+0x162>
 800b13e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b142:	f7ff fefb 	bl	800af3c <check_fs>
 800b146:	4603      	mov	r3, r0
 800b148:	e000      	b.n	800b14c <find_volume+0x164>
 800b14a:	2303      	movs	r3, #3
 800b14c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b154:	2b01      	cmp	r3, #1
 800b156:	d905      	bls.n	800b164 <find_volume+0x17c>
 800b158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15a:	3301      	adds	r3, #1
 800b15c:	643b      	str	r3, [r7, #64]	; 0x40
 800b15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b160:	2b03      	cmp	r3, #3
 800b162:	d9e1      	bls.n	800b128 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d101      	bne.n	800b170 <find_volume+0x188>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e17d      	b.n	800b46c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b174:	2b01      	cmp	r3, #1
 800b176:	d901      	bls.n	800b17c <find_volume+0x194>
 800b178:	230d      	movs	r3, #13
 800b17a:	e177      	b.n	800b46c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	3330      	adds	r3, #48	; 0x30
 800b180:	330b      	adds	r3, #11
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fd12 	bl	8009bac <ld_word>
 800b188:	4603      	mov	r3, r0
 800b18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b18e:	d001      	beq.n	800b194 <find_volume+0x1ac>
 800b190:	230d      	movs	r3, #13
 800b192:	e16b      	b.n	800b46c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	3330      	adds	r3, #48	; 0x30
 800b198:	3316      	adds	r3, #22
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fd06 	bl	8009bac <ld_word>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <find_volume+0x1d0>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	3330      	adds	r3, #48	; 0x30
 800b1ae:	3324      	adds	r3, #36	; 0x24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fd13 	bl	8009bdc <ld_dword>
 800b1b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1bc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	789b      	ldrb	r3, [r3, #2]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d005      	beq.n	800b1dc <find_volume+0x1f4>
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	789b      	ldrb	r3, [r3, #2]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d001      	beq.n	800b1dc <find_volume+0x1f4>
 800b1d8:	230d      	movs	r3, #13
 800b1da:	e147      	b.n	800b46c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	789b      	ldrb	r3, [r3, #2]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e4:	fb02 f303 	mul.w	r3, r2, r3
 800b1e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	895b      	ldrh	r3, [r3, #10]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d008      	beq.n	800b210 <find_volume+0x228>
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	895b      	ldrh	r3, [r3, #10]
 800b202:	461a      	mov	r2, r3
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	895b      	ldrh	r3, [r3, #10]
 800b208:	3b01      	subs	r3, #1
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <find_volume+0x22c>
 800b210:	230d      	movs	r3, #13
 800b212:	e12b      	b.n	800b46c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	3330      	adds	r3, #48	; 0x30
 800b218:	3311      	adds	r3, #17
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe fcc6 	bl	8009bac <ld_word>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	891b      	ldrh	r3, [r3, #8]
 800b22c:	f003 030f 	and.w	r3, r3, #15
 800b230:	b29b      	uxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <find_volume+0x252>
 800b236:	230d      	movs	r3, #13
 800b238:	e118      	b.n	800b46c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	3330      	adds	r3, #48	; 0x30
 800b23e:	3313      	adds	r3, #19
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe fcb3 	bl	8009bac <ld_word>
 800b246:	4603      	mov	r3, r0
 800b248:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <find_volume+0x276>
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	3330      	adds	r3, #48	; 0x30
 800b254:	3320      	adds	r3, #32
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fcc0 	bl	8009bdc <ld_dword>
 800b25c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	3330      	adds	r3, #48	; 0x30
 800b262:	330e      	adds	r3, #14
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fca1 	bl	8009bac <ld_word>
 800b26a:	4603      	mov	r3, r0
 800b26c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b26e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <find_volume+0x290>
 800b274:	230d      	movs	r3, #13
 800b276:	e0f9      	b.n	800b46c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b278:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	4413      	add	r3, r2
 800b27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b280:	8912      	ldrh	r2, [r2, #8]
 800b282:	0912      	lsrs	r2, r2, #4
 800b284:	b292      	uxth	r2, r2
 800b286:	4413      	add	r3, r2
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	429a      	cmp	r2, r3
 800b290:	d201      	bcs.n	800b296 <find_volume+0x2ae>
 800b292:	230d      	movs	r3, #13
 800b294:	e0ea      	b.n	800b46c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b29e:	8952      	ldrh	r2, [r2, #10]
 800b2a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d103      	bne.n	800b2b4 <find_volume+0x2cc>
 800b2ac:	230d      	movs	r3, #13
 800b2ae:	e0dd      	b.n	800b46c <find_volume+0x484>
 800b2b0:	24002188 	.word	0x24002188
		fmt = FS_FAT32;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d802      	bhi.n	800b2ca <find_volume+0x2e2>
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d802      	bhi.n	800b2da <find_volume+0x2f2>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	1c9a      	adds	r2, r3, #2
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2e6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ec:	441a      	add	r2, r3
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b2f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	441a      	add	r2, r3
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b300:	2b03      	cmp	r3, #3
 800b302:	d11e      	bne.n	800b342 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	3330      	adds	r3, #48	; 0x30
 800b308:	332a      	adds	r3, #42	; 0x2a
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fc4e 	bl	8009bac <ld_word>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <find_volume+0x332>
 800b316:	230d      	movs	r3, #13
 800b318:	e0a8      	b.n	800b46c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	891b      	ldrh	r3, [r3, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <find_volume+0x33e>
 800b322:	230d      	movs	r3, #13
 800b324:	e0a2      	b.n	800b46c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	3330      	adds	r3, #48	; 0x30
 800b32a:	332c      	adds	r3, #44	; 0x2c
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fc55 	bl	8009bdc <ld_dword>
 800b332:	4602      	mov	r2, r0
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	647b      	str	r3, [r7, #68]	; 0x44
 800b340:	e01f      	b.n	800b382 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	891b      	ldrh	r3, [r3, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <find_volume+0x366>
 800b34a:	230d      	movs	r3, #13
 800b34c:	e08e      	b.n	800b46c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	6a1a      	ldr	r2, [r3, #32]
 800b352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b354:	441a      	add	r2, r3
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b35a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d103      	bne.n	800b36a <find_volume+0x382>
 800b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	e00a      	b.n	800b380 <find_volume+0x398>
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	695a      	ldr	r2, [r3, #20]
 800b36e:	4613      	mov	r3, r2
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	4413      	add	r3, r2
 800b374:	085a      	lsrs	r2, r3, #1
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b380:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	699a      	ldr	r2, [r3, #24]
 800b386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b388:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b38c:	0a5b      	lsrs	r3, r3, #9
 800b38e:	429a      	cmp	r2, r3
 800b390:	d201      	bcs.n	800b396 <find_volume+0x3ae>
 800b392:	230d      	movs	r3, #13
 800b394:	e06a      	b.n	800b46c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	f04f 32ff 	mov.w	r2, #4294967295
 800b39c:	611a      	str	r2, [r3, #16]
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	691a      	ldr	r2, [r3, #16]
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	2280      	movs	r2, #128	; 0x80
 800b3aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d149      	bne.n	800b448 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	3330      	adds	r3, #48	; 0x30
 800b3b8:	3330      	adds	r3, #48	; 0x30
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe fbf6 	bl	8009bac <ld_word>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d140      	bne.n	800b448 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3ce:	f7fe fe9d 	bl	800a10c <move_window>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d137      	bne.n	800b448 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	2200      	movs	r2, #0
 800b3dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	3330      	adds	r3, #48	; 0x30
 800b3e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fbe0 	bl	8009bac <ld_word>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d127      	bne.n	800b448 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	3330      	adds	r3, #48	; 0x30
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe fbed 	bl	8009bdc <ld_dword>
 800b402:	4603      	mov	r3, r0
 800b404:	4a1b      	ldr	r2, [pc, #108]	; (800b474 <find_volume+0x48c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d11e      	bne.n	800b448 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	3330      	adds	r3, #48	; 0x30
 800b40e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b412:	4618      	mov	r0, r3
 800b414:	f7fe fbe2 	bl	8009bdc <ld_dword>
 800b418:	4603      	mov	r3, r0
 800b41a:	4a17      	ldr	r2, [pc, #92]	; (800b478 <find_volume+0x490>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d113      	bne.n	800b448 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	3330      	adds	r3, #48	; 0x30
 800b424:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fbd7 	bl	8009bdc <ld_dword>
 800b42e:	4602      	mov	r2, r0
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	3330      	adds	r3, #48	; 0x30
 800b438:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fbcd 	bl	8009bdc <ld_dword>
 800b442:	4602      	mov	r2, r0
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b44e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b450:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <find_volume+0x494>)
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	3301      	adds	r3, #1
 800b456:	b29a      	uxth	r2, r3
 800b458:	4b08      	ldr	r3, [pc, #32]	; (800b47c <find_volume+0x494>)
 800b45a:	801a      	strh	r2, [r3, #0]
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <find_volume+0x494>)
 800b45e:	881a      	ldrh	r2, [r3, #0]
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b466:	f7fe fde9 	bl	800a03c <clear_lock>
#endif
	return FR_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3758      	adds	r7, #88	; 0x58
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	41615252 	.word	0x41615252
 800b478:	61417272 	.word	0x61417272
 800b47c:	2400218c 	.word	0x2400218c

0800b480 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b48a:	2309      	movs	r3, #9
 800b48c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01c      	beq.n	800b4ce <validate+0x4e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d018      	beq.n	800b4ce <validate+0x4e>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d013      	beq.n	800b4ce <validate+0x4e>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	889a      	ldrh	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	88db      	ldrh	r3, [r3, #6]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d10c      	bne.n	800b4ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	785b      	ldrb	r3, [r3, #1]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe fad8 	bl	8009a70 <disk_status>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <validate+0x4e>
			res = FR_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <validate+0x5a>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	e000      	b.n	800b4dc <validate+0x5c>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	6013      	str	r3, [r2, #0]
	return res;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b4fe:	f107 0310 	add.w	r3, r7, #16
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff fcd5 	bl	800aeb2 <get_ldnumber>
 800b508:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	da01      	bge.n	800b514 <f_mount+0x28>
 800b510:	230b      	movs	r3, #11
 800b512:	e02b      	b.n	800b56c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b514:	4a17      	ldr	r2, [pc, #92]	; (800b574 <f_mount+0x88>)
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b51c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d005      	beq.n	800b530 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b524:	69b8      	ldr	r0, [r7, #24]
 800b526:	f7fe fd89 	bl	800a03c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	490d      	ldr	r1, [pc, #52]	; (800b574 <f_mount+0x88>)
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <f_mount+0x66>
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d001      	beq.n	800b556 <f_mount+0x6a>
 800b552:	2300      	movs	r3, #0
 800b554:	e00a      	b.n	800b56c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b556:	f107 010c 	add.w	r1, r7, #12
 800b55a:	f107 0308 	add.w	r3, r7, #8
 800b55e:	2200      	movs	r2, #0
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fd41 	bl	800afe8 <find_volume>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3720      	adds	r7, #32
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	24002188 	.word	0x24002188

0800b578 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b098      	sub	sp, #96	; 0x60
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <f_open+0x18>
 800b58c:	2309      	movs	r3, #9
 800b58e:	e1ad      	b.n	800b8ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b590:	79fb      	ldrb	r3, [r7, #7]
 800b592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b596:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b598:	79fa      	ldrb	r2, [r7, #7]
 800b59a:	f107 0110 	add.w	r1, r7, #16
 800b59e:	f107 0308 	add.w	r3, r7, #8
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fd20 	bl	800afe8 <find_volume>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f040 8191 	bne.w	800b8da <f_open+0x362>
		dj.obj.fs = fs;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	f107 0314 	add.w	r3, r7, #20
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff fc03 	bl	800add0 <follow_path>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11a      	bne.n	800b60e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5dc:	b25b      	sxtb	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	da03      	bge.n	800b5ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5e2:	2306      	movs	r3, #6
 800b5e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5e8:	e011      	b.n	800b60e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5ea:	79fb      	ldrb	r3, [r7, #7]
 800b5ec:	f023 0301 	bic.w	r3, r3, #1
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bf14      	ite	ne
 800b5f4:	2301      	movne	r3, #1
 800b5f6:	2300      	moveq	r3, #0
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f107 0314 	add.w	r3, r7, #20
 800b600:	4611      	mov	r1, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe fbd2 	bl	8009dac <chk_lock>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	f003 031c 	and.w	r3, r3, #28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d07f      	beq.n	800b718 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d017      	beq.n	800b650 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b624:	2b04      	cmp	r3, #4
 800b626:	d10e      	bne.n	800b646 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b628:	f7fe fc1c 	bl	8009e64 <enq_lock>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d006      	beq.n	800b640 <f_open+0xc8>
 800b632:	f107 0314 	add.w	r3, r7, #20
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fb03 	bl	800ac42 <dir_register>
 800b63c:	4603      	mov	r3, r0
 800b63e:	e000      	b.n	800b642 <f_open+0xca>
 800b640:	2312      	movs	r3, #18
 800b642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	f043 0308 	orr.w	r3, r3, #8
 800b64c:	71fb      	strb	r3, [r7, #7]
 800b64e:	e010      	b.n	800b672 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b650:	7ebb      	ldrb	r3, [r7, #26]
 800b652:	f003 0311 	and.w	r3, r3, #17
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <f_open+0xea>
					res = FR_DENIED;
 800b65a:	2307      	movs	r3, #7
 800b65c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b660:	e007      	b.n	800b672 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <f_open+0xfa>
 800b66c:	2308      	movs	r3, #8
 800b66e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b676:	2b00      	cmp	r3, #0
 800b678:	d168      	bne.n	800b74c <f_open+0x1d4>
 800b67a:	79fb      	ldrb	r3, [r7, #7]
 800b67c:	f003 0308 	and.w	r3, r3, #8
 800b680:	2b00      	cmp	r3, #0
 800b682:	d063      	beq.n	800b74c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b684:	f7fe f83e 	bl	8009704 <get_fattime>
 800b688:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	330e      	adds	r3, #14
 800b68e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b690:	4618      	mov	r0, r3
 800b692:	f7fe fae1 	bl	8009c58 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b698:	3316      	adds	r3, #22
 800b69a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe fadb 	bl	8009c58 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a4:	330b      	adds	r3, #11
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fa32 	bl	800ab1a <ld_clust>
 800b6b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6bc:	2200      	movs	r2, #0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fa4a 	bl	800ab58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c6:	331c      	adds	r3, #28
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fac4 	bl	8009c58 <st_dword>
					fs->wflag = 1;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d037      	beq.n	800b74c <f_open+0x1d4>
						dw = fs->winsect;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b6e2:	f107 0314 	add.w	r3, r7, #20
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe ff5d 	bl	800a5aa <remove_chain>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b6f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d126      	bne.n	800b74c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe fd02 	bl	800a10c <move_window>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b712:	3a01      	subs	r2, #1
 800b714:	60da      	str	r2, [r3, #12]
 800b716:	e019      	b.n	800b74c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d115      	bne.n	800b74c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b720:	7ebb      	ldrb	r3, [r7, #26]
 800b722:	f003 0310 	and.w	r3, r3, #16
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b72a:	2304      	movs	r3, #4
 800b72c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b730:	e00c      	b.n	800b74c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <f_open+0x1d4>
 800b73c:	7ebb      	ldrb	r3, [r7, #26]
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	d002      	beq.n	800b74c <f_open+0x1d4>
						res = FR_DENIED;
 800b746:	2307      	movs	r3, #7
 800b748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b74c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b750:	2b00      	cmp	r3, #0
 800b752:	d128      	bne.n	800b7a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	f003 0308 	and.w	r3, r3, #8
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b764:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b774:	79fb      	ldrb	r3, [r7, #7]
 800b776:	f023 0301 	bic.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	bf14      	ite	ne
 800b77e:	2301      	movne	r3, #1
 800b780:	2300      	moveq	r3, #0
 800b782:	b2db      	uxtb	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	f107 0314 	add.w	r3, r7, #20
 800b78a:	4611      	mov	r1, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fb8b 	bl	8009ea8 <inc_lock>
 800b792:	4602      	mov	r2, r0
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d102      	bne.n	800b7a6 <f_open+0x22e>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f040 8095 	bne.w	800b8da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff f9af 	bl	800ab1a <ld_clust>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	331c      	adds	r3, #28
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fa08 	bl	8009bdc <ld_dword>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	88da      	ldrh	r2, [r3, #6]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	79fa      	ldrb	r2, [r7, #7]
 800b7ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3330      	adds	r3, #48	; 0x30
 800b802:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b806:	2100      	movs	r1, #0
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe fa72 	bl	8009cf2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b80e:	79fb      	ldrb	r3, [r7, #7]
 800b810:	f003 0320 	and.w	r3, r3, #32
 800b814:	2b00      	cmp	r3, #0
 800b816:	d060      	beq.n	800b8da <f_open+0x362>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d05c      	beq.n	800b8da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	895b      	ldrh	r3, [r3, #10]
 800b82c:	025b      	lsls	r3, r3, #9
 800b82e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	657b      	str	r3, [r7, #84]	; 0x54
 800b83c:	e016      	b.n	800b86c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe fd1d 	bl	800a282 <get_fat>
 800b848:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b84a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d802      	bhi.n	800b856 <f_open+0x2de>
 800b850:	2302      	movs	r3, #2
 800b852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85c:	d102      	bne.n	800b864 <f_open+0x2ec>
 800b85e:	2301      	movs	r3, #1
 800b860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	657b      	str	r3, [r7, #84]	; 0x54
 800b86c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b870:	2b00      	cmp	r3, #0
 800b872:	d103      	bne.n	800b87c <f_open+0x304>
 800b874:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b878:	429a      	cmp	r2, r3
 800b87a:	d8e0      	bhi.n	800b83e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b880:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b886:	2b00      	cmp	r3, #0
 800b888:	d127      	bne.n	800b8da <f_open+0x362>
 800b88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b88c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b890:	2b00      	cmp	r3, #0
 800b892:	d022      	beq.n	800b8da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fe fcd3 	bl	800a244 <clust2sect>
 800b89e:	6478      	str	r0, [r7, #68]	; 0x44
 800b8a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d103      	bne.n	800b8ae <f_open+0x336>
						res = FR_INT_ERR;
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8ac:	e015      	b.n	800b8da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b0:	0a5a      	lsrs	r2, r3, #9
 800b8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b4:	441a      	add	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	7858      	ldrb	r0, [r3, #1]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6a1a      	ldr	r2, [r3, #32]
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f7fe f911 	bl	8009af0 <disk_read>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <f_open+0x362>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <f_open+0x370>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3760      	adds	r7, #96	; 0x60
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08c      	sub	sp, #48	; 0x30
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f107 0210 	add.w	r2, r7, #16
 800b912:	4611      	mov	r1, r2
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fdb3 	bl	800b480 <validate>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b924:	2b00      	cmp	r3, #0
 800b926:	d107      	bne.n	800b938 <f_write+0x44>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	7d5b      	ldrb	r3, [r3, #21]
 800b92c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <f_write+0x4a>
 800b938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b93c:	e14b      	b.n	800bbd6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	7d1b      	ldrb	r3, [r3, #20]
 800b942:	f003 0302 	and.w	r3, r3, #2
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <f_write+0x5a>
 800b94a:	2307      	movs	r3, #7
 800b94c:	e143      	b.n	800bbd6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	699a      	ldr	r2, [r3, #24]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	441a      	add	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	f080 812d 	bcs.w	800bbba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	43db      	mvns	r3, r3
 800b966:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b968:	e127      	b.n	800bbba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b972:	2b00      	cmp	r3, #0
 800b974:	f040 80e3 	bne.w	800bb3e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	0a5b      	lsrs	r3, r3, #9
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	8952      	ldrh	r2, [r2, #10]
 800b982:	3a01      	subs	r2, #1
 800b984:	4013      	ands	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d143      	bne.n	800ba16 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10c      	bne.n	800b9b0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d11a      	bne.n	800b9d8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe fe64 	bl	800a674 <create_chain>
 800b9ac:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9ae:	e013      	b.n	800b9d8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7fe fef0 	bl	800a7a4 <clmt_clust>
 800b9c4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9c6:	e007      	b.n	800b9d8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7fe fe4f 	bl	800a674 <create_chain>
 800b9d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 80f2 	beq.w	800bbc4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d104      	bne.n	800b9f0 <f_write+0xfc>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	755a      	strb	r2, [r3, #21]
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	e0f2      	b.n	800bbd6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f6:	d104      	bne.n	800ba02 <f_write+0x10e>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	755a      	strb	r2, [r3, #21]
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e0e9      	b.n	800bbd6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba06:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d102      	bne.n	800ba16 <f_write+0x122>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba14:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	7d1b      	ldrb	r3, [r3, #20]
 800ba1a:	b25b      	sxtb	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	da18      	bge.n	800ba52 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	7858      	ldrb	r0, [r3, #1]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a1a      	ldr	r2, [r3, #32]
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f7fe f87e 	bl	8009b30 <disk_write>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d004      	beq.n	800ba44 <f_write+0x150>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	755a      	strb	r2, [r3, #21]
 800ba40:	2301      	movs	r3, #1
 800ba42:	e0c8      	b.n	800bbd6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	7d1b      	ldrb	r3, [r3, #20]
 800ba48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	f7fe fbf2 	bl	800a244 <clust2sect>
 800ba60:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d104      	bne.n	800ba72 <f_write+0x17e>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	755a      	strb	r2, [r3, #21]
 800ba6e:	2302      	movs	r3, #2
 800ba70:	e0b1      	b.n	800bbd6 <f_write+0x2e2>
			sect += csect;
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	4413      	add	r3, r2
 800ba78:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	0a5b      	lsrs	r3, r3, #9
 800ba7e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d03c      	beq.n	800bb00 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	8952      	ldrh	r2, [r2, #10]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d905      	bls.n	800baa0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	895b      	ldrh	r3, [r3, #10]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	7858      	ldrb	r0, [r3, #1]
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	69f9      	ldr	r1, [r7, #28]
 800baaa:	f7fe f841 	bl	8009b30 <disk_write>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d004      	beq.n	800babe <f_write+0x1ca>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2201      	movs	r2, #1
 800bab8:	755a      	strb	r2, [r3, #21]
 800baba:	2301      	movs	r3, #1
 800babc:	e08b      	b.n	800bbd6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a1a      	ldr	r2, [r3, #32]
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	6a3a      	ldr	r2, [r7, #32]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d915      	bls.n	800baf8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a1a      	ldr	r2, [r3, #32]
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	025b      	lsls	r3, r3, #9
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	4413      	add	r3, r2
 800bae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bae4:	4619      	mov	r1, r3
 800bae6:	f7fe f8e3 	bl	8009cb0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	7d1b      	ldrb	r3, [r3, #20]
 800baee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	025b      	lsls	r3, r3, #9
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bafe:	e03f      	b.n	800bb80 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d016      	beq.n	800bb38 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d210      	bcs.n	800bb38 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	7858      	ldrb	r0, [r3, #1]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb20:	2301      	movs	r3, #1
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	f7fd ffe4 	bl	8009af0 <disk_read>
 800bb28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2201      	movs	r2, #1
 800bb32:	755a      	strb	r2, [r3, #21]
 800bb34:	2301      	movs	r3, #1
 800bb36:	e04e      	b.n	800bbd6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d901      	bls.n	800bb58 <f_write+0x264>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	4413      	add	r3, r2
 800bb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb6a:	69f9      	ldr	r1, [r7, #28]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe f89f 	bl	8009cb0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	7d1b      	ldrb	r3, [r3, #20]
 800bb76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb80:	69fa      	ldr	r2, [r7, #28]
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	4413      	add	r3, r2
 800bb86:	61fb      	str	r3, [r7, #28]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	699a      	ldr	r2, [r3, #24]
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	441a      	add	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	619a      	str	r2, [r3, #24]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68da      	ldr	r2, [r3, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	bf38      	it	cc
 800bba0:	461a      	movcc	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	60da      	str	r2, [r3, #12]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbac:	441a      	add	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f47f aed4 	bne.w	800b96a <f_write+0x76>
 800bbc2:	e000      	b.n	800bbc6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbc4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	7d1b      	ldrb	r3, [r3, #20]
 800bbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3730      	adds	r7, #48	; 0x30
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b086      	sub	sp, #24
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f107 0208 	add.w	r2, r7, #8
 800bbec:	4611      	mov	r1, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff fc46 	bl	800b480 <validate>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d168      	bne.n	800bcd0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	7d1b      	ldrb	r3, [r3, #20]
 800bc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d062      	beq.n	800bcd0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	7d1b      	ldrb	r3, [r3, #20]
 800bc0e:	b25b      	sxtb	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da15      	bge.n	800bc40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	7858      	ldrb	r0, [r3, #1]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a1a      	ldr	r2, [r3, #32]
 800bc22:	2301      	movs	r3, #1
 800bc24:	f7fd ff84 	bl	8009b30 <disk_write>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <f_sync+0x54>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e04f      	b.n	800bcd2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	7d1b      	ldrb	r3, [r3, #20]
 800bc36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc40:	f7fd fd60 	bl	8009704 <get_fattime>
 800bc44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fe fa5c 	bl	800a10c <move_window>
 800bc54:	4603      	mov	r3, r0
 800bc56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d138      	bne.n	800bcd0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	330b      	adds	r3, #11
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	330b      	adds	r3, #11
 800bc6e:	f042 0220 	orr.w	r2, r2, #32
 800bc72:	b2d2      	uxtb	r2, r2
 800bc74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	68f9      	ldr	r1, [r7, #12]
 800bc82:	f7fe ff69 	bl	800ab58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f103 021c 	add.w	r2, r3, #28
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fd ffe0 	bl	8009c58 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3316      	adds	r3, #22
 800bc9c:	6939      	ldr	r1, [r7, #16]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fd ffda 	bl	8009c58 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3312      	adds	r3, #18
 800bca8:	2100      	movs	r1, #0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fd ffb9 	bl	8009c22 <st_word>
					fs->wflag = 1;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fe fa55 	bl	800a168 <sync_fs>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7d1b      	ldrb	r3, [r3, #20]
 800bcc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff ff7b 	bl	800bbde <f_sync>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d118      	bne.n	800bd24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f107 0208 	add.w	r2, r7, #8
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff fbc0 	bl	800b480 <validate>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10c      	bne.n	800bd24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe f958 	bl	8009fc4 <dec_lock>
 800bd14:	4603      	mov	r3, r0
 800bd16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bd30:	b590      	push	{r4, r7, lr}
 800bd32:	b09d      	sub	sp, #116	; 0x74
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	607a      	str	r2, [r7, #4]
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bd40:	2301      	movs	r3, #1
 800bd42:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bd44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd48:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bd4a:	f107 030c 	add.w	r3, r7, #12
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff f8af 	bl	800aeb2 <get_ldnumber>
 800bd54:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	da02      	bge.n	800bd62 <f_mkfs+0x32>
 800bd5c:	230b      	movs	r3, #11
 800bd5e:	f000 bc0d 	b.w	800c57c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bd62:	4a94      	ldr	r2, [pc, #592]	; (800bfb4 <f_mkfs+0x284>)
 800bd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d005      	beq.n	800bd7a <f_mkfs+0x4a>
 800bd6e:	4a91      	ldr	r2, [pc, #580]	; (800bfb4 <f_mkfs+0x284>)
 800bd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd76:	2200      	movs	r2, #0
 800bd78:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bd80:	2300      	movs	r3, #0
 800bd82:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bd86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fd fe8a 	bl	8009aa4 <disk_initialize>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bd96:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <f_mkfs+0x76>
 800bda2:	2303      	movs	r3, #3
 800bda4:	e3ea      	b.n	800c57c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bda6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bdaa:	f003 0304 	and.w	r3, r3, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <f_mkfs+0x86>
 800bdb2:	230a      	movs	r3, #10
 800bdb4:	e3e2      	b.n	800c57c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bdb6:	f107 0214 	add.w	r2, r7, #20
 800bdba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bdbe:	2103      	movs	r1, #3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fd fed5 	bl	8009b70 <disk_ioctl>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10c      	bne.n	800bde6 <f_mkfs+0xb6>
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d009      	beq.n	800bde6 <f_mkfs+0xb6>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdd8:	d805      	bhi.n	800bde6 <f_mkfs+0xb6>
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	4013      	ands	r3, r2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <f_mkfs+0xba>
 800bde6:	2301      	movs	r3, #1
 800bde8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bdea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <f_mkfs+0xce>
 800bdf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d309      	bcc.n	800be12 <f_mkfs+0xe2>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be04:	d805      	bhi.n	800be12 <f_mkfs+0xe2>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	1e5a      	subs	r2, r3, #1
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <f_mkfs+0xe6>
 800be12:	2313      	movs	r3, #19
 800be14:	e3b2      	b.n	800c57c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800be16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be1e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800be24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800be30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	fb02 f303 	mul.w	r3, r2, r3
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <f_mkfs+0x114>
 800be40:	230e      	movs	r3, #14
 800be42:	e39b      	b.n	800c57c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800be44:	f107 0210 	add.w	r2, r7, #16
 800be48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800be4c:	2101      	movs	r1, #1
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fd fe8e 	bl	8009b70 <disk_ioctl>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <f_mkfs+0x12e>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e38e      	b.n	800c57c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800be5e:	7afb      	ldrb	r3, [r7, #11]
 800be60:	f003 0308 	and.w	r3, r3, #8
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <f_mkfs+0x13c>
 800be68:	2300      	movs	r3, #0
 800be6a:	e000      	b.n	800be6e <f_mkfs+0x13e>
 800be6c:	233f      	movs	r3, #63	; 0x3f
 800be6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be74:	429a      	cmp	r2, r3
 800be76:	d901      	bls.n	800be7c <f_mkfs+0x14c>
 800be78:	230e      	movs	r3, #14
 800be7a:	e37f      	b.n	800c57c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b7f      	cmp	r3, #127	; 0x7f
 800be88:	d801      	bhi.n	800be8e <f_mkfs+0x15e>
 800be8a:	230e      	movs	r3, #14
 800be8c:	e376      	b.n	800c57c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b80      	cmp	r3, #128	; 0x80
 800be92:	d901      	bls.n	800be98 <f_mkfs+0x168>
 800be94:	2313      	movs	r3, #19
 800be96:	e371      	b.n	800c57c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	f003 0302 	and.w	r3, r3, #2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00d      	beq.n	800bebe <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bea2:	7afb      	ldrb	r3, [r7, #11]
 800bea4:	f003 0307 	and.w	r3, r3, #7
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d004      	beq.n	800beb6 <f_mkfs+0x186>
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d103      	bne.n	800bebe <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800beb6:	2303      	movs	r3, #3
 800beb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bebc:	e009      	b.n	800bed2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bebe:	7afb      	ldrb	r3, [r7, #11]
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <f_mkfs+0x19c>
 800bec8:	2313      	movs	r3, #19
 800beca:	e357      	b.n	800c57c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800becc:	2302      	movs	r3, #2
 800bece:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bed6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d13c      	bne.n	800bf58 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d11b      	bne.n	800bf1c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	0c5b      	lsrs	r3, r3, #17
 800bee8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800beea:	2300      	movs	r3, #0
 800beec:	64bb      	str	r3, [r7, #72]	; 0x48
 800beee:	2301      	movs	r3, #1
 800bef0:	653b      	str	r3, [r7, #80]	; 0x50
 800bef2:	e005      	b.n	800bf00 <f_mkfs+0x1d0>
 800bef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bef6:	3301      	adds	r3, #1
 800bef8:	64bb      	str	r3, [r7, #72]	; 0x48
 800befa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	653b      	str	r3, [r7, #80]	; 0x50
 800bf00:	4a2d      	ldr	r2, [pc, #180]	; (800bfb8 <f_mkfs+0x288>)
 800bf02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <f_mkfs+0x1ec>
 800bf0c:	4a2a      	ldr	r2, [pc, #168]	; (800bfb8 <f_mkfs+0x288>)
 800bf0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d2eb      	bcs.n	800bef4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf20:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf24:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	3302      	adds	r3, #2
 800bf2a:	009a      	lsls	r2, r3, #2
 800bf2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf2e:	4413      	add	r3, r2
 800bf30:	1e5a      	subs	r2, r3, #1
 800bf32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf38:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bf3a:	2320      	movs	r3, #32
 800bf3c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bf3e:	2300      	movs	r3, #0
 800bf40:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d903      	bls.n	800bf54 <f_mkfs+0x224>
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	4a1b      	ldr	r2, [pc, #108]	; (800bfbc <f_mkfs+0x28c>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d952      	bls.n	800bffa <f_mkfs+0x2ca>
 800bf54:	230e      	movs	r3, #14
 800bf56:	e311      	b.n	800c57c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bf58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d11b      	bne.n	800bf96 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	0b1b      	lsrs	r3, r3, #12
 800bf62:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bf64:	2300      	movs	r3, #0
 800bf66:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf68:	2301      	movs	r3, #1
 800bf6a:	653b      	str	r3, [r7, #80]	; 0x50
 800bf6c:	e005      	b.n	800bf7a <f_mkfs+0x24a>
 800bf6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf70:	3301      	adds	r3, #1
 800bf72:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	653b      	str	r3, [r7, #80]	; 0x50
 800bf7a:	4a11      	ldr	r2, [pc, #68]	; (800bfc0 <f_mkfs+0x290>)
 800bf7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <f_mkfs+0x266>
 800bf86:	4a0e      	ldr	r2, [pc, #56]	; (800bfc0 <f_mkfs+0x290>)
 800bf88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d2eb      	bcs.n	800bf6e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf9e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800bfa0:	6a3b      	ldr	r3, [r7, #32]
 800bfa2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d90c      	bls.n	800bfc4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	3302      	adds	r3, #2
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfb2:	e012      	b.n	800bfda <f_mkfs+0x2aa>
 800bfb4:	24002188 	.word	0x24002188
 800bfb8:	0800d074 	.word	0x0800d074
 800bfbc:	0ffffff5 	.word	0x0ffffff5
 800bfc0:	0800d084 	.word	0x0800d084
				} else {
					fmt = FS_FAT12;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800bfca:	6a3a      	ldr	r2, [r7, #32]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	085b      	lsrs	r3, r3, #1
 800bfd6:	3303      	adds	r3, #3
 800bfd8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800bfda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfde:	4413      	add	r3, r2
 800bfe0:	1e5a      	subs	r2, r3, #1
 800bfe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800bfea:	2301      	movs	r3, #1
 800bfec:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800bfee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bff8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800bffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bffe:	4413      	add	r3, r2
 800c000:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800c002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c006:	fb02 f203 	mul.w	r2, r2, r3
 800c00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c00c:	4413      	add	r3, r2
 800c00e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c010:	4413      	add	r3, r2
 800c012:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800c014:	697a      	ldr	r2, [r7, #20]
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	4413      	add	r3, r2
 800c01a:	1e5a      	subs	r2, r3, #1
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	425b      	negs	r3, r3
 800c020:	401a      	ands	r2, r3
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800c028:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d108      	bne.n	800c042 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800c030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c034:	4413      	add	r3, r2
 800c036:	657b      	str	r3, [r7, #84]	; 0x54
 800c038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c03c:	4413      	add	r3, r2
 800c03e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c040:	e006      	b.n	800c050 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800c042:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c046:	fbb2 f3f3 	udiv	r3, r2, r3
 800c04a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c04c:	4413      	add	r3, r2
 800c04e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800c050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c052:	011a      	lsls	r2, r3, #4
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	441a      	add	r2, r3
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	1ad2      	subs	r2, r2, r3
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d901      	bls.n	800c066 <f_mkfs+0x336>
 800c062:	230e      	movs	r3, #14
 800c064:	e28a      	b.n	800c57c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800c066:	693a      	ldr	r2, [r7, #16]
 800c068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c06a:	1ad2      	subs	r2, r2, r3
 800c06c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c06e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c070:	fb01 f303 	mul.w	r3, r1, r3
 800c074:	1ad2      	subs	r2, r2, r3
 800c076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c078:	1ad2      	subs	r2, r2, r3
 800c07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c080:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800c082:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c086:	2b03      	cmp	r3, #3
 800c088:	d10f      	bne.n	800c0aa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c090:	4293      	cmp	r3, r2
 800c092:	d80a      	bhi.n	800c0aa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d105      	bne.n	800c0a6 <f_mkfs+0x376>
 800c09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c09c:	085b      	lsrs	r3, r3, #1
 800c09e:	607b      	str	r3, [r7, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d144      	bne.n	800c130 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800c0a6:	230e      	movs	r3, #14
 800c0a8:	e268      	b.n	800c57c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800c0aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d133      	bne.n	800c11a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d91e      	bls.n	800c0fa <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d107      	bne.n	800c0d2 <f_mkfs+0x3a2>
 800c0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	2b40      	cmp	r3, #64	; 0x40
 800c0c8:	d803      	bhi.n	800c0d2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800c0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e033      	b.n	800c13a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800c0d2:	7afb      	ldrb	r3, [r7, #11]
 800c0d4:	f003 0302 	and.w	r3, r3, #2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800c0dc:	2303      	movs	r3, #3
 800c0de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c0e2:	e02a      	b.n	800c13a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d105      	bne.n	800c0f6 <f_mkfs+0x3c6>
 800c0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	607b      	str	r3, [r7, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b80      	cmp	r3, #128	; 0x80
 800c0f4:	d91e      	bls.n	800c134 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800c0f6:	230e      	movs	r3, #14
 800c0f8:	e240      	b.n	800c57c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c100:	4293      	cmp	r3, r2
 800c102:	d80a      	bhi.n	800c11a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d105      	bne.n	800c116 <f_mkfs+0x3e6>
 800c10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	607b      	str	r3, [r7, #4]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b80      	cmp	r3, #128	; 0x80
 800c114:	d910      	bls.n	800c138 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800c116:	230e      	movs	r3, #14
 800c118:	e230      	b.n	800c57c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800c11a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d10c      	bne.n	800c13c <f_mkfs+0x40c>
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c128:	4293      	cmp	r3, r2
 800c12a:	d907      	bls.n	800c13c <f_mkfs+0x40c>
 800c12c:	230e      	movs	r3, #14
 800c12e:	e225      	b.n	800c57c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c130:	bf00      	nop
 800c132:	e6ce      	b.n	800bed2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c134:	bf00      	nop
 800c136:	e6cc      	b.n	800bed2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c138:	bf00      	nop
			pau = au;
 800c13a:	e6ca      	b.n	800bed2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800c13c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800c13e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c140:	461a      	mov	r2, r3
 800c142:	2100      	movs	r1, #0
 800c144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c146:	f7fd fdd4 	bl	8009cf2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800c14a:	220b      	movs	r2, #11
 800c14c:	49bc      	ldr	r1, [pc, #752]	; (800c440 <f_mkfs+0x710>)
 800c14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c150:	f7fd fdae 	bl	8009cb0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	330b      	adds	r3, #11
 800c158:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c15a:	4611      	mov	r1, r2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd fd60 	bl	8009c22 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	330d      	adds	r3, #13
 800c166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c168:	b2d2      	uxtb	r2, r2
 800c16a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	330e      	adds	r3, #14
 800c170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c172:	b292      	uxth	r2, r2
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7fd fd53 	bl	8009c22 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	3310      	adds	r3, #16
 800c180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c182:	b2d2      	uxtb	r2, r2
 800c184:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	f103 0211 	add.w	r2, r3, #17
 800c18c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c190:	2b03      	cmp	r3, #3
 800c192:	d002      	beq.n	800c19a <f_mkfs+0x46a>
 800c194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c196:	b29b      	uxth	r3, r3
 800c198:	e000      	b.n	800c19c <f_mkfs+0x46c>
 800c19a:	2300      	movs	r3, #0
 800c19c:	4619      	mov	r1, r3
 800c19e:	4610      	mov	r0, r2
 800c1a0:	f7fd fd3f 	bl	8009c22 <st_word>
		if (sz_vol < 0x10000) {
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1aa:	d208      	bcs.n	800c1be <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ae:	3313      	adds	r3, #19
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	b292      	uxth	r2, r2
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fd fd33 	bl	8009c22 <st_word>
 800c1bc:	e006      	b.n	800c1cc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	3320      	adds	r3, #32
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fd fd46 	bl	8009c58 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ce:	3315      	adds	r3, #21
 800c1d0:	22f8      	movs	r2, #248	; 0xf8
 800c1d2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	3318      	adds	r3, #24
 800c1d8:	213f      	movs	r1, #63	; 0x3f
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fd fd21 	bl	8009c22 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	331a      	adds	r3, #26
 800c1e4:	21ff      	movs	r1, #255	; 0xff
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fd fd1b 	bl	8009c22 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	331c      	adds	r3, #28
 800c1f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fd fd30 	bl	8009c58 <st_dword>
		if (fmt == FS_FAT32) {
 800c1f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d131      	bne.n	800c264 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c206:	f7fd fa7d 	bl	8009704 <get_fattime>
 800c20a:	4603      	mov	r3, r0
 800c20c:	4619      	mov	r1, r3
 800c20e:	4620      	mov	r0, r4
 800c210:	f7fd fd22 	bl	8009c58 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	3324      	adds	r3, #36	; 0x24
 800c218:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fd fd1c 	bl	8009c58 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	332c      	adds	r3, #44	; 0x2c
 800c224:	2102      	movs	r1, #2
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fd16 	bl	8009c58 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	3330      	adds	r3, #48	; 0x30
 800c230:	2101      	movs	r1, #1
 800c232:	4618      	mov	r0, r3
 800c234:	f7fd fcf5 	bl	8009c22 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	3332      	adds	r3, #50	; 0x32
 800c23c:	2106      	movs	r1, #6
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fd fcef 	bl	8009c22 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	3340      	adds	r3, #64	; 0x40
 800c248:	2280      	movs	r2, #128	; 0x80
 800c24a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	3342      	adds	r3, #66	; 0x42
 800c250:	2229      	movs	r2, #41	; 0x29
 800c252:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c256:	3347      	adds	r3, #71	; 0x47
 800c258:	2213      	movs	r2, #19
 800c25a:	497a      	ldr	r1, [pc, #488]	; (800c444 <f_mkfs+0x714>)
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fd fd27 	bl	8009cb0 <mem_cpy>
 800c262:	e020      	b.n	800c2a6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c26a:	f7fd fa4b 	bl	8009704 <get_fattime>
 800c26e:	4603      	mov	r3, r0
 800c270:	4619      	mov	r1, r3
 800c272:	4620      	mov	r0, r4
 800c274:	f7fd fcf0 	bl	8009c58 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	3316      	adds	r3, #22
 800c27c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c27e:	b292      	uxth	r2, r2
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f7fd fccd 	bl	8009c22 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	3324      	adds	r3, #36	; 0x24
 800c28c:	2280      	movs	r2, #128	; 0x80
 800c28e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	3326      	adds	r3, #38	; 0x26
 800c294:	2229      	movs	r2, #41	; 0x29
 800c296:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	332b      	adds	r3, #43	; 0x2b
 800c29c:	2213      	movs	r2, #19
 800c29e:	496a      	ldr	r1, [pc, #424]	; (800c448 <f_mkfs+0x718>)
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fd fd05 	bl	8009cb0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fd fcb6 	bl	8009c22 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c2b6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2c0:	f7fd fc36 	bl	8009b30 <disk_write>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <f_mkfs+0x59e>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e156      	b.n	800c57c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c2ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d140      	bne.n	800c358 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	1d9a      	adds	r2, r3, #6
 800c2da:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2de:	2301      	movs	r3, #1
 800c2e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2e2:	f7fd fc25 	bl	8009b30 <disk_write>
			mem_set(buf, 0, ss);
 800c2e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ee:	f7fd fd00 	bl	8009cf2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c2f2:	4956      	ldr	r1, [pc, #344]	; (800c44c <f_mkfs+0x71c>)
 800c2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2f6:	f7fd fcaf 	bl	8009c58 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c300:	4953      	ldr	r1, [pc, #332]	; (800c450 <f_mkfs+0x720>)
 800c302:	4618      	mov	r0, r3
 800c304:	f7fd fca8 	bl	8009c58 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	3b01      	subs	r3, #1
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fd fc9f 	bl	8009c58 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c320:	2102      	movs	r1, #2
 800c322:	4618      	mov	r0, r3
 800c324:	f7fd fc98 	bl	8009c58 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c32e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd fc75 	bl	8009c22 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	1dda      	adds	r2, r3, #7
 800c33c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c340:	2301      	movs	r3, #1
 800c342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c344:	f7fd fbf4 	bl	8009b30 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c350:	2301      	movs	r3, #1
 800c352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c354:	f7fd fbec 	bl	8009b30 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c35a:	2100      	movs	r1, #0
 800c35c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c35e:	f7fd fcc8 	bl	8009cf2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c364:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c366:	2300      	movs	r3, #0
 800c368:	64bb      	str	r3, [r7, #72]	; 0x48
 800c36a:	e04b      	b.n	800c404 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c36c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c370:	2b03      	cmp	r3, #3
 800c372:	d113      	bne.n	800c39c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c374:	f06f 0107 	mvn.w	r1, #7
 800c378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c37a:	f7fd fc6d 	bl	8009c58 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	3304      	adds	r3, #4
 800c382:	f04f 31ff 	mov.w	r1, #4294967295
 800c386:	4618      	mov	r0, r3
 800c388:	f7fd fc66 	bl	8009c58 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	3308      	adds	r3, #8
 800c390:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c394:	4618      	mov	r0, r3
 800c396:	f7fd fc5f 	bl	8009c58 <st_dword>
 800c39a:	e00b      	b.n	800c3b4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c39c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <f_mkfs+0x678>
 800c3a4:	4b2b      	ldr	r3, [pc, #172]	; (800c454 <f_mkfs+0x724>)
 800c3a6:	e001      	b.n	800c3ac <f_mkfs+0x67c>
 800c3a8:	f06f 0307 	mvn.w	r3, #7
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3b0:	f7fd fc52 	bl	8009c58 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c3b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3b6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c3b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	bf28      	it	cs
 800c3c0:	4613      	movcs	r3, r2
 800c3c2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c3c4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c3cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3ce:	f7fd fbaf 	bl	8009b30 <disk_write>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <f_mkfs+0x6ac>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e0cf      	b.n	800c57c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c3dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c3de:	461a      	mov	r2, r3
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3e4:	f7fd fc85 	bl	8009cf2 <mem_set>
				sect += n; nsect -= n;
 800c3e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ec:	4413      	add	r3, r2
 800c3ee:	667b      	str	r3, [r7, #100]	; 0x64
 800c3f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c3f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1dc      	bne.n	800c3b8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c400:	3301      	adds	r3, #1
 800c402:	64bb      	str	r3, [r7, #72]	; 0x48
 800c404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c408:	429a      	cmp	r2, r3
 800c40a:	d3af      	bcc.n	800c36c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c40c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c410:	2b03      	cmp	r3, #3
 800c412:	d101      	bne.n	800c418 <f_mkfs+0x6e8>
 800c414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c416:	e000      	b.n	800c41a <f_mkfs+0x6ea>
 800c418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c41a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c41c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	4293      	cmp	r3, r2
 800c422:	bf28      	it	cs
 800c424:	4613      	movcs	r3, r2
 800c426:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c428:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c42c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c42e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c432:	f7fd fb7d 	bl	8009b30 <disk_write>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00d      	beq.n	800c458 <f_mkfs+0x728>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e09d      	b.n	800c57c <f_mkfs+0x84c>
 800c440:	0800cf74 	.word	0x0800cf74
 800c444:	0800cf80 	.word	0x0800cf80
 800c448:	0800cf94 	.word	0x0800cf94
 800c44c:	41615252 	.word	0x41615252
 800c450:	61417272 	.word	0x61417272
 800c454:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c458:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c45a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c45c:	4413      	add	r3, r2
 800c45e:	667b      	str	r3, [r7, #100]	; 0x64
 800c460:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1d6      	bne.n	800c41c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c46e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c472:	2b03      	cmp	r3, #3
 800c474:	d103      	bne.n	800c47e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c476:	230c      	movs	r3, #12
 800c478:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c47c:	e010      	b.n	800c4a0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c484:	d303      	bcc.n	800c48e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c486:	2306      	movs	r3, #6
 800c488:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c48c:	e008      	b.n	800c4a0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c48e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c492:	2b02      	cmp	r3, #2
 800c494:	d101      	bne.n	800c49a <f_mkfs+0x76a>
 800c496:	2304      	movs	r3, #4
 800c498:	e000      	b.n	800c49c <f_mkfs+0x76c>
 800c49a:	2301      	movs	r3, #1
 800c49c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	f003 0308 	and.w	r3, r3, #8
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d15b      	bne.n	800c562 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c4aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4b2:	f7fd fc1e 	bl	8009cf2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fd fbae 	bl	8009c22 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c4cc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	2201      	movs	r2, #1
 800c4da:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	3302      	adds	r3, #2
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	3303      	adds	r3, #3
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c4f4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	441a      	add	r2, r3
 800c4fc:	4b21      	ldr	r3, [pc, #132]	; (800c584 <f_mkfs+0x854>)
 800c4fe:	fba3 1302 	umull	r1, r3, r3, r2
 800c502:	1ad2      	subs	r2, r2, r3
 800c504:	0852      	lsrs	r2, r2, #1
 800c506:	4413      	add	r3, r2
 800c508:	0b5b      	lsrs	r3, r3, #13
 800c50a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	3305      	adds	r3, #5
 800c510:	22fe      	movs	r2, #254	; 0xfe
 800c512:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c516:	089b      	lsrs	r3, r3, #2
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	3306      	adds	r3, #6
 800c51e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c522:	b2d2      	uxtb	r2, r2
 800c524:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	3307      	adds	r3, #7
 800c52a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c52c:	b2d2      	uxtb	r2, r2
 800c52e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	3308      	adds	r3, #8
 800c534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c536:	4618      	mov	r0, r3
 800c538:	f7fd fb8e 	bl	8009c58 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	330c      	adds	r3, #12
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	4611      	mov	r1, r2
 800c544:	4618      	mov	r0, r3
 800c546:	f7fd fb87 	bl	8009c58 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c54a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c54e:	2301      	movs	r3, #1
 800c550:	2200      	movs	r2, #0
 800c552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c554:	f7fd faec 	bl	8009b30 <disk_write>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <f_mkfs+0x832>
 800c55e:	2301      	movs	r3, #1
 800c560:	e00c      	b.n	800c57c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c562:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c566:	2200      	movs	r2, #0
 800c568:	2100      	movs	r1, #0
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fd fb00 	bl	8009b70 <disk_ioctl>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <f_mkfs+0x84a>
 800c576:	2301      	movs	r3, #1
 800c578:	e000      	b.n	800c57c <f_mkfs+0x84c>

	return FR_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3774      	adds	r7, #116	; 0x74
 800c580:	46bd      	mov	sp, r7
 800c582:	bd90      	pop	{r4, r7, pc}
 800c584:	0515565b 	.word	0x0515565b

0800c588 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	4613      	mov	r3, r2
 800c594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c596:	2301      	movs	r3, #1
 800c598:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c59e:	4b1f      	ldr	r3, [pc, #124]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5a0:	7a5b      	ldrb	r3, [r3, #9]
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d131      	bne.n	800c60c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c5a8:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5aa:	7a5b      	ldrb	r3, [r3, #9]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	4b1a      	ldr	r3, [pc, #104]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c5b6:	4b19      	ldr	r3, [pc, #100]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5b8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4a17      	ldr	r2, [pc, #92]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c5c6:	4b15      	ldr	r3, [pc, #84]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5c8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4b13      	ldr	r3, [pc, #76]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5d0:	4413      	add	r3, r2
 800c5d2:	79fa      	ldrb	r2, [r7, #7]
 800c5d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5d6:	4b11      	ldr	r3, [pc, #68]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5d8:	7a5b      	ldrb	r3, [r3, #9]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	b2d1      	uxtb	r1, r2
 800c5e0:	4a0e      	ldr	r2, [pc, #56]	; (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5e2:	7251      	strb	r1, [r2, #9]
 800c5e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5e6:	7dbb      	ldrb	r3, [r7, #22]
 800c5e8:	3330      	adds	r3, #48	; 0x30
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	223a      	movs	r2, #58	; 0x3a
 800c5f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	3302      	adds	r3, #2
 800c5fc:	222f      	movs	r2, #47	; 0x2f
 800c5fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3303      	adds	r3, #3
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	240021b0 	.word	0x240021b0

0800c620 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c62a:	2200      	movs	r2, #0
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff ffaa 	bl	800c588 <FATFS_LinkDriverEx>
 800c634:	4603      	mov	r3, r0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <__errno>:
 800c640:	4b01      	ldr	r3, [pc, #4]	; (800c648 <__errno+0x8>)
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	2400003c 	.word	0x2400003c

0800c64c <__libc_init_array>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	4d0d      	ldr	r5, [pc, #52]	; (800c684 <__libc_init_array+0x38>)
 800c650:	4c0d      	ldr	r4, [pc, #52]	; (800c688 <__libc_init_array+0x3c>)
 800c652:	1b64      	subs	r4, r4, r5
 800c654:	10a4      	asrs	r4, r4, #2
 800c656:	2600      	movs	r6, #0
 800c658:	42a6      	cmp	r6, r4
 800c65a:	d109      	bne.n	800c670 <__libc_init_array+0x24>
 800c65c:	4d0b      	ldr	r5, [pc, #44]	; (800c68c <__libc_init_array+0x40>)
 800c65e:	4c0c      	ldr	r4, [pc, #48]	; (800c690 <__libc_init_array+0x44>)
 800c660:	f000 fc4e 	bl	800cf00 <_init>
 800c664:	1b64      	subs	r4, r4, r5
 800c666:	10a4      	asrs	r4, r4, #2
 800c668:	2600      	movs	r6, #0
 800c66a:	42a6      	cmp	r6, r4
 800c66c:	d105      	bne.n	800c67a <__libc_init_array+0x2e>
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	f855 3b04 	ldr.w	r3, [r5], #4
 800c674:	4798      	blx	r3
 800c676:	3601      	adds	r6, #1
 800c678:	e7ee      	b.n	800c658 <__libc_init_array+0xc>
 800c67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67e:	4798      	blx	r3
 800c680:	3601      	adds	r6, #1
 800c682:	e7f2      	b.n	800c66a <__libc_init_array+0x1e>
 800c684:	0800d0d0 	.word	0x0800d0d0
 800c688:	0800d0d0 	.word	0x0800d0d0
 800c68c:	0800d0d0 	.word	0x0800d0d0
 800c690:	0800d0d4 	.word	0x0800d0d4

0800c694 <memset>:
 800c694:	4402      	add	r2, r0
 800c696:	4603      	mov	r3, r0
 800c698:	4293      	cmp	r3, r2
 800c69a:	d100      	bne.n	800c69e <memset+0xa>
 800c69c:	4770      	bx	lr
 800c69e:	f803 1b01 	strb.w	r1, [r3], #1
 800c6a2:	e7f9      	b.n	800c698 <memset+0x4>

0800c6a4 <siprintf>:
 800c6a4:	b40e      	push	{r1, r2, r3}
 800c6a6:	b500      	push	{lr}
 800c6a8:	b09c      	sub	sp, #112	; 0x70
 800c6aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c6ac:	9002      	str	r0, [sp, #8]
 800c6ae:	9006      	str	r0, [sp, #24]
 800c6b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c6b4:	4809      	ldr	r0, [pc, #36]	; (800c6dc <siprintf+0x38>)
 800c6b6:	9107      	str	r1, [sp, #28]
 800c6b8:	9104      	str	r1, [sp, #16]
 800c6ba:	4909      	ldr	r1, [pc, #36]	; (800c6e0 <siprintf+0x3c>)
 800c6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c0:	9105      	str	r1, [sp, #20]
 800c6c2:	6800      	ldr	r0, [r0, #0]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	a902      	add	r1, sp, #8
 800c6c8:	f000 f868 	bl	800c79c <_svfiprintf_r>
 800c6cc:	9b02      	ldr	r3, [sp, #8]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	b01c      	add	sp, #112	; 0x70
 800c6d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6d8:	b003      	add	sp, #12
 800c6da:	4770      	bx	lr
 800c6dc:	2400003c 	.word	0x2400003c
 800c6e0:	ffff0208 	.word	0xffff0208

0800c6e4 <__ssputs_r>:
 800c6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e8:	688e      	ldr	r6, [r1, #8]
 800c6ea:	429e      	cmp	r6, r3
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	4690      	mov	r8, r2
 800c6f2:	461f      	mov	r7, r3
 800c6f4:	d838      	bhi.n	800c768 <__ssputs_r+0x84>
 800c6f6:	898a      	ldrh	r2, [r1, #12]
 800c6f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6fc:	d032      	beq.n	800c764 <__ssputs_r+0x80>
 800c6fe:	6825      	ldr	r5, [r4, #0]
 800c700:	6909      	ldr	r1, [r1, #16]
 800c702:	eba5 0901 	sub.w	r9, r5, r1
 800c706:	6965      	ldr	r5, [r4, #20]
 800c708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c70c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c710:	3301      	adds	r3, #1
 800c712:	444b      	add	r3, r9
 800c714:	106d      	asrs	r5, r5, #1
 800c716:	429d      	cmp	r5, r3
 800c718:	bf38      	it	cc
 800c71a:	461d      	movcc	r5, r3
 800c71c:	0553      	lsls	r3, r2, #21
 800c71e:	d531      	bpl.n	800c784 <__ssputs_r+0xa0>
 800c720:	4629      	mov	r1, r5
 800c722:	f000 fb47 	bl	800cdb4 <_malloc_r>
 800c726:	4606      	mov	r6, r0
 800c728:	b950      	cbnz	r0, 800c740 <__ssputs_r+0x5c>
 800c72a:	230c      	movs	r3, #12
 800c72c:	f8ca 3000 	str.w	r3, [sl]
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c736:	81a3      	strh	r3, [r4, #12]
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c740:	6921      	ldr	r1, [r4, #16]
 800c742:	464a      	mov	r2, r9
 800c744:	f000 fabe 	bl	800ccc4 <memcpy>
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c74e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	6126      	str	r6, [r4, #16]
 800c756:	6165      	str	r5, [r4, #20]
 800c758:	444e      	add	r6, r9
 800c75a:	eba5 0509 	sub.w	r5, r5, r9
 800c75e:	6026      	str	r6, [r4, #0]
 800c760:	60a5      	str	r5, [r4, #8]
 800c762:	463e      	mov	r6, r7
 800c764:	42be      	cmp	r6, r7
 800c766:	d900      	bls.n	800c76a <__ssputs_r+0x86>
 800c768:	463e      	mov	r6, r7
 800c76a:	4632      	mov	r2, r6
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	4641      	mov	r1, r8
 800c770:	f000 fab6 	bl	800cce0 <memmove>
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	6822      	ldr	r2, [r4, #0]
 800c778:	1b9b      	subs	r3, r3, r6
 800c77a:	4432      	add	r2, r6
 800c77c:	60a3      	str	r3, [r4, #8]
 800c77e:	6022      	str	r2, [r4, #0]
 800c780:	2000      	movs	r0, #0
 800c782:	e7db      	b.n	800c73c <__ssputs_r+0x58>
 800c784:	462a      	mov	r2, r5
 800c786:	f000 fb6f 	bl	800ce68 <_realloc_r>
 800c78a:	4606      	mov	r6, r0
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d1e1      	bne.n	800c754 <__ssputs_r+0x70>
 800c790:	6921      	ldr	r1, [r4, #16]
 800c792:	4650      	mov	r0, sl
 800c794:	f000 fabe 	bl	800cd14 <_free_r>
 800c798:	e7c7      	b.n	800c72a <__ssputs_r+0x46>
	...

0800c79c <_svfiprintf_r>:
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	4698      	mov	r8, r3
 800c7a2:	898b      	ldrh	r3, [r1, #12]
 800c7a4:	061b      	lsls	r3, r3, #24
 800c7a6:	b09d      	sub	sp, #116	; 0x74
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	d50e      	bpl.n	800c7ce <_svfiprintf_r+0x32>
 800c7b0:	690b      	ldr	r3, [r1, #16]
 800c7b2:	b963      	cbnz	r3, 800c7ce <_svfiprintf_r+0x32>
 800c7b4:	2140      	movs	r1, #64	; 0x40
 800c7b6:	f000 fafd 	bl	800cdb4 <_malloc_r>
 800c7ba:	6028      	str	r0, [r5, #0]
 800c7bc:	6128      	str	r0, [r5, #16]
 800c7be:	b920      	cbnz	r0, 800c7ca <_svfiprintf_r+0x2e>
 800c7c0:	230c      	movs	r3, #12
 800c7c2:	603b      	str	r3, [r7, #0]
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c8:	e0d1      	b.n	800c96e <_svfiprintf_r+0x1d2>
 800c7ca:	2340      	movs	r3, #64	; 0x40
 800c7cc:	616b      	str	r3, [r5, #20]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d2:	2320      	movs	r3, #32
 800c7d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7dc:	2330      	movs	r3, #48	; 0x30
 800c7de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c988 <_svfiprintf_r+0x1ec>
 800c7e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e6:	f04f 0901 	mov.w	r9, #1
 800c7ea:	4623      	mov	r3, r4
 800c7ec:	469a      	mov	sl, r3
 800c7ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f2:	b10a      	cbz	r2, 800c7f8 <_svfiprintf_r+0x5c>
 800c7f4:	2a25      	cmp	r2, #37	; 0x25
 800c7f6:	d1f9      	bne.n	800c7ec <_svfiprintf_r+0x50>
 800c7f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c7fc:	d00b      	beq.n	800c816 <_svfiprintf_r+0x7a>
 800c7fe:	465b      	mov	r3, fp
 800c800:	4622      	mov	r2, r4
 800c802:	4629      	mov	r1, r5
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff ff6d 	bl	800c6e4 <__ssputs_r>
 800c80a:	3001      	adds	r0, #1
 800c80c:	f000 80aa 	beq.w	800c964 <_svfiprintf_r+0x1c8>
 800c810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c812:	445a      	add	r2, fp
 800c814:	9209      	str	r2, [sp, #36]	; 0x24
 800c816:	f89a 3000 	ldrb.w	r3, [sl]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 80a2 	beq.w	800c964 <_svfiprintf_r+0x1c8>
 800c820:	2300      	movs	r3, #0
 800c822:	f04f 32ff 	mov.w	r2, #4294967295
 800c826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c82a:	f10a 0a01 	add.w	sl, sl, #1
 800c82e:	9304      	str	r3, [sp, #16]
 800c830:	9307      	str	r3, [sp, #28]
 800c832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c836:	931a      	str	r3, [sp, #104]	; 0x68
 800c838:	4654      	mov	r4, sl
 800c83a:	2205      	movs	r2, #5
 800c83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c840:	4851      	ldr	r0, [pc, #324]	; (800c988 <_svfiprintf_r+0x1ec>)
 800c842:	f7f3 fd6d 	bl	8000320 <memchr>
 800c846:	9a04      	ldr	r2, [sp, #16]
 800c848:	b9d8      	cbnz	r0, 800c882 <_svfiprintf_r+0xe6>
 800c84a:	06d0      	lsls	r0, r2, #27
 800c84c:	bf44      	itt	mi
 800c84e:	2320      	movmi	r3, #32
 800c850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c854:	0711      	lsls	r1, r2, #28
 800c856:	bf44      	itt	mi
 800c858:	232b      	movmi	r3, #43	; 0x2b
 800c85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c85e:	f89a 3000 	ldrb.w	r3, [sl]
 800c862:	2b2a      	cmp	r3, #42	; 0x2a
 800c864:	d015      	beq.n	800c892 <_svfiprintf_r+0xf6>
 800c866:	9a07      	ldr	r2, [sp, #28]
 800c868:	4654      	mov	r4, sl
 800c86a:	2000      	movs	r0, #0
 800c86c:	f04f 0c0a 	mov.w	ip, #10
 800c870:	4621      	mov	r1, r4
 800c872:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c876:	3b30      	subs	r3, #48	; 0x30
 800c878:	2b09      	cmp	r3, #9
 800c87a:	d94e      	bls.n	800c91a <_svfiprintf_r+0x17e>
 800c87c:	b1b0      	cbz	r0, 800c8ac <_svfiprintf_r+0x110>
 800c87e:	9207      	str	r2, [sp, #28]
 800c880:	e014      	b.n	800c8ac <_svfiprintf_r+0x110>
 800c882:	eba0 0308 	sub.w	r3, r0, r8
 800c886:	fa09 f303 	lsl.w	r3, r9, r3
 800c88a:	4313      	orrs	r3, r2
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	46a2      	mov	sl, r4
 800c890:	e7d2      	b.n	800c838 <_svfiprintf_r+0x9c>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	1d19      	adds	r1, r3, #4
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	9103      	str	r1, [sp, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	bfbb      	ittet	lt
 800c89e:	425b      	neglt	r3, r3
 800c8a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a4:	9307      	strge	r3, [sp, #28]
 800c8a6:	9307      	strlt	r3, [sp, #28]
 800c8a8:	bfb8      	it	lt
 800c8aa:	9204      	strlt	r2, [sp, #16]
 800c8ac:	7823      	ldrb	r3, [r4, #0]
 800c8ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b0:	d10c      	bne.n	800c8cc <_svfiprintf_r+0x130>
 800c8b2:	7863      	ldrb	r3, [r4, #1]
 800c8b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b6:	d135      	bne.n	800c924 <_svfiprintf_r+0x188>
 800c8b8:	9b03      	ldr	r3, [sp, #12]
 800c8ba:	1d1a      	adds	r2, r3, #4
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	9203      	str	r2, [sp, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	bfb8      	it	lt
 800c8c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8c8:	3402      	adds	r4, #2
 800c8ca:	9305      	str	r3, [sp, #20]
 800c8cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c998 <_svfiprintf_r+0x1fc>
 800c8d0:	7821      	ldrb	r1, [r4, #0]
 800c8d2:	2203      	movs	r2, #3
 800c8d4:	4650      	mov	r0, sl
 800c8d6:	f7f3 fd23 	bl	8000320 <memchr>
 800c8da:	b140      	cbz	r0, 800c8ee <_svfiprintf_r+0x152>
 800c8dc:	2340      	movs	r3, #64	; 0x40
 800c8de:	eba0 000a 	sub.w	r0, r0, sl
 800c8e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c8e6:	9b04      	ldr	r3, [sp, #16]
 800c8e8:	4303      	orrs	r3, r0
 800c8ea:	3401      	adds	r4, #1
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f2:	4826      	ldr	r0, [pc, #152]	; (800c98c <_svfiprintf_r+0x1f0>)
 800c8f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8f8:	2206      	movs	r2, #6
 800c8fa:	f7f3 fd11 	bl	8000320 <memchr>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d038      	beq.n	800c974 <_svfiprintf_r+0x1d8>
 800c902:	4b23      	ldr	r3, [pc, #140]	; (800c990 <_svfiprintf_r+0x1f4>)
 800c904:	bb1b      	cbnz	r3, 800c94e <_svfiprintf_r+0x1b2>
 800c906:	9b03      	ldr	r3, [sp, #12]
 800c908:	3307      	adds	r3, #7
 800c90a:	f023 0307 	bic.w	r3, r3, #7
 800c90e:	3308      	adds	r3, #8
 800c910:	9303      	str	r3, [sp, #12]
 800c912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c914:	4433      	add	r3, r6
 800c916:	9309      	str	r3, [sp, #36]	; 0x24
 800c918:	e767      	b.n	800c7ea <_svfiprintf_r+0x4e>
 800c91a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c91e:	460c      	mov	r4, r1
 800c920:	2001      	movs	r0, #1
 800c922:	e7a5      	b.n	800c870 <_svfiprintf_r+0xd4>
 800c924:	2300      	movs	r3, #0
 800c926:	3401      	adds	r4, #1
 800c928:	9305      	str	r3, [sp, #20]
 800c92a:	4619      	mov	r1, r3
 800c92c:	f04f 0c0a 	mov.w	ip, #10
 800c930:	4620      	mov	r0, r4
 800c932:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c936:	3a30      	subs	r2, #48	; 0x30
 800c938:	2a09      	cmp	r2, #9
 800c93a:	d903      	bls.n	800c944 <_svfiprintf_r+0x1a8>
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d0c5      	beq.n	800c8cc <_svfiprintf_r+0x130>
 800c940:	9105      	str	r1, [sp, #20]
 800c942:	e7c3      	b.n	800c8cc <_svfiprintf_r+0x130>
 800c944:	fb0c 2101 	mla	r1, ip, r1, r2
 800c948:	4604      	mov	r4, r0
 800c94a:	2301      	movs	r3, #1
 800c94c:	e7f0      	b.n	800c930 <_svfiprintf_r+0x194>
 800c94e:	ab03      	add	r3, sp, #12
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	462a      	mov	r2, r5
 800c954:	4b0f      	ldr	r3, [pc, #60]	; (800c994 <_svfiprintf_r+0x1f8>)
 800c956:	a904      	add	r1, sp, #16
 800c958:	4638      	mov	r0, r7
 800c95a:	f3af 8000 	nop.w
 800c95e:	1c42      	adds	r2, r0, #1
 800c960:	4606      	mov	r6, r0
 800c962:	d1d6      	bne.n	800c912 <_svfiprintf_r+0x176>
 800c964:	89ab      	ldrh	r3, [r5, #12]
 800c966:	065b      	lsls	r3, r3, #25
 800c968:	f53f af2c 	bmi.w	800c7c4 <_svfiprintf_r+0x28>
 800c96c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c96e:	b01d      	add	sp, #116	; 0x74
 800c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c974:	ab03      	add	r3, sp, #12
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	462a      	mov	r2, r5
 800c97a:	4b06      	ldr	r3, [pc, #24]	; (800c994 <_svfiprintf_r+0x1f8>)
 800c97c:	a904      	add	r1, sp, #16
 800c97e:	4638      	mov	r0, r7
 800c980:	f000 f87a 	bl	800ca78 <_printf_i>
 800c984:	e7eb      	b.n	800c95e <_svfiprintf_r+0x1c2>
 800c986:	bf00      	nop
 800c988:	0800d092 	.word	0x0800d092
 800c98c:	0800d09c 	.word	0x0800d09c
 800c990:	00000000 	.word	0x00000000
 800c994:	0800c6e5 	.word	0x0800c6e5
 800c998:	0800d098 	.word	0x0800d098

0800c99c <_printf_common>:
 800c99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a0:	4616      	mov	r6, r2
 800c9a2:	4699      	mov	r9, r3
 800c9a4:	688a      	ldr	r2, [r1, #8]
 800c9a6:	690b      	ldr	r3, [r1, #16]
 800c9a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	bfb8      	it	lt
 800c9b0:	4613      	movlt	r3, r2
 800c9b2:	6033      	str	r3, [r6, #0]
 800c9b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9b8:	4607      	mov	r7, r0
 800c9ba:	460c      	mov	r4, r1
 800c9bc:	b10a      	cbz	r2, 800c9c2 <_printf_common+0x26>
 800c9be:	3301      	adds	r3, #1
 800c9c0:	6033      	str	r3, [r6, #0]
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	0699      	lsls	r1, r3, #26
 800c9c6:	bf42      	ittt	mi
 800c9c8:	6833      	ldrmi	r3, [r6, #0]
 800c9ca:	3302      	addmi	r3, #2
 800c9cc:	6033      	strmi	r3, [r6, #0]
 800c9ce:	6825      	ldr	r5, [r4, #0]
 800c9d0:	f015 0506 	ands.w	r5, r5, #6
 800c9d4:	d106      	bne.n	800c9e4 <_printf_common+0x48>
 800c9d6:	f104 0a19 	add.w	sl, r4, #25
 800c9da:	68e3      	ldr	r3, [r4, #12]
 800c9dc:	6832      	ldr	r2, [r6, #0]
 800c9de:	1a9b      	subs	r3, r3, r2
 800c9e0:	42ab      	cmp	r3, r5
 800c9e2:	dc26      	bgt.n	800ca32 <_printf_common+0x96>
 800c9e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9e8:	1e13      	subs	r3, r2, #0
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	bf18      	it	ne
 800c9ee:	2301      	movne	r3, #1
 800c9f0:	0692      	lsls	r2, r2, #26
 800c9f2:	d42b      	bmi.n	800ca4c <_printf_common+0xb0>
 800c9f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	47c0      	blx	r8
 800c9fe:	3001      	adds	r0, #1
 800ca00:	d01e      	beq.n	800ca40 <_printf_common+0xa4>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	68e5      	ldr	r5, [r4, #12]
 800ca06:	6832      	ldr	r2, [r6, #0]
 800ca08:	f003 0306 	and.w	r3, r3, #6
 800ca0c:	2b04      	cmp	r3, #4
 800ca0e:	bf08      	it	eq
 800ca10:	1aad      	subeq	r5, r5, r2
 800ca12:	68a3      	ldr	r3, [r4, #8]
 800ca14:	6922      	ldr	r2, [r4, #16]
 800ca16:	bf0c      	ite	eq
 800ca18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca1c:	2500      	movne	r5, #0
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	bfc4      	itt	gt
 800ca22:	1a9b      	subgt	r3, r3, r2
 800ca24:	18ed      	addgt	r5, r5, r3
 800ca26:	2600      	movs	r6, #0
 800ca28:	341a      	adds	r4, #26
 800ca2a:	42b5      	cmp	r5, r6
 800ca2c:	d11a      	bne.n	800ca64 <_printf_common+0xc8>
 800ca2e:	2000      	movs	r0, #0
 800ca30:	e008      	b.n	800ca44 <_printf_common+0xa8>
 800ca32:	2301      	movs	r3, #1
 800ca34:	4652      	mov	r2, sl
 800ca36:	4649      	mov	r1, r9
 800ca38:	4638      	mov	r0, r7
 800ca3a:	47c0      	blx	r8
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d103      	bne.n	800ca48 <_printf_common+0xac>
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca48:	3501      	adds	r5, #1
 800ca4a:	e7c6      	b.n	800c9da <_printf_common+0x3e>
 800ca4c:	18e1      	adds	r1, r4, r3
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	2030      	movs	r0, #48	; 0x30
 800ca52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca56:	4422      	add	r2, r4
 800ca58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca60:	3302      	adds	r3, #2
 800ca62:	e7c7      	b.n	800c9f4 <_printf_common+0x58>
 800ca64:	2301      	movs	r3, #1
 800ca66:	4622      	mov	r2, r4
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	47c0      	blx	r8
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d0e6      	beq.n	800ca40 <_printf_common+0xa4>
 800ca72:	3601      	adds	r6, #1
 800ca74:	e7d9      	b.n	800ca2a <_printf_common+0x8e>
	...

0800ca78 <_printf_i>:
 800ca78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	4691      	mov	r9, r2
 800ca80:	7e27      	ldrb	r7, [r4, #24]
 800ca82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca84:	2f78      	cmp	r7, #120	; 0x78
 800ca86:	4680      	mov	r8, r0
 800ca88:	469a      	mov	sl, r3
 800ca8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca8e:	d807      	bhi.n	800caa0 <_printf_i+0x28>
 800ca90:	2f62      	cmp	r7, #98	; 0x62
 800ca92:	d80a      	bhi.n	800caaa <_printf_i+0x32>
 800ca94:	2f00      	cmp	r7, #0
 800ca96:	f000 80d8 	beq.w	800cc4a <_printf_i+0x1d2>
 800ca9a:	2f58      	cmp	r7, #88	; 0x58
 800ca9c:	f000 80a3 	beq.w	800cbe6 <_printf_i+0x16e>
 800caa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800caa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caa8:	e03a      	b.n	800cb20 <_printf_i+0xa8>
 800caaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caae:	2b15      	cmp	r3, #21
 800cab0:	d8f6      	bhi.n	800caa0 <_printf_i+0x28>
 800cab2:	a001      	add	r0, pc, #4	; (adr r0, 800cab8 <_printf_i+0x40>)
 800cab4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cab8:	0800cb11 	.word	0x0800cb11
 800cabc:	0800cb25 	.word	0x0800cb25
 800cac0:	0800caa1 	.word	0x0800caa1
 800cac4:	0800caa1 	.word	0x0800caa1
 800cac8:	0800caa1 	.word	0x0800caa1
 800cacc:	0800caa1 	.word	0x0800caa1
 800cad0:	0800cb25 	.word	0x0800cb25
 800cad4:	0800caa1 	.word	0x0800caa1
 800cad8:	0800caa1 	.word	0x0800caa1
 800cadc:	0800caa1 	.word	0x0800caa1
 800cae0:	0800caa1 	.word	0x0800caa1
 800cae4:	0800cc31 	.word	0x0800cc31
 800cae8:	0800cb55 	.word	0x0800cb55
 800caec:	0800cc13 	.word	0x0800cc13
 800caf0:	0800caa1 	.word	0x0800caa1
 800caf4:	0800caa1 	.word	0x0800caa1
 800caf8:	0800cc53 	.word	0x0800cc53
 800cafc:	0800caa1 	.word	0x0800caa1
 800cb00:	0800cb55 	.word	0x0800cb55
 800cb04:	0800caa1 	.word	0x0800caa1
 800cb08:	0800caa1 	.word	0x0800caa1
 800cb0c:	0800cc1b 	.word	0x0800cc1b
 800cb10:	680b      	ldr	r3, [r1, #0]
 800cb12:	1d1a      	adds	r2, r3, #4
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	600a      	str	r2, [r1, #0]
 800cb18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb20:	2301      	movs	r3, #1
 800cb22:	e0a3      	b.n	800cc6c <_printf_i+0x1f4>
 800cb24:	6825      	ldr	r5, [r4, #0]
 800cb26:	6808      	ldr	r0, [r1, #0]
 800cb28:	062e      	lsls	r6, r5, #24
 800cb2a:	f100 0304 	add.w	r3, r0, #4
 800cb2e:	d50a      	bpl.n	800cb46 <_printf_i+0xce>
 800cb30:	6805      	ldr	r5, [r0, #0]
 800cb32:	600b      	str	r3, [r1, #0]
 800cb34:	2d00      	cmp	r5, #0
 800cb36:	da03      	bge.n	800cb40 <_printf_i+0xc8>
 800cb38:	232d      	movs	r3, #45	; 0x2d
 800cb3a:	426d      	negs	r5, r5
 800cb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb40:	485e      	ldr	r0, [pc, #376]	; (800ccbc <_printf_i+0x244>)
 800cb42:	230a      	movs	r3, #10
 800cb44:	e019      	b.n	800cb7a <_printf_i+0x102>
 800cb46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cb4a:	6805      	ldr	r5, [r0, #0]
 800cb4c:	600b      	str	r3, [r1, #0]
 800cb4e:	bf18      	it	ne
 800cb50:	b22d      	sxthne	r5, r5
 800cb52:	e7ef      	b.n	800cb34 <_printf_i+0xbc>
 800cb54:	680b      	ldr	r3, [r1, #0]
 800cb56:	6825      	ldr	r5, [r4, #0]
 800cb58:	1d18      	adds	r0, r3, #4
 800cb5a:	6008      	str	r0, [r1, #0]
 800cb5c:	0628      	lsls	r0, r5, #24
 800cb5e:	d501      	bpl.n	800cb64 <_printf_i+0xec>
 800cb60:	681d      	ldr	r5, [r3, #0]
 800cb62:	e002      	b.n	800cb6a <_printf_i+0xf2>
 800cb64:	0669      	lsls	r1, r5, #25
 800cb66:	d5fb      	bpl.n	800cb60 <_printf_i+0xe8>
 800cb68:	881d      	ldrh	r5, [r3, #0]
 800cb6a:	4854      	ldr	r0, [pc, #336]	; (800ccbc <_printf_i+0x244>)
 800cb6c:	2f6f      	cmp	r7, #111	; 0x6f
 800cb6e:	bf0c      	ite	eq
 800cb70:	2308      	moveq	r3, #8
 800cb72:	230a      	movne	r3, #10
 800cb74:	2100      	movs	r1, #0
 800cb76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb7a:	6866      	ldr	r6, [r4, #4]
 800cb7c:	60a6      	str	r6, [r4, #8]
 800cb7e:	2e00      	cmp	r6, #0
 800cb80:	bfa2      	ittt	ge
 800cb82:	6821      	ldrge	r1, [r4, #0]
 800cb84:	f021 0104 	bicge.w	r1, r1, #4
 800cb88:	6021      	strge	r1, [r4, #0]
 800cb8a:	b90d      	cbnz	r5, 800cb90 <_printf_i+0x118>
 800cb8c:	2e00      	cmp	r6, #0
 800cb8e:	d04d      	beq.n	800cc2c <_printf_i+0x1b4>
 800cb90:	4616      	mov	r6, r2
 800cb92:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb96:	fb03 5711 	mls	r7, r3, r1, r5
 800cb9a:	5dc7      	ldrb	r7, [r0, r7]
 800cb9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cba0:	462f      	mov	r7, r5
 800cba2:	42bb      	cmp	r3, r7
 800cba4:	460d      	mov	r5, r1
 800cba6:	d9f4      	bls.n	800cb92 <_printf_i+0x11a>
 800cba8:	2b08      	cmp	r3, #8
 800cbaa:	d10b      	bne.n	800cbc4 <_printf_i+0x14c>
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	07df      	lsls	r7, r3, #31
 800cbb0:	d508      	bpl.n	800cbc4 <_printf_i+0x14c>
 800cbb2:	6923      	ldr	r3, [r4, #16]
 800cbb4:	6861      	ldr	r1, [r4, #4]
 800cbb6:	4299      	cmp	r1, r3
 800cbb8:	bfde      	ittt	le
 800cbba:	2330      	movle	r3, #48	; 0x30
 800cbbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbc4:	1b92      	subs	r2, r2, r6
 800cbc6:	6122      	str	r2, [r4, #16]
 800cbc8:	f8cd a000 	str.w	sl, [sp]
 800cbcc:	464b      	mov	r3, r9
 800cbce:	aa03      	add	r2, sp, #12
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	f7ff fee2 	bl	800c99c <_printf_common>
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d14c      	bne.n	800cc76 <_printf_i+0x1fe>
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	b004      	add	sp, #16
 800cbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe6:	4835      	ldr	r0, [pc, #212]	; (800ccbc <_printf_i+0x244>)
 800cbe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	680e      	ldr	r6, [r1, #0]
 800cbf0:	061f      	lsls	r7, r3, #24
 800cbf2:	f856 5b04 	ldr.w	r5, [r6], #4
 800cbf6:	600e      	str	r6, [r1, #0]
 800cbf8:	d514      	bpl.n	800cc24 <_printf_i+0x1ac>
 800cbfa:	07d9      	lsls	r1, r3, #31
 800cbfc:	bf44      	itt	mi
 800cbfe:	f043 0320 	orrmi.w	r3, r3, #32
 800cc02:	6023      	strmi	r3, [r4, #0]
 800cc04:	b91d      	cbnz	r5, 800cc0e <_printf_i+0x196>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	f023 0320 	bic.w	r3, r3, #32
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	2310      	movs	r3, #16
 800cc10:	e7b0      	b.n	800cb74 <_printf_i+0xfc>
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	f043 0320 	orr.w	r3, r3, #32
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	2378      	movs	r3, #120	; 0x78
 800cc1c:	4828      	ldr	r0, [pc, #160]	; (800ccc0 <_printf_i+0x248>)
 800cc1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc22:	e7e3      	b.n	800cbec <_printf_i+0x174>
 800cc24:	065e      	lsls	r6, r3, #25
 800cc26:	bf48      	it	mi
 800cc28:	b2ad      	uxthmi	r5, r5
 800cc2a:	e7e6      	b.n	800cbfa <_printf_i+0x182>
 800cc2c:	4616      	mov	r6, r2
 800cc2e:	e7bb      	b.n	800cba8 <_printf_i+0x130>
 800cc30:	680b      	ldr	r3, [r1, #0]
 800cc32:	6826      	ldr	r6, [r4, #0]
 800cc34:	6960      	ldr	r0, [r4, #20]
 800cc36:	1d1d      	adds	r5, r3, #4
 800cc38:	600d      	str	r5, [r1, #0]
 800cc3a:	0635      	lsls	r5, r6, #24
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	d501      	bpl.n	800cc44 <_printf_i+0x1cc>
 800cc40:	6018      	str	r0, [r3, #0]
 800cc42:	e002      	b.n	800cc4a <_printf_i+0x1d2>
 800cc44:	0671      	lsls	r1, r6, #25
 800cc46:	d5fb      	bpl.n	800cc40 <_printf_i+0x1c8>
 800cc48:	8018      	strh	r0, [r3, #0]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	6123      	str	r3, [r4, #16]
 800cc4e:	4616      	mov	r6, r2
 800cc50:	e7ba      	b.n	800cbc8 <_printf_i+0x150>
 800cc52:	680b      	ldr	r3, [r1, #0]
 800cc54:	1d1a      	adds	r2, r3, #4
 800cc56:	600a      	str	r2, [r1, #0]
 800cc58:	681e      	ldr	r6, [r3, #0]
 800cc5a:	6862      	ldr	r2, [r4, #4]
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f7f3 fb5e 	bl	8000320 <memchr>
 800cc64:	b108      	cbz	r0, 800cc6a <_printf_i+0x1f2>
 800cc66:	1b80      	subs	r0, r0, r6
 800cc68:	6060      	str	r0, [r4, #4]
 800cc6a:	6863      	ldr	r3, [r4, #4]
 800cc6c:	6123      	str	r3, [r4, #16]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc74:	e7a8      	b.n	800cbc8 <_printf_i+0x150>
 800cc76:	6923      	ldr	r3, [r4, #16]
 800cc78:	4632      	mov	r2, r6
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	47d0      	blx	sl
 800cc80:	3001      	adds	r0, #1
 800cc82:	d0ab      	beq.n	800cbdc <_printf_i+0x164>
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	079b      	lsls	r3, r3, #30
 800cc88:	d413      	bmi.n	800ccb2 <_printf_i+0x23a>
 800cc8a:	68e0      	ldr	r0, [r4, #12]
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	4298      	cmp	r0, r3
 800cc90:	bfb8      	it	lt
 800cc92:	4618      	movlt	r0, r3
 800cc94:	e7a4      	b.n	800cbe0 <_printf_i+0x168>
 800cc96:	2301      	movs	r3, #1
 800cc98:	4632      	mov	r2, r6
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	47d0      	blx	sl
 800cca0:	3001      	adds	r0, #1
 800cca2:	d09b      	beq.n	800cbdc <_printf_i+0x164>
 800cca4:	3501      	adds	r5, #1
 800cca6:	68e3      	ldr	r3, [r4, #12]
 800cca8:	9903      	ldr	r1, [sp, #12]
 800ccaa:	1a5b      	subs	r3, r3, r1
 800ccac:	42ab      	cmp	r3, r5
 800ccae:	dcf2      	bgt.n	800cc96 <_printf_i+0x21e>
 800ccb0:	e7eb      	b.n	800cc8a <_printf_i+0x212>
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	f104 0619 	add.w	r6, r4, #25
 800ccb8:	e7f5      	b.n	800cca6 <_printf_i+0x22e>
 800ccba:	bf00      	nop
 800ccbc:	0800d0a3 	.word	0x0800d0a3
 800ccc0:	0800d0b4 	.word	0x0800d0b4

0800ccc4 <memcpy>:
 800ccc4:	440a      	add	r2, r1
 800ccc6:	4291      	cmp	r1, r2
 800ccc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cccc:	d100      	bne.n	800ccd0 <memcpy+0xc>
 800ccce:	4770      	bx	lr
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccda:	4291      	cmp	r1, r2
 800ccdc:	d1f9      	bne.n	800ccd2 <memcpy+0xe>
 800ccde:	bd10      	pop	{r4, pc}

0800cce0 <memmove>:
 800cce0:	4288      	cmp	r0, r1
 800cce2:	b510      	push	{r4, lr}
 800cce4:	eb01 0402 	add.w	r4, r1, r2
 800cce8:	d902      	bls.n	800ccf0 <memmove+0x10>
 800ccea:	4284      	cmp	r4, r0
 800ccec:	4623      	mov	r3, r4
 800ccee:	d807      	bhi.n	800cd00 <memmove+0x20>
 800ccf0:	1e43      	subs	r3, r0, #1
 800ccf2:	42a1      	cmp	r1, r4
 800ccf4:	d008      	beq.n	800cd08 <memmove+0x28>
 800ccf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccfe:	e7f8      	b.n	800ccf2 <memmove+0x12>
 800cd00:	4402      	add	r2, r0
 800cd02:	4601      	mov	r1, r0
 800cd04:	428a      	cmp	r2, r1
 800cd06:	d100      	bne.n	800cd0a <memmove+0x2a>
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd12:	e7f7      	b.n	800cd04 <memmove+0x24>

0800cd14 <_free_r>:
 800cd14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd16:	2900      	cmp	r1, #0
 800cd18:	d048      	beq.n	800cdac <_free_r+0x98>
 800cd1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd1e:	9001      	str	r0, [sp, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f1a1 0404 	sub.w	r4, r1, #4
 800cd26:	bfb8      	it	lt
 800cd28:	18e4      	addlt	r4, r4, r3
 800cd2a:	f000 f8d3 	bl	800ced4 <__malloc_lock>
 800cd2e:	4a20      	ldr	r2, [pc, #128]	; (800cdb0 <_free_r+0x9c>)
 800cd30:	9801      	ldr	r0, [sp, #4]
 800cd32:	6813      	ldr	r3, [r2, #0]
 800cd34:	4615      	mov	r5, r2
 800cd36:	b933      	cbnz	r3, 800cd46 <_free_r+0x32>
 800cd38:	6063      	str	r3, [r4, #4]
 800cd3a:	6014      	str	r4, [r2, #0]
 800cd3c:	b003      	add	sp, #12
 800cd3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd42:	f000 b8cd 	b.w	800cee0 <__malloc_unlock>
 800cd46:	42a3      	cmp	r3, r4
 800cd48:	d90b      	bls.n	800cd62 <_free_r+0x4e>
 800cd4a:	6821      	ldr	r1, [r4, #0]
 800cd4c:	1862      	adds	r2, r4, r1
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	bf04      	itt	eq
 800cd52:	681a      	ldreq	r2, [r3, #0]
 800cd54:	685b      	ldreq	r3, [r3, #4]
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	bf04      	itt	eq
 800cd5a:	1852      	addeq	r2, r2, r1
 800cd5c:	6022      	streq	r2, [r4, #0]
 800cd5e:	602c      	str	r4, [r5, #0]
 800cd60:	e7ec      	b.n	800cd3c <_free_r+0x28>
 800cd62:	461a      	mov	r2, r3
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	b10b      	cbz	r3, 800cd6c <_free_r+0x58>
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	d9fa      	bls.n	800cd62 <_free_r+0x4e>
 800cd6c:	6811      	ldr	r1, [r2, #0]
 800cd6e:	1855      	adds	r5, r2, r1
 800cd70:	42a5      	cmp	r5, r4
 800cd72:	d10b      	bne.n	800cd8c <_free_r+0x78>
 800cd74:	6824      	ldr	r4, [r4, #0]
 800cd76:	4421      	add	r1, r4
 800cd78:	1854      	adds	r4, r2, r1
 800cd7a:	42a3      	cmp	r3, r4
 800cd7c:	6011      	str	r1, [r2, #0]
 800cd7e:	d1dd      	bne.n	800cd3c <_free_r+0x28>
 800cd80:	681c      	ldr	r4, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	6053      	str	r3, [r2, #4]
 800cd86:	4421      	add	r1, r4
 800cd88:	6011      	str	r1, [r2, #0]
 800cd8a:	e7d7      	b.n	800cd3c <_free_r+0x28>
 800cd8c:	d902      	bls.n	800cd94 <_free_r+0x80>
 800cd8e:	230c      	movs	r3, #12
 800cd90:	6003      	str	r3, [r0, #0]
 800cd92:	e7d3      	b.n	800cd3c <_free_r+0x28>
 800cd94:	6825      	ldr	r5, [r4, #0]
 800cd96:	1961      	adds	r1, r4, r5
 800cd98:	428b      	cmp	r3, r1
 800cd9a:	bf04      	itt	eq
 800cd9c:	6819      	ldreq	r1, [r3, #0]
 800cd9e:	685b      	ldreq	r3, [r3, #4]
 800cda0:	6063      	str	r3, [r4, #4]
 800cda2:	bf04      	itt	eq
 800cda4:	1949      	addeq	r1, r1, r5
 800cda6:	6021      	streq	r1, [r4, #0]
 800cda8:	6054      	str	r4, [r2, #4]
 800cdaa:	e7c7      	b.n	800cd3c <_free_r+0x28>
 800cdac:	b003      	add	sp, #12
 800cdae:	bd30      	pop	{r4, r5, pc}
 800cdb0:	240021bc 	.word	0x240021bc

0800cdb4 <_malloc_r>:
 800cdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb6:	1ccd      	adds	r5, r1, #3
 800cdb8:	f025 0503 	bic.w	r5, r5, #3
 800cdbc:	3508      	adds	r5, #8
 800cdbe:	2d0c      	cmp	r5, #12
 800cdc0:	bf38      	it	cc
 800cdc2:	250c      	movcc	r5, #12
 800cdc4:	2d00      	cmp	r5, #0
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	db01      	blt.n	800cdce <_malloc_r+0x1a>
 800cdca:	42a9      	cmp	r1, r5
 800cdcc:	d903      	bls.n	800cdd6 <_malloc_r+0x22>
 800cdce:	230c      	movs	r3, #12
 800cdd0:	6033      	str	r3, [r6, #0]
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd6:	f000 f87d 	bl	800ced4 <__malloc_lock>
 800cdda:	4921      	ldr	r1, [pc, #132]	; (800ce60 <_malloc_r+0xac>)
 800cddc:	680a      	ldr	r2, [r1, #0]
 800cdde:	4614      	mov	r4, r2
 800cde0:	b99c      	cbnz	r4, 800ce0a <_malloc_r+0x56>
 800cde2:	4f20      	ldr	r7, [pc, #128]	; (800ce64 <_malloc_r+0xb0>)
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	b923      	cbnz	r3, 800cdf2 <_malloc_r+0x3e>
 800cde8:	4621      	mov	r1, r4
 800cdea:	4630      	mov	r0, r6
 800cdec:	f000 f862 	bl	800ceb4 <_sbrk_r>
 800cdf0:	6038      	str	r0, [r7, #0]
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f000 f85d 	bl	800ceb4 <_sbrk_r>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	d123      	bne.n	800ce46 <_malloc_r+0x92>
 800cdfe:	230c      	movs	r3, #12
 800ce00:	6033      	str	r3, [r6, #0]
 800ce02:	4630      	mov	r0, r6
 800ce04:	f000 f86c 	bl	800cee0 <__malloc_unlock>
 800ce08:	e7e3      	b.n	800cdd2 <_malloc_r+0x1e>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	1b5b      	subs	r3, r3, r5
 800ce0e:	d417      	bmi.n	800ce40 <_malloc_r+0x8c>
 800ce10:	2b0b      	cmp	r3, #11
 800ce12:	d903      	bls.n	800ce1c <_malloc_r+0x68>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	441c      	add	r4, r3
 800ce18:	6025      	str	r5, [r4, #0]
 800ce1a:	e004      	b.n	800ce26 <_malloc_r+0x72>
 800ce1c:	6863      	ldr	r3, [r4, #4]
 800ce1e:	42a2      	cmp	r2, r4
 800ce20:	bf0c      	ite	eq
 800ce22:	600b      	streq	r3, [r1, #0]
 800ce24:	6053      	strne	r3, [r2, #4]
 800ce26:	4630      	mov	r0, r6
 800ce28:	f000 f85a 	bl	800cee0 <__malloc_unlock>
 800ce2c:	f104 000b 	add.w	r0, r4, #11
 800ce30:	1d23      	adds	r3, r4, #4
 800ce32:	f020 0007 	bic.w	r0, r0, #7
 800ce36:	1ac2      	subs	r2, r0, r3
 800ce38:	d0cc      	beq.n	800cdd4 <_malloc_r+0x20>
 800ce3a:	1a1b      	subs	r3, r3, r0
 800ce3c:	50a3      	str	r3, [r4, r2]
 800ce3e:	e7c9      	b.n	800cdd4 <_malloc_r+0x20>
 800ce40:	4622      	mov	r2, r4
 800ce42:	6864      	ldr	r4, [r4, #4]
 800ce44:	e7cc      	b.n	800cde0 <_malloc_r+0x2c>
 800ce46:	1cc4      	adds	r4, r0, #3
 800ce48:	f024 0403 	bic.w	r4, r4, #3
 800ce4c:	42a0      	cmp	r0, r4
 800ce4e:	d0e3      	beq.n	800ce18 <_malloc_r+0x64>
 800ce50:	1a21      	subs	r1, r4, r0
 800ce52:	4630      	mov	r0, r6
 800ce54:	f000 f82e 	bl	800ceb4 <_sbrk_r>
 800ce58:	3001      	adds	r0, #1
 800ce5a:	d1dd      	bne.n	800ce18 <_malloc_r+0x64>
 800ce5c:	e7cf      	b.n	800cdfe <_malloc_r+0x4a>
 800ce5e:	bf00      	nop
 800ce60:	240021bc 	.word	0x240021bc
 800ce64:	240021c0 	.word	0x240021c0

0800ce68 <_realloc_r>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	4614      	mov	r4, r2
 800ce6e:	460e      	mov	r6, r1
 800ce70:	b921      	cbnz	r1, 800ce7c <_realloc_r+0x14>
 800ce72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce76:	4611      	mov	r1, r2
 800ce78:	f7ff bf9c 	b.w	800cdb4 <_malloc_r>
 800ce7c:	b922      	cbnz	r2, 800ce88 <_realloc_r+0x20>
 800ce7e:	f7ff ff49 	bl	800cd14 <_free_r>
 800ce82:	4625      	mov	r5, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce88:	f000 f830 	bl	800ceec <_malloc_usable_size_r>
 800ce8c:	42a0      	cmp	r0, r4
 800ce8e:	d20f      	bcs.n	800ceb0 <_realloc_r+0x48>
 800ce90:	4621      	mov	r1, r4
 800ce92:	4638      	mov	r0, r7
 800ce94:	f7ff ff8e 	bl	800cdb4 <_malloc_r>
 800ce98:	4605      	mov	r5, r0
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d0f2      	beq.n	800ce84 <_realloc_r+0x1c>
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4622      	mov	r2, r4
 800cea2:	f7ff ff0f 	bl	800ccc4 <memcpy>
 800cea6:	4631      	mov	r1, r6
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f7ff ff33 	bl	800cd14 <_free_r>
 800ceae:	e7e9      	b.n	800ce84 <_realloc_r+0x1c>
 800ceb0:	4635      	mov	r5, r6
 800ceb2:	e7e7      	b.n	800ce84 <_realloc_r+0x1c>

0800ceb4 <_sbrk_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d06      	ldr	r5, [pc, #24]	; (800ced0 <_sbrk_r+0x1c>)
 800ceb8:	2300      	movs	r3, #0
 800ceba:	4604      	mov	r4, r0
 800cebc:	4608      	mov	r0, r1
 800cebe:	602b      	str	r3, [r5, #0]
 800cec0:	f7f4 fad8 	bl	8001474 <_sbrk>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d102      	bne.n	800cece <_sbrk_r+0x1a>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	b103      	cbz	r3, 800cece <_sbrk_r+0x1a>
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	24002a70 	.word	0x24002a70

0800ced4 <__malloc_lock>:
 800ced4:	4801      	ldr	r0, [pc, #4]	; (800cedc <__malloc_lock+0x8>)
 800ced6:	f000 b811 	b.w	800cefc <__retarget_lock_acquire_recursive>
 800ceda:	bf00      	nop
 800cedc:	24002a78 	.word	0x24002a78

0800cee0 <__malloc_unlock>:
 800cee0:	4801      	ldr	r0, [pc, #4]	; (800cee8 <__malloc_unlock+0x8>)
 800cee2:	f000 b80c 	b.w	800cefe <__retarget_lock_release_recursive>
 800cee6:	bf00      	nop
 800cee8:	24002a78 	.word	0x24002a78

0800ceec <_malloc_usable_size_r>:
 800ceec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cef0:	1f18      	subs	r0, r3, #4
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	bfbc      	itt	lt
 800cef6:	580b      	ldrlt	r3, [r1, r0]
 800cef8:	18c0      	addlt	r0, r0, r3
 800cefa:	4770      	bx	lr

0800cefc <__retarget_lock_acquire_recursive>:
 800cefc:	4770      	bx	lr

0800cefe <__retarget_lock_release_recursive>:
 800cefe:	4770      	bx	lr

0800cf00 <_init>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	bf00      	nop
 800cf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf06:	bc08      	pop	{r3}
 800cf08:	469e      	mov	lr, r3
 800cf0a:	4770      	bx	lr

0800cf0c <_fini>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	bf00      	nop
 800cf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf12:	bc08      	pop	{r3}
 800cf14:	469e      	mov	lr, r3
 800cf16:	4770      	bx	lr
