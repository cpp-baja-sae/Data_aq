
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf24  0800cf24  0001cf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf2c  0800cf2c  0001cf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cf30  0800cf30  0001cf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800cf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0800cfd0  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0800d030  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d20  2400015c  0800d090  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24006e7c  0800d090  00026e7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d418  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004570  00000000  00000000  0004d5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00051b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00052ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000358b0  00000000  00000000  00054170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c242  00000000  00000000  00089a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014f48c  00000000  00000000  000a5c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f50ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  001f5144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400015c 	.word	0x2400015c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cd7c 	.word	0x0800cd7c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000160 	.word	0x24000160
 800030c:	0800cd7c 	.word	0x0800cd7c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e024      	b.n	8000714 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e01a      	b.n	8000706 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	dd0a      	ble.n	80006ec <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	025a      	lsls	r2, r3, #9
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e009      	b.n	8000700 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	025a      	lsls	r2, r3, #9
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800070c:	dbe0      	blt.n	80006d0 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbd6      	blt.n	80006ca <HalfKBWrite+0x12>
			}

		}

	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HalfKBWrite(wtext,50);
 8000732:	2132      	movs	r1, #50	; 0x32
 8000734:	48a8      	ldr	r0, [pc, #672]	; (80009d8 <main+0x2ac>)
 8000736:	f7ff ffbf 	bl	80006b8 <HalfKBWrite>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800073a:	4ba8      	ldr	r3, [pc, #672]	; (80009dc <main+0x2b0>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d11b      	bne.n	800077e <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000746:	f3bf 8f4f 	dsb	sy
}
 800074a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800074c:	f3bf 8f6f 	isb	sy
}
 8000750:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000752:	4ba2      	ldr	r3, [pc, #648]	; (80009dc <main+0x2b0>)
 8000754:	2200      	movs	r2, #0
 8000756:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800075a:	f3bf 8f4f 	dsb	sy
}
 800075e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000760:	f3bf 8f6f 	isb	sy
}
 8000764:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000766:	4b9d      	ldr	r3, [pc, #628]	; (80009dc <main+0x2b0>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a9c      	ldr	r2, [pc, #624]	; (80009dc <main+0x2b0>)
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000772:	f3bf 8f4f 	dsb	sy
}
 8000776:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000778:	f3bf 8f6f 	isb	sy
}
 800077c:	e000      	b.n	8000780 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800077e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000780:	4b96      	ldr	r3, [pc, #600]	; (80009dc <main+0x2b0>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d138      	bne.n	80007fe <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800078c:	4b93      	ldr	r3, [pc, #588]	; (80009dc <main+0x2b0>)
 800078e:	2200      	movs	r2, #0
 8000790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000794:	f3bf 8f4f 	dsb	sy
}
 8000798:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800079a:	4b90      	ldr	r3, [pc, #576]	; (80009dc <main+0x2b0>)
 800079c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	0b5b      	lsrs	r3, r3, #13
 80007a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007aa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	08db      	lsrs	r3, r3, #3
 80007b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007b4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	015a      	lsls	r2, r3, #5
 80007ba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c4:	4985      	ldr	r1, [pc, #532]	; (80009dc <main+0x2b0>)
 80007c6:	4313      	orrs	r3, r2
 80007c8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1ef      	bne.n	80007b6 <main+0x8a>
    } while(sets-- != 0U);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1e5      	bne.n	80007ac <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 80007e0:	f3bf 8f4f 	dsb	sy
}
 80007e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007e6:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x2b0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a7c      	ldr	r2, [pc, #496]	; (80009dc <main+0x2b0>)
 80007ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	e000      	b.n	8000800 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007fe:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fee4 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f902 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 fa94 	bl	8000d34 <MX_GPIO_Init>
  MX_ETH_Init();
 800080c:	f000 f96e 	bl	8000aec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000810:	f000 f9d8 	bl	8000bc4 <MX_USART3_UART_Init>
  MX_MDMA_Init();
 8000814:	f000 fa2a 	bl	8000c6c <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000818:	f000 f9b4 	bl	8000b84 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800081c:	f008 fe9e 	bl	800955c <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 8000820:	f000 fa1c 	bl	8000c5c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	486d      	ldr	r0, [pc, #436]	; (80009e0 <main+0x2b4>)
 800082a:	f001 fe7f 	bl	800252c <HAL_GPIO_WritePin>
      if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800082e:	2200      	movs	r2, #0
 8000830:	496c      	ldr	r1, [pc, #432]	; (80009e4 <main+0x2b8>)
 8000832:	486d      	ldr	r0, [pc, #436]	; (80009e8 <main+0x2bc>)
 8000834:	f00a fd98 	bl	800b368 <f_mount>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <main+0x118>
      {
          Error_Handler();
 800083e:	f000 fbb3 	bl	8000fa8 <Error_Handler>
 8000842:	e032      	b.n	80008aa <main+0x17e>
      }
      else
      {
          if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4b68      	ldr	r3, [pc, #416]	; (80009ec <main+0x2c0>)
 800084c:	2200      	movs	r2, #0
 800084e:	2107      	movs	r1, #7
 8000850:	4864      	ldr	r0, [pc, #400]	; (80009e4 <main+0x2b8>)
 8000852:	f00b f9ab 	bl	800bbac <f_mkfs>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <main+0x136>
          {
              Error_Handler();
 800085c:	f000 fba4 	bl	8000fa8 <Error_Handler>
 8000860:	e023      	b.n	80008aa <main+0x17e>
          }
          else
          {
              //Open file for writing (Create)
              if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000862:	220a      	movs	r2, #10
 8000864:	4962      	ldr	r1, [pc, #392]	; (80009f0 <main+0x2c4>)
 8000866:	4863      	ldr	r0, [pc, #396]	; (80009f4 <main+0x2c8>)
 8000868:	f00a fdc4 	bl	800b3f4 <f_open>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <main+0x14c>
              {
                  Error_Handler();
 8000872:	f000 fb99 	bl	8000fa8 <Error_Handler>
 8000876:	e018      	b.n	80008aa <main+0x17e>
              }
              else
              {
                  //Write to the text file
                  res = f_write(&SDFile, wtext, chunk_size, (void *)&byteswritten);
 8000878:	4b5f      	ldr	r3, [pc, #380]	; (80009f8 <main+0x2cc>)
 800087a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800087e:	4956      	ldr	r1, [pc, #344]	; (80009d8 <main+0x2ac>)
 8000880:	485c      	ldr	r0, [pc, #368]	; (80009f4 <main+0x2c8>)
 8000882:	f00a ff75 	bl	800b770 <f_write>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <main+0x2d0>)
 800088c:	701a      	strb	r2, [r3, #0]
                  if((byteswritten == 0) || (res != FR_OK))
 800088e:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <main+0x2cc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <main+0x172>
 8000896:	4b59      	ldr	r3, [pc, #356]	; (80009fc <main+0x2d0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <main+0x178>
                  {
                      Error_Handler();
 800089e:	f000 fb83 	bl	8000fa8 <Error_Handler>
 80008a2:	e002      	b.n	80008aa <main+0x17e>
                  }
                  else
                  {
                      f_close(&SDFile);
 80008a4:	4853      	ldr	r0, [pc, #332]	; (80009f4 <main+0x2c8>)
 80008a6:	f00b f956 	bl	800bb56 <f_close>
                  }
              }
          }
      }

      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	484c      	ldr	r0, [pc, #304]	; (80009e0 <main+0x2b4>)
 80008b0:	f001 fe3c 	bl	800252c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80008b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b8:	4849      	ldr	r0, [pc, #292]	; (80009e0 <main+0x2b4>)
 80008ba:	f001 fe50 	bl	800255e <HAL_GPIO_TogglePin>
		WriteTime();
 80008be:	f000 fb35 	bl	8000f2c <WriteTime>

 int looper = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
      while (1)
  {
    	  looper++;
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2102      	movs	r1, #2
 80008d0:	484b      	ldr	r0, [pc, #300]	; (8000a00 <main+0x2d4>)
 80008d2:	f001 fe2b 	bl	800252c <HAL_GPIO_WritePin>

	for(int a = 0 ; a<100;a++){
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	e02a      	b.n	8000932 <main+0x206>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80008dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e0:	483f      	ldr	r0, [pc, #252]	; (80009e0 <main+0x2b4>)
 80008e2:	f001 fe3c 	bl	800255e <HAL_GPIO_TogglePin>
	  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 80008e6:	2232      	movs	r2, #50	; 0x32
 80008e8:	4941      	ldr	r1, [pc, #260]	; (80009f0 <main+0x2c4>)
 80008ea:	4842      	ldr	r0, [pc, #264]	; (80009f4 <main+0x2c8>)
 80008ec:	f00a fd82 	bl	800b3f4 <f_open>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <main+0x1ce>
		{
		  Error_Handler();
 80008f6:	f000 fb57 	bl	8000fa8 <Error_Handler>
		}
	  	//sprintf(wtext, "%d",a);
		res = f_write(&SDFile, wtext, chunk_size, (void *)&byteswritten);
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <main+0x2cc>)
 80008fc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8000900:	4935      	ldr	r1, [pc, #212]	; (80009d8 <main+0x2ac>)
 8000902:	483c      	ldr	r0, [pc, #240]	; (80009f4 <main+0x2c8>)
 8000904:	f00a ff34 	bl	800b770 <f_write>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <main+0x2d0>)
 800090e:	701a      	strb	r2, [r3, #0]
		if((byteswritten == 0) || (res != FR_OK))
 8000910:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <main+0x2cc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <main+0x1f4>
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <main+0x2d0>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <main+0x1fa>
		{
			Error_Handler();
 8000920:	f000 fb42 	bl	8000fa8 <Error_Handler>
 8000924:	e002      	b.n	800092c <main+0x200>
		}
		else
		{
			f_close(&SDFile);
 8000926:	4833      	ldr	r0, [pc, #204]	; (80009f4 <main+0x2c8>)
 8000928:	f00b f915 	bl	800bb56 <f_close>
	for(int a = 0 ; a<100;a++){
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	3301      	adds	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	2b63      	cmp	r3, #99	; 0x63
 8000936:	ddd1      	ble.n	80008dc <main+0x1b0>
		}
	}

	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093c:	4828      	ldr	r0, [pc, #160]	; (80009e0 <main+0x2b4>)
 800093e:	f001 fe0e 	bl	800255e <HAL_GPIO_TogglePin>
		  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000942:	2232      	movs	r2, #50	; 0x32
 8000944:	492a      	ldr	r1, [pc, #168]	; (80009f0 <main+0x2c4>)
 8000946:	482b      	ldr	r0, [pc, #172]	; (80009f4 <main+0x2c8>)
 8000948:	f00a fd54 	bl	800b3f4 <f_open>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <main+0x22a>
			{
			  Error_Handler();
 8000952:	f000 fb29 	bl	8000fa8 <Error_Handler>
			}
		  	sprintf(text, "\n");
 8000956:	492b      	ldr	r1, [pc, #172]	; (8000a04 <main+0x2d8>)
 8000958:	482b      	ldr	r0, [pc, #172]	; (8000a08 <main+0x2dc>)
 800095a:	f00b fde1 	bl	800c520 <siprintf>
			res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 800095e:	482a      	ldr	r0, [pc, #168]	; (8000a08 <main+0x2dc>)
 8000960:	f7ff fcd6 	bl	8000310 <strlen>
 8000964:	4602      	mov	r2, r0
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <main+0x2cc>)
 8000968:	4927      	ldr	r1, [pc, #156]	; (8000a08 <main+0x2dc>)
 800096a:	4822      	ldr	r0, [pc, #136]	; (80009f4 <main+0x2c8>)
 800096c:	f00a ff00 	bl	800b770 <f_write>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <main+0x2d0>)
 8000976:	701a      	strb	r2, [r3, #0]
			if((byteswritten == 0) || (res != FR_OK))
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <main+0x2cc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <main+0x25c>
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <main+0x2d0>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <main+0x262>
			{
				Error_Handler();
 8000988:	f000 fb0e 	bl	8000fa8 <Error_Handler>
 800098c:	e002      	b.n	8000994 <main+0x268>
			}
			else
			{
				f_close(&SDFile);
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <main+0x2c8>)
 8000990:	f00b f8e1 	bl	800bb56 <f_close>
			}

	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2102      	movs	r1, #2
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <main+0x2d4>)
 800099a:	f001 fdc7 	bl	800252c <HAL_GPIO_WritePin>
	if(looper == 10){
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d190      	bne.n	80008c6 <main+0x19a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <main+0x2b4>)
 80009aa:	f001 fdd8 	bl	800255e <HAL_GPIO_TogglePin>
		WriteTime();
 80009ae:	f000 fabd 	bl	8000f2c <WriteTime>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2101      	movs	r1, #1
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <main+0x2b4>)
 80009b8:	f001 fdb8 	bl	800252c <HAL_GPIO_WritePin>
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <main+0x2bc>)
 80009c2:	f00a fcd1 	bl	800b368 <f_mount>
		while(1){
			HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	; 0x64
 80009c8:	f000 fe92 	bl	80016f0 <HAL_Delay>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <main+0x2b4>)
 80009d2:	f001 fdc4 	bl	800255e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80009d6:	e7f6      	b.n	80009c6 <main+0x29a>
 80009d8:	24000178 	.word	0x24000178
 80009dc:	e000ed00 	.word	0xe000ed00
 80009e0:	58020400 	.word	0x58020400
 80009e4:	24006a08 	.word	0x24006a08
 80009e8:	24006c3c 	.word	0x24006c3c
 80009ec:	240066d4 	.word	0x240066d4
 80009f0:	0800cd94 	.word	0x0800cd94
 80009f4:	24006a0c 	.word	0x24006a0c
 80009f8:	24006650 	.word	0x24006650
 80009fc:	240068d4 	.word	0x240068d4
 8000a00:	58021000 	.word	0x58021000
 8000a04:	0800cda0 	.word	0x0800cda0
 8000a08:	24000000 	.word	0x24000000

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00b fd78 	bl	800c510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00b fd72 	bl	800c510 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f002 f83d 	bl	8002aac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <SystemClock_Config+0xdc>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <SystemClock_Config+0xdc>)
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemClock_Config+0xdc>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4e:	bf00      	nop
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <SystemClock_Config+0xdc>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5c:	d1f8      	bne.n	8000a50 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2321      	movs	r3, #33	; 0x21
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a78:	f240 1313 	movw	r3, #275	; 0x113
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 f840 	bl	8002b20 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fa7f 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2103      	movs	r1, #3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fbd1 	bl	8003278 <HAL_RCC_ClockConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000adc:	f000 fa64 	bl	8000fa8 <Error_Handler>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3770      	adds	r7, #112	; 0x70
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58024800 	.word	0x58024800

08000aec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_ETH_Init+0x80>)
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <MX_ETH_Init+0x84>)
 8000af4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_ETH_Init+0x88>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_ETH_Init+0x88>)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_ETH_Init+0x88>)
 8000b04:	22e1      	movs	r2, #225	; 0xe1
 8000b06:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_ETH_Init+0x88>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_ETH_Init+0x88>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_ETH_Init+0x88>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_ETH_Init+0x80>)
 8000b1c:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_ETH_Init+0x88>)
 8000b1e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_ETH_Init+0x80>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_ETH_Init+0x80>)
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000b2a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_ETH_Init+0x80>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_ETH_Init+0x90>)
 8000b30:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_ETH_Init+0x80>)
 8000b34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b38:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_ETH_Init+0x80>)
 8000b3c:	f000 ff20 	bl	8001980 <HAL_ETH_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b46:	f000 fa2f 	bl	8000fa8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b4a:	2234      	movs	r2, #52	; 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <MX_ETH_Init+0x94>)
 8000b50:	f00b fcde 	bl	800c510 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_ETH_Init+0x94>)
 8000b56:	2221      	movs	r2, #33	; 0x21
 8000b58:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_ETH_Init+0x94>)
 8000b5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b60:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_ETH_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	24006944 	.word	0x24006944
 8000b70:	40028000 	.word	0x40028000
 8000b74:	24006578 	.word	0x24006578
 8000b78:	240000fc 	.word	0x240000fc
 8000b7c:	2400009c 	.word	0x2400009c
 8000b80:	240069cc 	.word	0x240069cc

08000b84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SDMMC1_SD_Init+0x38>)
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_SDMMC1_SD_Init+0x38>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SDMMC1_SD_Init+0x38>)
 8000b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_SDMMC1_SD_Init+0x38>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <MX_SDMMC1_SD_Init+0x38>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <MX_SDMMC1_SD_Init+0x38>)
 8000bac:	2205      	movs	r2, #5
 8000bae:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	24006654 	.word	0x24006654
 8000bc0:	52007000 	.word	0x52007000

08000bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_USART3_UART_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c0e:	f006 fd75 	bl	80076fc <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 f9c6 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c20:	f007 fe08 	bl	8008834 <HAL_UARTEx_SetTxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2a:	f000 f9bd 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c32:	f007 fe3d 	bl	80088b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c3c:	f000 f9b4 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c42:	f007 fdbe 	bl	80087c2 <HAL_UARTEx_DisableFifoMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 f9ac 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	240065c0 	.word	0x240065c0
 8000c58:	40004800 	.word	0x40004800

08000c5c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_MDMA_Init+0xbc>)
 8000c74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c78:	4a2b      	ldr	r2, [pc, #172]	; (8000d28 <MX_MDMA_Init+0xbc>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_MDMA_Init+0xbc>)
 8000c84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000c92:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <MX_MDMA_Init+0xc4>)
 8000c94:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000c98:	221d      	movs	r2, #29
 8000c9a:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000cee:	f001 fc50 	bl	8002592 <HAL_MDMA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000cf8:	f000 f956 	bl	8000fa8 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	480a      	ldr	r0, [pc, #40]	; (8000d2c <MX_MDMA_Init+0xc0>)
 8000d02:	f001 fc92 	bl	800262a <HAL_MDMA_ConfigPostRequestMask>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000d0c:	f000 f94c 	bl	8000fa8 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	207a      	movs	r0, #122	; 0x7a
 8000d16:	f000 fdfe 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d1a:	207a      	movs	r0, #122	; 0x7a
 8000d1c:	f000 fe15 	bl	800194a <HAL_NVIC_EnableIRQ>

}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	240068d8 	.word	0x240068d8
 8000d30:	52000040 	.word	0x52000040

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b71      	ldr	r3, [pc, #452]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a6f      	ldr	r2, [pc, #444]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b6d      	ldr	r3, [pc, #436]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d68:	4b69      	ldr	r3, [pc, #420]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a68      	ldr	r2, [pc, #416]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b65      	ldr	r3, [pc, #404]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a59      	ldr	r2, [pc, #356]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x1dc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e22:	483c      	ldr	r0, [pc, #240]	; (8000f14 <MX_GPIO_Init+0x1e0>)
 8000e24:	f001 fb82 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2e:	483a      	ldr	r0, [pc, #232]	; (8000f18 <MX_GPIO_Init+0x1e4>)
 8000e30:	f001 fb7c 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2102      	movs	r1, #2
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <MX_GPIO_Init+0x1e8>)
 8000e3a:	f001 fb77 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <MX_GPIO_Init+0x1ec>)
 8000e54:	f001 f9aa 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4828      	ldr	r0, [pc, #160]	; (8000f14 <MX_GPIO_Init+0x1e0>)
 8000e72:	f001 f99b 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <MX_GPIO_Init+0x1e4>)
 8000e90:	f001 f98c 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481e      	ldr	r0, [pc, #120]	; (8000f24 <MX_GPIO_Init+0x1f0>)
 8000eaa:	f001 f97f 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <MX_GPIO_Init+0x1f4>)
 8000ec4:	f001 f972 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000eda:	230a      	movs	r3, #10
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <MX_GPIO_Init+0x1f4>)
 8000ee6:	f001 f961 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_GPIO_Init+0x1e8>)
 8000f02:	f001 f953 	bl	80021ac <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3730      	adds	r7, #48	; 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020400 	.word	0x58020400
 8000f18:	58020c00 	.word	0x58020c00
 8000f1c:	58021000 	.word	0x58021000
 8000f20:	58020800 	.word	0x58020800
 8000f24:	58021800 	.word	0x58021800
 8000f28:	58020000 	.word	0x58020000

08000f2c <WriteTime>:

/* USER CODE BEGIN 4 */
void WriteTime()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000f30:	2232      	movs	r2, #50	; 0x32
 8000f32:	4917      	ldr	r1, [pc, #92]	; (8000f90 <WriteTime+0x64>)
 8000f34:	4817      	ldr	r0, [pc, #92]	; (8000f94 <WriteTime+0x68>)
 8000f36:	f00a fa5d 	bl	800b3f4 <f_open>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <WriteTime+0x18>
	{
		Error_Handler();
 8000f40:	f000 f832 	bl	8000fa8 <Error_Handler>
	}
		sprintf(text, "\n#######################%u\n",HAL_GetTick());
 8000f44:	f000 fbc8 	bl	80016d8 <HAL_GetTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4912      	ldr	r1, [pc, #72]	; (8000f98 <WriteTime+0x6c>)
 8000f4e:	4813      	ldr	r0, [pc, #76]	; (8000f9c <WriteTime+0x70>)
 8000f50:	f00b fae6 	bl	800c520 <siprintf>
		res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000f54:	4811      	ldr	r0, [pc, #68]	; (8000f9c <WriteTime+0x70>)
 8000f56:	f7ff f9db 	bl	8000310 <strlen>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <WriteTime+0x74>)
 8000f5e:	490f      	ldr	r1, [pc, #60]	; (8000f9c <WriteTime+0x70>)
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <WriteTime+0x68>)
 8000f62:	f00a fc05 	bl	800b770 <f_write>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <WriteTime+0x78>)
 8000f6c:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <WriteTime+0x74>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <WriteTime+0x52>
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <WriteTime+0x78>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <WriteTime+0x58>
	{
		Error_Handler();
 8000f7e:	f000 f813 	bl	8000fa8 <Error_Handler>
 8000f82:	e003      	b.n	8000f8c <WriteTime+0x60>
	}
	else
	{
		f_close(&SDFile);
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <WriteTime+0x68>)
 8000f86:	f00a fde6 	bl	800bb56 <f_close>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800cd94 	.word	0x0800cd94
 8000f94:	24006a0c 	.word	0x24006a0c
 8000f98:	0800cda4 	.word	0x0800cda4
 8000f9c:	24000000 	.word	0x24000000
 8000fa0:	24006650 	.word	0x24006650
 8000fa4:	240068d4 	.word	0x240068d4

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <Error_Handler+0x2c>)
 8000fb2:	f001 fabb 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <Error_Handler+0x30>)
 8000fbc:	f001 fab6 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <Error_Handler+0x2c>)
 8000fc8:	f001 fab0 	bl	800252c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x28>
 8000fd2:	bf00      	nop
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	58021000 	.word	0x58021000

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x30>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x30>)
 8000ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	58024400 	.word	0x58024400

08001010 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a59      	ldr	r2, [pc, #356]	; (8001194 <HAL_ETH_MspInit+0x184>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 80ab 	bne.w	800118a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103a:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_ETH_MspInit+0x188>)
 800103c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001044:	4b54      	ldr	r3, [pc, #336]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001052:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001058:	4a4f      	ldr	r2, [pc, #316]	; (8001198 <HAL_ETH_MspInit+0x188>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001062:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001076:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a40      	ldr	r2, [pc, #256]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001106:	2332      	movs	r3, #50	; 0x32
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001116:	230b      	movs	r3, #11
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	481e      	ldr	r0, [pc, #120]	; (800119c <HAL_ETH_MspInit+0x18c>)
 8001122:	f001 f843 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001126:	2386      	movs	r3, #134	; 0x86
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001136:	230b      	movs	r3, #11
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4817      	ldr	r0, [pc, #92]	; (80011a0 <HAL_ETH_MspInit+0x190>)
 8001142:	f001 f833 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001158:	230b      	movs	r3, #11
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <HAL_ETH_MspInit+0x194>)
 8001164:	f001 f822 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001168:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117a:	230b      	movs	r3, #11
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <HAL_ETH_MspInit+0x198>)
 8001186:	f001 f811 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40028000 	.word	0x40028000
 8001198:	58024400 	.word	0x58024400
 800119c:	58020800 	.word	0x58020800
 80011a0:	58020000 	.word	0x58020000
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58021800 	.word	0x58021800

080011ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0b8      	sub	sp, #224	; 0xe0
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	22b4      	movs	r2, #180	; 0xb4
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b f99f 	bl	800c510 <memset>
  if(hsd->Instance==SDMMC1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <HAL_SD_MspInit+0x118>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d16e      	bne.n	80012ba <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fbd0 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 80011f6:	f7ff fed7 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 80011fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001200:	4a31      	ldr	r2, [pc, #196]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 8001202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001206:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 800120c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_SD_MspInit+0x11c>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001254:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800126e:	230c      	movs	r3, #12
 8001270:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001278:	4619      	mov	r1, r3
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <HAL_SD_MspInit+0x120>)
 800127c:	f000 ff96 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001280:	2304      	movs	r3, #4
 8001282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001298:	230c      	movs	r3, #12
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a2:	4619      	mov	r1, r3
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <HAL_SD_MspInit+0x124>)
 80012a6:	f000 ff81 	bl	80021ac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2031      	movs	r0, #49	; 0x31
 80012b0:	f000 fb31 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012b4:	2031      	movs	r0, #49	; 0x31
 80012b6:	f000 fb48 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	37e0      	adds	r7, #224	; 0xe0
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	52007000 	.word	0x52007000
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020800 	.word	0x58020800
 80012d0:	58020c00 	.word	0x58020c00

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0b6      	sub	sp, #216	; 0xd8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	22b4      	movs	r2, #180	; 0xb4
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00b f90b 	bl	800c510 <memset>
  if(huart->Instance==USART3)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a25      	ldr	r2, [pc, #148]	; (8001394 <HAL_UART_MspInit+0xc0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d142      	bne.n	800138a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001304:	2302      	movs	r3, #2
 8001306:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fb3c 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800131e:	f7ff fe43 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0xc4>)
 800132a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800135e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001378:	2307      	movs	r3, #7
 800137a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_UART_MspInit+0xc8>)
 8001386:	f000 ff11 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	37d8      	adds	r7, #216	; 0xd8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40004800 	.word	0x40004800
 8001398:	58024400 	.word	0x58024400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f960 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <SDMMC1_IRQHandler+0x10>)
 80013fa:	f004 ff8d 	bl	8006318 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24006654 	.word	0x24006654

08001408 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <MDMA_IRQHandler+0x10>)
 800140e:	f001 f95f 	bl	80026d0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240068d8 	.word	0x240068d8

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f00b f836 	bl	800c4bc <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	24050000 	.word	0x24050000
 800147c:	00000800 	.word	0x00000800
 8001480:	24006580 	.word	0x24006580
 8001484:	24006e80 	.word	0x24006e80

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <SystemInit+0xd0>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <SystemInit+0xd0>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <SystemInit+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d807      	bhi.n	80014b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <SystemInit+0xd4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <SystemInit+0xd4>)
 80014b2:	f043 0307 	orr.w	r3, r3, #7
 80014b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <SystemInit+0xd8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a28      	ldr	r2, [pc, #160]	; (8001560 <SystemInit+0xd8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <SystemInit+0xd8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <SystemInit+0xd8>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4924      	ldr	r1, [pc, #144]	; (8001560 <SystemInit+0xd8>)
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <SystemInit+0xdc>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <SystemInit+0xd4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <SystemInit+0xd4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 030f 	bic.w	r3, r3, #15
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <SystemInit+0xd4>)
 80014ec:	f043 0307 	orr.w	r3, r3, #7
 80014f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <SystemInit+0xd8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <SystemInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <SystemInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <SystemInit+0xd8>)
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <SystemInit+0xe0>)
 8001508:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <SystemInit+0xd8>)
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <SystemInit+0xe4>)
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <SystemInit+0xd8>)
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <SystemInit+0xe8>)
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SystemInit+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <SystemInit+0xd8>)
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <SystemInit+0xe8>)
 8001520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <SystemInit+0xd8>)
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <SystemInit+0xe8>)
 800152c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <SystemInit+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <SystemInit+0xd8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <SystemInit+0xd8>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <SystemInit+0xd8>)
 8001542:	2200      	movs	r2, #0
 8001544:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <SystemInit+0xec>)
 8001548:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800154c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	52002000 	.word	0x52002000
 8001560:	58024400 	.word	0x58024400
 8001564:	eaf6ed7f 	.word	0xeaf6ed7f
 8001568:	02020200 	.word	0x02020200
 800156c:	01ff0000 	.word	0x01ff0000
 8001570:	01010280 	.word	0x01010280
 8001574:	52004000 	.word	0x52004000

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800157c:	f7ff ff84 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f00a ff8f 	bl	800c4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f8bf 	bl	800072c <main>
  bx  lr
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b8:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80015bc:	0800cf34 	.word	0x0800cf34
  ldr r2, =_sbss
 80015c0:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 80015c4:	24006e7c 	.word	0x24006e7c

080015c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC3_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 f994 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d8:	f002 f804 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_Init+0x68>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	4913      	ldr	r1, [pc, #76]	; (8001638 <HAL_Init+0x6c>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_Init+0x68>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_Init+0x6c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_Init+0x70>)
 800160e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_Init+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001616:	2000      	movs	r0, #0
 8001618:	f000 f814 	bl	8001644 <HAL_InitTick>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e002      	b.n	800162c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001626:	f7ff fcd9 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58024400 	.word	0x58024400
 8001638:	0800ce04 	.word	0x0800ce04
 800163c:	2400002c 	.word	0x2400002c
 8001640:	24000028 	.word	0x24000028

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_InitTick+0x60>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e021      	b.n	800169c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_InitTick+0x64>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_InitTick+0x60>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f979 	bl	8001966 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f943 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x68>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	24000034 	.word	0x24000034
 80016a8:	24000028 	.word	0x24000028
 80016ac:	24000030 	.word	0x24000030

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	24000034 	.word	0x24000034
 80016d4:	24006a00 	.word	0x24006a00

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	24006a00 	.word	0x24006a00

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	24000034 	.word	0x24000034

08001738 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	58000400 	.word	0x58000400

08001760 <__NVIC_SetPriorityGrouping>:
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	4313      	orrs	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0000 	.word	0x05fa0000

080017a8 <__NVIC_GetPriorityGrouping>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff40 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff33 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa4 	bl	80018bc <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0c6      	b.n	8001b20 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fb38 	bl	8001010 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2223      	movs	r2, #35	; 0x23
 80019a4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <HAL_ETH_Init+0x1a8>)
 80019a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ac:	4a5e      	ldr	r2, [pc, #376]	; (8001b28 <HAL_ETH_Init+0x1a8>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019b6:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <HAL_ETH_Init+0x1a8>)
 80019b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7a1b      	ldrb	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d103      	bne.n	80019d4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff feb3 	bl	8001738 <HAL_SYSCFG_ETHInterfaceSelect>
 80019d2:	e003      	b.n	80019dc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80019d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019d8:	f7ff feae 	bl	8001738 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f4:	f7ff fe70 	bl	80016d8 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019fa:	e00f      	b.n	8001a1c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80019fc:	f7ff fe6c 	bl	80016d8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a0a:	d907      	bls.n	8001a1c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	22e0      	movs	r2, #224	; 0xe0
 8001a16:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e081      	b.n	8001b20 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e6      	bne.n	80019fc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fac0 	bl	8001fb4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a34:	f001 ff50 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_ETH_Init+0x1ac>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9a      	lsrs	r2, r3, #18
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3a01      	subs	r2, #1
 8001a48:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fa13 	bl	8001e78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a68:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a6c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	22e0      	movs	r2, #224	; 0xe0
 8001a84:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e04a      	b.n	8001b20 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a92:	4413      	add	r3, r2
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_ETH_Init+0x1b0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6952      	ldr	r2, [r2, #20]
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	6809      	ldr	r1, [r1, #0]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aaa:	440b      	add	r3, r1
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fad8 	bl	8002064 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fb1c 	bl	80020f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	3305      	adds	r3, #5
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	021a      	lsls	r2, r3, #8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	3303      	adds	r3, #3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	061a      	lsls	r2, r3, #24
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	3301      	adds	r3, #1
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001af8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b06:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2210      	movs	r2, #16
 8001b16:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	ffff8001 	.word	0xffff8001

08001b34 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b46:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	791b      	ldrb	r3, [r3, #4]
 8001b4c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b4e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7b1b      	ldrb	r3, [r3, #12]
 8001b54:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b56:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	7b5b      	ldrb	r3, [r3, #13]
 8001b5c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b5e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	7b9b      	ldrb	r3, [r3, #14]
 8001b64:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7bdb      	ldrb	r3, [r3, #15]
 8001b6c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b6e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	7c12      	ldrb	r2, [r2, #16]
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	d102      	bne.n	8001b7e <ETH_SetMACConfig+0x4a>
 8001b78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b7c:	e000      	b.n	8001b80 <ETH_SetMACConfig+0x4c>
 8001b7e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b80:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	7c52      	ldrb	r2, [r2, #17]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d102      	bne.n	8001b90 <ETH_SetMACConfig+0x5c>
 8001b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8e:	e000      	b.n	8001b92 <ETH_SetMACConfig+0x5e>
 8001b90:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b92:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7c9b      	ldrb	r3, [r3, #18]
 8001b98:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b9a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ba0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001ba6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7f1b      	ldrb	r3, [r3, #28]
 8001bac:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001bae:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7f5b      	ldrb	r3, [r3, #29]
 8001bb4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bb6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	7f92      	ldrb	r2, [r2, #30]
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d102      	bne.n	8001bc6 <ETH_SetMACConfig+0x92>
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	e000      	b.n	8001bc8 <ETH_SetMACConfig+0x94>
 8001bc6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bc8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	7fdb      	ldrb	r3, [r3, #31]
 8001bce:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bd0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0xae>
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0xb0>
 8001be2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001be4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001bea:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bf2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001bf4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <ETH_SetMACConfig+0x22c>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c20:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c2a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c32:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c34:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d102      	bne.n	8001c46 <ETH_SetMACConfig+0x112>
 8001c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0x114>
 8001c46:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c48:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <ETH_SetMACConfig+0x230>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <ETH_SetMACConfig+0x234>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	430b      	orrs	r3, r1
 8001c88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c96:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d101      	bne.n	8001ca6 <ETH_SetMACConfig+0x172>
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	e000      	b.n	8001ca8 <ETH_SetMACConfig+0x174>
 8001ca6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ca8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001cd0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001cd8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f023 0103 	bic.w	r1, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001cfe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d101      	bne.n	8001d22 <ETH_SetMACConfig+0x1ee>
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	e000      	b.n	8001d24 <ETH_SetMACConfig+0x1f0>
 8001d22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d24:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d2e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	00048083 	.word	0x00048083
 8001d64:	c0f88000 	.word	0xc0f88000
 8001d68:	fffffef0 	.word	0xfffffef0

08001d6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <ETH_SetDMAConfig+0xf8>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	6809      	ldr	r1, [r1, #0]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001d92:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d9e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	7b1b      	ldrb	r3, [r3, #12]
 8001da4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f241 0304 	movw	r3, #4100	; 0x1004
 8001db2:	4413      	add	r3, r2
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <ETH_SetDMAConfig+0xfc>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dc6:	440b      	add	r3, r1
 8001dc8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7b5b      	ldrb	r3, [r3, #13]
 8001dce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <ETH_SetDMAConfig+0x100>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001df2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	7d1b      	ldrb	r3, [r3, #20]
 8001dfc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dfe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7f5b      	ldrb	r3, [r3, #29]
 8001e04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e12:	4413      	add	r3, r2
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <ETH_SetDMAConfig+0x104>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e26:	440b      	add	r3, r1
 8001e28:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7f1b      	ldrb	r3, [r3, #28]
 8001e2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e40:	4413      	add	r3, r2
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <ETH_SetDMAConfig+0x108>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6811      	ldr	r1, [r2, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e54:	440b      	add	r3, r1
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	ffff87fd 	.word	0xffff87fd
 8001e68:	ffff2ffe 	.word	0xffff2ffe
 8001e6c:	fffec000 	.word	0xfffec000
 8001e70:	ffc0efef 	.word	0xffc0efef
 8001e74:	7fc0ffff 	.word	0x7fc0ffff

08001e78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0a4      	sub	sp, #144	; 0x90
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e86:	2300      	movs	r3, #0
 8001e88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ed0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f10:	2320      	movs	r3, #32
 8001f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f52:	2300      	movs	r3, #0
 8001f54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fde6 	bl	8001b34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001f98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fee1 	bl	8001d6c <ETH_SetDMAConfig>
}
 8001faa:	bf00      	nop
 8001fac:	3790      	adds	r7, #144	; 0x90
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fce:	f001 fc83 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8001fd2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d908      	bls.n	8001fee <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d804      	bhi.n	8001fee <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e027      	b.n	800203e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d908      	bls.n	8002008 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d204      	bcs.n	8002008 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e01a      	b.n	800203e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d303      	bcc.n	8002018 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d911      	bls.n	800203c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d908      	bls.n	8002032 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d804      	bhi.n	8002032 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e005      	b.n	800203e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e000      	b.n	800203e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800203c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	01312cff 	.word	0x01312cff
 8002054:	02160ebf 	.word	0x02160ebf
 8002058:	03938700 	.word	0x03938700
 800205c:	05f5e0ff 	.word	0x05f5e0ff
 8002060:	08f0d17f 	.word	0x08f0d17f

08002064 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e01d      	b.n	80020ae <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	3206      	adds	r2, #6
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d9de      	bls.n	8002072 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f241 132c 	movw	r3, #4396	; 0x112c
 80020c2:	4413      	add	r3, r2
 80020c4:	2203      	movs	r2, #3
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68d9      	ldr	r1, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f241 1314 	movw	r3, #4372	; 0x1114
 80020d4:	4413      	add	r3, r2
 80020d6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80020e4:	601a      	str	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e024      	b.n	800214a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3310      	adds	r3, #16
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d9d7      	bls.n	8002100 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f241 1330 	movw	r3, #4400	; 0x1130
 8002176:	4413      	add	r3, r2
 8002178:	2203      	movs	r2, #3
 800217a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6919      	ldr	r1, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	f241 131c 	movw	r3, #4380	; 0x111c
 8002188:	4413      	add	r3, r2
 800218a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	f241 1328 	movw	r3, #4392	; 0x1128
 800219c:	4413      	add	r3, r2
 800219e:	6019      	str	r1, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021ba:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <HAL_GPIO_Init+0x228>)
 80021bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021be:	e18c      	b.n	80024da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 817e 	beq.w	80024d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d005      	beq.n	80021f0 <HAL_GPIO_Init+0x44>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d130      	bne.n	8002252 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002226:	2201      	movs	r2, #1
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 0201 	and.w	r2, r3, #1
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b03      	cmp	r3, #3
 800225c:	d017      	beq.n	800228e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d123      	bne.n	80022e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0203 	and.w	r2, r3, #3
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80d8 	beq.w	80024d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_GPIO_Init+0x22c>)
 8002326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800232a:	4a2b      	ldr	r2, [pc, #172]	; (80023d8 <HAL_GPIO_Init+0x22c>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_GPIO_Init+0x22c>)
 8002336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a26      	ldr	r2, [pc, #152]	; (80023dc <HAL_GPIO_Init+0x230>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_GPIO_Init+0x234>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d04a      	beq.n	8002404 <HAL_GPIO_Init+0x258>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_GPIO_Init+0x238>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02b      	beq.n	80023ce <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_GPIO_Init+0x23c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d025      	beq.n	80023ca <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_GPIO_Init+0x240>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01f      	beq.n	80023c6 <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_GPIO_Init+0x244>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_GPIO_Init+0x248>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_GPIO_Init+0x24c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_GPIO_Init+0x250>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x20a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <HAL_GPIO_Init+0x254>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x206>
 80023ae:	2309      	movs	r3, #9
 80023b0:	e029      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023b2:	230a      	movs	r3, #10
 80023b4:	e027      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e025      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023ba:	2306      	movs	r3, #6
 80023bc:	e023      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023be:	2305      	movs	r3, #5
 80023c0:	e021      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e01f      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e01d      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e01b      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e019      	b.n	8002406 <HAL_GPIO_Init+0x25a>
 80023d2:	bf00      	nop
 80023d4:	58000080 	.word	0x58000080
 80023d8:	58024400 	.word	0x58024400
 80023dc:	58000400 	.word	0x58000400
 80023e0:	58020000 	.word	0x58020000
 80023e4:	58020400 	.word	0x58020400
 80023e8:	58020800 	.word	0x58020800
 80023ec:	58020c00 	.word	0x58020c00
 80023f0:	58021000 	.word	0x58021000
 80023f4:	58021400 	.word	0x58021400
 80023f8:	58021800 	.word	0x58021800
 80023fc:	58021c00 	.word	0x58021c00
 8002400:	58022400 	.word	0x58022400
 8002404:	2300      	movs	r3, #0
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002416:	4938      	ldr	r1, [pc, #224]	; (80024f8 <HAL_GPIO_Init+0x34c>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae6b 	bne.w	80021c0 <HAL_GPIO_Init+0x14>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	3724      	adds	r7, #36	; 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	58000400 	.word	0x58000400

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e001      	b.n	800251e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002570:	887a      	ldrh	r2, [r7, #2]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	041a      	lsls	r2, r3, #16
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43d9      	mvns	r1, r3
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	400b      	ands	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff f89d 	bl	80016d8 <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e03b      	b.n	8002622 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80025ca:	e00f      	b.n	80025ec <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80025cc:	f7ff f884 	bl	80016d8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d908      	bls.n	80025ec <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2203      	movs	r2, #3
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e01a      	b.n	8002622 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e8      	bne.n	80025cc <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f9be 	bl	800297c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e03e      	b.n	80026c2 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800264e:	2302      	movs	r3, #2
 8002650:	e037      	b.n	80026c2 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d126      	bne.n	80026b4 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11c      	bne.n	80026ae <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	e00d      	b.n	80026b8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	e004      	b.n	80026b8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
 80026b2:	e001      	b.n	80026b8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026dc:	4b9a      	ldr	r3, [pc, #616]	; (8002948 <HAL_MDMA_IRQHandler+0x278>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a9a      	ldr	r2, [pc, #616]	; (800294c <HAL_MDMA_IRQHandler+0x27c>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b97      	ldr	r3, [pc, #604]	; (8002950 <HAL_MDMA_IRQHandler+0x280>)
 80026f2:	4413      	add	r3, r2
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2201      	movs	r2, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8002702:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 812e 	beq.w	800296e <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d054      	beq.n	80027ca <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d04d      	beq.n	80027ca <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0202 	bic.w	r2, r2, #2
 800273c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	669a      	str	r2, [r3, #104]	; 0x68
 800275c:	e005      	b.n	800276a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002762:	f043 0202 	orr.w	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800278e:	f043 0208 	orr.w	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a4:	f043 0210 	orr.w	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2208      	movs	r2, #8
 8002820:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2204      	movs	r2, #4
 8002854:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d039      	beq.n	80028e8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d032      	beq.n	80028e8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8002890:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b04      	cmp	r3, #4
 800289c:	d110      	bne.n	80028c0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d05d      	beq.n	8002972 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
        }
        return;
 80028be:	e058      	b.n	8002972 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2202      	movs	r2, #2
 80028c6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d041      	beq.n	8002974 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2204      	movs	r2, #4
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3301      	adds	r3, #1
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	d307      	bcc.n	8002924 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f2      	bne.n	8002908 <HAL_MDMA_IRQHandler+0x238>
 8002922:	e000      	b.n	8002926 <HAL_MDMA_IRQHandler+0x256>
        break;
 8002924:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002944:	e00a      	b.n	800295c <HAL_MDMA_IRQHandler+0x28c>
 8002946:	bf00      	nop
 8002948:	24000028 	.word	0x24000028
 800294c:	1b4e81b5 	.word	0x1b4e81b5
 8002950:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e002      	b.n	8002974 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8002972:	bf00      	nop
    }
  }
}
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop

0800297c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68d9      	ldr	r1, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029a2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029ae:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029ba:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80029c4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80029d0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029d2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d107      	bne.n	80029ee <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80029ec:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	da11      	bge.n	8002a22 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a0c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	425b      	negs	r3, r3
 8002a14:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b292      	uxth	r2, r2
 8002a1e:	621a      	str	r2, [r3, #32]
 8002a20:	e006      	b.n	8002a30 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b292      	uxth	r2, r2
 8002a2e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da15      	bge.n	8002a64 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002a46:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	425b      	negs	r3, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a19      	ldr	r1, [r3, #32]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	621a      	str	r2, [r3, #32]
 8002a62:	e009      	b.n	8002a78 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a19      	ldr	r1, [r3, #32]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	041a      	lsls	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d006      	beq.n	8002a90 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a8e:	e003      	b.n	8002a98 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00a      	beq.n	8002ad6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01f      	b.n	8002b12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e01d      	b.n	8002b12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	490f      	ldr	r1, [pc, #60]	; (8002b1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ae6:	f7fe fdf7 	bl	80016d8 <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aec:	e009      	b.n	8002b02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aee:	f7fe fdf3 	bl	80016d8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002afc:	d901      	bls.n	8002b02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_PWREx_ConfigSupply+0x70>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	d1ee      	bne.n	8002aee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	58024800 	.word	0x58024800

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e397      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8087 	beq.w	8002c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b4a:	4b9c      	ldr	r3, [pc, #624]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_OscConfig+0x46>
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b18      	cmp	r3, #24
 8002b5a:	d110      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5e>
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d10b      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b66:	4b95      	ldr	r3, [pc, #596]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d06c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x12c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d168      	bne.n	8002c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e371      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x76>
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a8b      	ldr	r2, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e02e      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b87      	ldr	r3, [pc, #540]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a86      	ldr	r2, [pc, #536]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b84      	ldr	r3, [pc, #528]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a83      	ldr	r2, [pc, #524]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0xbc>
 8002bc2:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7d      	ldr	r2, [pc, #500]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bdc:	4b77      	ldr	r3, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a76      	ldr	r2, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b74      	ldr	r3, [pc, #464]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a73      	ldr	r2, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fd6c 	bl	80016d8 <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fd68 	bl	80016d8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e325      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c16:	4b69      	ldr	r3, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe4>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fd58 	bl	80016d8 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fd54 	bl	80016d8 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e311      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x10c>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 808a 	beq.w	8002d70 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c66:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <HAL_RCC_OscConfig+0x162>
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2b18      	cmp	r3, #24
 8002c76:	d137      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1c8>
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d132      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x17a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e2e3      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c9a:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0219 	bic.w	r2, r3, #25
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4945      	ldr	r1, [pc, #276]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cac:	f7fe fd14 	bl	80016d8 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fd10 	bl	80016d8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e2cd      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	4936      	ldr	r1, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce6:	e043      	b.n	8002d70 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d026      	beq.n	8002d3e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 0219 	bic.w	r2, r3, #25
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	492f      	ldr	r1, [pc, #188]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fce9 	bl	80016d8 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fce5 	bl	80016d8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e2a2      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	4921      	ldr	r1, [pc, #132]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
 8002d3c:	e018      	b.n	8002d70 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fcc5 	bl	80016d8 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe fcc1 	bl	80016d8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e27e      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d06d      	beq.n	8002e58 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d84:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_OscConfig+0x282>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b18      	cmp	r3, #24
 8002d96:	d11e      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2b6>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_OscConfig+0x29c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2a0>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d004      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e253      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
 8002dba:	bf00      	nop
 8002dbc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dc0:	4ba3      	ldr	r3, [pc, #652]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	49a0      	ldr	r1, [pc, #640]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd4:	e040      	b.n	8002e58 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d023      	beq.n	8002e26 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dde:	4b9c      	ldr	r3, [pc, #624]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a9b      	ldr	r2, [pc, #620]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe fc75 	bl	80016d8 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002df2:	f7fe fc71 	bl	80016d8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e22e      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e04:	4b92      	ldr	r3, [pc, #584]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e10:	4b8f      	ldr	r3, [pc, #572]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	498c      	ldr	r1, [pc, #560]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60cb      	str	r3, [r1, #12]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e26:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a89      	ldr	r2, [pc, #548]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fc51 	bl	80016d8 <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fc4d 	bl	80016d8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e20a      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e4c:	4b80      	ldr	r3, [pc, #512]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d036      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d019      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fc2e 	bl	80016d8 <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fc2a 	bl	80016d8 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1e7      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x360>
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b6b      	ldr	r3, [pc, #428]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fc14 	bl	80016d8 <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fc10 	bl	80016d8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1cd      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec6:	4b62      	ldr	r3, [pc, #392]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d036      	beq.n	8002f4c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a59      	ldr	r2, [pc, #356]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fbf1 	bl	80016d8 <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002efa:	f7fe fbed 	bl	80016d8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e1aa      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x3da>
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fbd7 	bl	80016d8 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f2e:	f7fe fbd3 	bl	80016d8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e190      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f40:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8085 	beq.w	8003064 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCC_OscConfig+0x534>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3d      	ldr	r2, [pc, #244]	; (8003054 <HAL_RCC_OscConfig+0x534>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f66:	f7fe fbb7 	bl	80016d8 <HAL_GetTick>
 8002f6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7fe fbb3 	bl	80016d8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e170      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f80:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RCC_OscConfig+0x534>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x482>
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	e02d      	b.n	8002ffe <HAL_RCC_OscConfig+0x4de>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4a4>
 8002faa:	4b29      	ldr	r3, [pc, #164]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a28      	ldr	r2, [pc, #160]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a25      	ldr	r2, [pc, #148]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	e01c      	b.n	8002ffe <HAL_RCC_OscConfig+0x4de>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x4c6>
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4de>
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d015      	beq.n	8003032 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe fb67 	bl	80016d8 <HAL_GetTick>
 800300a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fb63 	bl	80016d8 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e11e      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_OscConfig+0x530>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCC_OscConfig+0x4ee>
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fe fb51 	bl	80016d8 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003038:	e00e      	b.n	8003058 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe fb4d 	bl	80016d8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d905      	bls.n	8003058 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e108      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
 8003050:	58024400 	.word	0x58024400
 8003054:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003058:	4b84      	ldr	r3, [pc, #528]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80f9 	beq.w	8003260 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800306e:	4b7f      	ldr	r3, [pc, #508]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003076:	2b18      	cmp	r3, #24
 8003078:	f000 80b4 	beq.w	80031e4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b02      	cmp	r3, #2
 8003082:	f040 8095 	bne.w	80031b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	4b79      	ldr	r3, [pc, #484]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a78      	ldr	r2, [pc, #480]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800308c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fe fb21 	bl	80016d8 <HAL_GetTick>
 8003096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fb1d 	bl	80016d8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0da      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ac:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b8:	4b6c      	ldr	r3, [pc, #432]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80030ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030bc:	4b6c      	ldr	r3, [pc, #432]	; (8003270 <HAL_RCC_OscConfig+0x750>)
 80030be:	4013      	ands	r3, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	430a      	orrs	r2, r1
 80030cc:	4967      	ldr	r1, [pc, #412]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	628b      	str	r3, [r1, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	3b01      	subs	r3, #1
 80030e2:	025b      	lsls	r3, r3, #9
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	3b01      	subs	r3, #1
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003102:	495a      	ldr	r1, [pc, #360]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003108:	4b58      	ldr	r3, [pc, #352]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	4a57      	ldr	r2, [pc, #348]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003114:	4b55      	ldr	r3, [pc, #340]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003118:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_RCC_OscConfig+0x754>)
 800311a:	4013      	ands	r3, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003120:	00d2      	lsls	r2, r2, #3
 8003122:	4952      	ldr	r1, [pc, #328]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	f023 020c 	bic.w	r2, r3, #12
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	494d      	ldr	r1, [pc, #308]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003136:	4313      	orrs	r3, r2
 8003138:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800313a:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f023 0202 	bic.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4949      	ldr	r1, [pc, #292]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003158:	4b44      	ldr	r3, [pc, #272]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	4a43      	ldr	r2, [pc, #268]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800315e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	4a40      	ldr	r2, [pc, #256]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800316a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003170:	4b3e      	ldr	r3, [pc, #248]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	4a3d      	ldr	r2, [pc, #244]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe faa6 	bl	80016d8 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe faa2 	bl	80016d8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e05f      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x670>
 80031ae:	e057      	b.n	8003260 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80031b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe fa8c 	bl	80016d8 <HAL_GetTick>
 80031c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fa88 	bl	80016d8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e045      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d6:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a4>
 80031e2:	e03d      	b.n	8003260 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_OscConfig+0x74c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d031      	beq.n	800325c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 0203 	and.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d12a      	bne.n	800325c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d122      	bne.n	800325c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d11a      	bne.n	800325c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0a5b      	lsrs	r3, r3, #9
 800322a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d111      	bne.n	800325c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d108      	bne.n	800325c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	0e1b      	lsrs	r3, r3, #24
 800324e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3730      	adds	r7, #48	; 0x30
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58024400 	.word	0x58024400
 8003270:	fffffc0c 	.word	0xfffffc0c
 8003274:	ffff0007 	.word	0xffff0007

08003278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e19c      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b8a      	ldr	r3, [pc, #552]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b87      	ldr	r3, [pc, #540]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	4985      	ldr	r1, [pc, #532]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e184      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	4b7b      	ldr	r3, [pc, #492]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d908      	bls.n	80032ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032d8:	4b78      	ldr	r3, [pc, #480]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	4975      	ldr	r1, [pc, #468]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	4b70      	ldr	r3, [pc, #448]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003302:	429a      	cmp	r2, r3
 8003304:	d908      	bls.n	8003318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003306:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	496a      	ldr	r1, [pc, #424]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003314:	4313      	orrs	r3, r2
 8003316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	4b64      	ldr	r3, [pc, #400]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003330:	429a      	cmp	r2, r3
 8003332:	d908      	bls.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003334:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	495e      	ldr	r1, [pc, #376]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003342:	4313      	orrs	r3, r2
 8003344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335e:	429a      	cmp	r2, r3
 8003360:	d908      	bls.n	8003374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003362:	4b56      	ldr	r3, [pc, #344]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4953      	ldr	r1, [pc, #332]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003370:	4313      	orrs	r3, r2
 8003372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	429a      	cmp	r2, r3
 800338e:	d908      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f023 020f 	bic.w	r2, r3, #15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4947      	ldr	r1, [pc, #284]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d055      	beq.n	800345a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4940      	ldr	r1, [pc, #256]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c8:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d121      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0f6      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033e0:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d115      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0ea      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f8:	4b30      	ldr	r3, [pc, #192]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0de      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0d6      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003418:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f023 0207 	bic.w	r2, r3, #7
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4925      	ldr	r1, [pc, #148]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003426:	4313      	orrs	r3, r2
 8003428:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe f955 	bl	80016d8 <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003430:	e00a      	b.n	8003448 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003432:	f7fe f951 	bl	80016d8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0be      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	429a      	cmp	r2, r3
 8003458:	d1eb      	bne.n	8003432 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	429a      	cmp	r2, r3
 8003474:	d208      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	490e      	ldr	r1, [pc, #56]	; (80034bc <HAL_RCC_ClockConfig+0x244>)
 8003484:	4313      	orrs	r3, r2
 8003486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d214      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 020f 	bic.w	r2, r3, #15
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_ClockConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e086      	b.n	80035c6 <HAL_RCC_ClockConfig+0x34e>
 80034b8:	52002000 	.word	0x52002000
 80034bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d8:	429a      	cmp	r2, r3
 80034da:	d208      	bcs.n	80034ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034dc:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4939      	ldr	r1, [pc, #228]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d010      	beq.n	800351c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003506:	429a      	cmp	r2, r3
 8003508:	d208      	bcs.n	800351c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	492e      	ldr	r1, [pc, #184]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003518:	4313      	orrs	r3, r2
 800351a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003534:	429a      	cmp	r2, r3
 8003536:	d208      	bcs.n	800354a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4922      	ldr	r1, [pc, #136]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003546:	4313      	orrs	r3, r2
 8003548:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003562:	429a      	cmp	r2, r3
 8003564:	d208      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4917      	ldr	r1, [pc, #92]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003574:	4313      	orrs	r3, r2
 8003576:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003578:	f000 f834 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	4912      	ldr	r1, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x35c>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x358>)
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_RCC_ClockConfig+0x35c>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x360>)
 80035ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x364>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x368>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe f842 	bl	8001644 <HAL_InitTick>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	58024400 	.word	0x58024400
 80035d4:	0800ce04 	.word	0x0800ce04
 80035d8:	2400002c 	.word	0x2400002c
 80035dc:	24000028 	.word	0x24000028
 80035e0:	24000030 	.word	0x24000030

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ea:	4bb3      	ldr	r3, [pc, #716]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f2:	2b18      	cmp	r3, #24
 80035f4:	f200 8155 	bhi.w	80038a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003665 	.word	0x08003665
 8003604:	080038a3 	.word	0x080038a3
 8003608:	080038a3 	.word	0x080038a3
 800360c:	080038a3 	.word	0x080038a3
 8003610:	080038a3 	.word	0x080038a3
 8003614:	080038a3 	.word	0x080038a3
 8003618:	080038a3 	.word	0x080038a3
 800361c:	080038a3 	.word	0x080038a3
 8003620:	0800368b 	.word	0x0800368b
 8003624:	080038a3 	.word	0x080038a3
 8003628:	080038a3 	.word	0x080038a3
 800362c:	080038a3 	.word	0x080038a3
 8003630:	080038a3 	.word	0x080038a3
 8003634:	080038a3 	.word	0x080038a3
 8003638:	080038a3 	.word	0x080038a3
 800363c:	080038a3 	.word	0x080038a3
 8003640:	08003691 	.word	0x08003691
 8003644:	080038a3 	.word	0x080038a3
 8003648:	080038a3 	.word	0x080038a3
 800364c:	080038a3 	.word	0x080038a3
 8003650:	080038a3 	.word	0x080038a3
 8003654:	080038a3 	.word	0x080038a3
 8003658:	080038a3 	.word	0x080038a3
 800365c:	080038a3 	.word	0x080038a3
 8003660:	08003697 	.word	0x08003697
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003664:	4b94      	ldr	r3, [pc, #592]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003670:	4b91      	ldr	r3, [pc, #580]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	08db      	lsrs	r3, r3, #3
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	4a90      	ldr	r2, [pc, #576]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003682:	e111      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003684:	4b8d      	ldr	r3, [pc, #564]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003686:	61bb      	str	r3, [r7, #24]
    break;
 8003688:	e10e      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800368a:	4b8d      	ldr	r3, [pc, #564]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800368c:	61bb      	str	r3, [r7, #24]
    break;
 800368e:	e10b      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003690:	4b8c      	ldr	r3, [pc, #560]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003692:	61bb      	str	r3, [r7, #24]
    break;
 8003694:	e108      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003696:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036a0:	4b85      	ldr	r3, [pc, #532]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036ac:	4b82      	ldr	r3, [pc, #520]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036b6:	4b80      	ldr	r3, [pc, #512]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80e1 	beq.w	800389c <HAL_RCC_GetSysClockFreq+0x2b8>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f000 8083 	beq.w	80037e8 <HAL_RCC_GetSysClockFreq+0x204>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f200 80a1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x248>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x114>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d056      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036f6:	e099      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f8:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02d      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003704:	4b6c      	ldr	r3, [pc, #432]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	4a6b      	ldr	r2, [pc, #428]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003742:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800375e:	e087      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800376e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003772:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003782:	ed97 6a02 	vldr	s12, [r7, #8]
 8003786:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800378a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a2:	e065      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b6:	4b40      	ldr	r3, [pc, #256]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037e6:	e043      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380a:	ed97 6a02 	vldr	s12, [r7, #8]
 800380e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800382a:	e021      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003852:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800386e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	0a5b      	lsrs	r3, r3, #9
 8003876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387a:	3301      	adds	r3, #1
 800387c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003888:	edd7 6a07 	vldr	s13, [r7, #28]
 800388c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800389a:	e005      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    break;
 80038a0:	e002      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038a4:	61bb      	str	r3, [r7, #24]
    break;
 80038a6:	bf00      	nop
  }

  return sysclockfreq;
 80038a8:	69bb      	ldr	r3, [r7, #24]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
 80038bc:	03d09000 	.word	0x03d09000
 80038c0:	003d0900 	.word	0x003d0900
 80038c4:	007a1200 	.word	0x007a1200
 80038c8:	46000000 	.word	0x46000000
 80038cc:	4c742400 	.word	0x4c742400
 80038d0:	4a742400 	.word	0x4a742400
 80038d4:	4af42400 	.word	0x4af42400

080038d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038de:	f7ff fe81 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <HAL_RCC_GetHCLKFreq+0x50>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490f      	ldr	r1, [pc, #60]	; (800392c <HAL_RCC_GetHCLKFreq+0x54>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_GetHCLKFreq+0x50>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_GetHCLKFreq+0x54>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_RCC_GetHCLKFreq+0x58>)
 8003914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <HAL_RCC_GetHCLKFreq+0x58>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	58024400 	.word	0x58024400
 800392c:	0800ce04 	.word	0x0800ce04
 8003930:	2400002c 	.word	0x2400002c
 8003934:	24000028 	.word	0x24000028

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800393c:	f7ff ffcc 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4904      	ldr	r1, [pc, #16]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	58024400 	.word	0x58024400
 8003960:	0800ce04 	.word	0x0800ce04

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003968:	f7ff ffb6 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4904      	ldr	r1, [pc, #16]	; (800398c <HAL_RCC_GetPCLK2Freq+0x28>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	58024400 	.word	0x58024400
 800398c:	0800ce04 	.word	0x0800ce04

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800399c:	2300      	movs	r3, #0
 800399e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039b4:	d02a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039ba:	d824      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c0:	d018      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c6:	d81e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d0:	d007      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039d2:	e018      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4bab      	ldr	r3, [pc, #684]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4aaa      	ldr	r2, [pc, #680]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039e0:	e015      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 feff 	bl	80057ec <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039f2:	e00c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3324      	adds	r3, #36	; 0x24
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 ffa8 	bl	8005950 <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a14:	4b9b      	ldr	r3, [pc, #620]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a20:	4998      	ldr	r1, [pc, #608]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	650b      	str	r3, [r1, #80]	; 0x50
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d826      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a5d 	.word	0x08003a5d
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003a95 	.word	0x08003a95
 8003a58:	08003a95 	.word	0x08003a95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b89      	ldr	r3, [pc, #548]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a88      	ldr	r2, [pc, #544]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a68:	e015      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 febb 	bl	80057ec <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a7a:	e00c      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 ff64 	bl	8005950 <RCCEx_PLL3_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
      break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a9c:	4b79      	ldr	r3, [pc, #484]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	f023 0207 	bic.w	r2, r3, #7
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	4976      	ldr	r1, [pc, #472]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	650b      	str	r3, [r1, #80]	; 0x50
 8003aae:	e001      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d051      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ac6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003aca:	d036      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003acc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003ad0:	d830      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad6:	d032      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003adc:	d82a      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ade:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae2:	d02e      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae8:	d824      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aee:	d018      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af4:	d81e      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afe:	d007      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b00:	e018      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4a5f      	ldr	r2, [pc, #380]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b0e:	e019      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fe68 	bl	80057ec <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b20:	e010      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3324      	adds	r3, #36	; 0x24
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 ff11 	bl	8005950 <RCCEx_PLL3_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b32:	e007      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
      break;
 8003b38:	e004      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b58:	494a      	ldr	r1, [pc, #296]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d051      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b7a:	d036      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003b7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b80:	d830      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b86:	d032      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b8c:	d82a      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b92:	d02e      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003b94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b98:	d824      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b9e:	d018      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ba4:	d81e      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bae:	d007      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003bb0:	e018      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bbe:	e019      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fe10 	bl	80057ec <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bd0:	e010      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3324      	adds	r3, #36	; 0x24
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 feb9 	bl	8005950 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003be2:	e007      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
      break;
 8003be8:	e004      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c08:	491e      	ldr	r1, [pc, #120]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d035      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d01c      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d817      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d00c      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d813      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d016      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d10f      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c48:	e00e      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fdcb 	bl	80057ec <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c5a:	e005      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c60:	e002      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	4902      	ldr	r1, [pc, #8]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c80:	e004      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d047      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca0:	d030      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca6:	d82a      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cac:	d02c      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003cae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cb2:	d824      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb8:	d018      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbe:	d81e      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d007      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cca:	e018      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ccc:	4bac      	ldr	r3, [pc, #688]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4aab      	ldr	r2, [pc, #684]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cd8:	e017      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fd83 	bl	80057ec <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cea:	e00e      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3324      	adds	r3, #36	; 0x24
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fe2c 	bl	8005950 <RCCEx_PLL3_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cfc:	e005      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d10:	4b9b      	ldr	r3, [pc, #620]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d14:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	4998      	ldr	r1, [pc, #608]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	650b      	str	r3, [r1, #80]	; 0x50
 8003d22:	e001      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d049      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3c:	d02e      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d42:	d828      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d48:	d02a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d4e:	d822      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d54:	d026      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d5a:	d81c      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d60:	d010      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d66:	d816      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01d      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d111      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	2101      	movs	r1, #1
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 fd37 	bl	80057ec <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d82:	e012      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3324      	adds	r3, #36	; 0x24
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 fde0 	bl	8005950 <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d94:	e009      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9a:	e006      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d9c:	bf00      	nop
 8003d9e:	e004      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003da0:	bf00      	nop
 8003da2:	e002      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003db0:	4b73      	ldr	r3, [pc, #460]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	4970      	ldr	r1, [pc, #448]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d04b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dde:	d02e      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de4:	d828      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d02a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d822      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003df6:	d026      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dfc:	d81c      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e02:	d010      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e08:	d816      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01d      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e12:	d111      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 fce6 	bl	80057ec <RCCEx_PLL2_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e24:	e012      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3324      	adds	r3, #36	; 0x24
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 fd8f 	bl	8005950 <RCCEx_PLL3_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e36:	e009      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3c:	e006      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e60:	4947      	ldr	r1, [pc, #284]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	658b      	str	r3, [r1, #88]	; 0x58
 8003e66:	e001      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02f      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e80:	d00e      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e86:	d814      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e90:	d10f      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e92:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	4a3a      	ldr	r2, [pc, #232]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e9e:	e00c      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fca0 	bl	80057ec <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ecc:	492c      	ldr	r1, [pc, #176]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ed2:	e001      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d032      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d81b      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f05 	.word	0x08003f05
 8003efc:	08003f13 	.word	0x08003f13
 8003f00:	08003f2b 	.word	0x08003f2b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f10:	e00c      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fc67 	bl	80057ec <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f22:	e003      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	75fb      	strb	r3, [r7, #23]
      break;
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4910      	ldr	r1, [pc, #64]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f44:	e001      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 808a 	beq.w	800406c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f64:	f7fd fbb8 	bl	80016d8 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6a:	e00d      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6c:	f7fd fbb4 	bl	80016d8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d906      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f7e:	e009      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f88:	4bb9      	ldr	r3, [pc, #740]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0eb      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d166      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f9a:	4bb6      	ldr	r3, [pc, #728]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fa4:	4053      	eors	r3, r2
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d013      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fae:	4bb1      	ldr	r3, [pc, #708]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb8:	4bae      	ldr	r3, [pc, #696]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4aad      	ldr	r2, [pc, #692]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc4:	4bab      	ldr	r3, [pc, #684]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4aaa      	ldr	r2, [pc, #680]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fd0:	4aa8      	ldr	r2, [pc, #672]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe0:	d115      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd fb79 	bl	80016d8 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe8:	e00b      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd fb75 	bl	80016d8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d902      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8004000:	e005      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004002:	4b9c      	ldr	r3, [pc, #624]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ed      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d126      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004022:	d10d      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004024:	4b93      	ldr	r3, [pc, #588]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004032:	0919      	lsrs	r1, r3, #4
 8004034:	4b90      	ldr	r3, [pc, #576]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004036:	400b      	ands	r3, r1
 8004038:	498e      	ldr	r1, [pc, #568]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
 800403e:	e005      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004040:	4b8c      	ldr	r3, [pc, #560]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4a8b      	ldr	r2, [pc, #556]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004046:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800404a:	6113      	str	r3, [r2, #16]
 800404c:	4b89      	ldr	r3, [pc, #548]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800404e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405a:	4986      	ldr	r1, [pc, #536]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	670b      	str	r3, [r1, #112]	; 0x70
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	75bb      	strb	r3, [r7, #22]
 8004066:	e001      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d07e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407c:	2b28      	cmp	r3, #40	; 0x28
 800407e:	d867      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	08004157 	.word	0x08004157
 800408c:	08004151 	.word	0x08004151
 8004090:	08004151 	.word	0x08004151
 8004094:	08004151 	.word	0x08004151
 8004098:	08004151 	.word	0x08004151
 800409c:	08004151 	.word	0x08004151
 80040a0:	08004151 	.word	0x08004151
 80040a4:	08004151 	.word	0x08004151
 80040a8:	0800412d 	.word	0x0800412d
 80040ac:	08004151 	.word	0x08004151
 80040b0:	08004151 	.word	0x08004151
 80040b4:	08004151 	.word	0x08004151
 80040b8:	08004151 	.word	0x08004151
 80040bc:	08004151 	.word	0x08004151
 80040c0:	08004151 	.word	0x08004151
 80040c4:	08004151 	.word	0x08004151
 80040c8:	0800413f 	.word	0x0800413f
 80040cc:	08004151 	.word	0x08004151
 80040d0:	08004151 	.word	0x08004151
 80040d4:	08004151 	.word	0x08004151
 80040d8:	08004151 	.word	0x08004151
 80040dc:	08004151 	.word	0x08004151
 80040e0:	08004151 	.word	0x08004151
 80040e4:	08004151 	.word	0x08004151
 80040e8:	08004157 	.word	0x08004157
 80040ec:	08004151 	.word	0x08004151
 80040f0:	08004151 	.word	0x08004151
 80040f4:	08004151 	.word	0x08004151
 80040f8:	08004151 	.word	0x08004151
 80040fc:	08004151 	.word	0x08004151
 8004100:	08004151 	.word	0x08004151
 8004104:	08004151 	.word	0x08004151
 8004108:	08004157 	.word	0x08004157
 800410c:	08004151 	.word	0x08004151
 8004110:	08004151 	.word	0x08004151
 8004114:	08004151 	.word	0x08004151
 8004118:	08004151 	.word	0x08004151
 800411c:	08004151 	.word	0x08004151
 8004120:	08004151 	.word	0x08004151
 8004124:	08004151 	.word	0x08004151
 8004128:	08004157 	.word	0x08004157
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f001 fb5a 	bl	80057ec <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800413c:	e00c      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3324      	adds	r3, #36	; 0x24
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fc03 	bl	8005950 <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
      break;
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800415e:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	4942      	ldr	r1, [pc, #264]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	654b      	str	r3, [r1, #84]	; 0x54
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d037      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	2b05      	cmp	r3, #5
 8004188:	d820      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041d3 	.word	0x080041d3
 8004194:	080041a9 	.word	0x080041a9
 8004198:	080041bb 	.word	0x080041bb
 800419c:	080041d3 	.word	0x080041d3
 80041a0:	080041d3 	.word	0x080041d3
 80041a4:	080041d3 	.word	0x080041d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2101      	movs	r1, #1
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fb1c 	bl	80057ec <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041b8:	e00c      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3324      	adds	r3, #36	; 0x24
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 fbc5 	bl	8005950 <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041ca:	e003      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
      break;
 80041d0:	e000      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80041d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041da:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f023 0207 	bic.w	r2, r3, #7
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4923      	ldr	r1, [pc, #140]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	654b      	str	r3, [r1, #84]	; 0x54
 80041ec:	e001      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d040      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004204:	2b05      	cmp	r3, #5
 8004206:	d821      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004253 	.word	0x08004253
 8004214:	08004229 	.word	0x08004229
 8004218:	0800423b 	.word	0x0800423b
 800421c:	08004253 	.word	0x08004253
 8004220:	08004253 	.word	0x08004253
 8004224:	08004253 	.word	0x08004253
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f001 fadc 	bl	80057ec <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004238:	e00c      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fb85 	bl	8005950 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d110      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f023 0207 	bic.w	r2, r3, #7
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004268:	4902      	ldr	r1, [pc, #8]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	658b      	str	r3, [r1, #88]	; 0x58
 800426e:	e007      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004270:	58024800 	.word	0x58024800
 8004274:	58024400 	.word	0x58024400
 8004278:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d04b      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004296:	d02e      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429c:	d828      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d02a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d822      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042ae:	d026      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80042b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042b4:	d81c      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ba:	d010      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80042bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c0:	d816      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01d      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ca:	d111      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fa8a 	bl	80057ec <RCCEx_PLL2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042dc:	e012      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3324      	adds	r3, #36	; 0x24
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 fb33 	bl	8005950 <RCCEx_PLL3_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042ee:	e009      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
      break;
 80042f4:	e006      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800430a:	4bb2      	ldr	r3, [pc, #712]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	49ae      	ldr	r1, [pc, #696]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800431a:	4313      	orrs	r3, r2
 800431c:	654b      	str	r3, [r1, #84]	; 0x54
 800431e:	e001      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d04b      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004336:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800433a:	d02e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800433c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004340:	d828      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d02a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d822      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800434e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004352:	d026      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004358:	d81c      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d010      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d816      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01d      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d111      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fa38 	bl	80057ec <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004380:	e012      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3324      	adds	r3, #36	; 0x24
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fae1 	bl	8005950 <RCCEx_PLL3_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004392:	e009      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	75fb      	strb	r3, [r7, #23]
      break;
 8004398:	e006      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ae:	4b89      	ldr	r3, [pc, #548]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043bc:	4985      	ldr	r1, [pc, #532]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	658b      	str	r3, [r1, #88]	; 0x58
 80043c2:	e001      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d04b      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043de:	d02e      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80043e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043e4:	d828      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ea:	d02a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d822      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f6:	d026      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80043f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043fc:	d81c      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004402:	d010      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004408:	d816      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01d      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800440e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004412:	d111      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f001 f9e6 	bl	80057ec <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004424:	e012      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3324      	adds	r3, #36	; 0x24
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fa8f 	bl	8005950 <RCCEx_PLL3_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004436:	e009      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
      break;
 800443c:	e006      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800443e:	bf00      	nop
 8004440:	e004      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004442:	bf00      	nop
 8004444:	e002      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800444a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004452:	4b60      	ldr	r3, [pc, #384]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004460:	495c      	ldr	r1, [pc, #368]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004462:	4313      	orrs	r3, r2
 8004464:	658b      	str	r3, [r1, #88]	; 0x58
 8004466:	e001      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d018      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d10a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3324      	adds	r3, #36	; 0x24
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fa61 	bl	8005950 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004498:	4b4e      	ldr	r3, [pc, #312]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a4:	494b      	ldr	r1, [pc, #300]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	d10a      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3324      	adds	r3, #36	; 0x24
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fa41 	bl	8005950 <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	493b      	ldr	r1, [pc, #236]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d034      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	d01d      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004508:	d817      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d009      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004514:	e011      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f001 f965 	bl	80057ec <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004526:	e00c      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f001 fa0e 	bl	8005950 <RCCEx_PLL3_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004538:	e003      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
      break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004556:	491f      	ldr	r1, [pc, #124]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004558:	4313      	orrs	r3, r2
 800455a:	658b      	str	r3, [r1, #88]	; 0x58
 800455c:	e001      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d036      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004578:	d01c      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800457a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800457e:	d816      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	d003      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458a:	d007      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800458c:	e00f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800459a:	e00c      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f9d4 	bl	8005950 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
      break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80045b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	4902      	ldr	r1, [pc, #8]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	654b      	str	r3, [r1, #84]	; 0x54
 80045d0:	e004      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80045d2:	bf00      	nop
 80045d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d029      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80045f6:	e00f      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004604:	e00b      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f8ed 	bl	80057ec <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004616:	e002      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004624:	4b56      	ldr	r3, [pc, #344]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	4953      	ldr	r1, [pc, #332]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004632:	4313      	orrs	r3, r2
 8004634:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004636:	e001      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3324      	adds	r3, #36	; 0x24
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f97e 	bl	8005950 <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d030      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800466e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004672:	d017      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004678:	d811      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800467a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467e:	d013      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004684:	d80b      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d010      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	d106      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004690:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a3a      	ldr	r2, [pc, #232]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800469c:	e007      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
      break;
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b4:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c0:	492f      	ldr	r1, [pc, #188]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	654b      	str	r3, [r1, #84]	; 0x54
 80046c6:	e001      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046d8:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e4:	4926      	ldr	r1, [pc, #152]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004702:	491f      	ldr	r1, [pc, #124]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004714:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800471a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800471e:	6113      	str	r3, [r2, #16]
 8004720:	4b17      	ldr	r3, [pc, #92]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800472a:	4915      	ldr	r1, [pc, #84]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	da08      	bge.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	490e      	ldr	r1, [pc, #56]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004746:	4313      	orrs	r3, r2
 8004748:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004764:	4906      	ldr	r1, [pc, #24]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800476a:	7dbb      	ldrb	r3, [r7, #22]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400

08004784 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b090      	sub	sp, #64	; 0x40
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	f040 8089 	bne.w	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004796:	4b95      	ldr	r3, [pc, #596]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d87d      	bhi.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047c1 	.word	0x080047c1
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	08004809 	.word	0x08004809
 80047b8:	0800489d 	.word	0x0800489d
 80047bc:	0800482d 	.word	0x0800482d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047c0:	4b8a      	ldr	r3, [pc, #552]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047cc:	d107      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 feb8 	bl	8005548 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047dc:	e3ed      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047e2:	e3ea      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047e4:	4b81      	ldr	r3, [pc, #516]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f0:	d107      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fbfe 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004800:	e3db      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004806:	e3d8      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004808:	4b78      	ldr	r3, [pc, #480]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004814:	d107      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd40 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004824:	e3c9      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800482a:	e3c6      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800482c:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800482e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004834:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004836:	4b6d      	ldr	r3, [pc, #436]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d10c      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	4a67      	ldr	r2, [pc, #412]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485a:	e01e      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800485c:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004868:	d106      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004870:	d102      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004872:	4b60      	ldr	r3, [pc, #384]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004876:	e010      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004878:	4b5c      	ldr	r3, [pc, #368]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004884:	d106      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488c:	d102      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800488e:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004892:	e002      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004898:	e38f      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800489a:	e38e      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800489c:	4b57      	ldr	r3, [pc, #348]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048a0:	e38b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048a6:	e388      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	f040 80a7 	bne.w	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c2:	d054      	beq.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ca:	f200 808b 	bhi.w	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048d4:	f000 8083 	beq.w	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048de:	f200 8081 	bhi.w	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e8:	d02f      	beq.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f0:	d878      	bhi.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fe:	d012      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004900:	e070      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004902:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800490e:	d107      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fe17 	bl	8005548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800491e:	e34c      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004924:	e349      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004926:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800492e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004932:	d107      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004934:	f107 0318 	add.w	r3, r7, #24
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fb5d 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004942:	e33a      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004948:	e337      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004956:	d107      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fc9f 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004966:	e328      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800496c:	e325      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004976:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004978:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b04      	cmp	r3, #4
 8004982:	d10c      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	08db      	lsrs	r3, r3, #3
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499c:	e01e      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049aa:	d106      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049b2:	d102      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b8:	e010      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ce:	d102      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049da:	e2ee      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80049dc:	e2ed      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049e2:	e2ea      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049e8:	e2e7      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80049ea:	bf00      	nop
 80049ec:	58024400 	.word	0x58024400
 80049f0:	03d09000 	.word	0x03d09000
 80049f4:	003d0900 	.word	0x003d0900
 80049f8:	007a1200 	.word	0x007a1200
 80049fc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	f040 809c 	bne.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a0a:	4b9e      	ldr	r3, [pc, #632]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a1a:	d054      	beq.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a22:	f200 808b 	bhi.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a2c:	f000 8083 	beq.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a36:	f200 8081 	bhi.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a40:	d02f      	beq.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a48:	d878      	bhi.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a56:	d012      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a58:	e070      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a5a:	4b8a      	ldr	r3, [pc, #552]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a66:	d107      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fd6b 	bl	8005548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a76:	e2a0      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a7c:	e29d      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a7e:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a8a:	d107      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a8c:	f107 0318 	add.w	r3, r7, #24
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fab1 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004a9a:	e28e      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aa0:	e28b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aa2:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fbf3 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004abe:	e27c      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac4:	e279      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ac6:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d10c      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ae2:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	08db      	lsrs	r3, r3, #3
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	4a66      	ldr	r2, [pc, #408]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af4:	e01e      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004af6:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d106      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0a:	d102      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b0c:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b10:	e010      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b12:	4b5c      	ldr	r3, [pc, #368]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b26:	d102      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b28:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b32:	e242      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004b34:	e241      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b36:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b3a:	e23e      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b40:	e23b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	f040 80a6 	bne.w	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b4c:	4b4d      	ldr	r3, [pc, #308]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b5c:	d054      	beq.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b64:	f200 808b 	bhi.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b6e:	f000 8083 	beq.w	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b78:	f200 8081 	bhi.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b82:	d02f      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8a:	d878      	bhi.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b98:	d012      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004b9a:	e070      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b9c:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fcca 	bl	8005548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb8:	e1ff      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbe:	e1fc      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bc0:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bcc:	d107      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bce:	f107 0318 	add.w	r3, r7, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa10 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bdc:	e1ed      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be2:	e1ea      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004be4:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fb52 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c00:	e1db      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c06:	e1d8      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c10:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	08db      	lsrs	r3, r3, #3
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c36:	e01e      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c44:	d106      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c52:	e010      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c68:	d102      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6e:	e002      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c74:	e1a1      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004c76:	e1a0      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c7c:	e19d      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c82:	e19a      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004c84:	58024400 	.word	0x58024400
 8004c88:	03d09000 	.word	0x03d09000
 8004c8c:	003d0900 	.word	0x003d0900
 8004c90:	007a1200 	.word	0x007a1200
 8004c94:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c9e:	d173      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ca0:	4b9a      	ldr	r3, [pc, #616]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cb0:	d02f      	beq.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cb8:	d863      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc6:	d012      	beq.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004cc8:	e05b      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cca:	4b90      	ldr	r3, [pc, #576]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd8:	f107 0318 	add.w	r3, r7, #24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f98b 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ce6:	e168      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cec:	e165      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cee:	4b87      	ldr	r3, [pc, #540]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 facd 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d0a:	e156      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d10:	e153      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d12:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d1c:	4b7b      	ldr	r3, [pc, #492]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d10c      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d2e:	4b77      	ldr	r3, [pc, #476]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	4a75      	ldr	r2, [pc, #468]	; (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d40:	e01e      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d42:	4b72      	ldr	r3, [pc, #456]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d56:	d102      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d58:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5c:	e010      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d5e:	4b6b      	ldr	r3, [pc, #428]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d72:	d102      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d74:	4b68      	ldr	r3, [pc, #416]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d7e:	e11c      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d80:	e11b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d86:	e118      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8e:	d133      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004d90:	4b5e      	ldr	r3, [pc, #376]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d012      	beq.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004da8:	e023      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004daa:	4b58      	ldr	r3, [pc, #352]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fbc3 	bl	8005548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dc6:	e0f8      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dcc:	e0f5      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dce:	4b4f      	ldr	r3, [pc, #316]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dda:	d107      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ddc:	f107 0318 	add.w	r3, r7, #24
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f909 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dea:	e0e6      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df0:	e0e3      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df6:	e0e0      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfe:	f040 808d 	bne.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e02:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e12:	d06b      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e1a:	d874      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e22:	d056      	beq.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d86c      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e32:	d03b      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e3a:	d864      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e42:	d021      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4a:	d85c      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e58:	d004      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004e5a:	e054      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e5c:	f000 f8b6 	bl	8004fcc <HAL_RCCEx_GetD3PCLK1Freq>
 8004e60:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e62:	e0aa      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e64:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e70:	d107      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e72:	f107 0318 	add.w	r3, r7, #24
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f8be 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e80:	e09b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e86:	e098      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e88:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fa00 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ea4:	e089      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eaa:	e086      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eac:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eca:	e076      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed0:	e073      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ee4:	e069      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eea:	e066      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004efe:	e05c      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f04:	e059      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	e056      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	03d09000 	.word	0x03d09000
 8004f14:	003d0900 	.word	0x003d0900
 8004f18:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f22:	d148      	bne.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f34:	d02a      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d838      	bhi.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004f4c:	e030      	b.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f60:	e02b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f66:	e028      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f68:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f74:	d107      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fae4 	bl	8005548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f84:	e019      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f8a:	e016      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f98:	d107      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f9a:	f107 0318 	add.w	r3, r7, #24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f82a 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fa8:	e007      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb4:	e001      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3740      	adds	r7, #64	; 0x40
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	007a1200 	.word	0x007a1200

08004fcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fd0:	f7fe fc82 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4904      	ldr	r1, [pc, #16]	; (8004ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fe2:	5ccb      	ldrb	r3, [r1, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	0800ce04 	.word	0x0800ce04

08004ff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005000:	4ba1      	ldr	r3, [pc, #644]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800500a:	4b9f      	ldr	r3, [pc, #636]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	0b1b      	lsrs	r3, r3, #12
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005016:	4b9c      	ldr	r3, [pc, #624]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005022:	4b99      	ldr	r3, [pc, #612]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8111 	beq.w	8005268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b02      	cmp	r3, #2
 800504a:	f000 8083 	beq.w	8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b02      	cmp	r3, #2
 8005052:	f200 80a1 	bhi.w	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d056      	beq.n	8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005062:	e099      	b.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005064:	4b88      	ldr	r3, [pc, #544]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02d      	beq.n	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005070:	4b85      	ldr	r3, [pc, #532]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	4a84      	ldr	r2, [pc, #528]	; (800528c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050ca:	e087      	b.n	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510e:	e065      	b.n	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b59      	ldr	r3, [pc, #356]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005152:	e043      	b.n	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800529c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b48      	ldr	r3, [pc, #288]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a03 	vldr	s12, [r7, #12]
 800517a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005196:	e021      	b.n	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b37      	ldr	r3, [pc, #220]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80051be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	0a5b      	lsrs	r3, r3, #9
 80051e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005202:	ee17 2a90 	vmov	r2, s15
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	0c1b      	lsrs	r3, r3, #16
 8005210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005224:	edd7 6a07 	vldr	s13, [r7, #28]
 8005228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	ee17 2a90 	vmov	r2, s15
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005238:	4b13      	ldr	r3, [pc, #76]	; (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	0e1b      	lsrs	r3, r3, #24
 800523e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005252:	edd7 6a07 	vldr	s13, [r7, #28]
 8005256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800525a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525e:	ee17 2a90 	vmov	r2, s15
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005266:	e008      	b.n	800527a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	bf00      	nop
 800527c:	3724      	adds	r7, #36	; 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400
 800528c:	03d09000 	.word	0x03d09000
 8005290:	46000000 	.word	0x46000000
 8005294:	4c742400 	.word	0x4c742400
 8005298:	4a742400 	.word	0x4a742400
 800529c:	4af42400 	.word	0x4af42400

080052a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a8:	4ba1      	ldr	r3, [pc, #644]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052b2:	4b9f      	ldr	r3, [pc, #636]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	0d1b      	lsrs	r3, r3, #20
 80052b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052be:	4b9c      	ldr	r3, [pc, #624]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052ca:	4b99      	ldr	r3, [pc, #612]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8111 	beq.w	8005510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	f000 8083 	beq.w	80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	f200 80a1 	bhi.w	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d056      	beq.n	80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800530a:	e099      	b.n	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530c:	4b88      	ldr	r3, [pc, #544]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02d      	beq.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005318:	4b85      	ldr	r3, [pc, #532]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	4a84      	ldr	r2, [pc, #528]	; (8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b7b      	ldr	r3, [pc, #492]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a03 	vldr	s12, [r7, #12]
 8005356:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005372:	e087      	b.n	8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800553c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b6a      	ldr	r3, [pc, #424]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a03 	vldr	s12, [r7, #12]
 800539a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b6:	e065      	b.n	8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ca:	4b59      	ldr	r3, [pc, #356]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a03 	vldr	s12, [r7, #12]
 80053de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053fa:	e043      	b.n	8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	4b48      	ldr	r3, [pc, #288]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005422:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800543e:	e021      	b.n	8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800544e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005452:	4b37      	ldr	r3, [pc, #220]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005462:	ed97 6a03 	vldr	s12, [r7, #12]
 8005466:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800546a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	0a5b      	lsrs	r3, r3, #9
 800548a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800549a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800549e:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054aa:	ee17 2a90 	vmov	r2, s15
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054b2:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	0c1b      	lsrs	r3, r3, #16
 80054b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d8:	ee17 2a90 	vmov	r2, s15
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054e0:	4b13      	ldr	r3, [pc, #76]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	0e1b      	lsrs	r3, r3, #24
 80054e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005506:	ee17 2a90 	vmov	r2, s15
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800550e:	e008      	b.n	8005522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	609a      	str	r2, [r3, #8]
}
 8005522:	bf00      	nop
 8005524:	3724      	adds	r7, #36	; 0x24
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	58024400 	.word	0x58024400
 8005534:	03d09000 	.word	0x03d09000
 8005538:	46000000 	.word	0x46000000
 800553c:	4c742400 	.word	0x4c742400
 8005540:	4a742400 	.word	0x4a742400
 8005544:	4af42400 	.word	0x4af42400

08005548 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005550:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800555a:	4b9e      	ldr	r3, [pc, #632]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005564:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005566:	4b9b      	ldr	r3, [pc, #620]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005570:	4b98      	ldr	r3, [pc, #608]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005588:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8111 	beq.w	80057b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b02      	cmp	r3, #2
 8005598:	f000 8083 	beq.w	80056a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	f200 80a1 	bhi.w	80056e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d056      	beq.n	800565e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055b0:	e099      	b.n	80056e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b2:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02d      	beq.n	800561a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055be:	4b85      	ldr	r3, [pc, #532]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	4a83      	ldr	r2, [pc, #524]	; (80057d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e8:	4b7a      	ldr	r3, [pc, #488]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005614:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005618:	e087      	b.n	800572a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80057e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562c:	4b69      	ldr	r3, [pc, #420]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005640:	eddf 5a66 	vldr	s11, [pc, #408]	; 80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565c:	e065      	b.n	800572a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005668:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800566c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005670:	4b58      	ldr	r3, [pc, #352]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005680:	ed97 6a03 	vldr	s12, [r7, #12]
 8005684:	eddf 5a55 	vldr	s11, [pc, #340]	; 80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a0:	e043      	b.n	800572a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b4:	4b47      	ldr	r3, [pc, #284]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e4:	e021      	b.n	800572a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80057e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80056f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f8:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005708:	ed97 6a03 	vldr	s12, [r7, #12]
 800570c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005728:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800572a:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	0a5b      	lsrs	r3, r3, #9
 8005730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005744:	edd7 6a07 	vldr	s13, [r7, #28]
 8005748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005750:	ee17 2a90 	vmov	r2, s15
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800576e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005772:	edd7 6a07 	vldr	s13, [r7, #28]
 8005776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577e:	ee17 2a90 	vmov	r2, s15
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	0e1b      	lsrs	r3, r3, #24
 800578c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800579c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ac:	ee17 2a90 	vmov	r2, s15
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057b4:	e008      	b.n	80057c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	3724      	adds	r7, #36	; 0x24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	58024400 	.word	0x58024400
 80057d8:	03d09000 	.word	0x03d09000
 80057dc:	46000000 	.word	0x46000000
 80057e0:	4c742400 	.word	0x4c742400
 80057e4:	4a742400 	.word	0x4a742400
 80057e8:	4af42400 	.word	0x4af42400

080057ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057fa:	4b53      	ldr	r3, [pc, #332]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b03      	cmp	r3, #3
 8005804:	d101      	bne.n	800580a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e099      	b.n	800593e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800580a:	4b4f      	ldr	r3, [pc, #316]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a4e      	ldr	r2, [pc, #312]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fb ff5f 	bl	80016d8 <HAL_GetTick>
 800581a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800581c:	e008      	b.n	8005830 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800581e:	f7fb ff5b 	bl	80016d8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e086      	b.n	800593e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005830:	4b45      	ldr	r3, [pc, #276]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f0      	bne.n	800581e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800583c:	4b42      	ldr	r3, [pc, #264]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	493f      	ldr	r1, [pc, #252]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	628b      	str	r3, [r1, #40]	; 0x28
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	3b01      	subs	r3, #1
 8005856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	3b01      	subs	r3, #1
 8005860:	025b      	lsls	r3, r3, #9
 8005862:	b29b      	uxth	r3, r3
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	3b01      	subs	r3, #1
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	3b01      	subs	r3, #1
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005880:	4931      	ldr	r1, [pc, #196]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005886:	4b30      	ldr	r3, [pc, #192]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	492d      	ldr	r1, [pc, #180]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005894:	4313      	orrs	r3, r2
 8005896:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005898:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f023 0220 	bic.w	r2, r3, #32
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	4928      	ldr	r1, [pc, #160]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058aa:	4b27      	ldr	r3, [pc, #156]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	4a26      	ldr	r2, [pc, #152]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	f023 0310 	bic.w	r3, r3, #16
 80058b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <RCCEx_PLL2_Config+0x160>)
 80058bc:	4013      	ands	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	69d2      	ldr	r2, [r2, #28]
 80058c2:	00d2      	lsls	r2, r2, #3
 80058c4:	4920      	ldr	r1, [pc, #128]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058ca:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058d0:	f043 0310 	orr.w	r3, r3, #16
 80058d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a19      	ldr	r2, [pc, #100]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058e8:	e00f      	b.n	800590a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d106      	bne.n	80058fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058f0:	4b15      	ldr	r3, [pc, #84]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058fc:	e005      	b.n	800590a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005916:	f7fb fedf 	bl	80016d8 <HAL_GetTick>
 800591a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800591c:	e008      	b.n	8005930 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800591e:	f7fb fedb 	bl	80016d8 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e006      	b.n	800593e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	58024400 	.word	0x58024400
 800594c:	ffff0007 	.word	0xffff0007

08005950 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b03      	cmp	r3, #3
 8005968:	d101      	bne.n	800596e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e099      	b.n	8005aa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800596e:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a4e      	ldr	r2, [pc, #312]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597a:	f7fb fead 	bl	80016d8 <HAL_GetTick>
 800597e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005980:	e008      	b.n	8005994 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005982:	f7fb fea9 	bl	80016d8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e086      	b.n	8005aa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005994:	4b45      	ldr	r3, [pc, #276]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059a0:	4b42      	ldr	r3, [pc, #264]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	051b      	lsls	r3, r3, #20
 80059ae:	493f      	ldr	r1, [pc, #252]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	628b      	str	r3, [r1, #40]	; 0x28
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	025b      	lsls	r3, r3, #9
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	3b01      	subs	r3, #1
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059e4:	4931      	ldr	r1, [pc, #196]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059ea:	4b30      	ldr	r3, [pc, #192]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	492d      	ldr	r1, [pc, #180]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059fc:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	4928      	ldr	r1, [pc, #160]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a26      	ldr	r2, [pc, #152]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <RCCEx_PLL3_Config+0x160>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	69d2      	ldr	r2, [r2, #28]
 8005a26:	00d2      	lsls	r2, r2, #3
 8005a28:	4920      	ldr	r1, [pc, #128]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a40:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a4c:	e00f      	b.n	8005a6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a60:	e005      	b.n	8005a6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a11      	ldr	r2, [pc, #68]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a0e      	ldr	r2, [pc, #56]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7a:	f7fb fe2d 	bl	80016d8 <HAL_GetTick>
 8005a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a80:	e008      	b.n	8005a94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a82:	f7fb fe29 	bl	80016d8 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e006      	b.n	8005aa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	ffff0007 	.word	0xffff0007

08005ab4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e075      	b.n	8005bb2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d105      	bne.n	8005ade <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fb fb67 	bl	80011ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f868 	bl	8005bbc <HAL_SD_InitCard>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e05d      	b.n	8005bb2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 ff6f 	bl	80069e0 <HAL_SD_GetCardStatus>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e052      	b.n	8005bb2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b0c:	7e3b      	ldrb	r3, [r7, #24]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b12:	7e7b      	ldrb	r3, [r7, #25]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d10a      	bne.n	8005b36 <HAL_SD_Init+0x82>
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <HAL_SD_Init+0x78>
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b32:	659a      	str	r2, [r3, #88]	; 0x58
 8005b34:	e00b      	b.n	8005b4e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d104      	bne.n	8005b48 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b44:	659a      	str	r2, [r3, #88]	; 0x58
 8005b46:	e002      	b.n	8005b4e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 f82d 	bl	8006bb4 <HAL_SD_ConfigWideBusOperation>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e026      	b.n	8005bb2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b64:	f7fb fdb8 	bl	80016d8 <HAL_GetTick>
 8005b68:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b6a:	e011      	b.n	8005b90 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b6c:	f7fb fdb4 	bl	80016d8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d109      	bne.n	8005b90 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b82:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e010      	b.n	8005bb2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 f921 	bl	8006dd8 <HAL_SD_GetCardState>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d1e7      	bne.n	8005b6c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b08d      	sub	sp, #52	; 0x34
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005bd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005bdc:	f7fe fdd2 	bl	8004784 <HAL_RCCEx_GetPeriphCLKFreq>
 8005be0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bf6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e06a      	b.n	8005cd2 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	4a36      	ldr	r2, [pc, #216]	; (8005cdc <HAL_SD_InitCard+0x120>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681c      	ldr	r4, [r3, #0]
 8005c0e:	466a      	mov	r2, sp
 8005c10:	f107 0318 	add.w	r3, r7, #24
 8005c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c18:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c22:	4620      	mov	r0, r4
 8005c24:	f002 fed0 	bl	80089c8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f002 ff13 	bl	8008a58 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c3e:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <HAL_SD_InitCard+0x124>)
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	3301      	adds	r3, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fb fd51 	bl	80016f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f9b0 	bl	8006fb4 <SD_PowerON>
 8005c54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e02e      	b.n	8005cd2 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f8cf 	bl	8006e18 <SD_InitCard>
 8005c7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e01b      	b.n	8005cd2 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f002 ff6e 	bl	8008b84 <SDMMC_CmdBlockLength>
 8005ca8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00f      	beq.n	8005cd0 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <HAL_SD_InitCard+0x128>)
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	372c      	adds	r7, #44	; 0x2c
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd90      	pop	{r4, r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	014f8b59 	.word	0x014f8b59
 8005ce0:	00012110 	.word	0x00012110
 8005ce4:	1fe00fff 	.word	0x1fe00fff

08005ce8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b092      	sub	sp, #72	; 0x48
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cf6:	f7fb fcef 	bl	80016d8 <HAL_GetTick>
 8005cfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d107      	bne.n	8005d1a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e167      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	f040 815a 	bne.w	8005fdc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d907      	bls.n	8005d4c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e14e      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2203      	movs	r2, #3
 8005d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d002      	beq.n	8005d6a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	025b      	lsls	r3, r3, #9
 8005d68:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	025b      	lsls	r3, r3, #9
 8005d74:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d76:	2390      	movs	r3, #144	; 0x90
 8005d78:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f107 0214 	add.w	r2, r7, #20
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f002 fecb 	bl	8008b2c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d90a      	bls.n	8005dc2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2202      	movs	r2, #2
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db8:	4618      	mov	r0, r3
 8005dba:	f002 ff29 	bl	8008c10 <SDMMC_CmdReadMultiBlock>
 8005dbe:	6478      	str	r0, [r7, #68]	; 0x44
 8005dc0:	e009      	b.n	8005dd6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f002 fefb 	bl	8008bca <SDMMC_CmdReadSingleBlock>
 8005dd4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a84      	ldr	r2, [pc, #528]	; (8005ff4 <HAL_SD_ReadBlocks+0x30c>)
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0f3      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e06:	e058      	b.n	8005eba <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d033      	beq.n	8005e7e <HAL_SD_ReadBlocks+0x196>
 8005e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e18:	2b1f      	cmp	r3, #31
 8005e1a:	d930      	bls.n	8005e7e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e20:	e027      	b.n	8005e72 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f002 fdf8 	bl	8008a1c <SDMMC_ReadFIFO>
 8005e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	3301      	adds	r3, #1
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e48:	3301      	adds	r3, #1
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	3301      	adds	r3, #1
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	0e1b      	lsrs	r3, r3, #24
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	3301      	adds	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6e:	3301      	adds	r3, #1
 8005e70:	643b      	str	r3, [r7, #64]	; 0x40
 8005e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e74:	2b07      	cmp	r3, #7
 8005e76:	d9d4      	bls.n	8005e22 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7a:	3b20      	subs	r3, #32
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005e7e:	f7fb fc2b 	bl	80016d8 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d902      	bls.n	8005e94 <HAL_SD_ReadBlocks+0x1ac>
 8005e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d112      	bne.n	8005eba <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a56      	ldr	r2, [pc, #344]	; (8005ff4 <HAL_SD_ReadBlocks+0x30c>)
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e097      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d09f      	beq.n	8005e08 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d022      	beq.n	8005f2c <HAL_SD_ReadBlocks+0x244>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d91f      	bls.n	8005f2c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d01b      	beq.n	8005f2c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f002 fef3 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8005efe:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d012      	beq.n	8005f2c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3a      	ldr	r2, [pc, #232]	; (8005ff4 <HAL_SD_ReadBlocks+0x30c>)
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e05e      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ff4 <HAL_SD_ReadBlocks+0x30c>)
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	f043 0208 	orr.w	r2, r3, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e044      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d012      	beq.n	8005f94 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a20      	ldr	r2, [pc, #128]	; (8005ff4 <HAL_SD_ReadBlocks+0x30c>)
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e02a      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d012      	beq.n	8005fc8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <HAL_SD_ReadBlocks+0x30c>)
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e010      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <HAL_SD_ReadBlocks+0x310>)
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e006      	b.n	8005fea <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3748      	adds	r7, #72	; 0x48
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	1fe00fff 	.word	0x1fe00fff
 8005ff8:	18000f3a 	.word	0x18000f3a

08005ffc <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b092      	sub	sp, #72	; 0x48
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800600a:	f7fb fb65 	bl	80016d8 <HAL_GetTick>
 800600e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d107      	bne.n	800602e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e16b      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	f040 815e 	bne.w	80062f8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	429a      	cmp	r2, r3
 800604e:	d907      	bls.n	8006060 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006054:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e152      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2203      	movs	r2, #3
 8006064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2200      	movs	r2, #0
 800606e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	2b01      	cmp	r3, #1
 8006076:	d002      	beq.n	800607e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	025b      	lsls	r3, r3, #9
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	025b      	lsls	r3, r3, #9
 8006088:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800608a:	2390      	movs	r3, #144	; 0x90
 800608c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006092:	2300      	movs	r3, #0
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006096:	2300      	movs	r3, #0
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f107 0218 	add.w	r2, r7, #24
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f002 fd41 	bl	8008b2c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d90a      	bls.n	80060d6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 fde5 	bl	8008c9c <SDMMC_CmdWriteMultiBlock>
 80060d2:	6478      	str	r0, [r7, #68]	; 0x44
 80060d4:	e009      	b.n	80060ea <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2210      	movs	r2, #16
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e2:	4618      	mov	r0, r3
 80060e4:	f002 fdb7 	bl	8008c56 <SDMMC_CmdWriteSingleBlock>
 80060e8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80060ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d012      	beq.n	8006116 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a86      	ldr	r2, [pc, #536]	; (8006310 <HAL_SD_WriteBlocks+0x314>)
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fe:	431a      	orrs	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0f7      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800611a:	e05c      	b.n	80061d6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d037      	beq.n	800619a <HAL_SD_WriteBlocks+0x19e>
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	2b1f      	cmp	r3, #31
 800612e:	d934      	bls.n	800619a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006130:	2300      	movs	r3, #0
 8006132:	643b      	str	r3, [r7, #64]	; 0x40
 8006134:	e02b      	b.n	800618e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613e:	3301      	adds	r3, #1
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	021a      	lsls	r2, r3, #8
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	3301      	adds	r3, #1
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	041a      	lsls	r2, r3, #16
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	3301      	adds	r3, #1
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	061a      	lsls	r2, r3, #24
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	3301      	adds	r3, #1
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f107 0214 	add.w	r2, r7, #20
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f002 fc57 	bl	8008a36 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618a:	3301      	adds	r3, #1
 800618c:	643b      	str	r3, [r7, #64]	; 0x40
 800618e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006190:	2b07      	cmp	r3, #7
 8006192:	d9d0      	bls.n	8006136 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	3b20      	subs	r3, #32
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800619a:	f7fb fa9d 	bl	80016d8 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d902      	bls.n	80061b0 <HAL_SD_WriteBlocks+0x1b4>
 80061aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d112      	bne.n	80061d6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a56      	ldr	r2, [pc, #344]	; (8006310 <HAL_SD_WriteBlocks+0x314>)
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	431a      	orrs	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e097      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d09b      	beq.n	800611c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d022      	beq.n	8006248 <HAL_SD_WriteBlocks+0x24c>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d91f      	bls.n	8006248 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	2b03      	cmp	r3, #3
 800620e:	d01b      	beq.n	8006248 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f002 fd65 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 800621a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800621c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621e:	2b00      	cmp	r3, #0
 8006220:	d012      	beq.n	8006248 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <HAL_SD_WriteBlocks+0x314>)
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e05e      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d012      	beq.n	800627c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2d      	ldr	r2, [pc, #180]	; (8006310 <HAL_SD_WriteBlocks+0x314>)
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	f043 0208 	orr.w	r2, r3, #8
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e044      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d012      	beq.n	80062b0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a20      	ldr	r2, [pc, #128]	; (8006310 <HAL_SD_WriteBlocks+0x314>)
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	f043 0202 	orr.w	r2, r3, #2
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e02a      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d012      	beq.n	80062e4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_SD_WriteBlocks+0x314>)
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	f043 0210 	orr.w	r2, r3, #16
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e010      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <HAL_SD_WriteBlocks+0x318>)
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e006      	b.n	8006306 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	3748      	adds	r7, #72	; 0x48
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	1fe00fff 	.word	0x1fe00fff
 8006314:	18000f3a 	.word	0x18000f3a

08006318 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_SD_IRQHandler+0x2e>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 f924 	bl	800758c <SD_Read_IT>
 8006344:	e19a      	b.n	800667c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80ac 	beq.w	80064ae <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800635e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b9d      	ldr	r3, [pc, #628]	; (80065e0 <HAL_SD_IRQHandler+0x2c8>)
 800636c:	400b      	ands	r3, r1
 800636e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800637e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d038      	beq.n	800640c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_SD_IRQHandler+0x96>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d011      	beq.n	80063d2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f002 fc96 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 80063b8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f959 	bl	8006684 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a83      	ldr	r2, [pc, #524]	; (80065e4 <HAL_SD_IRQHandler+0x2cc>)
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <HAL_SD_IRQHandler+0xe4>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f003 f951 	bl	80096a4 <HAL_SD_RxCpltCallback>
 8006402:	e13b      	b.n	800667c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f003 f943 	bl	8009690 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800640a:	e137      	b.n	800667c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8132 	beq.w	800667c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2200      	movs	r2, #0
 800641e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_SD_IRQHandler+0x12c>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d011      	beq.n	8006468 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f002 fc4b 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 800644e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d008      	beq.n	8006468 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f90e 	bl	8006684 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <HAL_SD_IRQHandler+0x172>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f003 f900 	bl	8009690 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <HAL_SD_IRQHandler+0x18e>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80eb 	beq.w	800667c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f003 f8fc 	bl	80096a4 <HAL_SD_RxCpltCallback>
}
 80064ac:	e0e6      	b.n	800667c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_SD_IRQHandler+0x1b6>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 f8a6 	bl	8007618 <SD_Write_IT>
 80064cc:	e0d6      	b.n	800667c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80a2 	beq.w	8006622 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	f043 0202 	orr.w	r2, r3, #2
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	f043 0208 	orr.w	r2, r3, #8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	f043 0210 	orr.w	r2, r3, #16
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_SD_IRQHandler+0x2cc>)
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800657c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800658c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f002 fba6 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8006598:	4602      	mov	r2, r0
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00f      	beq.n	80065e8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f854 	bl	8006684 <HAL_SD_ErrorCallback>
}
 80065dc:	e04e      	b.n	800667c <HAL_SD_IRQHandler+0x364>
 80065de:	bf00      	nop
 80065e0:	ffff3ec5 	.word	0xffff3ec5
 80065e4:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d044      	beq.n	800667c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d040      	beq.n	800667c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006608:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f832 	bl	8006684 <HAL_SD_ErrorCallback>
}
 8006620:	e02c      	b.n	800667c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d025      	beq.n	800667c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10c      	bne.n	8006662 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f848 	bl	80076e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006658:	e010      	b.n	800667c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 f830 	bl	80076c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006660:	e00c      	b.n	800667c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f831 	bl	80076d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006672:	e003      	b.n	800667c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f819 	bl	80076ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800667a:	e7ff      	b.n	800667c <HAL_SD_IRQHandler+0x364>
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a6:	0f9b      	lsrs	r3, r3, #30
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	0e9b      	lsrs	r3, r3, #26
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	0e1b      	lsrs	r3, r3, #24
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	0d1b      	lsrs	r3, r3, #20
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	b2da      	uxtb	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	0bdb      	lsrs	r3, r3, #15
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006728:	0b9b      	lsrs	r3, r3, #14
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	b2da      	uxtb	r2, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	0b5b      	lsrs	r3, r3, #13
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	b2da      	uxtb	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674c:	0b1b      	lsrs	r3, r3, #12
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d163      	bne.n	8006830 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676c:	009a      	lsls	r2, r3, #2
 800676e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006772:	4013      	ands	r3, r2
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006778:	0f92      	lsrs	r2, r2, #30
 800677a:	431a      	orrs	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006784:	0edb      	lsrs	r3, r3, #27
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	b2da      	uxtb	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006796:	0e1b      	lsrs	r3, r3, #24
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a8:	0d5b      	lsrs	r3, r3, #21
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ba:	0c9b      	lsrs	r3, r3, #18
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067cc:	0bdb      	lsrs	r3, r3, #15
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	7e1b      	ldrb	r3, [r3, #24]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	3302      	adds	r3, #2
 80067f0:	2201      	movs	r2, #1
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067fa:	fb02 f203 	mul.w	r2, r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	7a1b      	ldrb	r3, [r3, #8]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	2201      	movs	r2, #1
 800680e:	409a      	lsls	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800681c:	0a52      	lsrs	r2, r2, #9
 800681e:	fb02 f203 	mul.w	r2, r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
 800682e:	e031      	b.n	8006894 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	2b01      	cmp	r3, #1
 8006836:	d11d      	bne.n	8006874 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	431a      	orrs	r2, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	3301      	adds	r3, #1
 8006854:	029a      	lsls	r2, r3, #10
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006868:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
 8006872:	e00f      	b.n	8006894 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a58      	ldr	r2, [pc, #352]	; (80069dc <HAL_SD_GetCardCSD+0x344>)
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e09d      	b.n	80069d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006898:	0b9b      	lsrs	r3, r3, #14
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068cc:	0fdb      	lsrs	r3, r3, #31
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d8:	0f5b      	lsrs	r3, r3, #29
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ea:	0e9b      	lsrs	r3, r3, #26
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068fc:	0d9b      	lsrs	r3, r3, #22
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	b2da      	uxtb	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690e:	0d5b      	lsrs	r3, r3, #21
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693e:	0bdb      	lsrs	r3, r3, #15
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006952:	0b9b      	lsrs	r3, r3, #14
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006966:	0b5b      	lsrs	r3, r3, #13
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697a:	0b1b      	lsrs	r3, r3, #12
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698e:	0a9b      	lsrs	r3, r3, #10
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	1fe00fff 	.word	0x1fe00fff

080069e0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b094      	sub	sp, #80	; 0x50
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d101      	bne.n	8006a00 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a7      	b.n	8006b50 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a00:	f107 0308 	add.w	r3, r7, #8
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb62 	bl	80070d0 <SD_SendSDStatus>
 8006a0c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d011      	beq.n	8006a38 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a4f      	ldr	r2, [pc, #316]	; (8006b58 <HAL_SD_GetCardStatus+0x178>)
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a36:	e070      	b.n	8006b1a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	099b      	lsrs	r3, r3, #6
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	0e1b      	lsrs	r3, r3, #24
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	061a      	lsls	r2, r3, #24
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a7e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	0e1b      	lsrs	r3, r3, #24
 8006a8e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	0a1b      	lsrs	r3, r3, #8
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	0d1b      	lsrs	r3, r3, #20
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	0a9b      	lsrs	r3, r3, #10
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	0a1b      	lsrs	r3, r3, #8
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	0e1b      	lsrs	r3, r3, #24
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b22:	4618      	mov	r0, r3
 8006b24:	f002 f82e 	bl	8008b84 <SDMMC_CmdBlockLength>
 8006b28:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00d      	beq.n	8006b4c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <HAL_SD_GetCardStatus+0x178>)
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b3c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3750      	adds	r7, #80	; 0x50
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	1fe00fff 	.word	0x1fe00fff

08006b5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b08d      	sub	sp, #52	; 0x34
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2203      	movs	r2, #3
 8006bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d02e      	beq.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bde:	d106      	bne.n	8006bee <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	635a      	str	r2, [r3, #52]	; 0x34
 8006bec:	e029      	b.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf4:	d10a      	bne.n	8006c0c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fb62 	bl	80072c0 <SD_WideBus_Enable>
 8006bfc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	635a      	str	r2, [r3, #52]	; 0x34
 8006c0a:	e01a      	b.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fb9f 	bl	8007356 <SD_WideBus_Disable>
 8006c18:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34
 8006c26:	e00c      	b.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	635a      	str	r2, [r3, #52]	; 0x34
 8006c34:	e005      	b.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a5e      	ldr	r2, [pc, #376]	; (8006dc8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c58:	e094      	b.n	8006d84 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c5e:	f7fd fd91 	bl	8004784 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c62:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8083 	beq.w	8006d72 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	4950      	ldr	r1, [pc, #320]	; (8006dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c8e:	0e1b      	lsrs	r3, r3, #24
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d303      	bcc.n	8006c9c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e05a      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca4:	d103      	bne.n	8006cae <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	e051      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb6:	d126      	bne.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10e      	bne.n	8006cde <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	4a43      	ldr	r2, [pc, #268]	; (8006dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d906      	bls.n	8006cd6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	4a40      	ldr	r2, [pc, #256]	; (8006dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd0:	0e5b      	lsrs	r3, r3, #25
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e03d      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e039      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	6a3a      	ldr	r2, [r7, #32]
 8006ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cea:	4a39      	ldr	r2, [pc, #228]	; (8006dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d906      	bls.n	8006cfe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	4a36      	ldr	r2, [pc, #216]	; (8006dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	0e5b      	lsrs	r3, r3, #25
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	e029      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e025      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10e      	bne.n	8006d2c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	4a30      	ldr	r2, [pc, #192]	; (8006dd4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d906      	bls.n	8006d24 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	4a2c      	ldr	r2, [pc, #176]	; (8006dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	0e1b      	lsrs	r3, r3, #24
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e016      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e012      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d906      	bls.n	8006d4c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	0e1b      	lsrs	r3, r3, #24
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e002      	b.n	8006d52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681c      	ldr	r4, [r3, #0]
 8006d56:	466a      	mov	r2, sp
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d60:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f001 fe2c 	bl	80089c8 <SDMMC_Init>
 8006d70:	e008      	b.n	8006d84 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 fef9 	bl	8008b84 <SDMMC_CmdBlockLength>
 8006d92:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	372c      	adds	r7, #44	; 0x2c
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd90      	pop	{r4, r7, pc}
 8006dc8:	1fe00fff 	.word	0x1fe00fff
 8006dcc:	55e63b89 	.word	0x55e63b89
 8006dd0:	02faf080 	.word	0x02faf080
 8006dd4:	017d7840 	.word	0x017d7840

08006dd8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006de4:	f107 030c 	add.w	r3, r7, #12
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa40 	bl	8007270 <SD_SendStatus>
 8006df0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	0a5b      	lsrs	r3, r3, #9
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e0e:	693b      	ldr	r3, [r7, #16]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b090      	sub	sp, #64	; 0x40
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e24:	f7fa fc58 	bl	80016d8 <HAL_GetTick>
 8006e28:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fe23 	bl	8008a7a <SDMMC_GetPowerState>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e3e:	e0b5      	b.n	8006fac <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d02e      	beq.n	8006ea6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f002 f86e 	bl	8008f2e <SDMMC_CmdSendCID>
 8006e52:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <SD_InitCard+0x46>
    {
      return errorstate;
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	e0a6      	b.n	8006fac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 fe4e 	bl	8008b06 <SDMMC_GetResponse>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2104      	movs	r1, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 fe45 	bl	8008b06 <SDMMC_GetResponse>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2108      	movs	r1, #8
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 fe3c 	bl	8008b06 <SDMMC_GetResponse>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	210c      	movs	r1, #12
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f001 fe33 	bl	8008b06 <SDMMC_GetResponse>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d01d      	beq.n	8006eea <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006eae:	e019      	b.n	8006ee4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f107 020a 	add.w	r2, r7, #10
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f002 f876 	bl	8008fac <SDMMC_CmdSetRelAdd>
 8006ec0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <SD_InitCard+0xb4>
      {
        return errorstate;
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	e06f      	b.n	8006fac <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006ecc:	f7fa fc04 	bl	80016d8 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3287 	movw	r2, #4999	; 0x1387
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d902      	bls.n	8006ee4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006ede:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ee2:	e063      	b.n	8006fac <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006ee4:	897b      	ldrh	r3, [r7, #10]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0e2      	beq.n	8006eb0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d036      	beq.n	8006f60 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ef2:	897b      	ldrh	r3, [r7, #10]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f002 f830 	bl	8008f6c <SDMMC_CmdSendCSD>
 8006f0c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	e049      	b.n	8006fac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 fdf1 	bl	8008b06 <SDMMC_GetResponse>
 8006f24:	4602      	mov	r2, r0
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2104      	movs	r1, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fde8 	bl	8008b06 <SDMMC_GetResponse>
 8006f36:	4602      	mov	r2, r0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2108      	movs	r1, #8
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 fddf 	bl	8008b06 <SDMMC_GetResponse>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	210c      	movs	r1, #12
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fdd6 	bl	8008b06 <SDMMC_GetResponse>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2104      	movs	r1, #4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fdcd 	bl	8008b06 <SDMMC_GetResponse>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	0d1a      	lsrs	r2, r3, #20
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fb8c 	bl	8006698 <HAL_SD_GetCardCSD>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f8a:	e00f      	b.n	8006fac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f001 fedf 	bl	8008d5c <SDMMC_CmdSelDesel>
 8006f9e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <SD_InitCard+0x192>
  {
    return errorstate;
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	e000      	b.n	8006fac <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3740      	adds	r7, #64	; 0x40
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fee8 	bl	8008da2 <SDMMC_CmdGoIdleState>
 8006fd2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <SD_PowerON+0x2a>
  {
    return errorstate;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	e072      	b.n	80070c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 fefb 	bl	8008dde <SDMMC_CmdOperCond>
 8006fe8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff0:	d10d      	bne.n	800700e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 fed0 	bl	8008da2 <SDMMC_CmdGoIdleState>
 8007002:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <SD_PowerON+0x60>
    {
      return errorstate;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	e05a      	b.n	80070c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d137      	bne.n	800708c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fefb 	bl	8008e1e <SDMMC_CmdAppCommand>
 8007028:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02d      	beq.n	800708c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007030:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007034:	e046      	b.n	80070c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f001 feee 	bl	8008e1e <SDMMC_CmdAppCommand>
 8007042:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <SD_PowerON+0x9a>
    {
      return errorstate;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	e03a      	b.n	80070c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	491e      	ldr	r1, [pc, #120]	; (80070cc <SD_PowerON+0x118>)
 8007054:	4618      	mov	r0, r3
 8007056:	f001 ff05 	bl	8008e64 <SDMMC_CmdAppOperCommand>
 800705a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007066:	e02d      	b.n	80070c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fd49 	bl	8008b06 <SDMMC_GetResponse>
 8007074:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	0fdb      	lsrs	r3, r3, #31
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <SD_PowerON+0xce>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <SD_PowerON+0xd0>
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]

    count++;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	3301      	adds	r3, #1
 800708a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007092:	4293      	cmp	r3, r2
 8007094:	d802      	bhi.n	800709c <SD_PowerON+0xe8>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0cc      	beq.n	8007036 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d902      	bls.n	80070ac <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070aa:	e00b      	b.n	80070c4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	c1100000 	.word	0xc1100000

080070d0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070da:	f7fa fafd 	bl	80016d8 <HAL_GetTick>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 fd0b 	bl	8008b06 <SDMMC_GetResponse>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fa:	d102      	bne.n	8007102 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007100:	e0b0      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2140      	movs	r1, #64	; 0x40
 8007108:	4618      	mov	r0, r3
 800710a:	f001 fd3b 	bl	8008b84 <SDMMC_CmdBlockLength>
 800710e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	e0a0      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f001 fe75 	bl	8008e1e <SDMMC_CmdAppCommand>
 8007134:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	e08d      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800714e:	2340      	movs	r3, #64	; 0x40
 8007150:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007152:	2360      	movs	r3, #96	; 0x60
 8007154:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007156:	2302      	movs	r3, #2
 8007158:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800715e:	2301      	movs	r3, #1
 8007160:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f107 0208 	add.w	r2, r7, #8
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fcdd 	bl	8008b2c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f001 ff5d 	bl	8009036 <SDMMC_CmdStatusRegister>
 800717c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02b      	beq.n	80071dc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	e069      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d013      	beq.n	80071c6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800719e:	2300      	movs	r3, #0
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a2:	e00d      	b.n	80071c0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 fc37 	bl	8008a1c <SDMMC_ReadFIFO>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	601a      	str	r2, [r3, #0]
        pData++;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	3304      	adds	r3, #4
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	3301      	adds	r3, #1
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	2b07      	cmp	r3, #7
 80071c4:	d9ee      	bls.n	80071a4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071c6:	f7fa fa87 	bl	80016d8 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d102      	bne.n	80071dc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071da:	e043      	b.n	8007264 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0d2      	beq.n	8007190 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071f8:	2308      	movs	r3, #8
 80071fa:	e033      	b.n	8007264 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800720a:	2302      	movs	r3, #2
 800720c:	e02a      	b.n	8007264 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d017      	beq.n	800724c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800721c:	2320      	movs	r3, #32
 800721e:	e021      	b.n	8007264 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f001 fbf9 	bl	8008a1c <SDMMC_ReadFIFO>
 800722a:	4602      	mov	r2, r0
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	601a      	str	r2, [r3, #0]
    pData++;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	3304      	adds	r3, #4
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007236:	f7fa fa4f 	bl	80016d8 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d102      	bne.n	800724c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007246:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800724a:	e00b      	b.n	8007264 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e2      	bne.n	8007220 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a03      	ldr	r2, [pc, #12]	; (800726c <SD_SendSDStatus+0x19c>)
 8007260:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3730      	adds	r7, #48	; 0x30
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	18000f3a 	.word	0x18000f3a

08007270 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007280:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007284:	e018      	b.n	80072b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f001 feac 	bl	8008ff0 <SDMMC_CmdSendStatus>
 8007298:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	e009      	b.n	80072b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fc2b 	bl	8008b06 <SDMMC_GetResponse>
 80072b0:	4602      	mov	r2, r0
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	2300      	movs	r3, #0
 80072ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 fc15 	bl	8008b06 <SDMMC_GetResponse>
 80072dc:	4603      	mov	r3, r0
 80072de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e6:	d102      	bne.n	80072ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072ec:	e02f      	b.n	800734e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f879 	bl	80073ec <SD_FindSCR>
 80072fa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	e023      	b.n	800734e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01c      	beq.n	800734a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	041b      	lsls	r3, r3, #16
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f001 fd7e 	bl	8008e1e <SDMMC_CmdAppCommand>
 8007322:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	e00f      	b.n	800734e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2102      	movs	r1, #2
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fdb5 	bl	8008ea4 <SDMMC_CmdBusWidth>
 800733a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	e003      	b.n	800734e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007346:	2300      	movs	r3, #0
 8007348:	e001      	b.n	800734e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800734a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fbca 	bl	8008b06 <SDMMC_GetResponse>
 8007372:	4603      	mov	r3, r0
 8007374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800737c:	d102      	bne.n	8007384 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800737e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007382:	e02f      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007384:	f107 030c 	add.w	r3, r7, #12
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f82e 	bl	80073ec <SD_FindSCR>
 8007390:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e023      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01c      	beq.n	80073e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f001 fd33 	bl	8008e1e <SDMMC_CmdAppCommand>
 80073b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	e00f      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 fd6a 	bl	8008ea4 <SDMMC_CmdBusWidth>
 80073d0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	e003      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073dc:	2300      	movs	r3, #0
 80073de:	e001      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073f6:	f7fa f96f 	bl	80016d8 <HAL_GetTick>
 80073fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007400:	2300      	movs	r3, #0
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2108      	movs	r1, #8
 8007412:	4618      	mov	r0, r3
 8007414:	f001 fbb6 	bl	8008b84 <SDMMC_CmdBlockLength>
 8007418:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	e0ad      	b.n	8007580 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f001 fcf4 	bl	8008e1e <SDMMC_CmdAppCommand>
 8007436:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <SD_FindSCR+0x56>
  {
    return errorstate;
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	e09e      	b.n	8007580 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007448:	2308      	movs	r3, #8
 800744a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800744c:	2330      	movs	r3, #48	; 0x30
 800744e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007450:	2302      	movs	r3, #2
 8007452:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007454:	2300      	movs	r3, #0
 8007456:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007458:	2301      	movs	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f107 0210 	add.w	r2, r7, #16
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f001 fb60 	bl	8008b2c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f001 fd3a 	bl	8008eea <SDMMC_CmdSendSCR>
 8007476:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d027      	beq.n	80074ce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	e07e      	b.n	8007580 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d113      	bne.n	80074b8 <SD_FindSCR+0xcc>
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	2b00      	cmp	r3, #0
 8007494:	d110      	bne.n	80074b8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fabe 	bl	8008a1c <SDMMC_ReadFIFO>
 80074a0:	4603      	mov	r3, r0
 80074a2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fab7 	bl	8008a1c <SDMMC_ReadFIFO>
 80074ae:	4603      	mov	r3, r0
 80074b0:	60fb      	str	r3, [r7, #12]
      index++;
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	3301      	adds	r3, #1
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074b8:	f7fa f90e 	bl	80016d8 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d102      	bne.n	80074ce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074cc:	e058      	b.n	8007580 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d4:	f240 532a 	movw	r3, #1322	; 0x52a
 80074d8:	4013      	ands	r3, r2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0d1      	beq.n	8007482 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2208      	movs	r2, #8
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074f4:	2308      	movs	r3, #8
 80074f6:	e043      	b.n	8007580 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2202      	movs	r2, #2
 800750c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	e036      	b.n	8007580 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2220      	movs	r2, #32
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007528:	2320      	movs	r3, #32
 800752a:	e029      	b.n	8007580 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a15      	ldr	r2, [pc, #84]	; (8007588 <SD_FindSCR+0x19c>)
 8007532:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	061a      	lsls	r2, r3, #24
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007540:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800754a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0e1b      	lsrs	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	601a      	str	r2, [r3, #0]
    scr++;
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	3304      	adds	r3, #4
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	061a      	lsls	r2, r3, #24
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007568:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007572:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	0e1b      	lsrs	r3, r3, #24
 8007578:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3738      	adds	r7, #56	; 0x38
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	18000f3a 	.word	0x18000f3a

0800758c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	2b1f      	cmp	r3, #31
 80075a0:	d936      	bls.n	8007610 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e027      	b.n	80075f8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fa35 	bl	8008a1c <SDMMC_ReadFIFO>
 80075b2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3301      	adds	r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	3301      	adds	r3, #1
 80075d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	3301      	adds	r3, #1
 80075e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	0e1b      	lsrs	r3, r3, #24
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	3301      	adds	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d9d4      	bls.n	80075a8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f1a3 0220 	sub.w	r2, r3, #32
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	2b1f      	cmp	r3, #31
 800762c:	d93a      	bls.n	80076a4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e02b      	b.n	800768c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
      tmp++;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3301      	adds	r3, #1
 800763e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	021a      	lsls	r2, r3, #8
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3301      	adds	r3, #1
 8007650:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	041a      	lsls	r2, r3, #16
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	3301      	adds	r3, #1
 8007662:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	061a      	lsls	r2, r3, #24
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	3301      	adds	r3, #1
 8007674:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f107 020c 	add.w	r2, r7, #12
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f001 f9d8 	bl	8008a36 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	3301      	adds	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b07      	cmp	r3, #7
 8007690:	d9d0      	bls.n	8007634 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	f1a3 0220 	sub.w	r2, r3, #32
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	621a      	str	r2, [r3, #32]
  }
}
 80076a4:	bf00      	nop
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e042      	b.n	8007794 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7f9 fdd7 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2224      	movs	r2, #36	; 0x24
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0201 	bic.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f82c 	bl	800779c <UART_SetConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e022      	b.n	8007794 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fe7e 	bl	8008458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800776a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800777a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff05 	bl	800859c <UART_CheckIdleState>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800779c:	b5b0      	push	{r4, r5, r7, lr}
 800779e:	b08e      	sub	sp, #56	; 0x38
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	4313      	orrs	r3, r2
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	4bbf      	ldr	r3, [pc, #764]	; (8007ac8 <UART_SetConfig+0x32c>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077d2:	430b      	orrs	r3, r1
 80077d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4ab5      	ldr	r2, [pc, #724]	; (8007acc <UART_SetConfig+0x330>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d004      	beq.n	8007806 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007802:	4313      	orrs	r3, r2
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	4bb0      	ldr	r3, [pc, #704]	; (8007ad0 <UART_SetConfig+0x334>)
 800780e:	4013      	ands	r3, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007816:	430b      	orrs	r3, r1
 8007818:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	f023 010f 	bic.w	r1, r3, #15
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4aa7      	ldr	r2, [pc, #668]	; (8007ad4 <UART_SetConfig+0x338>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d176      	bne.n	8007928 <UART_SetConfig+0x18c>
 800783a:	4ba7      	ldr	r3, [pc, #668]	; (8007ad8 <UART_SetConfig+0x33c>)
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007842:	2b28      	cmp	r3, #40	; 0x28
 8007844:	d86c      	bhi.n	8007920 <UART_SetConfig+0x184>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0xb0>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	080078f1 	.word	0x080078f1
 8007850:	08007921 	.word	0x08007921
 8007854:	08007921 	.word	0x08007921
 8007858:	08007921 	.word	0x08007921
 800785c:	08007921 	.word	0x08007921
 8007860:	08007921 	.word	0x08007921
 8007864:	08007921 	.word	0x08007921
 8007868:	08007921 	.word	0x08007921
 800786c:	080078f9 	.word	0x080078f9
 8007870:	08007921 	.word	0x08007921
 8007874:	08007921 	.word	0x08007921
 8007878:	08007921 	.word	0x08007921
 800787c:	08007921 	.word	0x08007921
 8007880:	08007921 	.word	0x08007921
 8007884:	08007921 	.word	0x08007921
 8007888:	08007921 	.word	0x08007921
 800788c:	08007901 	.word	0x08007901
 8007890:	08007921 	.word	0x08007921
 8007894:	08007921 	.word	0x08007921
 8007898:	08007921 	.word	0x08007921
 800789c:	08007921 	.word	0x08007921
 80078a0:	08007921 	.word	0x08007921
 80078a4:	08007921 	.word	0x08007921
 80078a8:	08007921 	.word	0x08007921
 80078ac:	08007909 	.word	0x08007909
 80078b0:	08007921 	.word	0x08007921
 80078b4:	08007921 	.word	0x08007921
 80078b8:	08007921 	.word	0x08007921
 80078bc:	08007921 	.word	0x08007921
 80078c0:	08007921 	.word	0x08007921
 80078c4:	08007921 	.word	0x08007921
 80078c8:	08007921 	.word	0x08007921
 80078cc:	08007911 	.word	0x08007911
 80078d0:	08007921 	.word	0x08007921
 80078d4:	08007921 	.word	0x08007921
 80078d8:	08007921 	.word	0x08007921
 80078dc:	08007921 	.word	0x08007921
 80078e0:	08007921 	.word	0x08007921
 80078e4:	08007921 	.word	0x08007921
 80078e8:	08007921 	.word	0x08007921
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f6:	e326      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fe:	e322      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007906:	e31e      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790e:	e31a      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007916:	e316      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791e:	e312      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007926:	e30e      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a6b      	ldr	r2, [pc, #428]	; (8007adc <UART_SetConfig+0x340>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d130      	bne.n	8007994 <UART_SetConfig+0x1f8>
 8007932:	4b69      	ldr	r3, [pc, #420]	; (8007ad8 <UART_SetConfig+0x33c>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d826      	bhi.n	800798c <UART_SetConfig+0x1f0>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0x1a8>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007962:	e2f0      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800796a:	e2ec      	b.n	8007f46 <UART_SetConfig+0x7aa>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007972:	e2e8      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800797a:	e2e4      	b.n	8007f46 <UART_SetConfig+0x7aa>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007982:	e2e0      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800798a:	e2dc      	b.n	8007f46 <UART_SetConfig+0x7aa>
 800798c:	2380      	movs	r3, #128	; 0x80
 800798e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007992:	e2d8      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a51      	ldr	r2, [pc, #324]	; (8007ae0 <UART_SetConfig+0x344>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d130      	bne.n	8007a00 <UART_SetConfig+0x264>
 800799e:	4b4e      	ldr	r3, [pc, #312]	; (8007ad8 <UART_SetConfig+0x33c>)
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d826      	bhi.n	80079f8 <UART_SetConfig+0x25c>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0x214>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	080079d9 	.word	0x080079d9
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ce:	e2ba      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079d6:	e2b6      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079de:	e2b2      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079e6:	e2ae      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80079e8:	2320      	movs	r3, #32
 80079ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ee:	e2aa      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80079f0:	2340      	movs	r3, #64	; 0x40
 80079f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f6:	e2a6      	b.n	8007f46 <UART_SetConfig+0x7aa>
 80079f8:	2380      	movs	r3, #128	; 0x80
 80079fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fe:	e2a2      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a37      	ldr	r2, [pc, #220]	; (8007ae4 <UART_SetConfig+0x348>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d130      	bne.n	8007a6c <UART_SetConfig+0x2d0>
 8007a0a:	4b33      	ldr	r3, [pc, #204]	; (8007ad8 <UART_SetConfig+0x33c>)
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d826      	bhi.n	8007a64 <UART_SetConfig+0x2c8>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <UART_SetConfig+0x280>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	08007a45 	.word	0x08007a45
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a55 	.word	0x08007a55
 8007a30:	08007a5d 	.word	0x08007a5d
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a3a:	e284      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a42:	e280      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a44:	2308      	movs	r3, #8
 8007a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a4a:	e27c      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a52:	e278      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a54:	2320      	movs	r3, #32
 8007a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5a:	e274      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a5c:	2340      	movs	r3, #64	; 0x40
 8007a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a62:	e270      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a64:	2380      	movs	r3, #128	; 0x80
 8007a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6a:	e26c      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <UART_SetConfig+0x34c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d142      	bne.n	8007afc <UART_SetConfig+0x360>
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <UART_SetConfig+0x33c>)
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d838      	bhi.n	8007af4 <UART_SetConfig+0x358>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <UART_SetConfig+0x2ec>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007ab1 	.word	0x08007ab1
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ac1 	.word	0x08007ac1
 8007a9c:	08007aed 	.word	0x08007aed
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e24e      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e24a      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ab6:	e246      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ab8:	2310      	movs	r3, #16
 8007aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007abe:	e242      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac6:	e23e      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ac8:	cfff69f3 	.word	0xcfff69f3
 8007acc:	58000c00 	.word	0x58000c00
 8007ad0:	11fff4ff 	.word	0x11fff4ff
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	40004400 	.word	0x40004400
 8007ae0:	40004800 	.word	0x40004800
 8007ae4:	40004c00 	.word	0x40004c00
 8007ae8:	40005000 	.word	0x40005000
 8007aec:	2340      	movs	r3, #64	; 0x40
 8007aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af2:	e228      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afa:	e224      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4ab1      	ldr	r2, [pc, #708]	; (8007dc8 <UART_SetConfig+0x62c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d176      	bne.n	8007bf4 <UART_SetConfig+0x458>
 8007b06:	4bb1      	ldr	r3, [pc, #708]	; (8007dcc <UART_SetConfig+0x630>)
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b0e:	2b28      	cmp	r3, #40	; 0x28
 8007b10:	d86c      	bhi.n	8007bec <UART_SetConfig+0x450>
 8007b12:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <UART_SetConfig+0x37c>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007bbd 	.word	0x08007bbd
 8007b1c:	08007bed 	.word	0x08007bed
 8007b20:	08007bed 	.word	0x08007bed
 8007b24:	08007bed 	.word	0x08007bed
 8007b28:	08007bed 	.word	0x08007bed
 8007b2c:	08007bed 	.word	0x08007bed
 8007b30:	08007bed 	.word	0x08007bed
 8007b34:	08007bed 	.word	0x08007bed
 8007b38:	08007bc5 	.word	0x08007bc5
 8007b3c:	08007bed 	.word	0x08007bed
 8007b40:	08007bed 	.word	0x08007bed
 8007b44:	08007bed 	.word	0x08007bed
 8007b48:	08007bed 	.word	0x08007bed
 8007b4c:	08007bed 	.word	0x08007bed
 8007b50:	08007bed 	.word	0x08007bed
 8007b54:	08007bed 	.word	0x08007bed
 8007b58:	08007bcd 	.word	0x08007bcd
 8007b5c:	08007bed 	.word	0x08007bed
 8007b60:	08007bed 	.word	0x08007bed
 8007b64:	08007bed 	.word	0x08007bed
 8007b68:	08007bed 	.word	0x08007bed
 8007b6c:	08007bed 	.word	0x08007bed
 8007b70:	08007bed 	.word	0x08007bed
 8007b74:	08007bed 	.word	0x08007bed
 8007b78:	08007bd5 	.word	0x08007bd5
 8007b7c:	08007bed 	.word	0x08007bed
 8007b80:	08007bed 	.word	0x08007bed
 8007b84:	08007bed 	.word	0x08007bed
 8007b88:	08007bed 	.word	0x08007bed
 8007b8c:	08007bed 	.word	0x08007bed
 8007b90:	08007bed 	.word	0x08007bed
 8007b94:	08007bed 	.word	0x08007bed
 8007b98:	08007bdd 	.word	0x08007bdd
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bed 	.word	0x08007bed
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc2:	e1c0      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bca:	e1bc      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bd2:	e1b8      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bda:	e1b4      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be2:	e1b0      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bea:	e1ac      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e1a8      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a75      	ldr	r2, [pc, #468]	; (8007dd0 <UART_SetConfig+0x634>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d130      	bne.n	8007c60 <UART_SetConfig+0x4c4>
 8007bfe:	4b73      	ldr	r3, [pc, #460]	; (8007dcc <UART_SetConfig+0x630>)
 8007c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	d826      	bhi.n	8007c58 <UART_SetConfig+0x4bc>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0x474>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c29 	.word	0x08007c29
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2e:	e18a      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c30:	2304      	movs	r3, #4
 8007c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c36:	e186      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c3e:	e182      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c46:	e17e      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c4e:	e17a      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c50:	2340      	movs	r3, #64	; 0x40
 8007c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c56:	e176      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c58:	2380      	movs	r3, #128	; 0x80
 8007c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5e:	e172      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a5b      	ldr	r2, [pc, #364]	; (8007dd4 <UART_SetConfig+0x638>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d130      	bne.n	8007ccc <UART_SetConfig+0x530>
 8007c6a:	4b58      	ldr	r3, [pc, #352]	; (8007dcc <UART_SetConfig+0x630>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d826      	bhi.n	8007cc4 <UART_SetConfig+0x528>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <UART_SetConfig+0x4e0>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	08007ca5 	.word	0x08007ca5
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cbd 	.word	0x08007cbd
 8007c94:	2300      	movs	r3, #0
 8007c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c9a:	e154      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ca2:	e150      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007caa:	e14c      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007cac:	2310      	movs	r3, #16
 8007cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cb2:	e148      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007cb4:	2320      	movs	r3, #32
 8007cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cba:	e144      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007cbc:	2340      	movs	r3, #64	; 0x40
 8007cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc2:	e140      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cca:	e13c      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a41      	ldr	r2, [pc, #260]	; (8007dd8 <UART_SetConfig+0x63c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	f040 8082 	bne.w	8007ddc <UART_SetConfig+0x640>
 8007cd8:	4b3c      	ldr	r3, [pc, #240]	; (8007dcc <UART_SetConfig+0x630>)
 8007cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ce0:	2b28      	cmp	r3, #40	; 0x28
 8007ce2:	d86d      	bhi.n	8007dc0 <UART_SetConfig+0x624>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <UART_SetConfig+0x550>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d91 	.word	0x08007d91
 8007cf0:	08007dc1 	.word	0x08007dc1
 8007cf4:	08007dc1 	.word	0x08007dc1
 8007cf8:	08007dc1 	.word	0x08007dc1
 8007cfc:	08007dc1 	.word	0x08007dc1
 8007d00:	08007dc1 	.word	0x08007dc1
 8007d04:	08007dc1 	.word	0x08007dc1
 8007d08:	08007dc1 	.word	0x08007dc1
 8007d0c:	08007d99 	.word	0x08007d99
 8007d10:	08007dc1 	.word	0x08007dc1
 8007d14:	08007dc1 	.word	0x08007dc1
 8007d18:	08007dc1 	.word	0x08007dc1
 8007d1c:	08007dc1 	.word	0x08007dc1
 8007d20:	08007dc1 	.word	0x08007dc1
 8007d24:	08007dc1 	.word	0x08007dc1
 8007d28:	08007dc1 	.word	0x08007dc1
 8007d2c:	08007da1 	.word	0x08007da1
 8007d30:	08007dc1 	.word	0x08007dc1
 8007d34:	08007dc1 	.word	0x08007dc1
 8007d38:	08007dc1 	.word	0x08007dc1
 8007d3c:	08007dc1 	.word	0x08007dc1
 8007d40:	08007dc1 	.word	0x08007dc1
 8007d44:	08007dc1 	.word	0x08007dc1
 8007d48:	08007dc1 	.word	0x08007dc1
 8007d4c:	08007da9 	.word	0x08007da9
 8007d50:	08007dc1 	.word	0x08007dc1
 8007d54:	08007dc1 	.word	0x08007dc1
 8007d58:	08007dc1 	.word	0x08007dc1
 8007d5c:	08007dc1 	.word	0x08007dc1
 8007d60:	08007dc1 	.word	0x08007dc1
 8007d64:	08007dc1 	.word	0x08007dc1
 8007d68:	08007dc1 	.word	0x08007dc1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007dc1 	.word	0x08007dc1
 8007d74:	08007dc1 	.word	0x08007dc1
 8007d78:	08007dc1 	.word	0x08007dc1
 8007d7c:	08007dc1 	.word	0x08007dc1
 8007d80:	08007dc1 	.word	0x08007dc1
 8007d84:	08007dc1 	.word	0x08007dc1
 8007d88:	08007dc1 	.word	0x08007dc1
 8007d8c:	08007db9 	.word	0x08007db9
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d96:	e0d6      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d9e:	e0d2      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007da0:	2308      	movs	r3, #8
 8007da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007da6:	e0ce      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dae:	e0ca      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007db0:	2320      	movs	r3, #32
 8007db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db6:	e0c6      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007db8:	2340      	movs	r3, #64	; 0x40
 8007dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dbe:	e0c2      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007dc0:	2380      	movs	r3, #128	; 0x80
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e0be      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007dc8:	40011400 	.word	0x40011400
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	40007800 	.word	0x40007800
 8007dd4:	40007c00 	.word	0x40007c00
 8007dd8:	40011800 	.word	0x40011800
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4aad      	ldr	r2, [pc, #692]	; (8008098 <UART_SetConfig+0x8fc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d176      	bne.n	8007ed4 <UART_SetConfig+0x738>
 8007de6:	4bad      	ldr	r3, [pc, #692]	; (800809c <UART_SetConfig+0x900>)
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dee:	2b28      	cmp	r3, #40	; 0x28
 8007df0:	d86c      	bhi.n	8007ecc <UART_SetConfig+0x730>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0x65c>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e9d 	.word	0x08007e9d
 8007dfc:	08007ecd 	.word	0x08007ecd
 8007e00:	08007ecd 	.word	0x08007ecd
 8007e04:	08007ecd 	.word	0x08007ecd
 8007e08:	08007ecd 	.word	0x08007ecd
 8007e0c:	08007ecd 	.word	0x08007ecd
 8007e10:	08007ecd 	.word	0x08007ecd
 8007e14:	08007ecd 	.word	0x08007ecd
 8007e18:	08007ea5 	.word	0x08007ea5
 8007e1c:	08007ecd 	.word	0x08007ecd
 8007e20:	08007ecd 	.word	0x08007ecd
 8007e24:	08007ecd 	.word	0x08007ecd
 8007e28:	08007ecd 	.word	0x08007ecd
 8007e2c:	08007ecd 	.word	0x08007ecd
 8007e30:	08007ecd 	.word	0x08007ecd
 8007e34:	08007ecd 	.word	0x08007ecd
 8007e38:	08007ead 	.word	0x08007ead
 8007e3c:	08007ecd 	.word	0x08007ecd
 8007e40:	08007ecd 	.word	0x08007ecd
 8007e44:	08007ecd 	.word	0x08007ecd
 8007e48:	08007ecd 	.word	0x08007ecd
 8007e4c:	08007ecd 	.word	0x08007ecd
 8007e50:	08007ecd 	.word	0x08007ecd
 8007e54:	08007ecd 	.word	0x08007ecd
 8007e58:	08007eb5 	.word	0x08007eb5
 8007e5c:	08007ecd 	.word	0x08007ecd
 8007e60:	08007ecd 	.word	0x08007ecd
 8007e64:	08007ecd 	.word	0x08007ecd
 8007e68:	08007ecd 	.word	0x08007ecd
 8007e6c:	08007ecd 	.word	0x08007ecd
 8007e70:	08007ecd 	.word	0x08007ecd
 8007e74:	08007ecd 	.word	0x08007ecd
 8007e78:	08007ebd 	.word	0x08007ebd
 8007e7c:	08007ecd 	.word	0x08007ecd
 8007e80:	08007ecd 	.word	0x08007ecd
 8007e84:	08007ecd 	.word	0x08007ecd
 8007e88:	08007ecd 	.word	0x08007ecd
 8007e8c:	08007ecd 	.word	0x08007ecd
 8007e90:	08007ecd 	.word	0x08007ecd
 8007e94:	08007ecd 	.word	0x08007ecd
 8007e98:	08007ec5 	.word	0x08007ec5
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea2:	e050      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e04c      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007eac:	2308      	movs	r3, #8
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e048      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e044      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e040      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ec4:	2340      	movs	r3, #64	; 0x40
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eca:	e03c      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ecc:	2380      	movs	r3, #128	; 0x80
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed2:	e038      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a71      	ldr	r2, [pc, #452]	; (80080a0 <UART_SetConfig+0x904>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d130      	bne.n	8007f40 <UART_SetConfig+0x7a4>
 8007ede:	4b6f      	ldr	r3, [pc, #444]	; (800809c <UART_SetConfig+0x900>)
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d826      	bhi.n	8007f38 <UART_SetConfig+0x79c>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <UART_SetConfig+0x754>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f09 	.word	0x08007f09
 8007ef4:	08007f11 	.word	0x08007f11
 8007ef8:	08007f19 	.word	0x08007f19
 8007efc:	08007f21 	.word	0x08007f21
 8007f00:	08007f29 	.word	0x08007f29
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	2302      	movs	r3, #2
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0e:	e01a      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f10:	2304      	movs	r3, #4
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e016      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f18:	2308      	movs	r3, #8
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1e:	e012      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f20:	2310      	movs	r3, #16
 8007f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f26:	e00e      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2e:	e00a      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f30:	2340      	movs	r3, #64	; 0x40
 8007f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f36:	e006      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f38:	2380      	movs	r3, #128	; 0x80
 8007f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3e:	e002      	b.n	8007f46 <UART_SetConfig+0x7aa>
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a55      	ldr	r2, [pc, #340]	; (80080a0 <UART_SetConfig+0x904>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	f040 80f0 	bne.w	8008132 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	dc46      	bgt.n	8007fe8 <UART_SetConfig+0x84c>
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	db75      	blt.n	800804a <UART_SetConfig+0x8ae>
 8007f5e:	3b02      	subs	r3, #2
 8007f60:	2b1e      	cmp	r3, #30
 8007f62:	d872      	bhi.n	800804a <UART_SetConfig+0x8ae>
 8007f64:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <UART_SetConfig+0x7d0>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007fef 	.word	0x08007fef
 8007f70:	0800804b 	.word	0x0800804b
 8007f74:	08007ff7 	.word	0x08007ff7
 8007f78:	0800804b 	.word	0x0800804b
 8007f7c:	0800804b 	.word	0x0800804b
 8007f80:	0800804b 	.word	0x0800804b
 8007f84:	08008007 	.word	0x08008007
 8007f88:	0800804b 	.word	0x0800804b
 8007f8c:	0800804b 	.word	0x0800804b
 8007f90:	0800804b 	.word	0x0800804b
 8007f94:	0800804b 	.word	0x0800804b
 8007f98:	0800804b 	.word	0x0800804b
 8007f9c:	0800804b 	.word	0x0800804b
 8007fa0:	0800804b 	.word	0x0800804b
 8007fa4:	08008017 	.word	0x08008017
 8007fa8:	0800804b 	.word	0x0800804b
 8007fac:	0800804b 	.word	0x0800804b
 8007fb0:	0800804b 	.word	0x0800804b
 8007fb4:	0800804b 	.word	0x0800804b
 8007fb8:	0800804b 	.word	0x0800804b
 8007fbc:	0800804b 	.word	0x0800804b
 8007fc0:	0800804b 	.word	0x0800804b
 8007fc4:	0800804b 	.word	0x0800804b
 8007fc8:	0800804b 	.word	0x0800804b
 8007fcc:	0800804b 	.word	0x0800804b
 8007fd0:	0800804b 	.word	0x0800804b
 8007fd4:	0800804b 	.word	0x0800804b
 8007fd8:	0800804b 	.word	0x0800804b
 8007fdc:	0800804b 	.word	0x0800804b
 8007fe0:	0800804b 	.word	0x0800804b
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	2b40      	cmp	r3, #64	; 0x40
 8007fea:	d02a      	beq.n	8008042 <UART_SetConfig+0x8a6>
 8007fec:	e02d      	b.n	800804a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007fee:	f7fc ffed 	bl	8004fcc <HAL_RCCEx_GetD3PCLK1Freq>
 8007ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ff4:	e02f      	b.n	8008056 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff6:	f107 0314 	add.w	r3, r7, #20
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fc fffc 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008004:	e027      	b.n	8008056 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	4618      	mov	r0, r3
 800800c:	f7fd f948 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008014:	e01f      	b.n	8008056 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <UART_SetConfig+0x900>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008022:	4b1e      	ldr	r3, [pc, #120]	; (800809c <UART_SetConfig+0x900>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	08db      	lsrs	r3, r3, #3
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <UART_SetConfig+0x908>)
 800802e:	fa22 f303 	lsr.w	r3, r2, r3
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008034:	e00f      	b.n	8008056 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008036:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <UART_SetConfig+0x908>)
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800803a:	e00c      	b.n	8008056 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800803c:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <UART_SetConfig+0x90c>)
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008040:	e009      	b.n	8008056 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008048:	e005      	b.n	8008056 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 81e6 	beq.w	800842a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	4a12      	ldr	r2, [pc, #72]	; (80080ac <UART_SetConfig+0x910>)
 8008064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008068:	461a      	mov	r2, r3
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008070:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	4613      	mov	r3, r2
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	4413      	add	r3, r2
 800807c:	6a3a      	ldr	r2, [r7, #32]
 800807e:	429a      	cmp	r2, r3
 8008080:	d305      	bcc.n	800808e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	429a      	cmp	r2, r3
 800808c:	d910      	bls.n	80080b0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008094:	e1c9      	b.n	800842a <UART_SetConfig+0xc8e>
 8008096:	bf00      	nop
 8008098:	40011c00 	.word	0x40011c00
 800809c:	58024400 	.word	0x58024400
 80080a0:	58000c00 	.word	0x58000c00
 80080a4:	03d09000 	.word	0x03d09000
 80080a8:	003d0900 	.word	0x003d0900
 80080ac:	0800ce14 	.word	0x0800ce14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	4618      	mov	r0, r3
 80080b4:	f04f 0100 	mov.w	r1, #0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	4ac1      	ldr	r2, [pc, #772]	; (80083c4 <UART_SetConfig+0xc28>)
 80080be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	f7f8 f97a 	bl	80003c0 <__aeabi_uldivmod>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4610      	mov	r0, r2
 80080d2:	4619      	mov	r1, r3
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	020b      	lsls	r3, r1, #8
 80080de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080e2:	0202      	lsls	r2, r0, #8
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	6849      	ldr	r1, [r1, #4]
 80080e8:	0849      	lsrs	r1, r1, #1
 80080ea:	4608      	mov	r0, r1
 80080ec:	f04f 0100 	mov.w	r1, #0
 80080f0:	1814      	adds	r4, r2, r0
 80080f2:	eb43 0501 	adc.w	r5, r3, r1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f04f 0300 	mov.w	r3, #0
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 f95c 	bl	80003c0 <__aeabi_uldivmod>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4613      	mov	r3, r2
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008116:	d308      	bcc.n	800812a <UART_SetConfig+0x98e>
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800811e:	d204      	bcs.n	800812a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008126:	60da      	str	r2, [r3, #12]
 8008128:	e17f      	b.n	800842a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008130:	e17b      	b.n	800842a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800813a:	f040 80bd 	bne.w	80082b8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800813e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008142:	2b20      	cmp	r3, #32
 8008144:	dc48      	bgt.n	80081d8 <UART_SetConfig+0xa3c>
 8008146:	2b00      	cmp	r3, #0
 8008148:	db7b      	blt.n	8008242 <UART_SetConfig+0xaa6>
 800814a:	2b20      	cmp	r3, #32
 800814c:	d879      	bhi.n	8008242 <UART_SetConfig+0xaa6>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <UART_SetConfig+0x9b8>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	080081df 	.word	0x080081df
 8008158:	080081e7 	.word	0x080081e7
 800815c:	08008243 	.word	0x08008243
 8008160:	08008243 	.word	0x08008243
 8008164:	080081ef 	.word	0x080081ef
 8008168:	08008243 	.word	0x08008243
 800816c:	08008243 	.word	0x08008243
 8008170:	08008243 	.word	0x08008243
 8008174:	080081ff 	.word	0x080081ff
 8008178:	08008243 	.word	0x08008243
 800817c:	08008243 	.word	0x08008243
 8008180:	08008243 	.word	0x08008243
 8008184:	08008243 	.word	0x08008243
 8008188:	08008243 	.word	0x08008243
 800818c:	08008243 	.word	0x08008243
 8008190:	08008243 	.word	0x08008243
 8008194:	0800820f 	.word	0x0800820f
 8008198:	08008243 	.word	0x08008243
 800819c:	08008243 	.word	0x08008243
 80081a0:	08008243 	.word	0x08008243
 80081a4:	08008243 	.word	0x08008243
 80081a8:	08008243 	.word	0x08008243
 80081ac:	08008243 	.word	0x08008243
 80081b0:	08008243 	.word	0x08008243
 80081b4:	08008243 	.word	0x08008243
 80081b8:	08008243 	.word	0x08008243
 80081bc:	08008243 	.word	0x08008243
 80081c0:	08008243 	.word	0x08008243
 80081c4:	08008243 	.word	0x08008243
 80081c8:	08008243 	.word	0x08008243
 80081cc:	08008243 	.word	0x08008243
 80081d0:	08008243 	.word	0x08008243
 80081d4:	08008235 	.word	0x08008235
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d02e      	beq.n	800823a <UART_SetConfig+0xa9e>
 80081dc:	e031      	b.n	8008242 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081de:	f7fb fbab 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80081e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081e4:	e033      	b.n	800824e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081e6:	f7fb fbbd 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 80081ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081ec:	e02f      	b.n	800824e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ee:	f107 0314 	add.w	r3, r7, #20
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fc ff00 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081fc:	e027      	b.n	800824e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fe:	f107 0308 	add.w	r3, r7, #8
 8008202:	4618      	mov	r0, r3
 8008204:	f7fd f84c 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800820c:	e01f      	b.n	800824e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800820e:	4b6e      	ldr	r3, [pc, #440]	; (80083c8 <UART_SetConfig+0xc2c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800821a:	4b6b      	ldr	r3, [pc, #428]	; (80083c8 <UART_SetConfig+0xc2c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	08db      	lsrs	r3, r3, #3
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	4a69      	ldr	r2, [pc, #420]	; (80083cc <UART_SetConfig+0xc30>)
 8008226:	fa22 f303 	lsr.w	r3, r2, r3
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800822c:	e00f      	b.n	800824e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800822e:	4b67      	ldr	r3, [pc, #412]	; (80083cc <UART_SetConfig+0xc30>)
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008232:	e00c      	b.n	800824e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008234:	4b66      	ldr	r3, [pc, #408]	; (80083d0 <UART_SetConfig+0xc34>)
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008238:	e009      	b.n	800824e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008240:	e005      	b.n	800824e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800824c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80ea 	beq.w	800842a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	4a5a      	ldr	r2, [pc, #360]	; (80083c4 <UART_SetConfig+0xc28>)
 800825c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008260:	461a      	mov	r2, r3
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	fbb3 f3f2 	udiv	r3, r3, r2
 8008268:	005a      	lsls	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	441a      	add	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	fbb2 f3f3 	udiv	r3, r2, r3
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	2b0f      	cmp	r3, #15
 8008280:	d916      	bls.n	80082b0 <UART_SetConfig+0xb14>
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008288:	d212      	bcs.n	80082b0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	b29b      	uxth	r3, r3
 800828e:	f023 030f 	bic.w	r3, r3, #15
 8008292:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	b29a      	uxth	r2, r3
 80082a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082a2:	4313      	orrs	r3, r2
 80082a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	e0bc      	b.n	800842a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082b6:	e0b8      	b.n	800842a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082bc:	2b20      	cmp	r3, #32
 80082be:	dc4b      	bgt.n	8008358 <UART_SetConfig+0xbbc>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f2c0 8087 	blt.w	80083d4 <UART_SetConfig+0xc38>
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	f200 8084 	bhi.w	80083d4 <UART_SetConfig+0xc38>
 80082cc:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <UART_SetConfig+0xb38>)
 80082ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d2:	bf00      	nop
 80082d4:	0800835f 	.word	0x0800835f
 80082d8:	08008367 	.word	0x08008367
 80082dc:	080083d5 	.word	0x080083d5
 80082e0:	080083d5 	.word	0x080083d5
 80082e4:	0800836f 	.word	0x0800836f
 80082e8:	080083d5 	.word	0x080083d5
 80082ec:	080083d5 	.word	0x080083d5
 80082f0:	080083d5 	.word	0x080083d5
 80082f4:	0800837f 	.word	0x0800837f
 80082f8:	080083d5 	.word	0x080083d5
 80082fc:	080083d5 	.word	0x080083d5
 8008300:	080083d5 	.word	0x080083d5
 8008304:	080083d5 	.word	0x080083d5
 8008308:	080083d5 	.word	0x080083d5
 800830c:	080083d5 	.word	0x080083d5
 8008310:	080083d5 	.word	0x080083d5
 8008314:	0800838f 	.word	0x0800838f
 8008318:	080083d5 	.word	0x080083d5
 800831c:	080083d5 	.word	0x080083d5
 8008320:	080083d5 	.word	0x080083d5
 8008324:	080083d5 	.word	0x080083d5
 8008328:	080083d5 	.word	0x080083d5
 800832c:	080083d5 	.word	0x080083d5
 8008330:	080083d5 	.word	0x080083d5
 8008334:	080083d5 	.word	0x080083d5
 8008338:	080083d5 	.word	0x080083d5
 800833c:	080083d5 	.word	0x080083d5
 8008340:	080083d5 	.word	0x080083d5
 8008344:	080083d5 	.word	0x080083d5
 8008348:	080083d5 	.word	0x080083d5
 800834c:	080083d5 	.word	0x080083d5
 8008350:	080083d5 	.word	0x080083d5
 8008354:	080083b5 	.word	0x080083b5
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d02e      	beq.n	80083ba <UART_SetConfig+0xc1e>
 800835c:	e03a      	b.n	80083d4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800835e:	f7fb faeb 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8008362:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008364:	e03c      	b.n	80083e0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008366:	f7fb fafd 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 800836a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800836c:	e038      	b.n	80083e0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800836e:	f107 0314 	add.w	r3, r7, #20
 8008372:	4618      	mov	r0, r3
 8008374:	f7fc fe40 	bl	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800837c:	e030      	b.n	80083e0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4618      	mov	r0, r3
 8008384:	f7fc ff8c 	bl	80052a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800838c:	e028      	b.n	80083e0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800838e:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <UART_SetConfig+0xc2c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <UART_SetConfig+0xc2c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	08db      	lsrs	r3, r3, #3
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	4a09      	ldr	r2, [pc, #36]	; (80083cc <UART_SetConfig+0xc30>)
 80083a6:	fa22 f303 	lsr.w	r3, r2, r3
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083ac:	e018      	b.n	80083e0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <UART_SetConfig+0xc30>)
 80083b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083b2:	e015      	b.n	80083e0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <UART_SetConfig+0xc34>)
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083b8:	e012      	b.n	80083e0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083c0:	e00e      	b.n	80083e0 <UART_SetConfig+0xc44>
 80083c2:	bf00      	nop
 80083c4:	0800ce14 	.word	0x0800ce14
 80083c8:	58024400 	.word	0x58024400
 80083cc:	03d09000 	.word	0x03d09000
 80083d0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083de:	bf00      	nop
    }

    if (pclk != 0U)
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d021      	beq.n	800842a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	4a1a      	ldr	r2, [pc, #104]	; (8008454 <UART_SetConfig+0xcb8>)
 80083ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	085b      	lsrs	r3, r3, #1
 80083fe:	441a      	add	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b0f      	cmp	r3, #15
 800840e:	d909      	bls.n	8008424 <UART_SetConfig+0xc88>
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008416:	d205      	bcs.n	8008424 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	b29a      	uxth	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	e002      	b.n	800842a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008446:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800844a:	4618      	mov	r0, r3
 800844c:	3738      	adds	r7, #56	; 0x38
 800844e:	46bd      	mov	sp, r7
 8008450:	bdb0      	pop	{r4, r5, r7, pc}
 8008452:	bf00      	nop
 8008454:	0800ce14 	.word	0x0800ce14

08008458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f003 0310 	and.w	r3, r3, #16
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01a      	beq.n	800856e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008556:	d10a      	bne.n	800856e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	605a      	str	r2, [r3, #4]
  }
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085ac:	f7f9 f894 	bl	80016d8 <HAL_GetTick>
 80085b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0308 	and.w	r3, r3, #8
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d10e      	bne.n	80085de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f82f 	bl	8008632 <UART_WaitOnFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e025      	b.n	800862a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d10e      	bne.n	800860a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f819 	bl	8008632 <UART_WaitOnFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e00f      	b.n	800862a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b09c      	sub	sp, #112	; 0x70
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	4613      	mov	r3, r2
 8008640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008642:	e0a9      	b.n	8008798 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	f000 80a5 	beq.w	8008798 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800864e:	f7f9 f843 	bl	80016d8 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <UART_WaitOnFlagUntilTimeout+0x32>
 800865e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008660:	2b00      	cmp	r3, #0
 8008662:	d140      	bne.n	80086e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008678:	667b      	str	r3, [r7, #100]	; 0x64
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008684:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008688:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e6      	bne.n	8008664 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3308      	adds	r3, #8
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	f023 0301 	bic.w	r3, r3, #1
 80086ac:	663b      	str	r3, [r7, #96]	; 0x60
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e5      	bne.n	8008696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e069      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d051      	beq.n	8008798 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008702:	d149      	bne.n	8008798 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800870c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008722:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
 800872e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	613b      	str	r3, [r7, #16]
   return(result);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f023 0301 	bic.w	r3, r3, #1
 8008756:	66bb      	str	r3, [r7, #104]	; 0x68
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008760:	623a      	str	r2, [r7, #32]
 8008762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	69f9      	ldr	r1, [r7, #28]
 8008766:	6a3a      	ldr	r2, [r7, #32]
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	61bb      	str	r3, [r7, #24]
   return(result);
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e010      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69da      	ldr	r2, [r3, #28]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	f43f af46 	beq.w	8008644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3770      	adds	r7, #112	; 0x70
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e027      	b.n	8008828 <HAL_UARTEx_DisableFifoMode+0x66>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2224      	movs	r2, #36	; 0x24
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0201 	bic.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008806:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008848:	2302      	movs	r3, #2
 800884a:	e02d      	b.n	80088a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f84f 	bl	800892c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e02d      	b.n	8008924 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f811 	bl	800892c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008938:	2b00      	cmp	r3, #0
 800893a:	d108      	bne.n	800894e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800894c:	e031      	b.n	80089b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800894e:	2310      	movs	r3, #16
 8008950:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008952:	2310      	movs	r3, #16
 8008954:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	0e5b      	lsrs	r3, r3, #25
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0f5b      	lsrs	r3, r3, #29
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	7b3a      	ldrb	r2, [r7, #12]
 800897a:	4911      	ldr	r1, [pc, #68]	; (80089c0 <UARTEx_SetNbDataToProcess+0x94>)
 800897c:	5c8a      	ldrb	r2, [r1, r2]
 800897e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008982:	7b3a      	ldrb	r2, [r7, #12]
 8008984:	490f      	ldr	r1, [pc, #60]	; (80089c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008986:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008988:	fb93 f3f2 	sdiv	r3, r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	7b7a      	ldrb	r2, [r7, #13]
 8008998:	4909      	ldr	r1, [pc, #36]	; (80089c0 <UARTEx_SetNbDataToProcess+0x94>)
 800899a:	5c8a      	ldrb	r2, [r1, r2]
 800899c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089a0:	7b7a      	ldrb	r2, [r7, #13]
 80089a2:	4908      	ldr	r1, [pc, #32]	; (80089c4 <UARTEx_SetNbDataToProcess+0x98>)
 80089a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	0800ce2c 	.word	0x0800ce2c
 80089c4:	0800ce34 	.word	0x0800ce34

080089c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089c8:	b084      	sub	sp, #16
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	f107 001c 	add.w	r0, r7, #28
 80089d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80089de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80089e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80089e2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80089e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80089ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80089ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <SDMMC_Init+0x50>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	b004      	add	sp, #16
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	ffc02c00 	.word	0xffc02c00

08008a1c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f043 0203 	orr.w	r2, r3, #3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0303 	and.w	r3, r3, #3
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ab6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008abc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008ac2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <SDMMC_SendCommand+0x50>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	fffee0c0 	.word	0xfffee0c0

08008aec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	b2db      	uxtb	r3, r3
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3314      	adds	r3, #20
 8008b14:	461a      	mov	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	4413      	add	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b52:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008b58:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008b5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0

}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b92:	2310      	movs	r3, #16
 8008b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ba6:	f107 0308 	add.w	r3, r7, #8
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff ff73 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb6:	2110      	movs	r1, #16
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa5f 	bl	800907c <SDMMC_GetCmdResp1>
 8008bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b088      	sub	sp, #32
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008bd8:	2311      	movs	r3, #17
 8008bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ff50 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	2111      	movs	r1, #17
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa3c 	bl	800907c <SDMMC_GetCmdResp1>
 8008c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c06:	69fb      	ldr	r3, [r7, #28]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c1e:	2312      	movs	r3, #18
 8008c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c32:	f107 0308 	add.w	r3, r7, #8
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff ff2d 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c42:	2112      	movs	r1, #18
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa19 	bl	800907c <SDMMC_GetCmdResp1>
 8008c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3720      	adds	r7, #32
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b088      	sub	sp, #32
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c64:	2318      	movs	r3, #24
 8008c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c78:	f107 0308 	add.w	r3, r7, #8
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ff0a 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c88:	2118      	movs	r1, #24
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f9f6 	bl	800907c <SDMMC_GetCmdResp1>
 8008c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c92:	69fb      	ldr	r3, [r7, #28]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008caa:	2319      	movs	r3, #25
 8008cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fee7 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cce:	2119      	movs	r1, #25
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f9d3 	bl	800907c <SDMMC_GetCmdResp1>
 8008cd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d02:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d1c:	f107 0308 	add.w	r3, r7, #8
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff feb8 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <SDMMC_CmdStopTransfer+0x74>)
 8008d2a:	210c      	movs	r1, #12
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f9a5 	bl	800907c <SDMMC_GetCmdResp1>
 8008d32:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d46:	d101      	bne.n	8008d4c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3720      	adds	r7, #32
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	05f5e100 	.word	0x05f5e100

08008d5c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fe87 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8e:	2107      	movs	r1, #7
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f973 	bl	800907c <SDMMC_GetCmdResp1>
 8008d96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d98:	69fb      	ldr	r3, [r7, #28]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b088      	sub	sp, #32
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dc0:	f107 0308 	add.w	r3, r7, #8
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fe66 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb97 	bl	8009500 <SDMMC_GetCmdError>
 8008dd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b088      	sub	sp, #32
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008de6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008dea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008dec:	2308      	movs	r3, #8
 8008dee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fe46 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fb29 	bl	8009464 <SDMMC_GetCmdResp7>
 8008e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e14:	69fb      	ldr	r3, [r7, #28]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b088      	sub	sp, #32
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e2c:	2337      	movs	r3, #55	; 0x37
 8008e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fe26 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e50:	2137      	movs	r1, #55	; 0x37
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f912 	bl	800907c <SDMMC_GetCmdResp1>
 8008e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e72:	2329      	movs	r3, #41	; 0x29
 8008e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e86:	f107 0308 	add.w	r3, r7, #8
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fe03 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa2e 	bl	80092f4 <SDMMC_GetCmdResp3>
 8008e98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008eb2:	2306      	movs	r3, #6
 8008eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fde3 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed6:	2106      	movs	r1, #6
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8cf 	bl	800907c <SDMMC_GetCmdResp1>
 8008ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b088      	sub	sp, #32
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008ef6:	2333      	movs	r3, #51	; 0x33
 8008ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f0a:	f107 0308 	add.w	r3, r7, #8
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff fdc1 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f1a:	2133      	movs	r1, #51	; 0x33
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f8ad 	bl	800907c <SDMMC_GetCmdResp1>
 8008f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f24:	69fb      	ldr	r3, [r7, #28]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b088      	sub	sp, #32
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fd9f 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f980 	bl	8009260 <SDMMC_GetCmdResp2>
 8008f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f62:	69fb      	ldr	r3, [r7, #28]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f7a:	2309      	movs	r3, #9
 8008f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff fd7f 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f960 	bl	8009260 <SDMMC_GetCmdResp2>
 8008fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff fd5f 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	2103      	movs	r1, #3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9c8 	bl	8009374 <SDMMC_GetCmdResp6>
 8008fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008ffe:	230d      	movs	r3, #13
 8009000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800900c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fd3d 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800901e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009022:	210d      	movs	r1, #13
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f829 	bl	800907c <SDMMC_GetCmdResp1>
 800902a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800902c:	69fb      	ldr	r3, [r7, #28]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b088      	sub	sp, #32
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009042:	230d      	movs	r3, #13
 8009044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800904a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009054:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff fd1b 	bl	8008a98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009062:	f241 3288 	movw	r2, #5000	; 0x1388
 8009066:	210d      	movs	r1, #13
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f807 	bl	800907c <SDMMC_GetCmdResp1>
 800906e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009070:	69fb      	ldr	r3, [r7, #28]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	460b      	mov	r3, r1
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800908a:	4b70      	ldr	r3, [pc, #448]	; (800924c <SDMMC_GetCmdResp1+0x1d0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a70      	ldr	r2, [pc, #448]	; (8009250 <SDMMC_GetCmdResp1+0x1d4>)
 8009090:	fba2 2303 	umull	r2, r3, r2, r3
 8009094:	0a5a      	lsrs	r2, r3, #9
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	fb02 f303 	mul.w	r3, r2, r3
 800909c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	61fa      	str	r2, [r7, #28]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ac:	e0c9      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4b67      	ldr	r3, [pc, #412]	; (8009254 <SDMMC_GetCmdResp1+0x1d8>)
 80090b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0ef      	beq.n	800909e <SDMMC_GetCmdResp1+0x22>
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1ea      	bne.n	800909e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d004      	beq.n	80090de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2204      	movs	r2, #4
 80090d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090da:	2304      	movs	r3, #4
 80090dc:	e0b1      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0a6      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a58      	ldr	r2, [pc, #352]	; (8009258 <SDMMC_GetCmdResp1+0x1dc>)
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff fcf6 	bl	8008aec <SDMMC_GetCommandResponse>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	7afb      	ldrb	r3, [r7, #11]
 8009106:	4293      	cmp	r3, r2
 8009108:	d001      	beq.n	800910e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800910a:	2301      	movs	r3, #1
 800910c:	e099      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fcf8 	bl	8008b06 <SDMMC_GetResponse>
 8009116:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4b50      	ldr	r3, [pc, #320]	; (800925c <SDMMC_GetCmdResp1+0x1e0>)
 800911c:	4013      	ands	r3, r2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009122:	2300      	movs	r3, #0
 8009124:	e08d      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	da02      	bge.n	8009132 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800912c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009130:	e087      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800913c:	2340      	movs	r3, #64	; 0x40
 800913e:	e080      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800914a:	2380      	movs	r3, #128	; 0x80
 800914c:	e079      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800915c:	e071      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800916c:	e069      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917c:	e061      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800918c:	e059      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800919c:	e051      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091ac:	e049      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091bc:	e041      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091cc:	e039      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80091d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091dc:	e031      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80091e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80091ec:	e029      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80091f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091fc:	e021      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800920c:	e019      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009218:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800921c:	e011      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800922c:	e009      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009238:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800923c:	e001      	b.n	8009242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800923e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3720      	adds	r7, #32
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	24000028 	.word	0x24000028
 8009250:	10624dd3 	.word	0x10624dd3
 8009254:	00200045 	.word	0x00200045
 8009258:	002000c5 	.word	0x002000c5
 800925c:	fdffe008 	.word	0xfdffe008

08009260 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009268:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <SDMMC_GetCmdResp2+0x88>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <SDMMC_GetCmdResp2+0x8c>)
 800926e:	fba2 2303 	umull	r2, r3, r2, r3
 8009272:	0a5b      	lsrs	r3, r3, #9
 8009274:	f241 3288 	movw	r2, #5000	; 0x1388
 8009278:	fb02 f303 	mul.w	r3, r2, r3
 800927c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1e5a      	subs	r2, r3, #1
 8009282:	60fa      	str	r2, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009288:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800928c:	e026      	b.n	80092dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009292:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0ef      	beq.n	800927e <SDMMC_GetCmdResp2+0x1e>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1ea      	bne.n	800927e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2204      	movs	r2, #4
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092ba:	2304      	movs	r3, #4
 80092bc:	e00e      	b.n	80092dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e003      	b.n	80092dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a06      	ldr	r2, [pc, #24]	; (80092f0 <SDMMC_GetCmdResp2+0x90>)
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	24000028 	.word	0x24000028
 80092ec:	10624dd3 	.word	0x10624dd3
 80092f0:	002000c5 	.word	0x002000c5

080092f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80092fc:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <SDMMC_GetCmdResp3+0x74>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a1a      	ldr	r2, [pc, #104]	; (800936c <SDMMC_GetCmdResp3+0x78>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	0a5b      	lsrs	r3, r3, #9
 8009308:	f241 3288 	movw	r2, #5000	; 0x1388
 800930c:	fb02 f303 	mul.w	r3, r2, r3
 8009310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	1e5a      	subs	r2, r3, #1
 8009316:	60fa      	str	r2, [r7, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800931c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009320:	e01b      	b.n	800935a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009326:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0ef      	beq.n	8009312 <SDMMC_GetCmdResp3+0x1e>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1ea      	bne.n	8009312 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2204      	movs	r2, #4
 800934c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800934e:	2304      	movs	r3, #4
 8009350:	e003      	b.n	800935a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a06      	ldr	r2, [pc, #24]	; (8009370 <SDMMC_GetCmdResp3+0x7c>)
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	24000028 	.word	0x24000028
 800936c:	10624dd3 	.word	0x10624dd3
 8009370:	002000c5 	.word	0x002000c5

08009374 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	460b      	mov	r3, r1
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009382:	4b35      	ldr	r3, [pc, #212]	; (8009458 <SDMMC_GetCmdResp6+0xe4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a35      	ldr	r2, [pc, #212]	; (800945c <SDMMC_GetCmdResp6+0xe8>)
 8009388:	fba2 2303 	umull	r2, r3, r2, r3
 800938c:	0a5b      	lsrs	r3, r3, #9
 800938e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	1e5a      	subs	r2, r3, #1
 800939c:	61fa      	str	r2, [r7, #28]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d102      	bne.n	80093a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093a6:	e052      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0ef      	beq.n	8009398 <SDMMC_GetCmdResp6+0x24>
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1ea      	bne.n	8009398 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2204      	movs	r2, #4
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093d4:	2304      	movs	r3, #4
 80093d6:	e03a      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d004      	beq.n	80093ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e02f      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fb7c 	bl	8008aec <SDMMC_GetCommandResponse>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d001      	beq.n	8009402 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093fe:	2301      	movs	r3, #1
 8009400:	e025      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a16      	ldr	r2, [pc, #88]	; (8009460 <SDMMC_GetCmdResp6+0xec>)
 8009406:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009408:	2100      	movs	r1, #0
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff fb7b 	bl	8008b06 <SDMMC_GetResponse>
 8009410:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	0c1b      	lsrs	r3, r3, #16
 8009420:	b29a      	uxth	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009426:	2300      	movs	r3, #0
 8009428:	e011      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009438:	e009      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009448:	e001      	b.n	800944e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800944a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	24000028 	.word	0x24000028
 800945c:	10624dd3 	.word	0x10624dd3
 8009460:	002000c5 	.word	0x002000c5

08009464 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800946c:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <SDMMC_GetCmdResp7+0x94>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a22      	ldr	r2, [pc, #136]	; (80094fc <SDMMC_GetCmdResp7+0x98>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	0a5b      	lsrs	r3, r3, #9
 8009478:	f241 3288 	movw	r2, #5000	; 0x1388
 800947c:	fb02 f303 	mul.w	r3, r2, r3
 8009480:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1e5a      	subs	r2, r3, #1
 8009486:	60fa      	str	r2, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800948c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009490:	e02c      	b.n	80094ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009496:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0ef      	beq.n	8009482 <SDMMC_GetCmdResp7+0x1e>
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1ea      	bne.n	8009482 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2204      	movs	r2, #4
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094be:	2304      	movs	r3, #4
 80094c0:	e014      	b.n	80094ec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e009      	b.n	80094ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2240      	movs	r2, #64	; 0x40
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094ea:	2300      	movs	r3, #0

}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	24000028 	.word	0x24000028
 80094fc:	10624dd3 	.word	0x10624dd3

08009500 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009508:	4b11      	ldr	r3, [pc, #68]	; (8009550 <SDMMC_GetCmdError+0x50>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a11      	ldr	r2, [pc, #68]	; (8009554 <SDMMC_GetCmdError+0x54>)
 800950e:	fba2 2303 	umull	r2, r3, r2, r3
 8009512:	0a5b      	lsrs	r3, r3, #9
 8009514:	f241 3288 	movw	r2, #5000	; 0x1388
 8009518:	fb02 f303 	mul.w	r3, r2, r3
 800951c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	1e5a      	subs	r2, r3, #1
 8009522:	60fa      	str	r2, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d102      	bne.n	800952e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800952c:	e009      	b.n	8009542 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0f1      	beq.n	800951e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a06      	ldr	r2, [pc, #24]	; (8009558 <SDMMC_GetCmdError+0x58>)
 800953e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	24000028 	.word	0x24000028
 8009554:	10624dd3 	.word	0x10624dd3
 8009558:	002000c5 	.word	0x002000c5

0800955c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009560:	4904      	ldr	r1, [pc, #16]	; (8009574 <MX_FATFS_Init+0x18>)
 8009562:	4805      	ldr	r0, [pc, #20]	; (8009578 <MX_FATFS_Init+0x1c>)
 8009564:	f002 ff9a 	bl	800c49c <FATFS_LinkDriver>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	4b03      	ldr	r3, [pc, #12]	; (800957c <MX_FATFS_Init+0x20>)
 800956e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009570:	bf00      	nop
 8009572:	bd80      	pop	{r7, pc}
 8009574:	24006a08 	.word	0x24006a08
 8009578:	0800ce3c 	.word	0x0800ce3c
 800957c:	24006a04 	.word	0x24006a04

08009580 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009584:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009586:	4618      	mov	r0, r3
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800959a:	f000 f89b 	bl	80096d4 <BSP_SD_IsDetected>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d001      	beq.n	80095a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80095a4:	2302      	movs	r3, #2
 80095a6:	e012      	b.n	80095ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80095a8:	480b      	ldr	r0, [pc, #44]	; (80095d8 <BSP_SD_Init+0x48>)
 80095aa:	f7fc fa83 	bl	8005ab4 <HAL_SD_Init>
 80095ae:	4603      	mov	r3, r0
 80095b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d109      	bne.n	80095cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80095b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80095bc:	4806      	ldr	r0, [pc, #24]	; (80095d8 <BSP_SD_Init+0x48>)
 80095be:	f7fd faf9 	bl	8006bb4 <HAL_SD_ConfigWideBusOperation>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80095cc:	79fb      	ldrb	r3, [r7, #7]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	24006654 	.word	0x24006654

080095dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	4806      	ldr	r0, [pc, #24]	; (8009614 <BSP_SD_ReadBlocks+0x38>)
 80095fa:	f7fc fb75 	bl	8005ce8 <HAL_SD_ReadBlocks>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	24006654 	.word	0x24006654

08009618 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af02      	add	r7, sp, #8
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	4806      	ldr	r0, [pc, #24]	; (8009650 <BSP_SD_WriteBlocks+0x38>)
 8009636:	f7fc fce1 	bl	8005ffc <HAL_SD_WriteBlocks>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	24006654 	.word	0x24006654

08009654 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009658:	4805      	ldr	r0, [pc, #20]	; (8009670 <BSP_SD_GetCardState+0x1c>)
 800965a:	f7fd fbbd 	bl	8006dd8 <HAL_SD_GetCardState>
 800965e:	4603      	mov	r3, r0
 8009660:	2b04      	cmp	r3, #4
 8009662:	bf14      	ite	ne
 8009664:	2301      	movne	r3, #1
 8009666:	2300      	moveq	r3, #0
 8009668:	b2db      	uxtb	r3, r3
}
 800966a:	4618      	mov	r0, r3
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	24006654 	.word	0x24006654

08009674 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4803      	ldr	r0, [pc, #12]	; (800968c <BSP_SD_GetCardInfo+0x18>)
 8009680:	f7fd fa6c 	bl	8006b5c <HAL_SD_GetCardInfo>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	24006654 	.word	0x24006654

08009690 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009698:	f000 f80e 	bl	80096b8 <BSP_SD_WriteCpltCallback>
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80096ac:	f000 f80b 	bl	80096c6 <BSP_SD_ReadCpltCallback>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0

}
 80096bc:	bf00      	nop
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80096c6:	b480      	push	{r7}
 80096c8:	af00      	add	r7, sp, #0

}
 80096ca:	bf00      	nop
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80096da:	2301      	movs	r3, #1
 80096dc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80096de:	f000 f80b 	bl	80096f8 <BSP_PlatformIsDetected>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80096e8:	2300      	movs	r3, #0
 80096ea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	b2db      	uxtb	r3, r3
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80096fe:	2301      	movs	r3, #1
 8009700:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009706:	4806      	ldr	r0, [pc, #24]	; (8009720 <BSP_PlatformIsDetected+0x28>)
 8009708:	f7f8 fef8 	bl	80024fc <HAL_GPIO_ReadPin>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009712:	2300      	movs	r3, #0
 8009714:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009716:	79fb      	ldrb	r3, [r7, #7]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	58020800 	.word	0x58020800

08009724 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800972e:	4b0b      	ldr	r3, [pc, #44]	; (800975c <SD_CheckStatus+0x38>)
 8009730:	2201      	movs	r2, #1
 8009732:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009734:	f7ff ff8e 	bl	8009654 <BSP_SD_GetCardState>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d107      	bne.n	800974e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <SD_CheckStatus+0x38>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f023 0301 	bic.w	r3, r3, #1
 8009748:	b2da      	uxtb	r2, r3
 800974a:	4b04      	ldr	r3, [pc, #16]	; (800975c <SD_CheckStatus+0x38>)
 800974c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800974e:	4b03      	ldr	r3, [pc, #12]	; (800975c <SD_CheckStatus+0x38>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b2db      	uxtb	r3, r3
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	24000035 	.word	0x24000035

08009760 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800976a:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <SD_initialize+0x38>)
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009770:	f7ff ff0e 	bl	8009590 <BSP_SD_Init>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d107      	bne.n	800978a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff ffd1 	bl	8009724 <SD_CheckStatus>
 8009782:	4603      	mov	r3, r0
 8009784:	461a      	mov	r2, r3
 8009786:	4b04      	ldr	r3, [pc, #16]	; (8009798 <SD_initialize+0x38>)
 8009788:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800978a:	4b03      	ldr	r3, [pc, #12]	; (8009798 <SD_initialize+0x38>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b2db      	uxtb	r3, r3
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	24000035 	.word	0x24000035

0800979c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff ffbb 	bl	8009724 <SD_CheckStatus>
 80097ae:	4603      	mov	r3, r0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80097cc:	f04f 33ff 	mov.w	r3, #4294967295
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f7ff ff01 	bl	80095dc <BSP_SD_ReadBlocks>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d107      	bne.n	80097f0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80097e0:	bf00      	nop
 80097e2:	f7ff ff37 	bl	8009654 <BSP_SD_GetCardState>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1fa      	bne.n	80097e2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	68b8      	ldr	r0, [r7, #8]
 8009818:	f7ff fefe 	bl	8009618 <BSP_SD_WriteBlocks>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d107      	bne.n	8009832 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009822:	bf00      	nop
 8009824:	f7ff ff16 	bl	8009654 <BSP_SD_GetCardState>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1fa      	bne.n	8009824 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08c      	sub	sp, #48	; 0x30
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	603a      	str	r2, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
 8009848:	460b      	mov	r3, r1
 800984a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009852:	4b25      	ldr	r3, [pc, #148]	; (80098e8 <SD_ioctl+0xac>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <SD_ioctl+0x28>
 8009860:	2303      	movs	r3, #3
 8009862:	e03c      	b.n	80098de <SD_ioctl+0xa2>

  switch (cmd)
 8009864:	79bb      	ldrb	r3, [r7, #6]
 8009866:	2b03      	cmp	r3, #3
 8009868:	d834      	bhi.n	80098d4 <SD_ioctl+0x98>
 800986a:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <SD_ioctl+0x34>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	08009881 	.word	0x08009881
 8009874:	08009889 	.word	0x08009889
 8009878:	080098a1 	.word	0x080098a1
 800987c:	080098bb 	.word	0x080098bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009886:	e028      	b.n	80098da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009888:	f107 0308 	add.w	r3, r7, #8
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff fef1 	bl	8009674 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009892:	6a3a      	ldr	r2, [r7, #32]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800989e:	e01c      	b.n	80098da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fee5 	bl	8009674 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098b8:	e00f      	b.n	80098da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fed8 	bl	8009674 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	0a5a      	lsrs	r2, r3, #9
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098d2:	e002      	b.n	80098da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80098da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3730      	adds	r7, #48	; 0x30
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	24000035 	.word	0x24000035

080098ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	4a08      	ldr	r2, [pc, #32]	; (800991c <disk_status+0x30>)
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	79fa      	ldrb	r2, [r7, #7]
 8009904:	4905      	ldr	r1, [pc, #20]	; (800991c <disk_status+0x30>)
 8009906:	440a      	add	r2, r1
 8009908:	7a12      	ldrb	r2, [r2, #8]
 800990a:	4610      	mov	r0, r2
 800990c:	4798      	blx	r3
 800990e:	4603      	mov	r3, r0
 8009910:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	240065ac 	.word	0x240065ac

08009920 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	4a0d      	ldr	r2, [pc, #52]	; (8009968 <disk_initialize+0x48>)
 8009932:	5cd3      	ldrb	r3, [r2, r3]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d111      	bne.n	800995c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	4a0b      	ldr	r2, [pc, #44]	; (8009968 <disk_initialize+0x48>)
 800993c:	2101      	movs	r1, #1
 800993e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	4a09      	ldr	r2, [pc, #36]	; (8009968 <disk_initialize+0x48>)
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	79fa      	ldrb	r2, [r7, #7]
 800994e:	4906      	ldr	r1, [pc, #24]	; (8009968 <disk_initialize+0x48>)
 8009950:	440a      	add	r2, r1
 8009952:	7a12      	ldrb	r2, [r2, #8]
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	240065ac 	.word	0x240065ac

0800996c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800996c:	b590      	push	{r4, r7, lr}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	4a0a      	ldr	r2, [pc, #40]	; (80099a8 <disk_read+0x3c>)
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	689c      	ldr	r4, [r3, #8]
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	4a07      	ldr	r2, [pc, #28]	; (80099a8 <disk_read+0x3c>)
 800998c:	4413      	add	r3, r2
 800998e:	7a18      	ldrb	r0, [r3, #8]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	47a0      	blx	r4
 8009998:	4603      	mov	r3, r0
 800999a:	75fb      	strb	r3, [r7, #23]
  return res;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd90      	pop	{r4, r7, pc}
 80099a6:	bf00      	nop
 80099a8:	240065ac 	.word	0x240065ac

080099ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <disk_write+0x3c>)
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	68dc      	ldr	r4, [r3, #12]
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4a07      	ldr	r2, [pc, #28]	; (80099e8 <disk_write+0x3c>)
 80099cc:	4413      	add	r3, r2
 80099ce:	7a18      	ldrb	r0, [r3, #8]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	47a0      	blx	r4
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]
  return res;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd90      	pop	{r4, r7, pc}
 80099e6:	bf00      	nop
 80099e8:	240065ac 	.word	0x240065ac

080099ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	603a      	str	r2, [r7, #0]
 80099f6:	71fb      	strb	r3, [r7, #7]
 80099f8:	460b      	mov	r3, r1
 80099fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	4a09      	ldr	r2, [pc, #36]	; (8009a24 <disk_ioctl+0x38>)
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	79fa      	ldrb	r2, [r7, #7]
 8009a0a:	4906      	ldr	r1, [pc, #24]	; (8009a24 <disk_ioctl+0x38>)
 8009a0c:	440a      	add	r2, r1
 8009a0e:	7a10      	ldrb	r0, [r2, #8]
 8009a10:	79b9      	ldrb	r1, [r7, #6]
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	4798      	blx	r3
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	240065ac 	.word	0x240065ac

08009a28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3301      	adds	r3, #1
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a38:	89fb      	ldrh	r3, [r7, #14]
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	b21a      	sxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b21b      	sxth	r3, r3
 8009a44:	4313      	orrs	r3, r2
 8009a46:	b21b      	sxth	r3, r3
 8009a48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a4a:	89fb      	ldrh	r3, [r7, #14]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3303      	adds	r3, #3
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	3202      	adds	r2, #2
 8009a70:	7812      	ldrb	r2, [r2, #0]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	3201      	adds	r2, #1
 8009a7e:	7812      	ldrb	r2, [r2, #0]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7812      	ldrb	r2, [r2, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a90:	68fb      	ldr	r3, [r7, #12]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	887a      	ldrh	r2, [r7, #2]
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	887b      	ldrh	r3, [r7, #2]
 8009ab8:	0a1b      	lsrs	r3, r3, #8
 8009aba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	607a      	str	r2, [r7, #4]
 8009ac2:	887a      	ldrh	r2, [r7, #2]
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	701a      	strb	r2, [r3, #0]
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	0a1b      	lsrs	r3, r3, #8
 8009b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00d      	beq.n	8009b62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	1c53      	adds	r3, r2, #1
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	1c59      	adds	r1, r3, #1
 8009b50:	6179      	str	r1, [r7, #20]
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f1      	bne.n	8009b46 <mem_cpy+0x1a>
	}
}
 8009b62:	bf00      	nop
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b6e:	b480      	push	{r7}
 8009b70:	b087      	sub	sp, #28
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	617a      	str	r2, [r7, #20]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	607b      	str	r3, [r7, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1f3      	bne.n	8009b7e <mem_set+0x10>
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	371c      	adds	r7, #28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009ba4:	b480      	push	{r7}
 8009ba6:	b089      	sub	sp, #36	; 0x24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	61fb      	str	r3, [r7, #28]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	61fa      	str	r2, [r7, #28]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	61ba      	str	r2, [r7, #24]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	1acb      	subs	r3, r1, r3
 8009bd0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	607b      	str	r3, [r7, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <mem_cmp+0x40>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0eb      	beq.n	8009bbc <mem_cmp+0x18>

	return r;
 8009be4:	697b      	ldr	r3, [r7, #20]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3724      	adds	r7, #36	; 0x24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bfc:	e002      	b.n	8009c04 <chk_chr+0x12>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3301      	adds	r3, #1
 8009c02:	607b      	str	r3, [r7, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <chk_chr+0x26>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d1f2      	bne.n	8009bfe <chk_chr+0xc>
	return *str;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e029      	b.n	8009c90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c3c:	4a27      	ldr	r2, [pc, #156]	; (8009cdc <chk_lock+0xb4>)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	4413      	add	r3, r2
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d01d      	beq.n	8009c86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c4a:	4a24      	ldr	r2, [pc, #144]	; (8009cdc <chk_lock+0xb4>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d116      	bne.n	8009c8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c5c:	4a1f      	ldr	r2, [pc, #124]	; (8009cdc <chk_lock+0xb4>)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	4413      	add	r3, r2
 8009c64:	3304      	adds	r3, #4
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d10c      	bne.n	8009c8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c70:	4a1a      	ldr	r2, [pc, #104]	; (8009cdc <chk_lock+0xb4>)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	4413      	add	r3, r2
 8009c78:	3308      	adds	r3, #8
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d102      	bne.n	8009c8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c84:	e007      	b.n	8009c96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c86:	2301      	movs	r3, #1
 8009c88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d9d2      	bls.n	8009c3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d109      	bne.n	8009cb0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d102      	bne.n	8009ca8 <chk_lock+0x80>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d101      	bne.n	8009cac <chk_lock+0x84>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e010      	b.n	8009cce <chk_lock+0xa6>
 8009cac:	2312      	movs	r3, #18
 8009cae:	e00e      	b.n	8009cce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d108      	bne.n	8009cc8 <chk_lock+0xa0>
 8009cb6:	4a09      	ldr	r2, [pc, #36]	; (8009cdc <chk_lock+0xb4>)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	4413      	add	r3, r2
 8009cbe:	330c      	adds	r3, #12
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc6:	d101      	bne.n	8009ccc <chk_lock+0xa4>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	e000      	b.n	8009cce <chk_lock+0xa6>
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	2400658c 	.word	0x2400658c

08009ce0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	607b      	str	r3, [r7, #4]
 8009cea:	e002      	b.n	8009cf2 <enq_lock+0x12>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	607b      	str	r3, [r7, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d806      	bhi.n	8009d06 <enq_lock+0x26>
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <enq_lock+0x40>)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	4413      	add	r3, r2
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f2      	bne.n	8009cec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	bf14      	ite	ne
 8009d0c:	2301      	movne	r3, #1
 8009d0e:	2300      	moveq	r3, #0
 8009d10:	b2db      	uxtb	r3, r3
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	2400658c 	.word	0x2400658c

08009d24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e01f      	b.n	8009d74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d34:	4a41      	ldr	r2, [pc, #260]	; (8009e3c <inc_lock+0x118>)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	4413      	add	r3, r2
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d113      	bne.n	8009d6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d46:	4a3d      	ldr	r2, [pc, #244]	; (8009e3c <inc_lock+0x118>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3304      	adds	r3, #4
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d109      	bne.n	8009d6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d5a:	4a38      	ldr	r2, [pc, #224]	; (8009e3c <inc_lock+0x118>)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	4413      	add	r3, r2
 8009d62:	3308      	adds	r3, #8
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d006      	beq.n	8009d7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3301      	adds	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d9dc      	bls.n	8009d34 <inc_lock+0x10>
 8009d7a:	e000      	b.n	8009d7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d132      	bne.n	8009dea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d84:	2300      	movs	r3, #0
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	e002      	b.n	8009d90 <inc_lock+0x6c>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d806      	bhi.n	8009da4 <inc_lock+0x80>
 8009d96:	4a29      	ldr	r2, [pc, #164]	; (8009e3c <inc_lock+0x118>)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	4413      	add	r3, r2
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f2      	bne.n	8009d8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d101      	bne.n	8009dae <inc_lock+0x8a>
 8009daa:	2300      	movs	r3, #0
 8009dac:	e040      	b.n	8009e30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4922      	ldr	r1, [pc, #136]	; (8009e3c <inc_lock+0x118>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	440b      	add	r3, r1
 8009dba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	491e      	ldr	r1, [pc, #120]	; (8009e3c <inc_lock+0x118>)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	440b      	add	r3, r1
 8009dc8:	3304      	adds	r3, #4
 8009dca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	695a      	ldr	r2, [r3, #20]
 8009dd0:	491a      	ldr	r1, [pc, #104]	; (8009e3c <inc_lock+0x118>)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	011b      	lsls	r3, r3, #4
 8009dd6:	440b      	add	r3, r1
 8009dd8:	3308      	adds	r3, #8
 8009dda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ddc:	4a17      	ldr	r2, [pc, #92]	; (8009e3c <inc_lock+0x118>)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	4413      	add	r3, r2
 8009de4:	330c      	adds	r3, #12
 8009de6:	2200      	movs	r2, #0
 8009de8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d009      	beq.n	8009e04 <inc_lock+0xe0>
 8009df0:	4a12      	ldr	r2, [pc, #72]	; (8009e3c <inc_lock+0x118>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	330c      	adds	r3, #12
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <inc_lock+0xe0>
 8009e00:	2300      	movs	r3, #0
 8009e02:	e015      	b.n	8009e30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d108      	bne.n	8009e1c <inc_lock+0xf8>
 8009e0a:	4a0c      	ldr	r2, [pc, #48]	; (8009e3c <inc_lock+0x118>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	4413      	add	r3, r2
 8009e12:	330c      	adds	r3, #12
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	e001      	b.n	8009e20 <inc_lock+0xfc>
 8009e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e20:	4906      	ldr	r1, [pc, #24]	; (8009e3c <inc_lock+0x118>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	440b      	add	r3, r1
 8009e28:	330c      	adds	r3, #12
 8009e2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	2400658c 	.word	0x2400658c

08009e40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	607b      	str	r3, [r7, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d825      	bhi.n	8009ea0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e54:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <dec_lock+0x74>)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	4413      	add	r3, r2
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e62:	89fb      	ldrh	r3, [r7, #14]
 8009e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e68:	d101      	bne.n	8009e6e <dec_lock+0x2e>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e6e:	89fb      	ldrh	r3, [r7, #14]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <dec_lock+0x3a>
 8009e74:	89fb      	ldrh	r3, [r7, #14]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e7a:	4a0e      	ldr	r2, [pc, #56]	; (8009eb4 <dec_lock+0x74>)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	4413      	add	r3, r2
 8009e82:	330c      	adds	r3, #12
 8009e84:	89fa      	ldrh	r2, [r7, #14]
 8009e86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d105      	bne.n	8009e9a <dec_lock+0x5a>
 8009e8e:	4a09      	ldr	r2, [pc, #36]	; (8009eb4 <dec_lock+0x74>)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	4413      	add	r3, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	737b      	strb	r3, [r7, #13]
 8009e9e:	e001      	b.n	8009ea4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ea4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	2400658c 	.word	0x2400658c

08009eb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	e010      	b.n	8009ee8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ec6:	4a0d      	ldr	r2, [pc, #52]	; (8009efc <clear_lock+0x44>)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	4413      	add	r3, r2
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d105      	bne.n	8009ee2 <clear_lock+0x2a>
 8009ed6:	4a09      	ldr	r2, [pc, #36]	; (8009efc <clear_lock+0x44>)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	4413      	add	r3, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d9eb      	bls.n	8009ec6 <clear_lock+0xe>
	}
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	2400658c 	.word	0x2400658c

08009f00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	78db      	ldrb	r3, [r3, #3]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d034      	beq.n	8009f7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	7858      	ldrb	r0, [r3, #1]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f24:	2301      	movs	r3, #1
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	f7ff fd40 	bl	80099ac <disk_write>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	73fb      	strb	r3, [r7, #15]
 8009f36:	e022      	b.n	8009f7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	1ad2      	subs	r2, r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d217      	bcs.n	8009f7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	789b      	ldrb	r3, [r3, #2]
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	e010      	b.n	8009f78 <sync_window+0x78>
					wsect += fs->fsize;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7858      	ldrb	r0, [r3, #1]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	f7ff fd1d 	bl	80099ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	613b      	str	r3, [r7, #16]
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d8eb      	bhi.n	8009f56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d01b      	beq.n	8009fd8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff ffad 	bl	8009f00 <sync_window>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d113      	bne.n	8009fd8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	7858      	ldrb	r0, [r3, #1]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fba:	2301      	movs	r3, #1
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	f7ff fcd5 	bl	800996c <disk_read>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d004      	beq.n	8009fd2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fcc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ff87 	bl	8009f00 <sync_window>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d158      	bne.n	800a0ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b03      	cmp	r3, #3
 800a002:	d148      	bne.n	800a096 <sync_fs+0xb2>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	791b      	ldrb	r3, [r3, #4]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d144      	bne.n	800a096 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3330      	adds	r3, #48	; 0x30
 800a010:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a014:	2100      	movs	r1, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff fda9 	bl	8009b6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3330      	adds	r3, #48	; 0x30
 800a020:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a024:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff fd38 	bl	8009a9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3330      	adds	r3, #48	; 0x30
 800a032:	4921      	ldr	r1, [pc, #132]	; (800a0b8 <sync_fs+0xd4>)
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fd4d 	bl	8009ad4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3330      	adds	r3, #48	; 0x30
 800a03e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a042:	491e      	ldr	r1, [pc, #120]	; (800a0bc <sync_fs+0xd8>)
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fd45 	bl	8009ad4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3330      	adds	r3, #48	; 0x30
 800a04e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f7ff fd3b 	bl	8009ad4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3330      	adds	r3, #48	; 0x30
 800a062:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7ff fd31 	bl	8009ad4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	7858      	ldrb	r0, [r3, #1]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08a:	2301      	movs	r3, #1
 800a08c:	f7ff fc8e 	bl	80099ac <disk_write>
			fs->fsi_flag = 0;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff fca4 	bl	80099ec <disk_ioctl>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <sync_fs+0xca>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	41615252 	.word	0x41615252
 800a0bc:	61417272 	.word	0x61417272

0800a0c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	3b02      	subs	r3, #2
 800a0ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	3b02      	subs	r3, #2
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d301      	bcc.n	800a0e0 <clust2sect+0x20>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e008      	b.n	800a0f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	895b      	ldrh	r3, [r3, #10]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	fb03 f202 	mul.w	r2, r3, r2
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	4413      	add	r3, r2
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d904      	bls.n	800a11e <get_fat+0x20>
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d302      	bcc.n	800a124 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a11e:	2301      	movs	r3, #1
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e08f      	b.n	800a244 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a124:	f04f 33ff 	mov.w	r3, #4294967295
 800a128:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d062      	beq.n	800a1f8 <get_fat+0xfa>
 800a132:	2b03      	cmp	r3, #3
 800a134:	dc7c      	bgt.n	800a230 <get_fat+0x132>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d002      	beq.n	800a140 <get_fat+0x42>
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d042      	beq.n	800a1c4 <get_fat+0xc6>
 800a13e:	e077      	b.n	800a230 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	085b      	lsrs	r3, r3, #1
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	6a1a      	ldr	r2, [r3, #32]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	0a5b      	lsrs	r3, r3, #9
 800a156:	4413      	add	r3, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	6938      	ldr	r0, [r7, #16]
 800a15c:	f7ff ff14 	bl	8009f88 <move_window>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d167      	bne.n	800a236 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	60fa      	str	r2, [r7, #12]
 800a16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4413      	add	r3, r2
 800a174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a178:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	6a1a      	ldr	r2, [r3, #32]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	0a5b      	lsrs	r3, r3, #9
 800a182:	4413      	add	r3, r2
 800a184:	4619      	mov	r1, r3
 800a186:	6938      	ldr	r0, [r7, #16]
 800a188:	f7ff fefe 	bl	8009f88 <move_window>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d153      	bne.n	800a23a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4413      	add	r3, r2
 800a19c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <get_fat+0xbc>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	091b      	lsrs	r3, r3, #4
 800a1b8:	e002      	b.n	800a1c0 <get_fat+0xc2>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1c0:	617b      	str	r3, [r7, #20]
			break;
 800a1c2:	e03f      	b.n	800a244 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	0a1b      	lsrs	r3, r3, #8
 800a1cc:	4413      	add	r3, r2
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6938      	ldr	r0, [r7, #16]
 800a1d2:	f7ff fed9 	bl	8009f88 <move_window>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d130      	bne.n	800a23e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a1ea:	4413      	add	r3, r2
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fc1b 	bl	8009a28 <ld_word>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	617b      	str	r3, [r7, #20]
			break;
 800a1f6:	e025      	b.n	800a244 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6a1a      	ldr	r2, [r3, #32]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	09db      	lsrs	r3, r3, #7
 800a200:	4413      	add	r3, r2
 800a202:	4619      	mov	r1, r3
 800a204:	6938      	ldr	r0, [r7, #16]
 800a206:	f7ff febf 	bl	8009f88 <move_window>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d118      	bne.n	800a242 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a21e:	4413      	add	r3, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fc19 	bl	8009a58 <ld_dword>
 800a226:	4603      	mov	r3, r0
 800a228:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a22c:	617b      	str	r3, [r7, #20]
			break;
 800a22e:	e009      	b.n	800a244 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a230:	2301      	movs	r3, #1
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	e006      	b.n	800a244 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a236:	bf00      	nop
 800a238:	e004      	b.n	800a244 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a23a:	bf00      	nop
 800a23c:	e002      	b.n	800a244 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a23e:	bf00      	nop
 800a240:	e000      	b.n	800a244 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a242:	bf00      	nop
		}
	}

	return val;
 800a244:	697b      	ldr	r3, [r7, #20]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a24e:	b590      	push	{r4, r7, lr}
 800a250:	b089      	sub	sp, #36	; 0x24
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a25a:	2302      	movs	r3, #2
 800a25c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b01      	cmp	r3, #1
 800a262:	f240 80d2 	bls.w	800a40a <put_fat+0x1bc>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	f080 80cc 	bcs.w	800a40a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b03      	cmp	r3, #3
 800a278:	f000 8096 	beq.w	800a3a8 <put_fat+0x15a>
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	f300 80cd 	bgt.w	800a41c <put_fat+0x1ce>
 800a282:	2b01      	cmp	r3, #1
 800a284:	d002      	beq.n	800a28c <put_fat+0x3e>
 800a286:	2b02      	cmp	r3, #2
 800a288:	d06e      	beq.n	800a368 <put_fat+0x11a>
 800a28a:	e0c7      	b.n	800a41c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	4413      	add	r3, r2
 800a298:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a1a      	ldr	r2, [r3, #32]
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	0a5b      	lsrs	r3, r3, #9
 800a2a2:	4413      	add	r3, r2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff fe6e 	bl	8009f88 <move_window>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2b0:	7ffb      	ldrb	r3, [r7, #31]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f040 80ab 	bne.w	800a40e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	1c59      	adds	r1, r3, #1
 800a2c2:	61b9      	str	r1, [r7, #24]
 800a2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c8:	4413      	add	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00d      	beq.n	800a2f2 <put_fat+0xa4>
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	b25a      	sxtb	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	b25b      	sxtb	r3, r3
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	e001      	b.n	800a2f6 <put_fat+0xa8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6a1a      	ldr	r2, [r3, #32]
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	0a5b      	lsrs	r3, r3, #9
 800a308:	4413      	add	r3, r2
 800a30a:	4619      	mov	r1, r3
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff fe3b 	bl	8009f88 <move_window>
 800a312:	4603      	mov	r3, r0
 800a314:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a316:	7ffb      	ldrb	r3, [r7, #31]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d17a      	bne.n	800a412 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a328:	4413      	add	r3, r2
 800a32a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <put_fat+0xf0>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	091b      	lsrs	r3, r3, #4
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	e00e      	b.n	800a35c <put_fat+0x10e>
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	b25b      	sxtb	r3, r3
 800a344:	f023 030f 	bic.w	r3, r3, #15
 800a348:	b25a      	sxtb	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	0a1b      	lsrs	r3, r3, #8
 800a34e:	b25b      	sxtb	r3, r3
 800a350:	f003 030f 	and.w	r3, r3, #15
 800a354:	b25b      	sxtb	r3, r3
 800a356:	4313      	orrs	r3, r2
 800a358:	b25b      	sxtb	r3, r3
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	70da      	strb	r2, [r3, #3]
			break;
 800a366:	e059      	b.n	800a41c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6a1a      	ldr	r2, [r3, #32]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	0a1b      	lsrs	r3, r3, #8
 800a370:	4413      	add	r3, r2
 800a372:	4619      	mov	r1, r3
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7ff fe07 	bl	8009f88 <move_window>
 800a37a:	4603      	mov	r3, r0
 800a37c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a37e:	7ffb      	ldrb	r3, [r7, #31]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d148      	bne.n	800a416 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a392:	4413      	add	r3, r2
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	b292      	uxth	r2, r2
 800a398:	4611      	mov	r1, r2
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fb7f 	bl	8009a9e <st_word>
			fs->wflag = 1;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	70da      	strb	r2, [r3, #3]
			break;
 800a3a6:	e039      	b.n	800a41c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6a1a      	ldr	r2, [r3, #32]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	09db      	lsrs	r3, r3, #7
 800a3b0:	4413      	add	r3, r2
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fde7 	bl	8009f88 <move_window>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3be:	7ffb      	ldrb	r3, [r7, #31]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d12a      	bne.n	800a41a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3d8:	4413      	add	r3, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fb3c 	bl	8009a58 <ld_dword>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3e6:	4323      	orrs	r3, r4
 800a3e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3f8:	4413      	add	r3, r2
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fb69 	bl	8009ad4 <st_dword>
			fs->wflag = 1;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	70da      	strb	r2, [r3, #3]
			break;
 800a408:	e008      	b.n	800a41c <put_fat+0x1ce>
		}
	}
 800a40a:	bf00      	nop
 800a40c:	e006      	b.n	800a41c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a40e:	bf00      	nop
 800a410:	e004      	b.n	800a41c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a412:	bf00      	nop
 800a414:	e002      	b.n	800a41c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a416:	bf00      	nop
 800a418:	e000      	b.n	800a41c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a41a:	bf00      	nop
	return res;
 800a41c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3724      	adds	r7, #36	; 0x24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd90      	pop	{r4, r7, pc}

0800a426 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b088      	sub	sp, #32
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d904      	bls.n	800a44c <remove_chain+0x26>
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d301      	bcc.n	800a450 <remove_chain+0x2a>
 800a44c:	2302      	movs	r3, #2
 800a44e:	e04b      	b.n	800a4e8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00c      	beq.n	800a470 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a456:	f04f 32ff 	mov.w	r2, #4294967295
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	69b8      	ldr	r0, [r7, #24]
 800a45e:	f7ff fef6 	bl	800a24e <put_fat>
 800a462:	4603      	mov	r3, r0
 800a464:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a466:	7ffb      	ldrb	r3, [r7, #31]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <remove_chain+0x4a>
 800a46c:	7ffb      	ldrb	r3, [r7, #31]
 800a46e:	e03b      	b.n	800a4e8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a470:	68b9      	ldr	r1, [r7, #8]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7ff fe43 	bl	800a0fe <get_fat>
 800a478:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d031      	beq.n	800a4e4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <remove_chain+0x64>
 800a486:	2302      	movs	r3, #2
 800a488:	e02e      	b.n	800a4e8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d101      	bne.n	800a496 <remove_chain+0x70>
 800a492:	2301      	movs	r3, #1
 800a494:	e028      	b.n	800a4e8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a496:	2200      	movs	r2, #0
 800a498:	68b9      	ldr	r1, [r7, #8]
 800a49a:	69b8      	ldr	r0, [r7, #24]
 800a49c:	f7ff fed7 	bl	800a24e <put_fat>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a4a4:	7ffb      	ldrb	r3, [r7, #31]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <remove_chain+0x88>
 800a4aa:	7ffb      	ldrb	r3, [r7, #31]
 800a4ac:	e01c      	b.n	800a4e8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	3b02      	subs	r3, #2
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d20b      	bcs.n	800a4d4 <remove_chain+0xae>
			fs->free_clst++;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	791b      	ldrb	r3, [r3, #4]
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d3c6      	bcc.n	800a470 <remove_chain+0x4a>
 800a4e2:	e000      	b.n	800a4e6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a4e4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3720      	adds	r7, #32
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10d      	bne.n	800a522 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <create_chain+0x2c>
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d31b      	bcc.n	800a554 <create_chain+0x64>
 800a51c:	2301      	movs	r3, #1
 800a51e:	61bb      	str	r3, [r7, #24]
 800a520:	e018      	b.n	800a554 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fdea 	bl	800a0fe <get_fat>
 800a52a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d801      	bhi.n	800a536 <create_chain+0x46>
 800a532:	2301      	movs	r3, #1
 800a534:	e070      	b.n	800a618 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53c:	d101      	bne.n	800a542 <create_chain+0x52>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	e06a      	b.n	800a618 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d201      	bcs.n	800a550 <create_chain+0x60>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e063      	b.n	800a618 <create_chain+0x128>
		scl = clst;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3301      	adds	r3, #1
 800a55c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	429a      	cmp	r2, r3
 800a566:	d307      	bcc.n	800a578 <create_chain+0x88>
				ncl = 2;
 800a568:	2302      	movs	r3, #2
 800a56a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	429a      	cmp	r2, r3
 800a572:	d901      	bls.n	800a578 <create_chain+0x88>
 800a574:	2300      	movs	r3, #0
 800a576:	e04f      	b.n	800a618 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a578:	69f9      	ldr	r1, [r7, #28]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fdbf 	bl	800a0fe <get_fat>
 800a580:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00e      	beq.n	800a5a6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d003      	beq.n	800a596 <create_chain+0xa6>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a594:	d101      	bne.n	800a59a <create_chain+0xaa>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	e03e      	b.n	800a618 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d1da      	bne.n	800a558 <create_chain+0x68>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e038      	b.n	800a618 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a5a6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ac:	69f9      	ldr	r1, [r7, #28]
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f7ff fe4d 	bl	800a24e <put_fat>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <create_chain+0xe2>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d006      	beq.n	800a5d2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5c4:	69fa      	ldr	r2, [r7, #28]
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6938      	ldr	r0, [r7, #16]
 800a5ca:	f7ff fe40 	bl	800a24e <put_fat>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d116      	bne.n	800a606 <create_chain+0x116>
		fs->last_clst = ncl;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	69fa      	ldr	r2, [r7, #28]
 800a5dc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	691a      	ldr	r2, [r3, #16]
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	3b02      	subs	r3, #2
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d804      	bhi.n	800a5f6 <create_chain+0x106>
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	1e5a      	subs	r2, r3, #1
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	791b      	ldrb	r3, [r3, #4]
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	711a      	strb	r2, [r3, #4]
 800a604:	e007      	b.n	800a616 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d102      	bne.n	800a612 <create_chain+0x122>
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	e000      	b.n	800a614 <create_chain+0x124>
 800a612:	2301      	movs	r3, #1
 800a614:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a616:	69fb      	ldr	r3, [r7, #28]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	3304      	adds	r3, #4
 800a636:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	0a5b      	lsrs	r3, r3, #9
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	8952      	ldrh	r2, [r2, #10]
 800a640:	fbb3 f3f2 	udiv	r3, r3, r2
 800a644:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	1d1a      	adds	r2, r3, #4
 800a64a:	613a      	str	r2, [r7, #16]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <clmt_clust+0x3a>
 800a656:	2300      	movs	r3, #0
 800a658:	e010      	b.n	800a67c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d307      	bcc.n	800a672 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	3304      	adds	r3, #4
 800a66e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a670:	e7e9      	b.n	800a646 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a672:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4413      	add	r3, r2
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a69e:	d204      	bcs.n	800a6aa <dir_sdi+0x22>
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	f003 031f 	and.w	r3, r3, #31
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e063      	b.n	800a776 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d106      	bne.n	800a6ce <dir_sdi+0x46>
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d902      	bls.n	800a6ce <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10c      	bne.n	800a6ee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	095b      	lsrs	r3, r3, #5
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	8912      	ldrh	r2, [r2, #8]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d301      	bcc.n	800a6e4 <dir_sdi+0x5c>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e048      	b.n	800a776 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	61da      	str	r2, [r3, #28]
 800a6ec:	e029      	b.n	800a742 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	895b      	ldrh	r3, [r3, #10]
 800a6f2:	025b      	lsls	r3, r3, #9
 800a6f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6f6:	e019      	b.n	800a72c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6979      	ldr	r1, [r7, #20]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fcfe 	bl	800a0fe <get_fat>
 800a702:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d101      	bne.n	800a710 <dir_sdi+0x88>
 800a70c:	2301      	movs	r3, #1
 800a70e:	e032      	b.n	800a776 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d904      	bls.n	800a720 <dir_sdi+0x98>
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d301      	bcc.n	800a724 <dir_sdi+0x9c>
 800a720:	2302      	movs	r3, #2
 800a722:	e028      	b.n	800a776 <dir_sdi+0xee>
			ofs -= csz;
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	429a      	cmp	r2, r3
 800a732:	d2e1      	bcs.n	800a6f8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a734:	6979      	ldr	r1, [r7, #20]
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f7ff fcc2 	bl	800a0c0 <clust2sect>
 800a73c:	4602      	mov	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <dir_sdi+0xcc>
 800a750:	2302      	movs	r3, #2
 800a752:	e010      	b.n	800a776 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69da      	ldr	r2, [r3, #28]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	0a5b      	lsrs	r3, r3, #9
 800a75c:	441a      	add	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76e:	441a      	add	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	3320      	adds	r3, #32
 800a794:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <dir_next+0x28>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a4:	d301      	bcc.n	800a7aa <dir_next+0x2c>
 800a7a6:	2304      	movs	r3, #4
 800a7a8:	e0aa      	b.n	800a900 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f040 8098 	bne.w	800a8e6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10b      	bne.n	800a7e0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	095b      	lsrs	r3, r3, #5
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	8912      	ldrh	r2, [r2, #8]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	f0c0 8088 	bcc.w	800a8e6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	61da      	str	r2, [r3, #28]
 800a7dc:	2304      	movs	r3, #4
 800a7de:	e08f      	b.n	800a900 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	0a5b      	lsrs	r3, r3, #9
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	8952      	ldrh	r2, [r2, #10]
 800a7e8:	3a01      	subs	r2, #1
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d17a      	bne.n	800a8e6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	f7ff fc80 	bl	800a0fe <get_fat>
 800a7fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d801      	bhi.n	800a80a <dir_next+0x8c>
 800a806:	2302      	movs	r3, #2
 800a808:	e07a      	b.n	800a900 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a810:	d101      	bne.n	800a816 <dir_next+0x98>
 800a812:	2301      	movs	r3, #1
 800a814:	e074      	b.n	800a900 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d358      	bcc.n	800a8d2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d104      	bne.n	800a830 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	61da      	str	r2, [r3, #28]
 800a82c:	2304      	movs	r3, #4
 800a82e:	e067      	b.n	800a900 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f7ff fe59 	bl	800a4f0 <create_chain>
 800a83e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <dir_next+0xcc>
 800a846:	2307      	movs	r3, #7
 800a848:	e05a      	b.n	800a900 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d101      	bne.n	800a854 <dir_next+0xd6>
 800a850:	2302      	movs	r3, #2
 800a852:	e055      	b.n	800a900 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d101      	bne.n	800a860 <dir_next+0xe2>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e04f      	b.n	800a900 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7ff fb4d 	bl	8009f00 <sync_window>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <dir_next+0xf2>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e047      	b.n	800a900 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3330      	adds	r3, #48	; 0x30
 800a874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a878:	2100      	movs	r1, #0
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff f977 	bl	8009b6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a880:	2300      	movs	r3, #0
 800a882:	613b      	str	r3, [r7, #16]
 800a884:	6979      	ldr	r1, [r7, #20]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff fc1a 	bl	800a0c0 <clust2sect>
 800a88c:	4602      	mov	r2, r0
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	62da      	str	r2, [r3, #44]	; 0x2c
 800a892:	e012      	b.n	800a8ba <dir_next+0x13c>
						fs->wflag = 1;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2201      	movs	r2, #1
 800a898:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7ff fb30 	bl	8009f00 <sync_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <dir_next+0x12c>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e02a      	b.n	800a900 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	613b      	str	r3, [r7, #16]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	895b      	ldrh	r3, [r3, #10]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d3e6      	bcc.n	800a894 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	1ad2      	subs	r2, r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a8d8:	6979      	ldr	r1, [r7, #20]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fbf0 	bl	800a0c0 <clust2sect>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f8:	441a      	add	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a918:	2100      	movs	r1, #0
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff feb4 	bl	800a688 <dir_sdi>
 800a920:	4603      	mov	r3, r0
 800a922:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d12b      	bne.n	800a982 <dir_alloc+0x7a>
		n = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	4619      	mov	r1, r3
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f7ff fb27 	bl	8009f88 <move_window>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11d      	bne.n	800a980 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a1b      	ldr	r3, [r3, #32]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2be5      	cmp	r3, #229	; 0xe5
 800a94c:	d004      	beq.n	800a958 <dir_alloc+0x50>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d107      	bne.n	800a968 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	3301      	adds	r3, #1
 800a95c:	613b      	str	r3, [r7, #16]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d102      	bne.n	800a96c <dir_alloc+0x64>
 800a966:	e00c      	b.n	800a982 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a968:	2300      	movs	r3, #0
 800a96a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a96c:	2101      	movs	r1, #1
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff05 	bl	800a77e <dir_next>
 800a974:	4603      	mov	r3, r0
 800a976:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0d7      	beq.n	800a92e <dir_alloc+0x26>
 800a97e:	e000      	b.n	800a982 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a980:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	2b04      	cmp	r3, #4
 800a986:	d101      	bne.n	800a98c <dir_alloc+0x84>
 800a988:	2307      	movs	r3, #7
 800a98a:	75fb      	strb	r3, [r7, #23]
	return res;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	331a      	adds	r3, #26
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff f83f 	bl	8009a28 <ld_word>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d109      	bne.n	800a9ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	3314      	adds	r3, #20
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff f834 	bl	8009a28 <ld_word>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	041b      	lsls	r3, r3, #16
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	331a      	adds	r3, #26
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	b292      	uxth	r2, r2
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff f857 	bl	8009a9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d109      	bne.n	800aa0c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f103 0214 	add.w	r2, r3, #20
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	0c1b      	lsrs	r3, r3, #16
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f7ff f849 	bl	8009a9e <st_word>
	}
}
 800aa0c:	bf00      	nop
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa22:	2100      	movs	r1, #0
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff fe2f 	bl	800a688 <dir_sdi>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <dir_find+0x24>
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	e03e      	b.n	800aab6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6938      	ldr	r0, [r7, #16]
 800aa40:	f7ff faa2 	bl	8009f88 <move_window>
 800aa44:	4603      	mov	r3, r0
 800aa46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d12f      	bne.n	800aaae <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <dir_find+0x4e>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	75fb      	strb	r3, [r7, #23]
 800aa60:	e028      	b.n	800aab4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	330b      	adds	r3, #11
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	330b      	adds	r3, #11
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 0308 	and.w	r3, r3, #8
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <dir_find+0x86>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a18      	ldr	r0, [r3, #32]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3324      	adds	r3, #36	; 0x24
 800aa8c:	220b      	movs	r2, #11
 800aa8e:	4619      	mov	r1, r3
 800aa90:	f7ff f888 	bl	8009ba4 <mem_cmp>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00b      	beq.n	800aab2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fe6e 	bl	800a77e <dir_next>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0c5      	beq.n	800aa38 <dir_find+0x24>
 800aaac:	e002      	b.n	800aab4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aaae:	bf00      	nop
 800aab0:	e000      	b.n	800aab4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aab2:	bf00      	nop

	return res;
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aacc:	2101      	movs	r1, #1
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff ff1a 	bl	800a908 <dir_alloc>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d11c      	bne.n	800ab18 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	4619      	mov	r1, r3
 800aae4:	68b8      	ldr	r0, [r7, #8]
 800aae6:	f7ff fa4f 	bl	8009f88 <move_window>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d111      	bne.n	800ab18 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	2100      	movs	r1, #0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff f836 	bl	8009b6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a18      	ldr	r0, [r3, #32]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3324      	adds	r3, #36	; 0x24
 800ab0a:	220b      	movs	r2, #11
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	f7ff f80d 	bl	8009b2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2201      	movs	r2, #1
 800ab16:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3324      	adds	r3, #36	; 0x24
 800ab38:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab3a:	220b      	movs	r2, #11
 800ab3c:	2120      	movs	r1, #32
 800ab3e:	68b8      	ldr	r0, [r7, #8]
 800ab40:	f7ff f815 	bl	8009b6e <mem_set>
	si = i = 0; ni = 8;
 800ab44:	2300      	movs	r3, #0
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	61fb      	str	r3, [r7, #28]
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	61fa      	str	r2, [r7, #28]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab5e:	7efb      	ldrb	r3, [r7, #27]
 800ab60:	2b20      	cmp	r3, #32
 800ab62:	d94e      	bls.n	800ac02 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ab64:	7efb      	ldrb	r3, [r7, #27]
 800ab66:	2b2f      	cmp	r3, #47	; 0x2f
 800ab68:	d006      	beq.n	800ab78 <create_name+0x54>
 800ab6a:	7efb      	ldrb	r3, [r7, #27]
 800ab6c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab6e:	d110      	bne.n	800ab92 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ab70:	e002      	b.n	800ab78 <create_name+0x54>
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	3301      	adds	r3, #1
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b2f      	cmp	r3, #47	; 0x2f
 800ab82:	d0f6      	beq.n	800ab72 <create_name+0x4e>
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab8e:	d0f0      	beq.n	800ab72 <create_name+0x4e>
			break;
 800ab90:	e038      	b.n	800ac04 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ab92:	7efb      	ldrb	r3, [r7, #27]
 800ab94:	2b2e      	cmp	r3, #46	; 0x2e
 800ab96:	d003      	beq.n	800aba0 <create_name+0x7c>
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d30c      	bcc.n	800abba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b0b      	cmp	r3, #11
 800aba4:	d002      	beq.n	800abac <create_name+0x88>
 800aba6:	7efb      	ldrb	r3, [r7, #27]
 800aba8:	2b2e      	cmp	r3, #46	; 0x2e
 800abaa:	d001      	beq.n	800abb0 <create_name+0x8c>
 800abac:	2306      	movs	r3, #6
 800abae:	e044      	b.n	800ac3a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800abb0:	2308      	movs	r3, #8
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	230b      	movs	r3, #11
 800abb6:	617b      	str	r3, [r7, #20]
			continue;
 800abb8:	e022      	b.n	800ac00 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800abba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	da04      	bge.n	800abcc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800abc2:	7efb      	ldrb	r3, [r7, #27]
 800abc4:	3b80      	subs	r3, #128	; 0x80
 800abc6:	4a1f      	ldr	r2, [pc, #124]	; (800ac44 <create_name+0x120>)
 800abc8:	5cd3      	ldrb	r3, [r2, r3]
 800abca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800abcc:	7efb      	ldrb	r3, [r7, #27]
 800abce:	4619      	mov	r1, r3
 800abd0:	481d      	ldr	r0, [pc, #116]	; (800ac48 <create_name+0x124>)
 800abd2:	f7ff f80e 	bl	8009bf2 <chk_chr>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <create_name+0xbc>
 800abdc:	2306      	movs	r3, #6
 800abde:	e02c      	b.n	800ac3a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800abe0:	7efb      	ldrb	r3, [r7, #27]
 800abe2:	2b60      	cmp	r3, #96	; 0x60
 800abe4:	d905      	bls.n	800abf2 <create_name+0xce>
 800abe6:	7efb      	ldrb	r3, [r7, #27]
 800abe8:	2b7a      	cmp	r3, #122	; 0x7a
 800abea:	d802      	bhi.n	800abf2 <create_name+0xce>
 800abec:	7efb      	ldrb	r3, [r7, #27]
 800abee:	3b20      	subs	r3, #32
 800abf0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	613a      	str	r2, [r7, #16]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	4413      	add	r3, r2
 800abfc:	7efa      	ldrb	r2, [r7, #27]
 800abfe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac00:	e7a6      	b.n	800ab50 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac02:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	441a      	add	r2, r3
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <create_name+0xf4>
 800ac14:	2306      	movs	r3, #6
 800ac16:	e010      	b.n	800ac3a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2be5      	cmp	r3, #229	; 0xe5
 800ac1e:	d102      	bne.n	800ac26 <create_name+0x102>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2205      	movs	r2, #5
 800ac24:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac26:	7efb      	ldrb	r3, [r7, #27]
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d801      	bhi.n	800ac30 <create_name+0x10c>
 800ac2c:	2204      	movs	r2, #4
 800ac2e:	e000      	b.n	800ac32 <create_name+0x10e>
 800ac30:	2200      	movs	r2, #0
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	330b      	adds	r3, #11
 800ac36:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac38:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	0800ce50 	.word	0x0800ce50
 800ac48:	0800cdc0 	.word	0x0800cdc0

0800ac4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac60:	e002      	b.n	800ac68 <follow_path+0x1c>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	3301      	adds	r3, #1
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac6e:	d0f8      	beq.n	800ac62 <follow_path+0x16>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b5c      	cmp	r3, #92	; 0x5c
 800ac76:	d0f4      	beq.n	800ac62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b1f      	cmp	r3, #31
 800ac84:	d80a      	bhi.n	800ac9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2280      	movs	r2, #128	; 0x80
 800ac8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ac8e:	2100      	movs	r1, #0
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fcf9 	bl	800a688 <dir_sdi>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75fb      	strb	r3, [r7, #23]
 800ac9a:	e043      	b.n	800ad24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac9c:	463b      	mov	r3, r7
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff ff3f 	bl	800ab24 <create_name>
 800aca6:	4603      	mov	r3, r0
 800aca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acaa:	7dfb      	ldrb	r3, [r7, #23]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d134      	bne.n	800ad1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff feaf 	bl	800aa14 <dir_find>
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
 800acca:	2b04      	cmp	r3, #4
 800accc:	d127      	bne.n	800ad1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800acce:	7afb      	ldrb	r3, [r7, #11]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d122      	bne.n	800ad1e <follow_path+0xd2>
 800acd8:	2305      	movs	r3, #5
 800acda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800acdc:	e01f      	b.n	800ad1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800acde:	7afb      	ldrb	r3, [r7, #11]
 800ace0:	f003 0304 	and.w	r3, r3, #4
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d11c      	bne.n	800ad22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	799b      	ldrb	r3, [r3, #6]
 800acec:	f003 0310 	and.w	r3, r3, #16
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800acf4:	2305      	movs	r3, #5
 800acf6:	75fb      	strb	r3, [r7, #23]
 800acf8:	e014      	b.n	800ad24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad08:	4413      	add	r3, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff fe42 	bl	800a996 <ld_clust>
 800ad12:	4602      	mov	r2, r0
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad18:	e7c0      	b.n	800ac9c <follow_path+0x50>
			if (res != FR_OK) break;
 800ad1a:	bf00      	nop
 800ad1c:	e002      	b.n	800ad24 <follow_path+0xd8>
				break;
 800ad1e:	bf00      	nop
 800ad20:	e000      	b.n	800ad24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad22:	bf00      	nop
			}
		}
	}

	return res;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b087      	sub	sp, #28
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d031      	beq.n	800ada8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	617b      	str	r3, [r7, #20]
 800ad4a:	e002      	b.n	800ad52 <get_ldnumber+0x24>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b20      	cmp	r3, #32
 800ad58:	d903      	bls.n	800ad62 <get_ldnumber+0x34>
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b3a      	cmp	r3, #58	; 0x3a
 800ad60:	d1f4      	bne.n	800ad4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b3a      	cmp	r3, #58	; 0x3a
 800ad68:	d11c      	bne.n	800ada4 <get_ldnumber+0x76>
			tp = *path;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	60fa      	str	r2, [r7, #12]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	3b30      	subs	r3, #48	; 0x30
 800ad7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b09      	cmp	r3, #9
 800ad80:	d80e      	bhi.n	800ada0 <get_ldnumber+0x72>
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d10a      	bne.n	800ada0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d107      	bne.n	800ada0 <get_ldnumber+0x72>
					vol = (int)i;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	3301      	adds	r3, #1
 800ad98:	617b      	str	r3, [r7, #20]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	e002      	b.n	800adaa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ada4:	2300      	movs	r3, #0
 800ada6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ada8:	693b      	ldr	r3, [r7, #16]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	70da      	strb	r2, [r3, #3]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f04f 32ff 	mov.w	r2, #4294967295
 800adce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff f8d8 	bl	8009f88 <move_window>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <check_fs+0x2a>
 800adde:	2304      	movs	r3, #4
 800ade0:	e038      	b.n	800ae54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3330      	adds	r3, #48	; 0x30
 800ade6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fe1c 	bl	8009a28 <ld_word>
 800adf0:	4603      	mov	r3, r0
 800adf2:	461a      	mov	r2, r3
 800adf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d001      	beq.n	800ae00 <check_fs+0x48>
 800adfc:	2303      	movs	r3, #3
 800adfe:	e029      	b.n	800ae54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae06:	2be9      	cmp	r3, #233	; 0xe9
 800ae08:	d009      	beq.n	800ae1e <check_fs+0x66>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae10:	2beb      	cmp	r3, #235	; 0xeb
 800ae12:	d11e      	bne.n	800ae52 <check_fs+0x9a>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae1a:	2b90      	cmp	r3, #144	; 0x90
 800ae1c:	d119      	bne.n	800ae52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3330      	adds	r3, #48	; 0x30
 800ae22:	3336      	adds	r3, #54	; 0x36
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe fe17 	bl	8009a58 <ld_dword>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae30:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <check_fs+0xa4>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d101      	bne.n	800ae3a <check_fs+0x82>
 800ae36:	2300      	movs	r3, #0
 800ae38:	e00c      	b.n	800ae54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3330      	adds	r3, #48	; 0x30
 800ae3e:	3352      	adds	r3, #82	; 0x52
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fe09 	bl	8009a58 <ld_dword>
 800ae46:	4603      	mov	r3, r0
 800ae48:	4a05      	ldr	r2, [pc, #20]	; (800ae60 <check_fs+0xa8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d101      	bne.n	800ae52 <check_fs+0x9a>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e000      	b.n	800ae54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae52:	2302      	movs	r3, #2
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	00544146 	.word	0x00544146
 800ae60:	33544146 	.word	0x33544146

0800ae64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b096      	sub	sp, #88	; 0x58
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7ff ff58 	bl	800ad2e <get_ldnumber>
 800ae7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da01      	bge.n	800ae8a <find_volume+0x26>
 800ae86:	230b      	movs	r3, #11
 800ae88:	e22e      	b.n	800b2e8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ae8a:	4aa8      	ldr	r2, [pc, #672]	; (800b12c <find_volume+0x2c8>)
 800ae8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <find_volume+0x3a>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	e224      	b.n	800b2e8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aea2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01a      	beq.n	800aeea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	785b      	ldrb	r3, [r3, #1]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fd17 	bl	80098ec <disk_status>
 800aebe:	4603      	mov	r3, r0
 800aec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10c      	bne.n	800aeea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d007      	beq.n	800aee6 <find_volume+0x82>
 800aed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aee2:	230a      	movs	r3, #10
 800aee4:	e200      	b.n	800b2e8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800aee6:	2300      	movs	r3, #0
 800aee8:	e1fe      	b.n	800b2e8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefa:	785b      	ldrb	r3, [r3, #1]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fd0f 	bl	8009920 <disk_initialize>
 800af02:	4603      	mov	r3, r0
 800af04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af0c:	f003 0301 	and.w	r3, r3, #1
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af14:	2303      	movs	r3, #3
 800af16:	e1e7      	b.n	800b2e8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <find_volume+0xca>
 800af1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af22:	f003 0304 	and.w	r3, r3, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af2a:	230a      	movs	r3, #10
 800af2c:	e1dc      	b.n	800b2e8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af36:	f7ff ff3f 	bl	800adb8 <check_fs>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af44:	2b02      	cmp	r3, #2
 800af46:	d14b      	bne.n	800afe0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af48:	2300      	movs	r3, #0
 800af4a:	643b      	str	r3, [r7, #64]	; 0x40
 800af4c:	e01f      	b.n	800af8e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af5c:	4413      	add	r3, r2
 800af5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	3304      	adds	r3, #4
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d006      	beq.n	800af78 <find_volume+0x114>
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	3308      	adds	r3, #8
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fd72 	bl	8009a58 <ld_dword>
 800af74:	4602      	mov	r2, r0
 800af76:	e000      	b.n	800af7a <find_volume+0x116>
 800af78:	2200      	movs	r2, #0
 800af7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800af82:	440b      	add	r3, r1
 800af84:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af8a:	3301      	adds	r3, #1
 800af8c:	643b      	str	r3, [r7, #64]	; 0x40
 800af8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af90:	2b03      	cmp	r3, #3
 800af92:	d9dc      	bls.n	800af4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af94:	2300      	movs	r3, #0
 800af96:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <find_volume+0x140>
 800af9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa0:	3b01      	subs	r3, #1
 800afa2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800afa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800afac:	4413      	add	r3, r2
 800afae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800afb2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800afb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <find_volume+0x162>
 800afba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afbe:	f7ff fefb 	bl	800adb8 <check_fs>
 800afc2:	4603      	mov	r3, r0
 800afc4:	e000      	b.n	800afc8 <find_volume+0x164>
 800afc6:	2303      	movs	r3, #3
 800afc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800afcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d905      	bls.n	800afe0 <find_volume+0x17c>
 800afd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd6:	3301      	adds	r3, #1
 800afd8:	643b      	str	r3, [r7, #64]	; 0x40
 800afda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d9e1      	bls.n	800afa4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	d101      	bne.n	800afec <find_volume+0x188>
 800afe8:	2301      	movs	r3, #1
 800afea:	e17d      	b.n	800b2e8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800afec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d901      	bls.n	800aff8 <find_volume+0x194>
 800aff4:	230d      	movs	r3, #13
 800aff6:	e177      	b.n	800b2e8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	3330      	adds	r3, #48	; 0x30
 800affc:	330b      	adds	r3, #11
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fd12 	bl	8009a28 <ld_word>
 800b004:	4603      	mov	r3, r0
 800b006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b00a:	d001      	beq.n	800b010 <find_volume+0x1ac>
 800b00c:	230d      	movs	r3, #13
 800b00e:	e16b      	b.n	800b2e8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	3330      	adds	r3, #48	; 0x30
 800b014:	3316      	adds	r3, #22
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fd06 	bl	8009a28 <ld_word>
 800b01c:	4603      	mov	r3, r0
 800b01e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d106      	bne.n	800b034 <find_volume+0x1d0>
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	3330      	adds	r3, #48	; 0x30
 800b02a:	3324      	adds	r3, #36	; 0x24
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fe fd13 	bl	8009a58 <ld_dword>
 800b032:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b038:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	789b      	ldrb	r3, [r3, #2]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d005      	beq.n	800b058 <find_volume+0x1f4>
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	789b      	ldrb	r3, [r3, #2]
 800b050:	2b02      	cmp	r3, #2
 800b052:	d001      	beq.n	800b058 <find_volume+0x1f4>
 800b054:	230d      	movs	r3, #13
 800b056:	e147      	b.n	800b2e8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	789b      	ldrb	r3, [r3, #2]
 800b05c:	461a      	mov	r2, r3
 800b05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b060:	fb02 f303 	mul.w	r3, r2, r3
 800b064:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	895b      	ldrh	r3, [r3, #10]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <find_volume+0x228>
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	895b      	ldrh	r3, [r3, #10]
 800b07e:	461a      	mov	r2, r3
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	895b      	ldrh	r3, [r3, #10]
 800b084:	3b01      	subs	r3, #1
 800b086:	4013      	ands	r3, r2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <find_volume+0x22c>
 800b08c:	230d      	movs	r3, #13
 800b08e:	e12b      	b.n	800b2e8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	3330      	adds	r3, #48	; 0x30
 800b094:	3311      	adds	r3, #17
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fcc6 	bl	8009a28 <ld_word>
 800b09c:	4603      	mov	r3, r0
 800b09e:	461a      	mov	r2, r3
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	891b      	ldrh	r3, [r3, #8]
 800b0a8:	f003 030f 	and.w	r3, r3, #15
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <find_volume+0x252>
 800b0b2:	230d      	movs	r3, #13
 800b0b4:	e118      	b.n	800b2e8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	3330      	adds	r3, #48	; 0x30
 800b0ba:	3313      	adds	r3, #19
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fe fcb3 	bl	8009a28 <ld_word>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d106      	bne.n	800b0da <find_volume+0x276>
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	3330      	adds	r3, #48	; 0x30
 800b0d0:	3320      	adds	r3, #32
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe fcc0 	bl	8009a58 <ld_dword>
 800b0d8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	3330      	adds	r3, #48	; 0x30
 800b0de:	330e      	adds	r3, #14
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fca1 	bl	8009a28 <ld_word>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <find_volume+0x290>
 800b0f0:	230d      	movs	r3, #13
 800b0f2:	e0f9      	b.n	800b2e8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f8:	4413      	add	r3, r2
 800b0fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0fc:	8912      	ldrh	r2, [r2, #8]
 800b0fe:	0912      	lsrs	r2, r2, #4
 800b100:	b292      	uxth	r2, r2
 800b102:	4413      	add	r3, r2
 800b104:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d201      	bcs.n	800b112 <find_volume+0x2ae>
 800b10e:	230d      	movs	r3, #13
 800b110:	e0ea      	b.n	800b2e8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b11a:	8952      	ldrh	r2, [r2, #10]
 800b11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <find_volume+0x2cc>
 800b128:	230d      	movs	r3, #13
 800b12a:	e0dd      	b.n	800b2e8 <find_volume+0x484>
 800b12c:	24006584 	.word	0x24006584
		fmt = FS_FAT32;
 800b130:	2303      	movs	r3, #3
 800b132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d802      	bhi.n	800b146 <find_volume+0x2e2>
 800b140:	2302      	movs	r3, #2
 800b142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b148:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d802      	bhi.n	800b156 <find_volume+0x2f2>
 800b150:	2301      	movs	r3, #1
 800b152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	1c9a      	adds	r2, r3, #2
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b162:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b164:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b168:	441a      	add	r2, r3
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b16e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	441a      	add	r2, r3
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d11e      	bne.n	800b1be <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	3330      	adds	r3, #48	; 0x30
 800b184:	332a      	adds	r3, #42	; 0x2a
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fc4e 	bl	8009a28 <ld_word>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <find_volume+0x332>
 800b192:	230d      	movs	r3, #13
 800b194:	e0a8      	b.n	800b2e8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	891b      	ldrh	r3, [r3, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <find_volume+0x33e>
 800b19e:	230d      	movs	r3, #13
 800b1a0:	e0a2      	b.n	800b2e8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	3330      	adds	r3, #48	; 0x30
 800b1a6:	332c      	adds	r3, #44	; 0x2c
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fc55 	bl	8009a58 <ld_dword>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b1bc:	e01f      	b.n	800b1fe <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	891b      	ldrh	r3, [r3, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <find_volume+0x366>
 800b1c6:	230d      	movs	r3, #13
 800b1c8:	e08e      	b.n	800b2e8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	6a1a      	ldr	r2, [r3, #32]
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d0:	441a      	add	r2, r3
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d103      	bne.n	800b1e6 <find_volume+0x382>
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	e00a      	b.n	800b1fc <find_volume+0x398>
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	085a      	lsrs	r2, r3, #1
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b1fc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	699a      	ldr	r2, [r3, #24]
 800b202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b204:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b208:	0a5b      	lsrs	r3, r3, #9
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d201      	bcs.n	800b212 <find_volume+0x3ae>
 800b20e:	230d      	movs	r3, #13
 800b210:	e06a      	b.n	800b2e8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	611a      	str	r2, [r3, #16]
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	2280      	movs	r2, #128	; 0x80
 800b226:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b22c:	2b03      	cmp	r3, #3
 800b22e:	d149      	bne.n	800b2c4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	3330      	adds	r3, #48	; 0x30
 800b234:	3330      	adds	r3, #48	; 0x30
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fbf6 	bl	8009a28 <ld_word>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d140      	bne.n	800b2c4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b244:	3301      	adds	r3, #1
 800b246:	4619      	mov	r1, r3
 800b248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b24a:	f7fe fe9d 	bl	8009f88 <move_window>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d137      	bne.n	800b2c4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	2200      	movs	r2, #0
 800b258:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	3330      	adds	r3, #48	; 0x30
 800b25e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fbe0 	bl	8009a28 <ld_word>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b270:	429a      	cmp	r2, r3
 800b272:	d127      	bne.n	800b2c4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	3330      	adds	r3, #48	; 0x30
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fe fbed 	bl	8009a58 <ld_dword>
 800b27e:	4603      	mov	r3, r0
 800b280:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <find_volume+0x48c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d11e      	bne.n	800b2c4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	3330      	adds	r3, #48	; 0x30
 800b28a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fbe2 	bl	8009a58 <ld_dword>
 800b294:	4603      	mov	r3, r0
 800b296:	4a17      	ldr	r2, [pc, #92]	; (800b2f4 <find_volume+0x490>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d113      	bne.n	800b2c4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	3330      	adds	r3, #48	; 0x30
 800b2a0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fbd7 	bl	8009a58 <ld_dword>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	3330      	adds	r3, #48	; 0x30
 800b2b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe fbcd 	bl	8009a58 <ld_dword>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b2ca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <find_volume+0x494>)
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <find_volume+0x494>)
 800b2d6:	801a      	strh	r2, [r3, #0]
 800b2d8:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <find_volume+0x494>)
 800b2da:	881a      	ldrh	r2, [r3, #0]
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2e2:	f7fe fde9 	bl	8009eb8 <clear_lock>
#endif
	return FR_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3758      	adds	r7, #88	; 0x58
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	41615252 	.word	0x41615252
 800b2f4:	61417272 	.word	0x61417272
 800b2f8:	24006588 	.word	0x24006588

0800b2fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b306:	2309      	movs	r3, #9
 800b308:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01c      	beq.n	800b34a <validate+0x4e>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d018      	beq.n	800b34a <validate+0x4e>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d013      	beq.n	800b34a <validate+0x4e>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	889a      	ldrh	r2, [r3, #4]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	88db      	ldrh	r3, [r3, #6]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d10c      	bne.n	800b34a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fad8 	bl	80098ec <disk_status>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <validate+0x4e>
			res = FR_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d102      	bne.n	800b356 <validate+0x5a>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	e000      	b.n	800b358 <validate+0x5c>
 800b356:	2300      	movs	r3, #0
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	6013      	str	r3, [r2, #0]
	return res;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	4613      	mov	r3, r2
 800b374:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b37a:	f107 0310 	add.w	r3, r7, #16
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff fcd5 	bl	800ad2e <get_ldnumber>
 800b384:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da01      	bge.n	800b390 <f_mount+0x28>
 800b38c:	230b      	movs	r3, #11
 800b38e:	e02b      	b.n	800b3e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b390:	4a17      	ldr	r2, [pc, #92]	; (800b3f0 <f_mount+0x88>)
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b398:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d005      	beq.n	800b3ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3a0:	69b8      	ldr	r0, [r7, #24]
 800b3a2:	f7fe fd89 	bl	8009eb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	490d      	ldr	r1, [pc, #52]	; (800b3f0 <f_mount+0x88>)
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <f_mount+0x66>
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d001      	beq.n	800b3d2 <f_mount+0x6a>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e00a      	b.n	800b3e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3d2:	f107 010c 	add.w	r1, r7, #12
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7ff fd41 	bl	800ae64 <find_volume>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3720      	adds	r7, #32
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	24006584 	.word	0x24006584

0800b3f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b098      	sub	sp, #96	; 0x60
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4613      	mov	r3, r2
 800b400:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <f_open+0x18>
 800b408:	2309      	movs	r3, #9
 800b40a:	e1ad      	b.n	800b768 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b412:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b414:	79fa      	ldrb	r2, [r7, #7]
 800b416:	f107 0110 	add.w	r1, r7, #16
 800b41a:	f107 0308 	add.w	r3, r7, #8
 800b41e:	4618      	mov	r0, r3
 800b420:	f7ff fd20 	bl	800ae64 <find_volume>
 800b424:	4603      	mov	r3, r0
 800b426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b42a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 8191 	bne.w	800b756 <f_open+0x362>
		dj.obj.fs = fs;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	f107 0314 	add.w	r3, r7, #20
 800b43e:	4611      	mov	r1, r2
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fc03 	bl	800ac4c <follow_path>
 800b446:	4603      	mov	r3, r0
 800b448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b44c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b450:	2b00      	cmp	r3, #0
 800b452:	d11a      	bne.n	800b48a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b454:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b458:	b25b      	sxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da03      	bge.n	800b466 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b45e:	2306      	movs	r3, #6
 800b460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b464:	e011      	b.n	800b48a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	f023 0301 	bic.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bf14      	ite	ne
 800b470:	2301      	movne	r3, #1
 800b472:	2300      	moveq	r3, #0
 800b474:	b2db      	uxtb	r3, r3
 800b476:	461a      	mov	r2, r3
 800b478:	f107 0314 	add.w	r3, r7, #20
 800b47c:	4611      	mov	r1, r2
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fbd2 	bl	8009c28 <chk_lock>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b48a:	79fb      	ldrb	r3, [r7, #7]
 800b48c:	f003 031c 	and.w	r3, r3, #28
 800b490:	2b00      	cmp	r3, #0
 800b492:	d07f      	beq.n	800b594 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d017      	beq.n	800b4cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b49c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4a0:	2b04      	cmp	r3, #4
 800b4a2:	d10e      	bne.n	800b4c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4a4:	f7fe fc1c 	bl	8009ce0 <enq_lock>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d006      	beq.n	800b4bc <f_open+0xc8>
 800b4ae:	f107 0314 	add.w	r3, r7, #20
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff fb03 	bl	800aabe <dir_register>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	e000      	b.n	800b4be <f_open+0xca>
 800b4bc:	2312      	movs	r3, #18
 800b4be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	f043 0308 	orr.w	r3, r3, #8
 800b4c8:	71fb      	strb	r3, [r7, #7]
 800b4ca:	e010      	b.n	800b4ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4cc:	7ebb      	ldrb	r3, [r7, #26]
 800b4ce:	f003 0311 	and.w	r3, r3, #17
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <f_open+0xea>
					res = FR_DENIED;
 800b4d6:	2307      	movs	r3, #7
 800b4d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4dc:	e007      	b.n	800b4ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	f003 0304 	and.w	r3, r3, #4
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <f_open+0xfa>
 800b4e8:	2308      	movs	r3, #8
 800b4ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b4ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d168      	bne.n	800b5c8 <f_open+0x1d4>
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	f003 0308 	and.w	r3, r3, #8
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d063      	beq.n	800b5c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b500:	f7fe f83e 	bl	8009580 <get_fattime>
 800b504:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b508:	330e      	adds	r3, #14
 800b50a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe fae1 	bl	8009ad4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b514:	3316      	adds	r3, #22
 800b516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fe fadb 	bl	8009ad4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b520:	330b      	adds	r3, #11
 800b522:	2220      	movs	r2, #32
 800b524:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b52a:	4611      	mov	r1, r2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fa32 	bl	800a996 <ld_clust>
 800b532:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b538:	2200      	movs	r2, #0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fa4a 	bl	800a9d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b542:	331c      	adds	r3, #28
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe fac4 	bl	8009ad4 <st_dword>
					fs->wflag = 1;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	2201      	movs	r2, #1
 800b550:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d037      	beq.n	800b5c8 <f_open+0x1d4>
						dw = fs->winsect;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b55e:	f107 0314 	add.w	r3, r7, #20
 800b562:	2200      	movs	r2, #0
 800b564:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe ff5d 	bl	800a426 <remove_chain>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b576:	2b00      	cmp	r3, #0
 800b578:	d126      	bne.n	800b5c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe fd02 	bl	8009f88 <move_window>
 800b584:	4603      	mov	r3, r0
 800b586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b58e:	3a01      	subs	r2, #1
 800b590:	60da      	str	r2, [r3, #12]
 800b592:	e019      	b.n	800b5c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d115      	bne.n	800b5c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b59c:	7ebb      	ldrb	r3, [r7, #26]
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5a6:	2304      	movs	r3, #4
 800b5a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5ac:	e00c      	b.n	800b5c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d007      	beq.n	800b5c8 <f_open+0x1d4>
 800b5b8:	7ebb      	ldrb	r3, [r7, #26]
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <f_open+0x1d4>
						res = FR_DENIED;
 800b5c2:	2307      	movs	r3, #7
 800b5c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d128      	bne.n	800b622 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	f003 0308 	and.w	r3, r3, #8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	f023 0301 	bic.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	bf14      	ite	ne
 800b5fa:	2301      	movne	r3, #1
 800b5fc:	2300      	moveq	r3, #0
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	461a      	mov	r2, r3
 800b602:	f107 0314 	add.w	r3, r7, #20
 800b606:	4611      	mov	r1, r2
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fb8b 	bl	8009d24 <inc_lock>
 800b60e:	4602      	mov	r2, r0
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <f_open+0x22e>
 800b61c:	2302      	movs	r3, #2
 800b61e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b626:	2b00      	cmp	r3, #0
 800b628:	f040 8095 	bne.w	800b756 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff f9af 	bl	800a996 <ld_clust>
 800b638:	4602      	mov	r2, r0
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	331c      	adds	r3, #28
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe fa08 	bl	8009a58 <ld_dword>
 800b648:	4602      	mov	r2, r0
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	88da      	ldrh	r2, [r3, #6]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	79fa      	ldrb	r2, [r7, #7]
 800b666:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3330      	adds	r3, #48	; 0x30
 800b67e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b682:	2100      	movs	r1, #0
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe fa72 	bl	8009b6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b00      	cmp	r3, #0
 800b692:	d060      	beq.n	800b756 <f_open+0x362>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d05c      	beq.n	800b756 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68da      	ldr	r2, [r3, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	895b      	ldrh	r3, [r3, #10]
 800b6a8:	025b      	lsls	r3, r3, #9
 800b6aa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	657b      	str	r3, [r7, #84]	; 0x54
 800b6b8:	e016      	b.n	800b6e8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fd1d 	bl	800a0fe <get_fat>
 800b6c4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b6c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d802      	bhi.n	800b6d2 <f_open+0x2de>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b6d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d8:	d102      	bne.n	800b6e0 <f_open+0x2ec>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b6e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d103      	bne.n	800b6f8 <f_open+0x304>
 800b6f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d8e0      	bhi.n	800b6ba <f_open+0x2c6>
				}
				fp->clust = clst;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b6fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b702:	2b00      	cmp	r3, #0
 800b704:	d127      	bne.n	800b756 <f_open+0x362>
 800b706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d022      	beq.n	800b756 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe fcd3 	bl	800a0c0 <clust2sect>
 800b71a:	6478      	str	r0, [r7, #68]	; 0x44
 800b71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d103      	bne.n	800b72a <f_open+0x336>
						res = FR_INT_ERR;
 800b722:	2302      	movs	r3, #2
 800b724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b728:	e015      	b.n	800b756 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b72c:	0a5a      	lsrs	r2, r3, #9
 800b72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b730:	441a      	add	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	7858      	ldrb	r0, [r3, #1]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1a      	ldr	r2, [r3, #32]
 800b744:	2301      	movs	r3, #1
 800b746:	f7fe f911 	bl	800996c <disk_read>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <f_open+0x362>
 800b750:	2301      	movs	r3, #1
 800b752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d002      	beq.n	800b764 <f_open+0x370>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3760      	adds	r7, #96	; 0x60
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08c      	sub	sp, #48	; 0x30
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f107 0210 	add.w	r2, r7, #16
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fdb3 	bl	800b2fc <validate>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b79c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d107      	bne.n	800b7b4 <f_write+0x44>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	7d5b      	ldrb	r3, [r3, #21]
 800b7a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <f_write+0x4a>
 800b7b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7b8:	e14b      	b.n	800ba52 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7d1b      	ldrb	r3, [r3, #20]
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <f_write+0x5a>
 800b7c6:	2307      	movs	r3, #7
 800b7c8:	e143      	b.n	800ba52 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	699a      	ldr	r2, [r3, #24]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	441a      	add	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	f080 812d 	bcs.w	800ba36 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	43db      	mvns	r3, r3
 800b7e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b7e4:	e127      	b.n	800ba36 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f040 80e3 	bne.w	800b9ba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	0a5b      	lsrs	r3, r3, #9
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	8952      	ldrh	r2, [r2, #10]
 800b7fe:	3a01      	subs	r2, #1
 800b800:	4013      	ands	r3, r2
 800b802:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d143      	bne.n	800b892 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10c      	bne.n	800b82c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d11a      	bne.n	800b854 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2100      	movs	r1, #0
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fe64 	bl	800a4f0 <create_chain>
 800b828:	62b8      	str	r0, [r7, #40]	; 0x28
 800b82a:	e013      	b.n	800b854 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	4619      	mov	r1, r3
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7fe fef0 	bl	800a620 <clmt_clust>
 800b840:	62b8      	str	r0, [r7, #40]	; 0x28
 800b842:	e007      	b.n	800b854 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f7fe fe4f 	bl	800a4f0 <create_chain>
 800b852:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 80f2 	beq.w	800ba40 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d104      	bne.n	800b86c <f_write+0xfc>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2202      	movs	r2, #2
 800b866:	755a      	strb	r2, [r3, #21]
 800b868:	2302      	movs	r3, #2
 800b86a:	e0f2      	b.n	800ba52 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d104      	bne.n	800b87e <f_write+0x10e>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2201      	movs	r2, #1
 800b878:	755a      	strb	r2, [r3, #21]
 800b87a:	2301      	movs	r3, #1
 800b87c:	e0e9      	b.n	800ba52 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b882:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <f_write+0x122>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b890:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	7d1b      	ldrb	r3, [r3, #20]
 800b896:	b25b      	sxtb	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	da18      	bge.n	800b8ce <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	7858      	ldrb	r0, [r3, #1]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1a      	ldr	r2, [r3, #32]
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	f7fe f87e 	bl	80099ac <disk_write>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <f_write+0x150>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	755a      	strb	r2, [r3, #21]
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e0c8      	b.n	800ba52 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	7d1b      	ldrb	r3, [r3, #20]
 800b8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fe fbf2 	bl	800a0c0 <clust2sect>
 800b8dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d104      	bne.n	800b8ee <f_write+0x17e>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	755a      	strb	r2, [r3, #21]
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e0b1      	b.n	800ba52 <f_write+0x2e2>
			sect += csect;
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	0a5b      	lsrs	r3, r3, #9
 800b8fa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d03c      	beq.n	800b97c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b902:	69ba      	ldr	r2, [r7, #24]
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	4413      	add	r3, r2
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	8952      	ldrh	r2, [r2, #10]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d905      	bls.n	800b91c <f_write+0x1ac>
					cc = fs->csize - csect;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	895b      	ldrh	r3, [r3, #10]
 800b914:	461a      	mov	r2, r3
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	7858      	ldrb	r0, [r3, #1]
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	69f9      	ldr	r1, [r7, #28]
 800b926:	f7fe f841 	bl	80099ac <disk_write>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d004      	beq.n	800b93a <f_write+0x1ca>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2201      	movs	r2, #1
 800b934:	755a      	strb	r2, [r3, #21]
 800b936:	2301      	movs	r3, #1
 800b938:	e08b      	b.n	800ba52 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6a1a      	ldr	r2, [r3, #32]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	6a3a      	ldr	r2, [r7, #32]
 800b944:	429a      	cmp	r2, r3
 800b946:	d915      	bls.n	800b974 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6a1a      	ldr	r2, [r3, #32]
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	025b      	lsls	r3, r3, #9
 800b958:	69fa      	ldr	r2, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b960:	4619      	mov	r1, r3
 800b962:	f7fe f8e3 	bl	8009b2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	7d1b      	ldrb	r3, [r3, #20]
 800b96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	025b      	lsls	r3, r3, #9
 800b978:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b97a:	e03f      	b.n	800b9fc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	429a      	cmp	r2, r3
 800b984:	d016      	beq.n	800b9b4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	699a      	ldr	r2, [r3, #24]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b98e:	429a      	cmp	r2, r3
 800b990:	d210      	bcs.n	800b9b4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	7858      	ldrb	r0, [r3, #1]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b99c:	2301      	movs	r3, #1
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	f7fd ffe4 	bl	800996c <disk_read>
 800b9a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d004      	beq.n	800b9b4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	755a      	strb	r2, [r3, #21]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e04e      	b.n	800ba52 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b9c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d901      	bls.n	800b9d4 <f_write+0x264>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e2:	4413      	add	r3, r2
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	69f9      	ldr	r1, [r7, #28]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe f89f 	bl	8009b2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	7d1b      	ldrb	r3, [r3, #20]
 800b9f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b9fc:	69fa      	ldr	r2, [r7, #28]
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	4413      	add	r3, r2
 800ba02:	61fb      	str	r3, [r7, #28]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	699a      	ldr	r2, [r3, #24]
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	441a      	add	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	619a      	str	r2, [r3, #24]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	68da      	ldr	r2, [r3, #12]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	bf38      	it	cc
 800ba1c:	461a      	movcc	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	60da      	str	r2, [r3, #12]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	441a      	add	r2, r3
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f47f aed4 	bne.w	800b7e6 <f_write+0x76>
 800ba3e:	e000      	b.n	800ba42 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba40:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	7d1b      	ldrb	r3, [r3, #20]
 800ba46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3730      	adds	r7, #48	; 0x30
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b086      	sub	sp, #24
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f107 0208 	add.w	r2, r7, #8
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff fc46 	bl	800b2fc <validate>
 800ba70:	4603      	mov	r3, r0
 800ba72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d168      	bne.n	800bb4c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	7d1b      	ldrb	r3, [r3, #20]
 800ba7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d062      	beq.n	800bb4c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7d1b      	ldrb	r3, [r3, #20]
 800ba8a:	b25b      	sxtb	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	da15      	bge.n	800babc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	7858      	ldrb	r0, [r3, #1]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a1a      	ldr	r2, [r3, #32]
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f7fd ff84 	bl	80099ac <disk_write>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <f_sync+0x54>
 800baaa:	2301      	movs	r3, #1
 800baac:	e04f      	b.n	800bb4e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7d1b      	ldrb	r3, [r3, #20]
 800bab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800babc:	f7fd fd60 	bl	8009580 <get_fattime>
 800bac0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	f7fe fa5c 	bl	8009f88 <move_window>
 800bad0:	4603      	mov	r3, r0
 800bad2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d138      	bne.n	800bb4c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	330b      	adds	r3, #11
 800bae4:	781a      	ldrb	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	330b      	adds	r3, #11
 800baea:	f042 0220 	orr.w	r2, r2, #32
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	461a      	mov	r2, r3
 800bafc:	68f9      	ldr	r1, [r7, #12]
 800bafe:	f7fe ff69 	bl	800a9d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f103 021c 	add.w	r2, r3, #28
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4610      	mov	r0, r2
 800bb10:	f7fd ffe0 	bl	8009ad4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3316      	adds	r3, #22
 800bb18:	6939      	ldr	r1, [r7, #16]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fd ffda 	bl	8009ad4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3312      	adds	r3, #18
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fd ffb9 	bl	8009a9e <st_word>
					fs->wflag = 1;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fe fa55 	bl	8009fe4 <sync_fs>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7d1b      	ldrb	r3, [r3, #20]
 800bb42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff ff7b 	bl	800ba5a <f_sync>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d118      	bne.n	800bba0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f107 0208 	add.w	r2, r7, #8
 800bb74:	4611      	mov	r1, r2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fbc0 	bl	800b2fc <validate>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10c      	bne.n	800bba0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe f958 	bl	8009e40 <dec_lock>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d102      	bne.n	800bba0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b09d      	sub	sp, #116	; 0x74
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	607a      	str	r2, [r7, #4]
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bbc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbc4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bbc6:	f107 030c 	add.w	r3, r7, #12
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff f8af 	bl	800ad2e <get_ldnumber>
 800bbd0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	da02      	bge.n	800bbde <f_mkfs+0x32>
 800bbd8:	230b      	movs	r3, #11
 800bbda:	f000 bc0d 	b.w	800c3f8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bbde:	4a94      	ldr	r2, [pc, #592]	; (800be30 <f_mkfs+0x284>)
 800bbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <f_mkfs+0x4a>
 800bbea:	4a91      	ldr	r2, [pc, #580]	; (800be30 <f_mkfs+0x284>)
 800bbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bc02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fd fe8a 	bl	8009920 <disk_initialize>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bc12:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <f_mkfs+0x76>
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e3ea      	b.n	800c3f8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bc22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc26:	f003 0304 	and.w	r3, r3, #4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <f_mkfs+0x86>
 800bc2e:	230a      	movs	r3, #10
 800bc30:	e3e2      	b.n	800c3f8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bc32:	f107 0214 	add.w	r2, r7, #20
 800bc36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc3a:	2103      	movs	r1, #3
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fd fed5 	bl	80099ec <disk_ioctl>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10c      	bne.n	800bc62 <f_mkfs+0xb6>
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d009      	beq.n	800bc62 <f_mkfs+0xb6>
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc54:	d805      	bhi.n	800bc62 <f_mkfs+0xb6>
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	1e5a      	subs	r2, r3, #1
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <f_mkfs+0xba>
 800bc62:	2301      	movs	r3, #1
 800bc64:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bc66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc6a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <f_mkfs+0xce>
 800bc72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d309      	bcc.n	800bc8e <f_mkfs+0xe2>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc80:	d805      	bhi.n	800bc8e <f_mkfs+0xe2>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4013      	ands	r3, r2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <f_mkfs+0xe6>
 800bc8e:	2313      	movs	r3, #19
 800bc90:	e3b2      	b.n	800c3f8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bc92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc9a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bca0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bcac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <f_mkfs+0x114>
 800bcbc:	230e      	movs	r3, #14
 800bcbe:	e39b      	b.n	800c3f8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bcc0:	f107 0210 	add.w	r2, r7, #16
 800bcc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcc8:	2101      	movs	r1, #1
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fd fe8e 	bl	80099ec <disk_ioctl>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <f_mkfs+0x12e>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e38e      	b.n	800c3f8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bcda:	7afb      	ldrb	r3, [r7, #11]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <f_mkfs+0x13c>
 800bce4:	2300      	movs	r3, #0
 800bce6:	e000      	b.n	800bcea <f_mkfs+0x13e>
 800bce8:	233f      	movs	r3, #63	; 0x3f
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d901      	bls.n	800bcf8 <f_mkfs+0x14c>
 800bcf4:	230e      	movs	r3, #14
 800bcf6:	e37f      	b.n	800c3f8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	2b7f      	cmp	r3, #127	; 0x7f
 800bd04:	d801      	bhi.n	800bd0a <f_mkfs+0x15e>
 800bd06:	230e      	movs	r3, #14
 800bd08:	e376      	b.n	800c3f8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b80      	cmp	r3, #128	; 0x80
 800bd0e:	d901      	bls.n	800bd14 <f_mkfs+0x168>
 800bd10:	2313      	movs	r3, #19
 800bd12:	e371      	b.n	800c3f8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00d      	beq.n	800bd3a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bd1e:	7afb      	ldrb	r3, [r7, #11]
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d004      	beq.n	800bd32 <f_mkfs+0x186>
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bd32:	2303      	movs	r3, #3
 800bd34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bd38:	e009      	b.n	800bd4e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bd3a:	7afb      	ldrb	r3, [r7, #11]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <f_mkfs+0x19c>
 800bd44:	2313      	movs	r3, #19
 800bd46:	e357      	b.n	800c3f8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bd52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d13c      	bne.n	800bdd4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11b      	bne.n	800bd98 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	0c5b      	lsrs	r3, r3, #17
 800bd64:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bd66:	2300      	movs	r3, #0
 800bd68:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd6e:	e005      	b.n	800bd7c <f_mkfs+0x1d0>
 800bd70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd72:	3301      	adds	r3, #1
 800bd74:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	653b      	str	r3, [r7, #80]	; 0x50
 800bd7c:	4a2d      	ldr	r2, [pc, #180]	; (800be34 <f_mkfs+0x288>)
 800bd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d007      	beq.n	800bd98 <f_mkfs+0x1ec>
 800bd88:	4a2a      	ldr	r2, [pc, #168]	; (800be34 <f_mkfs+0x288>)
 800bd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd90:	461a      	mov	r2, r3
 800bd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d2eb      	bcs.n	800bd70 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	3302      	adds	r3, #2
 800bda6:	009a      	lsls	r2, r3, #2
 800bda8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdaa:	4413      	add	r3, r2
 800bdac:	1e5a      	subs	r2, r3, #1
 800bdae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bdb6:	2320      	movs	r3, #32
 800bdb8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bdba:	2300      	movs	r3, #0
 800bdbc:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d903      	bls.n	800bdd0 <f_mkfs+0x224>
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	4a1b      	ldr	r2, [pc, #108]	; (800be38 <f_mkfs+0x28c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d952      	bls.n	800be76 <f_mkfs+0x2ca>
 800bdd0:	230e      	movs	r3, #14
 800bdd2:	e311      	b.n	800c3f8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bdd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d11b      	bne.n	800be12 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	0b1b      	lsrs	r3, r3, #12
 800bdde:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bde0:	2300      	movs	r3, #0
 800bde2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bde4:	2301      	movs	r3, #1
 800bde6:	653b      	str	r3, [r7, #80]	; 0x50
 800bde8:	e005      	b.n	800bdf6 <f_mkfs+0x24a>
 800bdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdec:	3301      	adds	r3, #1
 800bdee:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	653b      	str	r3, [r7, #80]	; 0x50
 800bdf6:	4a11      	ldr	r2, [pc, #68]	; (800be3c <f_mkfs+0x290>)
 800bdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d007      	beq.n	800be12 <f_mkfs+0x266>
 800be02:	4a0e      	ldr	r2, [pc, #56]	; (800be3c <f_mkfs+0x290>)
 800be04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be0a:	461a      	mov	r2, r3
 800be0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be0e:	4293      	cmp	r3, r2
 800be10:	d2eb      	bcs.n	800bdea <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be16:	fbb2 f3f3 	udiv	r3, r2, r3
 800be1a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be22:	4293      	cmp	r3, r2
 800be24:	d90c      	bls.n	800be40 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	3302      	adds	r3, #2
 800be2a:	005b      	lsls	r3, r3, #1
 800be2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be2e:	e012      	b.n	800be56 <f_mkfs+0x2aa>
 800be30:	24006584 	.word	0x24006584
 800be34:	0800ced0 	.word	0x0800ced0
 800be38:	0ffffff5 	.word	0x0ffffff5
 800be3c:	0800cee0 	.word	0x0800cee0
				} else {
					fmt = FS_FAT12;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800be46:	6a3a      	ldr	r2, [r7, #32]
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	3301      	adds	r3, #1
 800be50:	085b      	lsrs	r3, r3, #1
 800be52:	3303      	adds	r3, #3
 800be54:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800be56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be5a:	4413      	add	r3, r2
 800be5c:	1e5a      	subs	r2, r3, #1
 800be5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be60:	fbb2 f3f3 	udiv	r3, r2, r3
 800be64:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800be66:	2301      	movs	r3, #1
 800be68:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800be6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be70:	fbb2 f3f3 	udiv	r3, r2, r3
 800be74:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800be76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be7a:	4413      	add	r3, r2
 800be7c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800be7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be82:	fb02 f203 	mul.w	r2, r2, r3
 800be86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be88:	4413      	add	r3, r2
 800be8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be8c:	4413      	add	r3, r2
 800be8e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	4413      	add	r3, r2
 800be96:	1e5a      	subs	r2, r3, #1
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	425b      	negs	r3, r3
 800be9c:	401a      	ands	r2, r3
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d108      	bne.n	800bebe <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800beac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800beae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb0:	4413      	add	r3, r2
 800beb2:	657b      	str	r3, [r7, #84]	; 0x54
 800beb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb8:	4413      	add	r3, r2
 800beba:	65bb      	str	r3, [r7, #88]	; 0x58
 800bebc:	e006      	b.n	800becc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800bebe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bec8:	4413      	add	r3, r2
 800beca:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	011a      	lsls	r2, r3, #4
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	441a      	add	r2, r3
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	1ad2      	subs	r2, r2, r3
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d901      	bls.n	800bee2 <f_mkfs+0x336>
 800bede:	230e      	movs	r3, #14
 800bee0:	e28a      	b.n	800c3f8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bee2:	693a      	ldr	r2, [r7, #16]
 800bee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bee6:	1ad2      	subs	r2, r2, r3
 800bee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beec:	fb01 f303 	mul.w	r3, r1, r3
 800bef0:	1ad2      	subs	r2, r2, r3
 800bef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bef4:	1ad2      	subs	r2, r2, r3
 800bef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef8:	fbb2 f3f3 	udiv	r3, r2, r3
 800befc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800befe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d10f      	bne.n	800bf26 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d80a      	bhi.n	800bf26 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d105      	bne.n	800bf22 <f_mkfs+0x376>
 800bf16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d144      	bne.n	800bfac <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800bf22:	230e      	movs	r3, #14
 800bf24:	e268      	b.n	800c3f8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bf26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d133      	bne.n	800bf96 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d91e      	bls.n	800bf76 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d107      	bne.n	800bf4e <f_mkfs+0x3a2>
 800bf3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	2b40      	cmp	r3, #64	; 0x40
 800bf44:	d803      	bhi.n	800bf4e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bf46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	e033      	b.n	800bfb6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bf4e:	7afb      	ldrb	r3, [r7, #11]
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bf58:	2303      	movs	r3, #3
 800bf5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf5e:	e02a      	b.n	800bfb6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <f_mkfs+0x3c6>
 800bf66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	607b      	str	r3, [r7, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b80      	cmp	r3, #128	; 0x80
 800bf70:	d91e      	bls.n	800bfb0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bf72:	230e      	movs	r3, #14
 800bf74:	e240      	b.n	800c3f8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d80a      	bhi.n	800bf96 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d105      	bne.n	800bf92 <f_mkfs+0x3e6>
 800bf86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b80      	cmp	r3, #128	; 0x80
 800bf90:	d910      	bls.n	800bfb4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bf92:	230e      	movs	r3, #14
 800bf94:	e230      	b.n	800c3f8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bf96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d10c      	bne.n	800bfb8 <f_mkfs+0x40c>
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d907      	bls.n	800bfb8 <f_mkfs+0x40c>
 800bfa8:	230e      	movs	r3, #14
 800bfaa:	e225      	b.n	800c3f8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bfac:	bf00      	nop
 800bfae:	e6ce      	b.n	800bd4e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfb0:	bf00      	nop
 800bfb2:	e6cc      	b.n	800bd4e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfb4:	bf00      	nop
			pau = au;
 800bfb6:	e6ca      	b.n	800bd4e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bfb8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bfba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc2:	f7fd fdd4 	bl	8009b6e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bfc6:	220b      	movs	r2, #11
 800bfc8:	49bc      	ldr	r1, [pc, #752]	; (800c2bc <f_mkfs+0x710>)
 800bfca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfcc:	f7fd fdae 	bl	8009b2c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	330b      	adds	r3, #11
 800bfd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fd fd60 	bl	8009a9e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	330d      	adds	r3, #13
 800bfe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfe4:	b2d2      	uxtb	r2, r2
 800bfe6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	330e      	adds	r3, #14
 800bfec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfee:	b292      	uxth	r2, r2
 800bff0:	4611      	mov	r1, r2
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fd fd53 	bl	8009a9e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	3310      	adds	r3, #16
 800bffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	f103 0211 	add.w	r2, r3, #17
 800c008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d002      	beq.n	800c016 <f_mkfs+0x46a>
 800c010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c012:	b29b      	uxth	r3, r3
 800c014:	e000      	b.n	800c018 <f_mkfs+0x46c>
 800c016:	2300      	movs	r3, #0
 800c018:	4619      	mov	r1, r3
 800c01a:	4610      	mov	r0, r2
 800c01c:	f7fd fd3f 	bl	8009a9e <st_word>
		if (sz_vol < 0x10000) {
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c026:	d208      	bcs.n	800c03a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	3313      	adds	r3, #19
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	b292      	uxth	r2, r2
 800c030:	4611      	mov	r1, r2
 800c032:	4618      	mov	r0, r3
 800c034:	f7fd fd33 	bl	8009a9e <st_word>
 800c038:	e006      	b.n	800c048 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	3320      	adds	r3, #32
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7fd fd46 	bl	8009ad4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	3315      	adds	r3, #21
 800c04c:	22f8      	movs	r2, #248	; 0xf8
 800c04e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	3318      	adds	r3, #24
 800c054:	213f      	movs	r1, #63	; 0x3f
 800c056:	4618      	mov	r0, r3
 800c058:	f7fd fd21 	bl	8009a9e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	331a      	adds	r3, #26
 800c060:	21ff      	movs	r1, #255	; 0xff
 800c062:	4618      	mov	r0, r3
 800c064:	f7fd fd1b 	bl	8009a9e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	331c      	adds	r3, #28
 800c06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fd fd30 	bl	8009ad4 <st_dword>
		if (fmt == FS_FAT32) {
 800c074:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d131      	bne.n	800c0e0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c082:	f7fd fa7d 	bl	8009580 <get_fattime>
 800c086:	4603      	mov	r3, r0
 800c088:	4619      	mov	r1, r3
 800c08a:	4620      	mov	r0, r4
 800c08c:	f7fd fd22 	bl	8009ad4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	3324      	adds	r3, #36	; 0x24
 800c094:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c096:	4618      	mov	r0, r3
 800c098:	f7fd fd1c 	bl	8009ad4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	332c      	adds	r3, #44	; 0x2c
 800c0a0:	2102      	movs	r1, #2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fd fd16 	bl	8009ad4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	3330      	adds	r3, #48	; 0x30
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fd fcf5 	bl	8009a9e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	3332      	adds	r3, #50	; 0x32
 800c0b8:	2106      	movs	r1, #6
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fd fcef 	bl	8009a9e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	3340      	adds	r3, #64	; 0x40
 800c0c4:	2280      	movs	r2, #128	; 0x80
 800c0c6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	3342      	adds	r3, #66	; 0x42
 800c0cc:	2229      	movs	r2, #41	; 0x29
 800c0ce:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d2:	3347      	adds	r3, #71	; 0x47
 800c0d4:	2213      	movs	r2, #19
 800c0d6:	497a      	ldr	r1, [pc, #488]	; (800c2c0 <f_mkfs+0x714>)
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fd fd27 	bl	8009b2c <mem_cpy>
 800c0de:	e020      	b.n	800c122 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c0e6:	f7fd fa4b 	bl	8009580 <get_fattime>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f7fd fcf0 	bl	8009ad4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	3316      	adds	r3, #22
 800c0f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0fa:	b292      	uxth	r2, r2
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fd fccd 	bl	8009a9e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	3324      	adds	r3, #36	; 0x24
 800c108:	2280      	movs	r2, #128	; 0x80
 800c10a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	3326      	adds	r3, #38	; 0x26
 800c110:	2229      	movs	r2, #41	; 0x29
 800c112:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	332b      	adds	r3, #43	; 0x2b
 800c118:	2213      	movs	r2, #19
 800c11a:	496a      	ldr	r1, [pc, #424]	; (800c2c4 <f_mkfs+0x718>)
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fd fd05 	bl	8009b2c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c128:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fd fcb6 	bl	8009a9e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c132:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c136:	2301      	movs	r3, #1
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c13c:	f7fd fc36 	bl	80099ac <disk_write>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <f_mkfs+0x59e>
 800c146:	2301      	movs	r3, #1
 800c148:	e156      	b.n	800c3f8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c14a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c14e:	2b03      	cmp	r3, #3
 800c150:	d140      	bne.n	800c1d4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	1d9a      	adds	r2, r3, #6
 800c156:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c15a:	2301      	movs	r3, #1
 800c15c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c15e:	f7fd fc25 	bl	80099ac <disk_write>
			mem_set(buf, 0, ss);
 800c162:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c164:	461a      	mov	r2, r3
 800c166:	2100      	movs	r1, #0
 800c168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16a:	f7fd fd00 	bl	8009b6e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c16e:	4956      	ldr	r1, [pc, #344]	; (800c2c8 <f_mkfs+0x71c>)
 800c170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c172:	f7fd fcaf 	bl	8009ad4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c17c:	4953      	ldr	r1, [pc, #332]	; (800c2cc <f_mkfs+0x720>)
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fd fca8 	bl	8009ad4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	4619      	mov	r1, r3
 800c190:	4610      	mov	r0, r2
 800c192:	f7fd fc9f 	bl	8009ad4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c19c:	2102      	movs	r1, #2
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fd fc98 	bl	8009ad4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1aa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fd fc75 	bl	8009a9e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	1dda      	adds	r2, r3, #7
 800c1b8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1bc:	2301      	movs	r3, #1
 800c1be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1c0:	f7fd fbf4 	bl	80099ac <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1d0:	f7fd fbec 	bl	80099ac <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1da:	f7fd fcc8 	bl	8009b6e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c1de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1e0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e6:	e04b      	b.n	800c280 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c1e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1ec:	2b03      	cmp	r3, #3
 800c1ee:	d113      	bne.n	800c218 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c1f0:	f06f 0107 	mvn.w	r1, #7
 800c1f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1f6:	f7fd fc6d 	bl	8009ad4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	f04f 31ff 	mov.w	r1, #4294967295
 800c202:	4618      	mov	r0, r3
 800c204:	f7fd fc66 	bl	8009ad4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	3308      	adds	r3, #8
 800c20c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c210:	4618      	mov	r0, r3
 800c212:	f7fd fc5f 	bl	8009ad4 <st_dword>
 800c216:	e00b      	b.n	800c230 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c218:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d101      	bne.n	800c224 <f_mkfs+0x678>
 800c220:	4b2b      	ldr	r3, [pc, #172]	; (800c2d0 <f_mkfs+0x724>)
 800c222:	e001      	b.n	800c228 <f_mkfs+0x67c>
 800c224:	f06f 0307 	mvn.w	r3, #7
 800c228:	4619      	mov	r1, r3
 800c22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c22c:	f7fd fc52 	bl	8009ad4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c232:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c234:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c238:	4293      	cmp	r3, r2
 800c23a:	bf28      	it	cs
 800c23c:	4613      	movcs	r3, r2
 800c23e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c240:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c246:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c24a:	f7fd fbaf 	bl	80099ac <disk_write>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <f_mkfs+0x6ac>
 800c254:	2301      	movs	r3, #1
 800c256:	e0cf      	b.n	800c3f8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c25a:	461a      	mov	r2, r3
 800c25c:	2100      	movs	r1, #0
 800c25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c260:	f7fd fc85 	bl	8009b6e <mem_set>
				sect += n; nsect -= n;
 800c264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c268:	4413      	add	r3, r2
 800c26a:	667b      	str	r3, [r7, #100]	; 0x64
 800c26c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1dc      	bne.n	800c234 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c27a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c27c:	3301      	adds	r3, #1
 800c27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c284:	429a      	cmp	r2, r3
 800c286:	d3af      	bcc.n	800c1e8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d101      	bne.n	800c294 <f_mkfs+0x6e8>
 800c290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c292:	e000      	b.n	800c296 <f_mkfs+0x6ea>
 800c294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c296:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	4293      	cmp	r3, r2
 800c29e:	bf28      	it	cs
 800c2a0:	4613      	movcs	r3, r2
 800c2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c2a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2ae:	f7fd fb7d 	bl	80099ac <disk_write>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00d      	beq.n	800c2d4 <f_mkfs+0x728>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e09d      	b.n	800c3f8 <f_mkfs+0x84c>
 800c2bc:	0800cdd0 	.word	0x0800cdd0
 800c2c0:	0800cddc 	.word	0x0800cddc
 800c2c4:	0800cdf0 	.word	0x0800cdf0
 800c2c8:	41615252 	.word	0x41615252
 800c2cc:	61417272 	.word	0x61417272
 800c2d0:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c2d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d8:	4413      	add	r3, r2
 800c2da:	667b      	str	r3, [r7, #100]	; 0x64
 800c2dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c2e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1d6      	bne.n	800c298 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c2ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	d103      	bne.n	800c2fa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c2f2:	230c      	movs	r3, #12
 800c2f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c2f8:	e010      	b.n	800c31c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c300:	d303      	bcc.n	800c30a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c302:	2306      	movs	r3, #6
 800c304:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c308:	e008      	b.n	800c31c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c30a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d101      	bne.n	800c316 <f_mkfs+0x76a>
 800c312:	2304      	movs	r3, #4
 800c314:	e000      	b.n	800c318 <f_mkfs+0x76c>
 800c316:	2301      	movs	r3, #1
 800c318:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c31c:	7afb      	ldrb	r3, [r7, #11]
 800c31e:	f003 0308 	and.w	r3, r3, #8
 800c322:	2b00      	cmp	r3, #0
 800c324:	d15b      	bne.n	800c3de <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c326:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c328:	461a      	mov	r2, r3
 800c32a:	2100      	movs	r1, #0
 800c32c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c32e:	f7fd fc1e 	bl	8009b6e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c338:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fd fbae 	bl	8009a9e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c348:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	2200      	movs	r2, #0
 800c34e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	3301      	adds	r3, #1
 800c354:	2201      	movs	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	3302      	adds	r3, #2
 800c35c:	2201      	movs	r2, #1
 800c35e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	3303      	adds	r3, #3
 800c364:	2200      	movs	r2, #0
 800c366:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	3304      	adds	r3, #4
 800c36c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c370:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	441a      	add	r2, r3
 800c378:	4b21      	ldr	r3, [pc, #132]	; (800c400 <f_mkfs+0x854>)
 800c37a:	fba3 1302 	umull	r1, r3, r3, r2
 800c37e:	1ad2      	subs	r2, r2, r3
 800c380:	0852      	lsrs	r2, r2, #1
 800c382:	4413      	add	r3, r2
 800c384:	0b5b      	lsrs	r3, r3, #13
 800c386:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	3305      	adds	r3, #5
 800c38c:	22fe      	movs	r2, #254	; 0xfe
 800c38e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c392:	089b      	lsrs	r3, r3, #2
 800c394:	b2da      	uxtb	r2, r3
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	3306      	adds	r3, #6
 800c39a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	3307      	adds	r3, #7
 800c3a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fd fb8e 	bl	8009ad4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	330c      	adds	r3, #12
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fd fb87 	bl	8009ad4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c3c6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3d0:	f7fd faec 	bl	80099ac <disk_write>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <f_mkfs+0x832>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e00c      	b.n	800c3f8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c3de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fd fb00 	bl	80099ec <disk_ioctl>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <f_mkfs+0x84a>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <f_mkfs+0x84c>

	return FR_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3774      	adds	r7, #116	; 0x74
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd90      	pop	{r4, r7, pc}
 800c400:	0515565b 	.word	0x0515565b

0800c404 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	4613      	mov	r3, r2
 800c410:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c412:	2301      	movs	r3, #1
 800c414:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c416:	2300      	movs	r3, #0
 800c418:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c41a:	4b1f      	ldr	r3, [pc, #124]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c41c:	7a5b      	ldrb	r3, [r3, #9]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d131      	bne.n	800c488 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c424:	4b1c      	ldr	r3, [pc, #112]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c426:	7a5b      	ldrb	r3, [r3, #9]
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	461a      	mov	r2, r3
 800c42c:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c42e:	2100      	movs	r1, #0
 800c430:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c432:	4b19      	ldr	r3, [pc, #100]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c434:	7a5b      	ldrb	r3, [r3, #9]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	4a17      	ldr	r2, [pc, #92]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c442:	4b15      	ldr	r3, [pc, #84]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c444:	7a5b      	ldrb	r3, [r3, #9]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	4b13      	ldr	r3, [pc, #76]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c44c:	4413      	add	r3, r2
 800c44e:	79fa      	ldrb	r2, [r7, #7]
 800c450:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c452:	4b11      	ldr	r3, [pc, #68]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c454:	7a5b      	ldrb	r3, [r3, #9]
 800c456:	b2db      	uxtb	r3, r3
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	b2d1      	uxtb	r1, r2
 800c45c:	4a0e      	ldr	r2, [pc, #56]	; (800c498 <FATFS_LinkDriverEx+0x94>)
 800c45e:	7251      	strb	r1, [r2, #9]
 800c460:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c462:	7dbb      	ldrb	r3, [r7, #22]
 800c464:	3330      	adds	r3, #48	; 0x30
 800c466:	b2da      	uxtb	r2, r3
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	3301      	adds	r3, #1
 800c470:	223a      	movs	r2, #58	; 0x3a
 800c472:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3302      	adds	r3, #2
 800c478:	222f      	movs	r2, #47	; 0x2f
 800c47a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	3303      	adds	r3, #3
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c488:	7dfb      	ldrb	r3, [r7, #23]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	240065ac 	.word	0x240065ac

0800c49c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff ffaa 	bl	800c404 <FATFS_LinkDriverEx>
 800c4b0:	4603      	mov	r3, r0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <__errno>:
 800c4bc:	4b01      	ldr	r3, [pc, #4]	; (800c4c4 <__errno+0x8>)
 800c4be:	6818      	ldr	r0, [r3, #0]
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	24000038 	.word	0x24000038

0800c4c8 <__libc_init_array>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	4d0d      	ldr	r5, [pc, #52]	; (800c500 <__libc_init_array+0x38>)
 800c4cc:	4c0d      	ldr	r4, [pc, #52]	; (800c504 <__libc_init_array+0x3c>)
 800c4ce:	1b64      	subs	r4, r4, r5
 800c4d0:	10a4      	asrs	r4, r4, #2
 800c4d2:	2600      	movs	r6, #0
 800c4d4:	42a6      	cmp	r6, r4
 800c4d6:	d109      	bne.n	800c4ec <__libc_init_array+0x24>
 800c4d8:	4d0b      	ldr	r5, [pc, #44]	; (800c508 <__libc_init_array+0x40>)
 800c4da:	4c0c      	ldr	r4, [pc, #48]	; (800c50c <__libc_init_array+0x44>)
 800c4dc:	f000 fc4e 	bl	800cd7c <_init>
 800c4e0:	1b64      	subs	r4, r4, r5
 800c4e2:	10a4      	asrs	r4, r4, #2
 800c4e4:	2600      	movs	r6, #0
 800c4e6:	42a6      	cmp	r6, r4
 800c4e8:	d105      	bne.n	800c4f6 <__libc_init_array+0x2e>
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f0:	4798      	blx	r3
 800c4f2:	3601      	adds	r6, #1
 800c4f4:	e7ee      	b.n	800c4d4 <__libc_init_array+0xc>
 800c4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fa:	4798      	blx	r3
 800c4fc:	3601      	adds	r6, #1
 800c4fe:	e7f2      	b.n	800c4e6 <__libc_init_array+0x1e>
 800c500:	0800cf2c 	.word	0x0800cf2c
 800c504:	0800cf2c 	.word	0x0800cf2c
 800c508:	0800cf2c 	.word	0x0800cf2c
 800c50c:	0800cf30 	.word	0x0800cf30

0800c510 <memset>:
 800c510:	4402      	add	r2, r0
 800c512:	4603      	mov	r3, r0
 800c514:	4293      	cmp	r3, r2
 800c516:	d100      	bne.n	800c51a <memset+0xa>
 800c518:	4770      	bx	lr
 800c51a:	f803 1b01 	strb.w	r1, [r3], #1
 800c51e:	e7f9      	b.n	800c514 <memset+0x4>

0800c520 <siprintf>:
 800c520:	b40e      	push	{r1, r2, r3}
 800c522:	b500      	push	{lr}
 800c524:	b09c      	sub	sp, #112	; 0x70
 800c526:	ab1d      	add	r3, sp, #116	; 0x74
 800c528:	9002      	str	r0, [sp, #8]
 800c52a:	9006      	str	r0, [sp, #24]
 800c52c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c530:	4809      	ldr	r0, [pc, #36]	; (800c558 <siprintf+0x38>)
 800c532:	9107      	str	r1, [sp, #28]
 800c534:	9104      	str	r1, [sp, #16]
 800c536:	4909      	ldr	r1, [pc, #36]	; (800c55c <siprintf+0x3c>)
 800c538:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53c:	9105      	str	r1, [sp, #20]
 800c53e:	6800      	ldr	r0, [r0, #0]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	a902      	add	r1, sp, #8
 800c544:	f000 f868 	bl	800c618 <_svfiprintf_r>
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	2200      	movs	r2, #0
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	b01c      	add	sp, #112	; 0x70
 800c550:	f85d eb04 	ldr.w	lr, [sp], #4
 800c554:	b003      	add	sp, #12
 800c556:	4770      	bx	lr
 800c558:	24000038 	.word	0x24000038
 800c55c:	ffff0208 	.word	0xffff0208

0800c560 <__ssputs_r>:
 800c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c564:	688e      	ldr	r6, [r1, #8]
 800c566:	429e      	cmp	r6, r3
 800c568:	4682      	mov	sl, r0
 800c56a:	460c      	mov	r4, r1
 800c56c:	4690      	mov	r8, r2
 800c56e:	461f      	mov	r7, r3
 800c570:	d838      	bhi.n	800c5e4 <__ssputs_r+0x84>
 800c572:	898a      	ldrh	r2, [r1, #12]
 800c574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c578:	d032      	beq.n	800c5e0 <__ssputs_r+0x80>
 800c57a:	6825      	ldr	r5, [r4, #0]
 800c57c:	6909      	ldr	r1, [r1, #16]
 800c57e:	eba5 0901 	sub.w	r9, r5, r1
 800c582:	6965      	ldr	r5, [r4, #20]
 800c584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c58c:	3301      	adds	r3, #1
 800c58e:	444b      	add	r3, r9
 800c590:	106d      	asrs	r5, r5, #1
 800c592:	429d      	cmp	r5, r3
 800c594:	bf38      	it	cc
 800c596:	461d      	movcc	r5, r3
 800c598:	0553      	lsls	r3, r2, #21
 800c59a:	d531      	bpl.n	800c600 <__ssputs_r+0xa0>
 800c59c:	4629      	mov	r1, r5
 800c59e:	f000 fb47 	bl	800cc30 <_malloc_r>
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	b950      	cbnz	r0, 800c5bc <__ssputs_r+0x5c>
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	f8ca 3000 	str.w	r3, [sl]
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5bc:	6921      	ldr	r1, [r4, #16]
 800c5be:	464a      	mov	r2, r9
 800c5c0:	f000 fabe 	bl	800cb40 <memcpy>
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ce:	81a3      	strh	r3, [r4, #12]
 800c5d0:	6126      	str	r6, [r4, #16]
 800c5d2:	6165      	str	r5, [r4, #20]
 800c5d4:	444e      	add	r6, r9
 800c5d6:	eba5 0509 	sub.w	r5, r5, r9
 800c5da:	6026      	str	r6, [r4, #0]
 800c5dc:	60a5      	str	r5, [r4, #8]
 800c5de:	463e      	mov	r6, r7
 800c5e0:	42be      	cmp	r6, r7
 800c5e2:	d900      	bls.n	800c5e6 <__ssputs_r+0x86>
 800c5e4:	463e      	mov	r6, r7
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	6820      	ldr	r0, [r4, #0]
 800c5ea:	4641      	mov	r1, r8
 800c5ec:	f000 fab6 	bl	800cb5c <memmove>
 800c5f0:	68a3      	ldr	r3, [r4, #8]
 800c5f2:	6822      	ldr	r2, [r4, #0]
 800c5f4:	1b9b      	subs	r3, r3, r6
 800c5f6:	4432      	add	r2, r6
 800c5f8:	60a3      	str	r3, [r4, #8]
 800c5fa:	6022      	str	r2, [r4, #0]
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e7db      	b.n	800c5b8 <__ssputs_r+0x58>
 800c600:	462a      	mov	r2, r5
 800c602:	f000 fb6f 	bl	800cce4 <_realloc_r>
 800c606:	4606      	mov	r6, r0
 800c608:	2800      	cmp	r0, #0
 800c60a:	d1e1      	bne.n	800c5d0 <__ssputs_r+0x70>
 800c60c:	6921      	ldr	r1, [r4, #16]
 800c60e:	4650      	mov	r0, sl
 800c610:	f000 fabe 	bl	800cb90 <_free_r>
 800c614:	e7c7      	b.n	800c5a6 <__ssputs_r+0x46>
	...

0800c618 <_svfiprintf_r>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	4698      	mov	r8, r3
 800c61e:	898b      	ldrh	r3, [r1, #12]
 800c620:	061b      	lsls	r3, r3, #24
 800c622:	b09d      	sub	sp, #116	; 0x74
 800c624:	4607      	mov	r7, r0
 800c626:	460d      	mov	r5, r1
 800c628:	4614      	mov	r4, r2
 800c62a:	d50e      	bpl.n	800c64a <_svfiprintf_r+0x32>
 800c62c:	690b      	ldr	r3, [r1, #16]
 800c62e:	b963      	cbnz	r3, 800c64a <_svfiprintf_r+0x32>
 800c630:	2140      	movs	r1, #64	; 0x40
 800c632:	f000 fafd 	bl	800cc30 <_malloc_r>
 800c636:	6028      	str	r0, [r5, #0]
 800c638:	6128      	str	r0, [r5, #16]
 800c63a:	b920      	cbnz	r0, 800c646 <_svfiprintf_r+0x2e>
 800c63c:	230c      	movs	r3, #12
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	f04f 30ff 	mov.w	r0, #4294967295
 800c644:	e0d1      	b.n	800c7ea <_svfiprintf_r+0x1d2>
 800c646:	2340      	movs	r3, #64	; 0x40
 800c648:	616b      	str	r3, [r5, #20]
 800c64a:	2300      	movs	r3, #0
 800c64c:	9309      	str	r3, [sp, #36]	; 0x24
 800c64e:	2320      	movs	r3, #32
 800c650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c654:	f8cd 800c 	str.w	r8, [sp, #12]
 800c658:	2330      	movs	r3, #48	; 0x30
 800c65a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c804 <_svfiprintf_r+0x1ec>
 800c65e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c662:	f04f 0901 	mov.w	r9, #1
 800c666:	4623      	mov	r3, r4
 800c668:	469a      	mov	sl, r3
 800c66a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c66e:	b10a      	cbz	r2, 800c674 <_svfiprintf_r+0x5c>
 800c670:	2a25      	cmp	r2, #37	; 0x25
 800c672:	d1f9      	bne.n	800c668 <_svfiprintf_r+0x50>
 800c674:	ebba 0b04 	subs.w	fp, sl, r4
 800c678:	d00b      	beq.n	800c692 <_svfiprintf_r+0x7a>
 800c67a:	465b      	mov	r3, fp
 800c67c:	4622      	mov	r2, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	4638      	mov	r0, r7
 800c682:	f7ff ff6d 	bl	800c560 <__ssputs_r>
 800c686:	3001      	adds	r0, #1
 800c688:	f000 80aa 	beq.w	800c7e0 <_svfiprintf_r+0x1c8>
 800c68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c68e:	445a      	add	r2, fp
 800c690:	9209      	str	r2, [sp, #36]	; 0x24
 800c692:	f89a 3000 	ldrb.w	r3, [sl]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 80a2 	beq.w	800c7e0 <_svfiprintf_r+0x1c8>
 800c69c:	2300      	movs	r3, #0
 800c69e:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a6:	f10a 0a01 	add.w	sl, sl, #1
 800c6aa:	9304      	str	r3, [sp, #16]
 800c6ac:	9307      	str	r3, [sp, #28]
 800c6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c6b4:	4654      	mov	r4, sl
 800c6b6:	2205      	movs	r2, #5
 800c6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6bc:	4851      	ldr	r0, [pc, #324]	; (800c804 <_svfiprintf_r+0x1ec>)
 800c6be:	f7f3 fe2f 	bl	8000320 <memchr>
 800c6c2:	9a04      	ldr	r2, [sp, #16]
 800c6c4:	b9d8      	cbnz	r0, 800c6fe <_svfiprintf_r+0xe6>
 800c6c6:	06d0      	lsls	r0, r2, #27
 800c6c8:	bf44      	itt	mi
 800c6ca:	2320      	movmi	r3, #32
 800c6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d0:	0711      	lsls	r1, r2, #28
 800c6d2:	bf44      	itt	mi
 800c6d4:	232b      	movmi	r3, #43	; 0x2b
 800c6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6da:	f89a 3000 	ldrb.w	r3, [sl]
 800c6de:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e0:	d015      	beq.n	800c70e <_svfiprintf_r+0xf6>
 800c6e2:	9a07      	ldr	r2, [sp, #28]
 800c6e4:	4654      	mov	r4, sl
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	f04f 0c0a 	mov.w	ip, #10
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6f2:	3b30      	subs	r3, #48	; 0x30
 800c6f4:	2b09      	cmp	r3, #9
 800c6f6:	d94e      	bls.n	800c796 <_svfiprintf_r+0x17e>
 800c6f8:	b1b0      	cbz	r0, 800c728 <_svfiprintf_r+0x110>
 800c6fa:	9207      	str	r2, [sp, #28]
 800c6fc:	e014      	b.n	800c728 <_svfiprintf_r+0x110>
 800c6fe:	eba0 0308 	sub.w	r3, r0, r8
 800c702:	fa09 f303 	lsl.w	r3, r9, r3
 800c706:	4313      	orrs	r3, r2
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	46a2      	mov	sl, r4
 800c70c:	e7d2      	b.n	800c6b4 <_svfiprintf_r+0x9c>
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	1d19      	adds	r1, r3, #4
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	9103      	str	r1, [sp, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	bfbb      	ittet	lt
 800c71a:	425b      	neglt	r3, r3
 800c71c:	f042 0202 	orrlt.w	r2, r2, #2
 800c720:	9307      	strge	r3, [sp, #28]
 800c722:	9307      	strlt	r3, [sp, #28]
 800c724:	bfb8      	it	lt
 800c726:	9204      	strlt	r2, [sp, #16]
 800c728:	7823      	ldrb	r3, [r4, #0]
 800c72a:	2b2e      	cmp	r3, #46	; 0x2e
 800c72c:	d10c      	bne.n	800c748 <_svfiprintf_r+0x130>
 800c72e:	7863      	ldrb	r3, [r4, #1]
 800c730:	2b2a      	cmp	r3, #42	; 0x2a
 800c732:	d135      	bne.n	800c7a0 <_svfiprintf_r+0x188>
 800c734:	9b03      	ldr	r3, [sp, #12]
 800c736:	1d1a      	adds	r2, r3, #4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	9203      	str	r2, [sp, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	bfb8      	it	lt
 800c740:	f04f 33ff 	movlt.w	r3, #4294967295
 800c744:	3402      	adds	r4, #2
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c814 <_svfiprintf_r+0x1fc>
 800c74c:	7821      	ldrb	r1, [r4, #0]
 800c74e:	2203      	movs	r2, #3
 800c750:	4650      	mov	r0, sl
 800c752:	f7f3 fde5 	bl	8000320 <memchr>
 800c756:	b140      	cbz	r0, 800c76a <_svfiprintf_r+0x152>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	eba0 000a 	sub.w	r0, r0, sl
 800c75e:	fa03 f000 	lsl.w	r0, r3, r0
 800c762:	9b04      	ldr	r3, [sp, #16]
 800c764:	4303      	orrs	r3, r0
 800c766:	3401      	adds	r4, #1
 800c768:	9304      	str	r3, [sp, #16]
 800c76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76e:	4826      	ldr	r0, [pc, #152]	; (800c808 <_svfiprintf_r+0x1f0>)
 800c770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c774:	2206      	movs	r2, #6
 800c776:	f7f3 fdd3 	bl	8000320 <memchr>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d038      	beq.n	800c7f0 <_svfiprintf_r+0x1d8>
 800c77e:	4b23      	ldr	r3, [pc, #140]	; (800c80c <_svfiprintf_r+0x1f4>)
 800c780:	bb1b      	cbnz	r3, 800c7ca <_svfiprintf_r+0x1b2>
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	3307      	adds	r3, #7
 800c786:	f023 0307 	bic.w	r3, r3, #7
 800c78a:	3308      	adds	r3, #8
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c790:	4433      	add	r3, r6
 800c792:	9309      	str	r3, [sp, #36]	; 0x24
 800c794:	e767      	b.n	800c666 <_svfiprintf_r+0x4e>
 800c796:	fb0c 3202 	mla	r2, ip, r2, r3
 800c79a:	460c      	mov	r4, r1
 800c79c:	2001      	movs	r0, #1
 800c79e:	e7a5      	b.n	800c6ec <_svfiprintf_r+0xd4>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	3401      	adds	r4, #1
 800c7a4:	9305      	str	r3, [sp, #20]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	f04f 0c0a 	mov.w	ip, #10
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7b2:	3a30      	subs	r2, #48	; 0x30
 800c7b4:	2a09      	cmp	r2, #9
 800c7b6:	d903      	bls.n	800c7c0 <_svfiprintf_r+0x1a8>
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0c5      	beq.n	800c748 <_svfiprintf_r+0x130>
 800c7bc:	9105      	str	r1, [sp, #20]
 800c7be:	e7c3      	b.n	800c748 <_svfiprintf_r+0x130>
 800c7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e7f0      	b.n	800c7ac <_svfiprintf_r+0x194>
 800c7ca:	ab03      	add	r3, sp, #12
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	462a      	mov	r2, r5
 800c7d0:	4b0f      	ldr	r3, [pc, #60]	; (800c810 <_svfiprintf_r+0x1f8>)
 800c7d2:	a904      	add	r1, sp, #16
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f3af 8000 	nop.w
 800c7da:	1c42      	adds	r2, r0, #1
 800c7dc:	4606      	mov	r6, r0
 800c7de:	d1d6      	bne.n	800c78e <_svfiprintf_r+0x176>
 800c7e0:	89ab      	ldrh	r3, [r5, #12]
 800c7e2:	065b      	lsls	r3, r3, #25
 800c7e4:	f53f af2c 	bmi.w	800c640 <_svfiprintf_r+0x28>
 800c7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ea:	b01d      	add	sp, #116	; 0x74
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	ab03      	add	r3, sp, #12
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	462a      	mov	r2, r5
 800c7f6:	4b06      	ldr	r3, [pc, #24]	; (800c810 <_svfiprintf_r+0x1f8>)
 800c7f8:	a904      	add	r1, sp, #16
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f000 f87a 	bl	800c8f4 <_printf_i>
 800c800:	e7eb      	b.n	800c7da <_svfiprintf_r+0x1c2>
 800c802:	bf00      	nop
 800c804:	0800ceee 	.word	0x0800ceee
 800c808:	0800cef8 	.word	0x0800cef8
 800c80c:	00000000 	.word	0x00000000
 800c810:	0800c561 	.word	0x0800c561
 800c814:	0800cef4 	.word	0x0800cef4

0800c818 <_printf_common>:
 800c818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c81c:	4616      	mov	r6, r2
 800c81e:	4699      	mov	r9, r3
 800c820:	688a      	ldr	r2, [r1, #8]
 800c822:	690b      	ldr	r3, [r1, #16]
 800c824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c828:	4293      	cmp	r3, r2
 800c82a:	bfb8      	it	lt
 800c82c:	4613      	movlt	r3, r2
 800c82e:	6033      	str	r3, [r6, #0]
 800c830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c834:	4607      	mov	r7, r0
 800c836:	460c      	mov	r4, r1
 800c838:	b10a      	cbz	r2, 800c83e <_printf_common+0x26>
 800c83a:	3301      	adds	r3, #1
 800c83c:	6033      	str	r3, [r6, #0]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	0699      	lsls	r1, r3, #26
 800c842:	bf42      	ittt	mi
 800c844:	6833      	ldrmi	r3, [r6, #0]
 800c846:	3302      	addmi	r3, #2
 800c848:	6033      	strmi	r3, [r6, #0]
 800c84a:	6825      	ldr	r5, [r4, #0]
 800c84c:	f015 0506 	ands.w	r5, r5, #6
 800c850:	d106      	bne.n	800c860 <_printf_common+0x48>
 800c852:	f104 0a19 	add.w	sl, r4, #25
 800c856:	68e3      	ldr	r3, [r4, #12]
 800c858:	6832      	ldr	r2, [r6, #0]
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	42ab      	cmp	r3, r5
 800c85e:	dc26      	bgt.n	800c8ae <_printf_common+0x96>
 800c860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c864:	1e13      	subs	r3, r2, #0
 800c866:	6822      	ldr	r2, [r4, #0]
 800c868:	bf18      	it	ne
 800c86a:	2301      	movne	r3, #1
 800c86c:	0692      	lsls	r2, r2, #26
 800c86e:	d42b      	bmi.n	800c8c8 <_printf_common+0xb0>
 800c870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c874:	4649      	mov	r1, r9
 800c876:	4638      	mov	r0, r7
 800c878:	47c0      	blx	r8
 800c87a:	3001      	adds	r0, #1
 800c87c:	d01e      	beq.n	800c8bc <_printf_common+0xa4>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	68e5      	ldr	r5, [r4, #12]
 800c882:	6832      	ldr	r2, [r6, #0]
 800c884:	f003 0306 	and.w	r3, r3, #6
 800c888:	2b04      	cmp	r3, #4
 800c88a:	bf08      	it	eq
 800c88c:	1aad      	subeq	r5, r5, r2
 800c88e:	68a3      	ldr	r3, [r4, #8]
 800c890:	6922      	ldr	r2, [r4, #16]
 800c892:	bf0c      	ite	eq
 800c894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c898:	2500      	movne	r5, #0
 800c89a:	4293      	cmp	r3, r2
 800c89c:	bfc4      	itt	gt
 800c89e:	1a9b      	subgt	r3, r3, r2
 800c8a0:	18ed      	addgt	r5, r5, r3
 800c8a2:	2600      	movs	r6, #0
 800c8a4:	341a      	adds	r4, #26
 800c8a6:	42b5      	cmp	r5, r6
 800c8a8:	d11a      	bne.n	800c8e0 <_printf_common+0xc8>
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	e008      	b.n	800c8c0 <_printf_common+0xa8>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	4652      	mov	r2, sl
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	47c0      	blx	r8
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	d103      	bne.n	800c8c4 <_printf_common+0xac>
 800c8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	e7c6      	b.n	800c856 <_printf_common+0x3e>
 800c8c8:	18e1      	adds	r1, r4, r3
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	2030      	movs	r0, #48	; 0x30
 800c8ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8d2:	4422      	add	r2, r4
 800c8d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8dc:	3302      	adds	r3, #2
 800c8de:	e7c7      	b.n	800c870 <_printf_common+0x58>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	47c0      	blx	r8
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d0e6      	beq.n	800c8bc <_printf_common+0xa4>
 800c8ee:	3601      	adds	r6, #1
 800c8f0:	e7d9      	b.n	800c8a6 <_printf_common+0x8e>
	...

0800c8f4 <_printf_i>:
 800c8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	4691      	mov	r9, r2
 800c8fc:	7e27      	ldrb	r7, [r4, #24]
 800c8fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c900:	2f78      	cmp	r7, #120	; 0x78
 800c902:	4680      	mov	r8, r0
 800c904:	469a      	mov	sl, r3
 800c906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c90a:	d807      	bhi.n	800c91c <_printf_i+0x28>
 800c90c:	2f62      	cmp	r7, #98	; 0x62
 800c90e:	d80a      	bhi.n	800c926 <_printf_i+0x32>
 800c910:	2f00      	cmp	r7, #0
 800c912:	f000 80d8 	beq.w	800cac6 <_printf_i+0x1d2>
 800c916:	2f58      	cmp	r7, #88	; 0x58
 800c918:	f000 80a3 	beq.w	800ca62 <_printf_i+0x16e>
 800c91c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c924:	e03a      	b.n	800c99c <_printf_i+0xa8>
 800c926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c92a:	2b15      	cmp	r3, #21
 800c92c:	d8f6      	bhi.n	800c91c <_printf_i+0x28>
 800c92e:	a001      	add	r0, pc, #4	; (adr r0, 800c934 <_printf_i+0x40>)
 800c930:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c934:	0800c98d 	.word	0x0800c98d
 800c938:	0800c9a1 	.word	0x0800c9a1
 800c93c:	0800c91d 	.word	0x0800c91d
 800c940:	0800c91d 	.word	0x0800c91d
 800c944:	0800c91d 	.word	0x0800c91d
 800c948:	0800c91d 	.word	0x0800c91d
 800c94c:	0800c9a1 	.word	0x0800c9a1
 800c950:	0800c91d 	.word	0x0800c91d
 800c954:	0800c91d 	.word	0x0800c91d
 800c958:	0800c91d 	.word	0x0800c91d
 800c95c:	0800c91d 	.word	0x0800c91d
 800c960:	0800caad 	.word	0x0800caad
 800c964:	0800c9d1 	.word	0x0800c9d1
 800c968:	0800ca8f 	.word	0x0800ca8f
 800c96c:	0800c91d 	.word	0x0800c91d
 800c970:	0800c91d 	.word	0x0800c91d
 800c974:	0800cacf 	.word	0x0800cacf
 800c978:	0800c91d 	.word	0x0800c91d
 800c97c:	0800c9d1 	.word	0x0800c9d1
 800c980:	0800c91d 	.word	0x0800c91d
 800c984:	0800c91d 	.word	0x0800c91d
 800c988:	0800ca97 	.word	0x0800ca97
 800c98c:	680b      	ldr	r3, [r1, #0]
 800c98e:	1d1a      	adds	r2, r3, #4
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	600a      	str	r2, [r1, #0]
 800c994:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c99c:	2301      	movs	r3, #1
 800c99e:	e0a3      	b.n	800cae8 <_printf_i+0x1f4>
 800c9a0:	6825      	ldr	r5, [r4, #0]
 800c9a2:	6808      	ldr	r0, [r1, #0]
 800c9a4:	062e      	lsls	r6, r5, #24
 800c9a6:	f100 0304 	add.w	r3, r0, #4
 800c9aa:	d50a      	bpl.n	800c9c2 <_printf_i+0xce>
 800c9ac:	6805      	ldr	r5, [r0, #0]
 800c9ae:	600b      	str	r3, [r1, #0]
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	da03      	bge.n	800c9bc <_printf_i+0xc8>
 800c9b4:	232d      	movs	r3, #45	; 0x2d
 800c9b6:	426d      	negs	r5, r5
 800c9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9bc:	485e      	ldr	r0, [pc, #376]	; (800cb38 <_printf_i+0x244>)
 800c9be:	230a      	movs	r3, #10
 800c9c0:	e019      	b.n	800c9f6 <_printf_i+0x102>
 800c9c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9c6:	6805      	ldr	r5, [r0, #0]
 800c9c8:	600b      	str	r3, [r1, #0]
 800c9ca:	bf18      	it	ne
 800c9cc:	b22d      	sxthne	r5, r5
 800c9ce:	e7ef      	b.n	800c9b0 <_printf_i+0xbc>
 800c9d0:	680b      	ldr	r3, [r1, #0]
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	1d18      	adds	r0, r3, #4
 800c9d6:	6008      	str	r0, [r1, #0]
 800c9d8:	0628      	lsls	r0, r5, #24
 800c9da:	d501      	bpl.n	800c9e0 <_printf_i+0xec>
 800c9dc:	681d      	ldr	r5, [r3, #0]
 800c9de:	e002      	b.n	800c9e6 <_printf_i+0xf2>
 800c9e0:	0669      	lsls	r1, r5, #25
 800c9e2:	d5fb      	bpl.n	800c9dc <_printf_i+0xe8>
 800c9e4:	881d      	ldrh	r5, [r3, #0]
 800c9e6:	4854      	ldr	r0, [pc, #336]	; (800cb38 <_printf_i+0x244>)
 800c9e8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9ea:	bf0c      	ite	eq
 800c9ec:	2308      	moveq	r3, #8
 800c9ee:	230a      	movne	r3, #10
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9f6:	6866      	ldr	r6, [r4, #4]
 800c9f8:	60a6      	str	r6, [r4, #8]
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	bfa2      	ittt	ge
 800c9fe:	6821      	ldrge	r1, [r4, #0]
 800ca00:	f021 0104 	bicge.w	r1, r1, #4
 800ca04:	6021      	strge	r1, [r4, #0]
 800ca06:	b90d      	cbnz	r5, 800ca0c <_printf_i+0x118>
 800ca08:	2e00      	cmp	r6, #0
 800ca0a:	d04d      	beq.n	800caa8 <_printf_i+0x1b4>
 800ca0c:	4616      	mov	r6, r2
 800ca0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca12:	fb03 5711 	mls	r7, r3, r1, r5
 800ca16:	5dc7      	ldrb	r7, [r0, r7]
 800ca18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca1c:	462f      	mov	r7, r5
 800ca1e:	42bb      	cmp	r3, r7
 800ca20:	460d      	mov	r5, r1
 800ca22:	d9f4      	bls.n	800ca0e <_printf_i+0x11a>
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d10b      	bne.n	800ca40 <_printf_i+0x14c>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	07df      	lsls	r7, r3, #31
 800ca2c:	d508      	bpl.n	800ca40 <_printf_i+0x14c>
 800ca2e:	6923      	ldr	r3, [r4, #16]
 800ca30:	6861      	ldr	r1, [r4, #4]
 800ca32:	4299      	cmp	r1, r3
 800ca34:	bfde      	ittt	le
 800ca36:	2330      	movle	r3, #48	; 0x30
 800ca38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca40:	1b92      	subs	r2, r2, r6
 800ca42:	6122      	str	r2, [r4, #16]
 800ca44:	f8cd a000 	str.w	sl, [sp]
 800ca48:	464b      	mov	r3, r9
 800ca4a:	aa03      	add	r2, sp, #12
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4640      	mov	r0, r8
 800ca50:	f7ff fee2 	bl	800c818 <_printf_common>
 800ca54:	3001      	adds	r0, #1
 800ca56:	d14c      	bne.n	800caf2 <_printf_i+0x1fe>
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	b004      	add	sp, #16
 800ca5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca62:	4835      	ldr	r0, [pc, #212]	; (800cb38 <_printf_i+0x244>)
 800ca64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	680e      	ldr	r6, [r1, #0]
 800ca6c:	061f      	lsls	r7, r3, #24
 800ca6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca72:	600e      	str	r6, [r1, #0]
 800ca74:	d514      	bpl.n	800caa0 <_printf_i+0x1ac>
 800ca76:	07d9      	lsls	r1, r3, #31
 800ca78:	bf44      	itt	mi
 800ca7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca7e:	6023      	strmi	r3, [r4, #0]
 800ca80:	b91d      	cbnz	r5, 800ca8a <_printf_i+0x196>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	f023 0320 	bic.w	r3, r3, #32
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	2310      	movs	r3, #16
 800ca8c:	e7b0      	b.n	800c9f0 <_printf_i+0xfc>
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	f043 0320 	orr.w	r3, r3, #32
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	2378      	movs	r3, #120	; 0x78
 800ca98:	4828      	ldr	r0, [pc, #160]	; (800cb3c <_printf_i+0x248>)
 800ca9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca9e:	e7e3      	b.n	800ca68 <_printf_i+0x174>
 800caa0:	065e      	lsls	r6, r3, #25
 800caa2:	bf48      	it	mi
 800caa4:	b2ad      	uxthmi	r5, r5
 800caa6:	e7e6      	b.n	800ca76 <_printf_i+0x182>
 800caa8:	4616      	mov	r6, r2
 800caaa:	e7bb      	b.n	800ca24 <_printf_i+0x130>
 800caac:	680b      	ldr	r3, [r1, #0]
 800caae:	6826      	ldr	r6, [r4, #0]
 800cab0:	6960      	ldr	r0, [r4, #20]
 800cab2:	1d1d      	adds	r5, r3, #4
 800cab4:	600d      	str	r5, [r1, #0]
 800cab6:	0635      	lsls	r5, r6, #24
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	d501      	bpl.n	800cac0 <_printf_i+0x1cc>
 800cabc:	6018      	str	r0, [r3, #0]
 800cabe:	e002      	b.n	800cac6 <_printf_i+0x1d2>
 800cac0:	0671      	lsls	r1, r6, #25
 800cac2:	d5fb      	bpl.n	800cabc <_printf_i+0x1c8>
 800cac4:	8018      	strh	r0, [r3, #0]
 800cac6:	2300      	movs	r3, #0
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	4616      	mov	r6, r2
 800cacc:	e7ba      	b.n	800ca44 <_printf_i+0x150>
 800cace:	680b      	ldr	r3, [r1, #0]
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	600a      	str	r2, [r1, #0]
 800cad4:	681e      	ldr	r6, [r3, #0]
 800cad6:	6862      	ldr	r2, [r4, #4]
 800cad8:	2100      	movs	r1, #0
 800cada:	4630      	mov	r0, r6
 800cadc:	f7f3 fc20 	bl	8000320 <memchr>
 800cae0:	b108      	cbz	r0, 800cae6 <_printf_i+0x1f2>
 800cae2:	1b80      	subs	r0, r0, r6
 800cae4:	6060      	str	r0, [r4, #4]
 800cae6:	6863      	ldr	r3, [r4, #4]
 800cae8:	6123      	str	r3, [r4, #16]
 800caea:	2300      	movs	r3, #0
 800caec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf0:	e7a8      	b.n	800ca44 <_printf_i+0x150>
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	4632      	mov	r2, r6
 800caf6:	4649      	mov	r1, r9
 800caf8:	4640      	mov	r0, r8
 800cafa:	47d0      	blx	sl
 800cafc:	3001      	adds	r0, #1
 800cafe:	d0ab      	beq.n	800ca58 <_printf_i+0x164>
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	079b      	lsls	r3, r3, #30
 800cb04:	d413      	bmi.n	800cb2e <_printf_i+0x23a>
 800cb06:	68e0      	ldr	r0, [r4, #12]
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	4298      	cmp	r0, r3
 800cb0c:	bfb8      	it	lt
 800cb0e:	4618      	movlt	r0, r3
 800cb10:	e7a4      	b.n	800ca5c <_printf_i+0x168>
 800cb12:	2301      	movs	r3, #1
 800cb14:	4632      	mov	r2, r6
 800cb16:	4649      	mov	r1, r9
 800cb18:	4640      	mov	r0, r8
 800cb1a:	47d0      	blx	sl
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d09b      	beq.n	800ca58 <_printf_i+0x164>
 800cb20:	3501      	adds	r5, #1
 800cb22:	68e3      	ldr	r3, [r4, #12]
 800cb24:	9903      	ldr	r1, [sp, #12]
 800cb26:	1a5b      	subs	r3, r3, r1
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	dcf2      	bgt.n	800cb12 <_printf_i+0x21e>
 800cb2c:	e7eb      	b.n	800cb06 <_printf_i+0x212>
 800cb2e:	2500      	movs	r5, #0
 800cb30:	f104 0619 	add.w	r6, r4, #25
 800cb34:	e7f5      	b.n	800cb22 <_printf_i+0x22e>
 800cb36:	bf00      	nop
 800cb38:	0800ceff 	.word	0x0800ceff
 800cb3c:	0800cf10 	.word	0x0800cf10

0800cb40 <memcpy>:
 800cb40:	440a      	add	r2, r1
 800cb42:	4291      	cmp	r1, r2
 800cb44:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb48:	d100      	bne.n	800cb4c <memcpy+0xc>
 800cb4a:	4770      	bx	lr
 800cb4c:	b510      	push	{r4, lr}
 800cb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb56:	4291      	cmp	r1, r2
 800cb58:	d1f9      	bne.n	800cb4e <memcpy+0xe>
 800cb5a:	bd10      	pop	{r4, pc}

0800cb5c <memmove>:
 800cb5c:	4288      	cmp	r0, r1
 800cb5e:	b510      	push	{r4, lr}
 800cb60:	eb01 0402 	add.w	r4, r1, r2
 800cb64:	d902      	bls.n	800cb6c <memmove+0x10>
 800cb66:	4284      	cmp	r4, r0
 800cb68:	4623      	mov	r3, r4
 800cb6a:	d807      	bhi.n	800cb7c <memmove+0x20>
 800cb6c:	1e43      	subs	r3, r0, #1
 800cb6e:	42a1      	cmp	r1, r4
 800cb70:	d008      	beq.n	800cb84 <memmove+0x28>
 800cb72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb7a:	e7f8      	b.n	800cb6e <memmove+0x12>
 800cb7c:	4402      	add	r2, r0
 800cb7e:	4601      	mov	r1, r0
 800cb80:	428a      	cmp	r2, r1
 800cb82:	d100      	bne.n	800cb86 <memmove+0x2a>
 800cb84:	bd10      	pop	{r4, pc}
 800cb86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb8e:	e7f7      	b.n	800cb80 <memmove+0x24>

0800cb90 <_free_r>:
 800cb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb92:	2900      	cmp	r1, #0
 800cb94:	d048      	beq.n	800cc28 <_free_r+0x98>
 800cb96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb9a:	9001      	str	r0, [sp, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f1a1 0404 	sub.w	r4, r1, #4
 800cba2:	bfb8      	it	lt
 800cba4:	18e4      	addlt	r4, r4, r3
 800cba6:	f000 f8d3 	bl	800cd50 <__malloc_lock>
 800cbaa:	4a20      	ldr	r2, [pc, #128]	; (800cc2c <_free_r+0x9c>)
 800cbac:	9801      	ldr	r0, [sp, #4]
 800cbae:	6813      	ldr	r3, [r2, #0]
 800cbb0:	4615      	mov	r5, r2
 800cbb2:	b933      	cbnz	r3, 800cbc2 <_free_r+0x32>
 800cbb4:	6063      	str	r3, [r4, #4]
 800cbb6:	6014      	str	r4, [r2, #0]
 800cbb8:	b003      	add	sp, #12
 800cbba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbbe:	f000 b8cd 	b.w	800cd5c <__malloc_unlock>
 800cbc2:	42a3      	cmp	r3, r4
 800cbc4:	d90b      	bls.n	800cbde <_free_r+0x4e>
 800cbc6:	6821      	ldr	r1, [r4, #0]
 800cbc8:	1862      	adds	r2, r4, r1
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	bf04      	itt	eq
 800cbce:	681a      	ldreq	r2, [r3, #0]
 800cbd0:	685b      	ldreq	r3, [r3, #4]
 800cbd2:	6063      	str	r3, [r4, #4]
 800cbd4:	bf04      	itt	eq
 800cbd6:	1852      	addeq	r2, r2, r1
 800cbd8:	6022      	streq	r2, [r4, #0]
 800cbda:	602c      	str	r4, [r5, #0]
 800cbdc:	e7ec      	b.n	800cbb8 <_free_r+0x28>
 800cbde:	461a      	mov	r2, r3
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	b10b      	cbz	r3, 800cbe8 <_free_r+0x58>
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	d9fa      	bls.n	800cbde <_free_r+0x4e>
 800cbe8:	6811      	ldr	r1, [r2, #0]
 800cbea:	1855      	adds	r5, r2, r1
 800cbec:	42a5      	cmp	r5, r4
 800cbee:	d10b      	bne.n	800cc08 <_free_r+0x78>
 800cbf0:	6824      	ldr	r4, [r4, #0]
 800cbf2:	4421      	add	r1, r4
 800cbf4:	1854      	adds	r4, r2, r1
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	6011      	str	r1, [r2, #0]
 800cbfa:	d1dd      	bne.n	800cbb8 <_free_r+0x28>
 800cbfc:	681c      	ldr	r4, [r3, #0]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	6053      	str	r3, [r2, #4]
 800cc02:	4421      	add	r1, r4
 800cc04:	6011      	str	r1, [r2, #0]
 800cc06:	e7d7      	b.n	800cbb8 <_free_r+0x28>
 800cc08:	d902      	bls.n	800cc10 <_free_r+0x80>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	6003      	str	r3, [r0, #0]
 800cc0e:	e7d3      	b.n	800cbb8 <_free_r+0x28>
 800cc10:	6825      	ldr	r5, [r4, #0]
 800cc12:	1961      	adds	r1, r4, r5
 800cc14:	428b      	cmp	r3, r1
 800cc16:	bf04      	itt	eq
 800cc18:	6819      	ldreq	r1, [r3, #0]
 800cc1a:	685b      	ldreq	r3, [r3, #4]
 800cc1c:	6063      	str	r3, [r4, #4]
 800cc1e:	bf04      	itt	eq
 800cc20:	1949      	addeq	r1, r1, r5
 800cc22:	6021      	streq	r1, [r4, #0]
 800cc24:	6054      	str	r4, [r2, #4]
 800cc26:	e7c7      	b.n	800cbb8 <_free_r+0x28>
 800cc28:	b003      	add	sp, #12
 800cc2a:	bd30      	pop	{r4, r5, pc}
 800cc2c:	240065b8 	.word	0x240065b8

0800cc30 <_malloc_r>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	1ccd      	adds	r5, r1, #3
 800cc34:	f025 0503 	bic.w	r5, r5, #3
 800cc38:	3508      	adds	r5, #8
 800cc3a:	2d0c      	cmp	r5, #12
 800cc3c:	bf38      	it	cc
 800cc3e:	250c      	movcc	r5, #12
 800cc40:	2d00      	cmp	r5, #0
 800cc42:	4606      	mov	r6, r0
 800cc44:	db01      	blt.n	800cc4a <_malloc_r+0x1a>
 800cc46:	42a9      	cmp	r1, r5
 800cc48:	d903      	bls.n	800cc52 <_malloc_r+0x22>
 800cc4a:	230c      	movs	r3, #12
 800cc4c:	6033      	str	r3, [r6, #0]
 800cc4e:	2000      	movs	r0, #0
 800cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc52:	f000 f87d 	bl	800cd50 <__malloc_lock>
 800cc56:	4921      	ldr	r1, [pc, #132]	; (800ccdc <_malloc_r+0xac>)
 800cc58:	680a      	ldr	r2, [r1, #0]
 800cc5a:	4614      	mov	r4, r2
 800cc5c:	b99c      	cbnz	r4, 800cc86 <_malloc_r+0x56>
 800cc5e:	4f20      	ldr	r7, [pc, #128]	; (800cce0 <_malloc_r+0xb0>)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	b923      	cbnz	r3, 800cc6e <_malloc_r+0x3e>
 800cc64:	4621      	mov	r1, r4
 800cc66:	4630      	mov	r0, r6
 800cc68:	f000 f862 	bl	800cd30 <_sbrk_r>
 800cc6c:	6038      	str	r0, [r7, #0]
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4630      	mov	r0, r6
 800cc72:	f000 f85d 	bl	800cd30 <_sbrk_r>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	d123      	bne.n	800ccc2 <_malloc_r+0x92>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f000 f86c 	bl	800cd5c <__malloc_unlock>
 800cc84:	e7e3      	b.n	800cc4e <_malloc_r+0x1e>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	1b5b      	subs	r3, r3, r5
 800cc8a:	d417      	bmi.n	800ccbc <_malloc_r+0x8c>
 800cc8c:	2b0b      	cmp	r3, #11
 800cc8e:	d903      	bls.n	800cc98 <_malloc_r+0x68>
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	441c      	add	r4, r3
 800cc94:	6025      	str	r5, [r4, #0]
 800cc96:	e004      	b.n	800cca2 <_malloc_r+0x72>
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	42a2      	cmp	r2, r4
 800cc9c:	bf0c      	ite	eq
 800cc9e:	600b      	streq	r3, [r1, #0]
 800cca0:	6053      	strne	r3, [r2, #4]
 800cca2:	4630      	mov	r0, r6
 800cca4:	f000 f85a 	bl	800cd5c <__malloc_unlock>
 800cca8:	f104 000b 	add.w	r0, r4, #11
 800ccac:	1d23      	adds	r3, r4, #4
 800ccae:	f020 0007 	bic.w	r0, r0, #7
 800ccb2:	1ac2      	subs	r2, r0, r3
 800ccb4:	d0cc      	beq.n	800cc50 <_malloc_r+0x20>
 800ccb6:	1a1b      	subs	r3, r3, r0
 800ccb8:	50a3      	str	r3, [r4, r2]
 800ccba:	e7c9      	b.n	800cc50 <_malloc_r+0x20>
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	6864      	ldr	r4, [r4, #4]
 800ccc0:	e7cc      	b.n	800cc5c <_malloc_r+0x2c>
 800ccc2:	1cc4      	adds	r4, r0, #3
 800ccc4:	f024 0403 	bic.w	r4, r4, #3
 800ccc8:	42a0      	cmp	r0, r4
 800ccca:	d0e3      	beq.n	800cc94 <_malloc_r+0x64>
 800cccc:	1a21      	subs	r1, r4, r0
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 f82e 	bl	800cd30 <_sbrk_r>
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d1dd      	bne.n	800cc94 <_malloc_r+0x64>
 800ccd8:	e7cf      	b.n	800cc7a <_malloc_r+0x4a>
 800ccda:	bf00      	nop
 800ccdc:	240065b8 	.word	0x240065b8
 800cce0:	240065bc 	.word	0x240065bc

0800cce4 <_realloc_r>:
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	4607      	mov	r7, r0
 800cce8:	4614      	mov	r4, r2
 800ccea:	460e      	mov	r6, r1
 800ccec:	b921      	cbnz	r1, 800ccf8 <_realloc_r+0x14>
 800ccee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	f7ff bf9c 	b.w	800cc30 <_malloc_r>
 800ccf8:	b922      	cbnz	r2, 800cd04 <_realloc_r+0x20>
 800ccfa:	f7ff ff49 	bl	800cb90 <_free_r>
 800ccfe:	4625      	mov	r5, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd04:	f000 f830 	bl	800cd68 <_malloc_usable_size_r>
 800cd08:	42a0      	cmp	r0, r4
 800cd0a:	d20f      	bcs.n	800cd2c <_realloc_r+0x48>
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4638      	mov	r0, r7
 800cd10:	f7ff ff8e 	bl	800cc30 <_malloc_r>
 800cd14:	4605      	mov	r5, r0
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d0f2      	beq.n	800cd00 <_realloc_r+0x1c>
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	f7ff ff0f 	bl	800cb40 <memcpy>
 800cd22:	4631      	mov	r1, r6
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7ff ff33 	bl	800cb90 <_free_r>
 800cd2a:	e7e9      	b.n	800cd00 <_realloc_r+0x1c>
 800cd2c:	4635      	mov	r5, r6
 800cd2e:	e7e7      	b.n	800cd00 <_realloc_r+0x1c>

0800cd30 <_sbrk_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	4d06      	ldr	r5, [pc, #24]	; (800cd4c <_sbrk_r+0x1c>)
 800cd34:	2300      	movs	r3, #0
 800cd36:	4604      	mov	r4, r0
 800cd38:	4608      	mov	r0, r1
 800cd3a:	602b      	str	r3, [r5, #0]
 800cd3c:	f7f4 fb6e 	bl	800141c <_sbrk>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	d102      	bne.n	800cd4a <_sbrk_r+0x1a>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	b103      	cbz	r3, 800cd4a <_sbrk_r+0x1a>
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	24006e6c 	.word	0x24006e6c

0800cd50 <__malloc_lock>:
 800cd50:	4801      	ldr	r0, [pc, #4]	; (800cd58 <__malloc_lock+0x8>)
 800cd52:	f000 b811 	b.w	800cd78 <__retarget_lock_acquire_recursive>
 800cd56:	bf00      	nop
 800cd58:	24006e74 	.word	0x24006e74

0800cd5c <__malloc_unlock>:
 800cd5c:	4801      	ldr	r0, [pc, #4]	; (800cd64 <__malloc_unlock+0x8>)
 800cd5e:	f000 b80c 	b.w	800cd7a <__retarget_lock_release_recursive>
 800cd62:	bf00      	nop
 800cd64:	24006e74 	.word	0x24006e74

0800cd68 <_malloc_usable_size_r>:
 800cd68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd6c:	1f18      	subs	r0, r3, #4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bfbc      	itt	lt
 800cd72:	580b      	ldrlt	r3, [r1, r0]
 800cd74:	18c0      	addlt	r0, r0, r3
 800cd76:	4770      	bx	lr

0800cd78 <__retarget_lock_acquire_recursive>:
 800cd78:	4770      	bx	lr

0800cd7a <__retarget_lock_release_recursive>:
 800cd7a:	4770      	bx	lr

0800cd7c <_init>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	bf00      	nop
 800cd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd82:	bc08      	pop	{r3}
 800cd84:	469e      	mov	lr, r3
 800cd86:	4770      	bx	lr

0800cd88 <_fini>:
 800cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8a:	bf00      	nop
 800cd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8e:	bc08      	pop	{r3}
 800cd90:	469e      	mov	lr, r3
 800cd92:	4770      	bx	lr
