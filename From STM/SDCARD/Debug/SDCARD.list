
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff9c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0801026c  0801026c  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080104ec  080104ec  000204ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080104f4  080104f4  000204f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080104f8  080104f8  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002a0  24000000  080104fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013c24  240002a0  0801079c  000302a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24013ec4  0801079c  00033ec4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e51a  00000000  00000000  000302ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006407  00000000  00000000  0006e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002058  00000000  00000000  00074bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e50  00000000  00000000  00076c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000793d  00000000  00000000  00078a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a268  00000000  00000000  000803d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f316  00000000  00000000  000aa63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00209953  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d4c  00000000  00000000  002099a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002a0 	.word	0x240002a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010254 	.word	0x08010254

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002a4 	.word	0x240002a4
 800030c:	08010254 	.word	0x08010254

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e024      	b.n	8000714 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e01a      	b.n	8000706 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	dd0a      	ble.n	80006ec <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	025a      	lsls	r2, r3, #9
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e009      	b.n	8000700 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	025a      	lsls	r2, r3, #9
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800070c:	dbe0      	blt.n	80006d0 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbd6      	blt.n	80006ca <HalfKBWrite+0x12>
			}

		}

	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HalfKBWrite(stext,chunk_mult);
 8000730:	2101      	movs	r1, #1
 8000732:	4813      	ldr	r0, [pc, #76]	; (8000780 <main+0x54>)
 8000734:	f7ff ffc0 	bl	80006b8 <HalfKBWrite>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 fe54 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f82a 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f97e 	bl	8000a40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000744:	f000 f8c4 	bl	80008d0 <MX_USART3_UART_Init>
  MX_MDMA_Init();
 8000748:	f000 f916 	bl	8000978 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 800074c:	f000 f892 	bl	8000874 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000750:	f008 fad4 	bl	8008cfc <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 8000754:	f000 f908 	bl	8000968 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  //SD_Initialize();

	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <main+0x58>)
 800075e:	f001 f961 	bl	8001a24 <HAL_GPIO_WritePin>
	//WriteTime();
	//MX_FATFS_Init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000762:	f00b fc55 	bl	800c010 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SD_INT */
  SD_INTHandle = osThreadNew(StartDefaultTask, NULL, &SD_INT_attributes);
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <main+0x5c>)
 8000768:	2100      	movs	r1, #0
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <main+0x60>)
 800076c:	f00b fcd1 	bl	800c112 <osThreadNew>
 8000770:	4603      	mov	r3, r0
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <main+0x64>)
 8000774:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000776:	f00b fc91 	bl	800c09c <osKernelStart>

//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
//
//	int looper = 0;
//	char str[80]={0};
  Error_Handler();
 800077a:	f000 fb93 	bl	8000ea4 <Error_Handler>
    while (1)
 800077e:	e7fe      	b.n	800077e <main+0x52>
 8000780:	24000028 	.word	0x24000028
 8000784:	58020400 	.word	0x58020400
 8000788:	08010348 	.word	0x08010348
 800078c:	08000e29 	.word	0x08000e29
 8000790:	24013660 	.word	0x24013660

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	224c      	movs	r2, #76	; 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00f f8c6 	bl	800f934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00f f8c0 	bl	800f934 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f001 fbdb 	bl	8001f70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <SystemClock_Config+0xdc>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <SystemClock_Config+0xdc>)
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <SystemClock_Config+0xdc>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d6:	bf00      	nop
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <SystemClock_Config+0xdc>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e4:	d1f8      	bne.n	80007d8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007e6:	2321      	movs	r3, #33	; 0x21
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000800:	232c      	movs	r3, #44	; 0x2c
 8000802:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8000808:	230b      	movs	r3, #11
 800080a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000810:	230c      	movs	r3, #12
 8000812:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000814:	2300      	movs	r3, #0
 8000816:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fbdf 	bl	8001fe4 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800082c:	f000 fb3a 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	233f      	movs	r3, #63	; 0x3f
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2303      	movs	r3, #3
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800083c:	2308      	movs	r3, #8
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2103      	movs	r1, #3
 8000856:	4618      	mov	r0, r3
 8000858:	f001 ff70 	bl	800273c <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000862:	f000 fb1f 	bl	8000ea4 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3770      	adds	r7, #112	; 0x70
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	58024800 	.word	0x58024800

08000874 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_SDMMC1_SD_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_SDMMC1_SD_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SDMMC1_SD_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SDMMC1_SD_Init+0x50>)
 8000886:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800088a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_SDMMC1_SD_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SDMMC1_SD_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_SDMMC1_SD_Init+0x50>)
 800089c:	2202      	movs	r2, #2
 800089e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_SDMMC1_SD_Init+0x58>)
 80008a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <MX_SDMMC1_SD_Init+0x58>)
 80008a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008aa:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_SDMMC1_SD_Init+0x58>)
 80008ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <MX_SDMMC1_SD_Init+0x58>)
 80008b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b6:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	24013664 	.word	0x24013664
 80008c8:	52007000 	.word	0x52007000
 80008cc:	58024400 	.word	0x58024400

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <MX_USART3_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_USART3_UART_Init+0x90>)
 800091a:	f006 fabf 	bl	8006e9c <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 fabe 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_USART3_UART_Init+0x90>)
 800092c:	f007 fb52 	bl	8007fd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 fab5 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_USART3_UART_Init+0x90>)
 800093e:	f007 fb87 	bl	8008050 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 faac 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_USART3_UART_Init+0x90>)
 800094e:	f007 fb08 	bl	8007f62 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 faa4 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	240135cc 	.word	0x240135cc
 8000964:	40004800 	.word	0x40004800

08000968 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_MDMA_Init+0xbc>)
 8000980:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000984:	4a2b      	ldr	r2, [pc, #172]	; (8000a34 <MX_MDMA_Init+0xbc>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_MDMA_Init+0xbc>)
 8000990:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_MDMA_Init+0xc0>)
 800099e:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <MX_MDMA_Init+0xc4>)
 80009a0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009a4:	221d      	movs	r2, #29
 80009a6:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_HIGH;
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009bc:	2202      	movs	r2, #2
 80009be:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009c2:	2208      	movs	r2, #8
 80009c4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_MDMA_Init+0xc0>)
 80009fa:	f001 f82c 	bl	8001a56 <HAL_MDMA_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000a04:	f000 fa4e 	bl	8000ea4 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	480a      	ldr	r0, [pc, #40]	; (8000a38 <MX_MDMA_Init+0xc0>)
 8000a0e:	f001 f86e 	bl	8001aee <HAL_MDMA_ConfigPostRequestMask>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000a18:	f000 fa44 	bl	8000ea4 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2105      	movs	r1, #5
 8000a20:	207a      	movs	r0, #122	; 0x7a
 8000a22:	f000 fe17 	bl	8001654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000a26:	207a      	movs	r0, #122	; 0x7a
 8000a28:	f000 fe2e 	bl	8001688 <HAL_NVIC_EnableIRQ>

}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	58024400 	.word	0x58024400
 8000a38:	2401394c 	.word	0x2401394c
 8000a3c:	52000040 	.word	0x52000040

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b92      	ldr	r3, [pc, #584]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a90      	ldr	r2, [pc, #576]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b8e      	ldr	r3, [pc, #568]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a74:	4b8a      	ldr	r3, [pc, #552]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	4a89      	ldr	r2, [pc, #548]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a84:	4b86      	ldr	r3, [pc, #536]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b83      	ldr	r3, [pc, #524]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a81      	ldr	r2, [pc, #516]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b7f      	ldr	r3, [pc, #508]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b7b      	ldr	r3, [pc, #492]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a7a      	ldr	r2, [pc, #488]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b77      	ldr	r3, [pc, #476]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b74      	ldr	r3, [pc, #464]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a72      	ldr	r2, [pc, #456]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b70      	ldr	r3, [pc, #448]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a6b      	ldr	r2, [pc, #428]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	4b65      	ldr	r3, [pc, #404]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a63      	ldr	r2, [pc, #396]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b61      	ldr	r3, [pc, #388]	; (8000ca0 <MX_GPIO_Init+0x260>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b2e:	485d      	ldr	r0, [pc, #372]	; (8000ca4 <MX_GPIO_Init+0x264>)
 8000b30:	f000 ff78 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3a:	485b      	ldr	r0, [pc, #364]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000b3c:	f000 ff72 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2102      	movs	r1, #2
 8000b44:	4859      	ldr	r0, [pc, #356]	; (8000cac <MX_GPIO_Init+0x26c>)
 8000b46:	f000 ff6d 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4854      	ldr	r0, [pc, #336]	; (8000cb0 <MX_GPIO_Init+0x270>)
 8000b60:	f000 fda0 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b64:	2332      	movs	r3, #50	; 0x32
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	484c      	ldr	r0, [pc, #304]	; (8000cb0 <MX_GPIO_Init+0x270>)
 8000b80:	f000 fd90 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b84:	2386      	movs	r3, #134	; 0x86
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b94:	230b      	movs	r3, #11
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4845      	ldr	r0, [pc, #276]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000ba0:	f000 fd80 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000ba4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <MX_GPIO_Init+0x264>)
 8000bbe:	f000 fd71 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4831      	ldr	r0, [pc, #196]	; (8000ca4 <MX_GPIO_Init+0x264>)
 8000be0:	f000 fd60 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482a      	ldr	r0, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0x268>)
 8000bfe:	f000 fd51 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <MX_GPIO_Init+0x278>)
 8000c18:	f000 fd44 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4820      	ldr	r0, [pc, #128]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000c32:	f000 fd37 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c48:	230a      	movs	r3, #10
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0x274>)
 8000c54:	f000 fd26 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6a:	230b      	movs	r3, #11
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x278>)
 8000c76:	f000 fd15 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_GPIO_Init+0x26c>)
 8000c92:	f000 fd07 	bl	80016a4 <HAL_GPIO_Init>

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	; 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58020400 	.word	0x58020400
 8000ca8:	58020c00 	.word	0x58020c00
 8000cac:	58021000 	.word	0x58021000
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	58020000 	.word	0x58020000
 8000cb8:	58021800 	.word	0x58021800

08000cbc <WriteTime>:
  }
}


void WriteTime()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM.TXT", aPLUS);
 8000cc0:	2233      	movs	r2, #51	; 0x33
 8000cc2:	4918      	ldr	r1, [pc, #96]	; (8000d24 <WriteTime+0x68>)
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <WriteTime+0x6c>)
 8000cc6:	f00a f86f 	bl	800ada8 <f_open>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <WriteTime+0x70>)
 8000cd0:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <WriteTime+0x70>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <WriteTime+0x22>
	{
		Error_Handler();
 8000cda:	f000 f8e3 	bl	8000ea4 <Error_Handler>
	}
	sprintf(text, "\n#######################%u\n",HAL_GetTick());
 8000cde:	f000 fbd1 	bl	8001484 <HAL_GetTick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4912      	ldr	r1, [pc, #72]	; (8000d30 <WriteTime+0x74>)
 8000ce8:	4812      	ldr	r0, [pc, #72]	; (8000d34 <WriteTime+0x78>)
 8000cea:	f00e feff 	bl	800faec <siprintf>
	res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <WriteTime+0x78>)
 8000cf0:	f7ff fb0e 	bl	8000310 <strlen>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <WriteTime+0x7c>)
 8000cf8:	490e      	ldr	r1, [pc, #56]	; (8000d34 <WriteTime+0x78>)
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <WriteTime+0x6c>)
 8000cfc:	f00a fa19 	bl	800b132 <f_write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <WriteTime+0x70>)
 8000d06:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <WriteTime+0x7c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <WriteTime+0x62>
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <WriteTime+0x70>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <WriteTime+0x62>
	{

	}
	else
	{
		f_close(&SDFile);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <WriteTime+0x6c>)
 8000d1a:	f00a fc37 	bl	800b58c <f_close>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08010280 	.word	0x08010280
 8000d28:	24013a10 	.word	0x24013a10
 8000d2c:	24013948 	.word	0x24013948
 8000d30:	08010288 	.word	0x08010288
 8000d34:	24000000 	.word	0x24000000
 8000d38:	2401365c 	.word	0x2401365c

08000d3c <FS_MOUNT>:



static void FS_MOUNT(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af02      	add	r7, sp, #8
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	4914      	ldr	r1, [pc, #80]	; (8000d98 <FS_MOUNT+0x5c>)
 8000d46:	4815      	ldr	r0, [pc, #84]	; (8000d9c <FS_MOUNT+0x60>)
 8000d48:	f009 ffca 	bl	800ace0 <f_mount>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <FS_MOUNT+0x64>)
 8000d52:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <FS_MOUNT+0x64>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d119      	bne.n	8000d90 <FS_MOUNT+0x54>
	{
		/* check whether the FS has been already created */
		if (isFsCreated == 0)
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <FS_MOUNT+0x68>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d115      	bne.n	8000d90 <FS_MOUNT+0x54>
		{
			res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <FS_MOUNT+0x6c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2107      	movs	r1, #7
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <FS_MOUNT+0x5c>)
 8000d72:	f00a fc3b 	bl	800b5ec <f_mkfs>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <FS_MOUNT+0x64>)
 8000d7c:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <FS_MOUNT+0x64>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <FS_MOUNT+0x4e>
			{
				Error_Handler();
 8000d86:	f000 f88d 	bl	8000ea4 <Error_Handler>
			}
		isFsCreated = 1;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <FS_MOUNT+0x68>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24013a0c 	.word	0x24013a0c
 8000d9c:	24013c40 	.word	0x24013c40
 8000da0:	24013948 	.word	0x24013948
 8000da4:	240002bc 	.word	0x240002bc
 8000da8:	240136e4 	.word	0x240136e4

08000dac <FS_SPAM>:

static void FS_SPAM(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM32.BIN", aPLUS);
 8000db2:	2233      	movs	r2, #51	; 0x33
 8000db4:	4917      	ldr	r1, [pc, #92]	; (8000e14 <FS_SPAM+0x68>)
 8000db6:	4818      	ldr	r0, [pc, #96]	; (8000e18 <FS_SPAM+0x6c>)
 8000db8:	f009 fff6 	bl	800ada8 <f_open>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <FS_SPAM+0x70>)
 8000dc2:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <FS_SPAM+0x70>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d11e      	bne.n	8000e0a <FS_SPAM+0x5e>
	{
		for(int repeat = 0; repeat<100; repeat++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	e00d      	b.n	8000dee <FS_SPAM+0x42>
		{
			/* Write data to the text file */
			res = f_write(&SDFile, stext, sizeof(stext), (void *)&byteswritten);
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <FS_SPAM+0x74>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd8:	4912      	ldr	r1, [pc, #72]	; (8000e24 <FS_SPAM+0x78>)
 8000dda:	480f      	ldr	r0, [pc, #60]	; (8000e18 <FS_SPAM+0x6c>)
 8000ddc:	f00a f9a9 	bl	800b132 <f_write>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <FS_SPAM+0x70>)
 8000de6:	701a      	strb	r2, [r3, #0]
		for(int repeat = 0; repeat<100; repeat++)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b63      	cmp	r3, #99	; 0x63
 8000df2:	ddee      	ble.n	8000dd2 <FS_SPAM+0x26>
		}

		if((byteswritten > 0) && (res == FR_OK))
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <FS_SPAM+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <FS_SPAM+0x5e>
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <FS_SPAM+0x70>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <FS_SPAM+0x5e>
		{
			/* Close the open text file */
			f_close(&SDFile);
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <FS_SPAM+0x6c>)
 8000e06:	f00a fbc1 	bl	800b58c <f_close>
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	080102a4 	.word	0x080102a4
 8000e18:	24013a10 	.word	0x24013a10
 8000e1c:	24013948 	.word	0x24013948
 8000e20:	2401365c 	.word	0x2401365c
 8000e24:	24000028 	.word	0x24000028

08000e28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
  /* Infinite loop */
	FS_MOUNT();
 8000e30:	f7ff ff84 	bl	8000d3c <FS_MOUNT>
  for(;;)
  {
	//FS_FileOperations();
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2102      	movs	r1, #2
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <StartDefaultTask+0x50>)
 8000e3a:	f000 fdf3 	bl	8001a24 <HAL_GPIO_WritePin>
	  WriteTime();
 8000e3e:	f7ff ff3d 	bl	8000cbc <WriteTime>
	  FS_SPAM();
 8000e42:	f7ff ffb3 	bl	8000dac <FS_SPAM>
	  WriteTime();
 8000e46:	f7ff ff39 	bl	8000cbc <WriteTime>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <StartDefaultTask+0x50>)
 8000e50:	f000 fde8 	bl	8001a24 <HAL_GPIO_WritePin>
	  WriteTime();
 8000e54:	f7ff ff32 	bl	8000cbc <WriteTime>
	  osDelay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5c:	f00b f9eb 	bl	800c236 <osDelay>
	  WriteTime();
 8000e60:	f7ff ff2c 	bl	8000cbc <WriteTime>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	4804      	ldr	r0, [pc, #16]	; (8000e7c <StartDefaultTask+0x54>)
 8000e6c:	f000 fdda 	bl	8001a24 <HAL_GPIO_WritePin>
	  osDelay(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f00b f9e0 	bl	800c236 <osDelay>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000e76:	e7dd      	b.n	8000e34 <StartDefaultTask+0xc>
 8000e78:	58021000 	.word	0x58021000
 8000e7c:	58020400 	.word	0x58020400

08000e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e92:	f000 fae3 	bl	800145c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <Error_Handler+0x2c>)
 8000eae:	f000 fdb9 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <Error_Handler+0x30>)
 8000eb8:	f000 fdb4 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <Error_Handler+0x2c>)
 8000ec4:	f000 fdae 	bl	8001a24 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x28>
 8000ece:	bf00      	nop
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	58021000 	.word	0x58021000

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x38>)
 8000ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_MspInit+0x38>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_MspInit+0x38>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	210f      	movs	r1, #15
 8000f00:	f06f 0001 	mvn.w	r0, #1
 8000f04:	f000 fba6 	bl	8001654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400

08000f14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b8      	sub	sp, #224	; 0xe0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22b4      	movs	r2, #180	; 0xb4
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00e fcfd 	bl	800f934 <memset>
  if(hsd->Instance==SDMMC1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a3b      	ldr	r2, [pc, #236]	; (800102c <HAL_SD_MspInit+0x118>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d16e      	bne.n	8001022 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 ffc0 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff ffa1 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f68:	4a31      	ldr	r2, [pc, #196]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fbc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <HAL_SD_MspInit+0x120>)
 8000fe4:	f000 fb5e 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001000:	230c      	movs	r3, #12
 8001002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800100a:	4619      	mov	r1, r3
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <HAL_SD_MspInit+0x124>)
 800100e:	f000 fb49 	bl	80016a4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2031      	movs	r0, #49	; 0x31
 8001018:	f000 fb1c 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800101c:	2031      	movs	r0, #49	; 0x31
 800101e:	f000 fb33 	bl	8001688 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	37e0      	adds	r7, #224	; 0xe0
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	52007000 	.word	0x52007000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020800 	.word	0x58020800
 8001038:	58020c00 	.word	0x58020c00

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0b6      	sub	sp, #216	; 0xd8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	22b4      	movs	r2, #180	; 0xb4
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f00e fc69 	bl	800f934 <memset>
  if(huart->Instance==USART3)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <HAL_UART_MspInit+0xc0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d142      	bne.n	80010f2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4618      	mov	r0, r3
 800107c:	f001 ff2c 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff ff0d 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_UART_MspInit+0xc4>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0xc4>)
 8001092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_MspInit+0xc4>)
 800109c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0xc4>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xc4>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0xc4>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e0:	2307      	movs	r3, #7
 80010e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_UART_MspInit+0xc8>)
 80010ee:	f000 fad9 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	37d8      	adds	r7, #216	; 0xd8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40004800 	.word	0x40004800
 8001100:	58024400 	.word	0x58024400
 8001104:	58020c00 	.word	0x58020c00

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d844      	bhi.n	80011a0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001116:	2200      	movs	r2, #0
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	2019      	movs	r0, #25
 800111c:	f000 fa9a 	bl	8001654 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001120:	2019      	movs	r0, #25
 8001122:	f000 fab1 	bl	8001688 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_InitTick+0xb0>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_InitTick+0xb4>)
 800112e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_InitTick+0xb4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_InitTick+0xb4>)
 800113e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fe7d 	bl	8002e54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800115a:	f001 fe65 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 800115e:	4603      	mov	r3, r0
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_InitTick+0xb8>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	3b01      	subs	r3, #1
 8001170:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_InitTick+0xbc>)
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_InitTick+0xc0>)
 8001176:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0xbc>)
 800117a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_InitTick+0xbc>)
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_InitTick+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_InitTick+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <HAL_InitTick+0xbc>)
 8001194:	f005 fb8e 	bl	80068b4 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d107      	bne.n	80011ae <HAL_InitTick+0xa6>
 800119e:	e001      	b.n	80011a4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e005      	b.n	80011b0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <HAL_InitTick+0xbc>)
 80011a6:	f005 fbe7 	bl	8006978 <HAL_TIM_Base_Start_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3738      	adds	r7, #56	; 0x38
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000230 	.word	0x24000230
 80011bc:	58024400 	.word	0x58024400
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	240139b8 	.word	0x240139b8
 80011c8:	40010000 	.word	0x40010000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM1_UP_IRQHandler+0x10>)
 80011fe:	f005 fc41 	bl	8006a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	240139b8 	.word	0x240139b8

0800120c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <SDMMC1_IRQHandler+0x10>)
 8001212:	f004 f95d 	bl	80054d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24013664 	.word	0x24013664

08001220 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <MDMA_IRQHandler+0x10>)
 8001226:	f000 fcb5 	bl	8001b94 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2401394c 	.word	0x2401394c

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f00e fb2c 	bl	800f8c0 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24050000 	.word	0x24050000
 8001294:	00000800 	.word	0x00000800
 8001298:	240002c0 	.word	0x240002c0
 800129c:	24013ec8 	.word	0x24013ec8

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <SystemInit+0xd0>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <SystemInit+0xd0>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <SystemInit+0xd4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	2b06      	cmp	r3, #6
 80012be:	d807      	bhi.n	80012d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <SystemInit+0xd4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <SystemInit+0xd4>)
 80012ca:	f043 0307 	orr.w	r3, r3, #7
 80012ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <SystemInit+0xd8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a28      	ldr	r2, [pc, #160]	; (8001378 <SystemInit+0xd8>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <SystemInit+0xd8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SystemInit+0xd8>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <SystemInit+0xd8>)
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <SystemInit+0xdc>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <SystemInit+0xd4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <SystemInit+0xd4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <SystemInit+0xd4>)
 8001304:	f043 0307 	orr.w	r3, r3, #7
 8001308:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <SystemInit+0xd8>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <SystemInit+0xd8>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SystemInit+0xd8>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <SystemInit+0xd8>)
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <SystemInit+0xe0>)
 8001320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <SystemInit+0xd8>)
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <SystemInit+0xe4>)
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <SystemInit+0xd8>)
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <SystemInit+0xe8>)
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <SystemInit+0xd8>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <SystemInit+0xd8>)
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <SystemInit+0xe8>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <SystemInit+0xd8>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <SystemInit+0xd8>)
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <SystemInit+0xe8>)
 8001344:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SystemInit+0xd8>)
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <SystemInit+0xd8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <SystemInit+0xd8>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SystemInit+0xd8>)
 800135a:	2200      	movs	r2, #0
 800135c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <SystemInit+0xec>)
 8001360:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001364:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	52002000 	.word	0x52002000
 8001378:	58024400 	.word	0x58024400
 800137c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001380:	02020200 	.word	0x02020200
 8001384:	01ff0000 	.word	0x01ff0000
 8001388:	01010280 	.word	0x01010280
 800138c:	52004000 	.word	0x52004000

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001394:	f7ff ff84 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f00e fa85 	bl	800f8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff f9b3 	bl	800072c <main>
  bx  lr
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d0:	240002a0 	.word	0x240002a0
  ldr r2, =_sidata
 80013d4:	080104fc 	.word	0x080104fc
  ldr r2, =_sbss
 80013d8:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 80013dc:	24013ec4 	.word	0x24013ec4

080013e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC3_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 f927 	bl	800163e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f0:	f001 fb5a 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_Init+0x68>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	4913      	ldr	r1, [pc, #76]	; (8001450 <HAL_Init+0x6c>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_Init+0x68>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_Init+0x6c>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_Init+0x70>)
 8001426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_Init+0x74>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	200f      	movs	r0, #15
 8001430:	f7ff fe6a 	bl	8001108 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e002      	b.n	8001444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800143e:	f7ff fd4b 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	58024400 	.word	0x58024400
 8001450:	0801036c 	.word	0x0801036c
 8001454:	2400022c 	.word	0x2400022c
 8001458:	24000228 	.word	0x24000228

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	24000234 	.word	0x24000234
 8001480:	24013a04 	.word	0x24013a04

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	24013a04 	.word	0x24013a04

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	24000234 	.word	0x24000234

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <__NVIC_SetPriorityGrouping+0x40>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	4313      	orrs	r3, r2
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x40>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00
 8001528:	05fa0000 	.word	0x05fa0000

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff4c 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001662:	f7ff ff63 	bl	800152c <__NVIC_GetPriorityGrouping>
 8001666:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	6978      	ldr	r0, [r7, #20]
 800166e:	f7ff ffb3 	bl	80015d8 <NVIC_EncodePriority>
 8001672:	4602      	mov	r2, r0
 8001674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff82 	bl	8001584 <__NVIC_SetPriority>
}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff56 	bl	8001548 <__NVIC_EnableIRQ>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016b2:	4b86      	ldr	r3, [pc, #536]	; (80018cc <HAL_GPIO_Init+0x228>)
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016b6:	e18c      	b.n	80019d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 817e 	beq.w	80019cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d005      	beq.n	80016e8 <HAL_GPIO_Init+0x44>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171e:	2201      	movs	r2, #1
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b03      	cmp	r3, #3
 8001754:	d017      	beq.n	8001786 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	69b9      	ldr	r1, [r7, #24]
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80d8 	beq.w	80019cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_GPIO_Init+0x22c>)
 800181e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001822:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <HAL_GPIO_Init+0x22c>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_GPIO_Init+0x22c>)
 800182e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_GPIO_Init+0x230>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x234>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d04a      	beq.n	80018fc <HAL_GPIO_Init+0x258>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_GPIO_Init+0x238>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02b      	beq.n	80018c6 <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_GPIO_Init+0x23c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x240>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x21a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x244>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x216>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x248>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x212>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_GPIO_Init+0x24c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x20e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_GPIO_Init+0x250>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x20a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_GPIO_Init+0x254>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x206>
 80018a6:	2309      	movs	r3, #9
 80018a8:	e029      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018aa:	230a      	movs	r3, #10
 80018ac:	e027      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e025      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e023      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e021      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e01f      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018be:	2303      	movs	r3, #3
 80018c0:	e01d      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e01b      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e019      	b.n	80018fe <HAL_GPIO_Init+0x25a>
 80018ca:	bf00      	nop
 80018cc:	58000080 	.word	0x58000080
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58000400 	.word	0x58000400
 80018d8:	58020000 	.word	0x58020000
 80018dc:	58020400 	.word	0x58020400
 80018e0:	58020800 	.word	0x58020800
 80018e4:	58020c00 	.word	0x58020c00
 80018e8:	58021000 	.word	0x58021000
 80018ec:	58021400 	.word	0x58021400
 80018f0:	58021800 	.word	0x58021800
 80018f4:	58021c00 	.word	0x58021c00
 80018f8:	58022400 	.word	0x58022400
 80018fc:	2300      	movs	r3, #0
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	f002 0203 	and.w	r2, r2, #3
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4093      	lsls	r3, r2
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800190e:	4938      	ldr	r1, [pc, #224]	; (80019f0 <HAL_GPIO_Init+0x34c>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f47f ae6b 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3724      	adds	r7, #36	; 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	58000400 	.word	0x58000400

080019f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5e:	f7ff fd11 	bl	8001484 <HAL_GetTick>
 8001a62:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e03b      	b.n	8001ae6 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001a8e:	e00f      	b.n	8001ab0 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8001a90:	f7ff fcf8 	bl	8001484 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d908      	bls.n	8001ab0 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e01a      	b.n	8001ae6 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e8      	bne.n	8001a90 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f9be 	bl	8001e40 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e03e      	b.n	8001b86 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e037      	b.n	8001b86 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d126      	bne.n	8001b78 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11c      	bne.n	8001b72 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	e00d      	b.n	8001b7c <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	e004      	b.n	8001b7c <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
 8001b76:	e001      	b.n	8001b7c <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ba0:	4b9a      	ldr	r3, [pc, #616]	; (8001e0c <HAL_MDMA_IRQHandler+0x278>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <HAL_MDMA_IRQHandler+0x27c>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b97      	ldr	r3, [pc, #604]	; (8001e14 <HAL_MDMA_IRQHandler+0x280>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8001bc6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 812e 	beq.w	8001e32 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d054      	beq.n	8001c8e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d04d      	beq.n	8001c8e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0202 	bic.w	r2, r2, #2
 8001c00:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d106      	bne.n	8001c22 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	669a      	str	r2, [r3, #104]	; 0x68
 8001c20:	e005      	b.n	8001c2e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c26:	f043 0202 	orr.w	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c52:	f043 0208 	orr.w	r2, r3, #8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c7e:	f043 0220 	orr.w	r2, r3, #32
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d012      	beq.n	8001cc2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2210      	movs	r2, #16
 8001cb0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d012      	beq.n	8001d2a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d039      	beq.n	8001dac <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d032      	beq.n	8001dac <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8001d54:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d110      	bne.n	8001d84 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d05d      	beq.n	8001e36 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
        }
        return;
 8001d82:	e058      	b.n	8001e36 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d041      	beq.n	8001e38 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2204      	movs	r2, #4
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d307      	bcc.n	8001de8 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f2      	bne.n	8001dcc <HAL_MDMA_IRQHandler+0x238>
 8001de6:	e000      	b.n	8001dea <HAL_MDMA_IRQHandler+0x256>
        break;
 8001de8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e08:	e00a      	b.n	8001e20 <HAL_MDMA_IRQHandler+0x28c>
 8001e0a:	bf00      	nop
 8001e0c:	24000228 	.word	0x24000228
 8001e10:	1b4e81b5 	.word	0x1b4e81b5
 8001e14:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	e002      	b.n	8001e38 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8001e36:	bf00      	nop
    }
  }
}
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8001e66:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8001e72:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8001e7e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8001e88:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8001e94:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8001e96:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d107      	bne.n	8001eb2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001eb0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da11      	bge.n	8001ee6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ed0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	621a      	str	r2, [r3, #32]
 8001ee4:	e006      	b.n	8001ef4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da15      	bge.n	8001f28 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f0a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	425b      	negs	r3, r3
 8001f12:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a19      	ldr	r1, [r3, #32]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	e009      	b.n	8001f3c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a19      	ldr	r1, [r3, #32]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	041a      	lsls	r2, r3, #16
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d006      	beq.n	8001f54 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
 8001f52:	e003      	b.n	8001f5c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00a      	beq.n	8001f9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01f      	b.n	8001fd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e01d      	b.n	8001fd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	490f      	ldr	r1, [pc, #60]	; (8001fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001faa:	f7ff fa6b 	bl	8001484 <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fb0:	e009      	b.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fb2:	f7ff fa67 	bl	8001484 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc0:	d901      	bls.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e007      	b.n	8001fd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	58024800 	.word	0x58024800

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e397      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8087 	beq.w	8002112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002004:	4b9e      	ldr	r3, [pc, #632]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800200e:	4b9c      	ldr	r3, [pc, #624]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	2b10      	cmp	r3, #16
 8002018:	d007      	beq.n	800202a <HAL_RCC_OscConfig+0x46>
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	2b18      	cmp	r3, #24
 800201e:	d110      	bne.n	8002042 <HAL_RCC_OscConfig+0x5e>
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d10b      	bne.n	8002042 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202a:	4b95      	ldr	r3, [pc, #596]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d06c      	beq.n	8002110 <HAL_RCC_OscConfig+0x12c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d168      	bne.n	8002110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e371      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x76>
 800204c:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a8b      	ldr	r2, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e02e      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b87      	ldr	r3, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a86      	ldr	r2, [pc, #536]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a83      	ldr	r2, [pc, #524]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0xbc>
 8002086:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7d      	ldr	r2, [pc, #500]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7a      	ldr	r2, [pc, #488]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 80020a0:	4b77      	ldr	r3, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a76      	ldr	r2, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b74      	ldr	r3, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a73      	ldr	r2, [pc, #460]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f9e0 	bl	8001484 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff f9dc 	bl	8001484 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e325      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020da:	4b69      	ldr	r3, [pc, #420]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe4>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f9cc 	bl	8001484 <HAL_GetTick>
 80020ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f9c8 	bl	8001484 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e311      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x10c>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 808a 	beq.w	8002234 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002128:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800212a:	4b55      	ldr	r3, [pc, #340]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_RCC_OscConfig+0x162>
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2b18      	cmp	r3, #24
 800213a:	d137      	bne.n	80021ac <HAL_RCC_OscConfig+0x1c8>
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d132      	bne.n	80021ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002146:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x17a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e2e3      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800215e:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0219 	bic.w	r2, r3, #25
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4945      	ldr	r1, [pc, #276]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002170:	f7ff f988 	bl	8001484 <HAL_GetTick>
 8002174:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff f984 	bl	8001484 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e2cd      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	4936      	ldr	r1, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021aa:	e043      	b.n	8002234 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d026      	beq.n	8002202 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 0219 	bic.w	r2, r3, #25
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	492f      	ldr	r1, [pc, #188]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f95d 	bl	8001484 <HAL_GetTick>
 80021ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff f959 	bl	8001484 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2a2      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	4921      	ldr	r1, [pc, #132]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e018      	b.n	8002234 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff f939 	bl	8001484 <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff f935 	bl	8001484 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e27e      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06d      	beq.n	800231c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002248:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d007      	beq.n	8002266 <HAL_RCC_OscConfig+0x282>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b18      	cmp	r3, #24
 800225a:	d11e      	bne.n	800229a <HAL_RCC_OscConfig+0x2b6>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d119      	bne.n	800229a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_RCC_OscConfig+0x2a0>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d004      	beq.n	8002284 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e253      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
 800227e:	bf00      	nop
 8002280:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002284:	4ba3      	ldr	r3, [pc, #652]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	49a0      	ldr	r1, [pc, #640]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002294:	4313      	orrs	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002298:	e040      	b.n	800231c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d023      	beq.n	80022ea <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022a2:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a9b      	ldr	r2, [pc, #620]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7ff f8e9 	bl	8001484 <HAL_GetTick>
 80022b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022b6:	f7ff f8e5 	bl	8001484 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e22e      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022c8:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	061b      	lsls	r3, r3, #24
 80022e2:	498c      	ldr	r1, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60cb      	str	r3, [r1, #12]
 80022e8:	e018      	b.n	800231c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022ea:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a89      	ldr	r2, [pc, #548]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80022f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7ff f8c5 	bl	8001484 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022fe:	f7ff f8c1 	bl	8001484 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e20a      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002310:	4b80      	ldr	r3, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d036      	beq.n	8002396 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d019      	beq.n	8002364 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002334:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7ff f8a2 	bl	8001484 <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff f89e 	bl	8001484 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1e7      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x360>
 8002362:	e018      	b.n	8002396 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7ff f888 	bl	8001484 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff f884 	bl	8001484 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1cd      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d036      	beq.n	8002410 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d019      	beq.n	80023de <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f865 	bl	8001484 <HAL_GetTick>
 80023ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023be:	f7ff f861 	bl	8001484 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e1aa      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x3da>
 80023dc:	e018      	b.n	8002410 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80023e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ea:	f7ff f84b 	bl	8001484 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023f2:	f7ff f847 	bl	8001484 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e190      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8085 	beq.w	8002528 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800241e:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <HAL_RCC_OscConfig+0x534>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3d      	ldr	r2, [pc, #244]	; (8002518 <HAL_RCC_OscConfig+0x534>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242a:	f7ff f82b 	bl	8001484 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff f827 	bl	8001484 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e170      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x534>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x482>
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_OscConfig+0x4de>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x4a4>
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a28      	ldr	r2, [pc, #160]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a25      	ldr	r2, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	e01c      	b.n	80024c2 <HAL_RCC_OscConfig+0x4de>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x4c6>
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x4de>
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe ffdb 	bl	8001484 <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe ffd7 	bl	8001484 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e11e      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_OscConfig+0x530>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ee      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4ee>
 80024f4:	e018      	b.n	8002528 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe ffc5 	bl	8001484 <HAL_GetTick>
 80024fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024fc:	e00e      	b.n	800251c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe ffc1 	bl	8001484 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d905      	bls.n	800251c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e108      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
 8002514:	58024400 	.word	0x58024400
 8002518:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800251c:	4b84      	ldr	r3, [pc, #528]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ea      	bne.n	80024fe <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80f9 	beq.w	8002724 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	2b18      	cmp	r3, #24
 800253c:	f000 80b4 	beq.w	80026a8 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 8095 	bne.w	8002674 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b79      	ldr	r3, [pc, #484]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a78      	ldr	r2, [pc, #480]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe ff95 	bl	8001484 <HAL_GetTick>
 800255a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe ff91 	bl	8001484 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0da      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257c:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800257e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002580:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x750>)
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	430a      	orrs	r2, r1
 8002590:	4967      	ldr	r1, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	628b      	str	r3, [r1, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	3b01      	subs	r3, #1
 800259c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a4:	3b01      	subs	r3, #1
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	3b01      	subs	r3, #1
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025c6:	495a      	ldr	r1, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025d8:	4b55      	ldr	r3, [pc, #340]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025dc:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_RCC_OscConfig+0x754>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025e4:	00d2      	lsls	r2, r2, #3
 80025e6:	4952      	ldr	r1, [pc, #328]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f023 020c 	bic.w	r2, r3, #12
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	f023 0202 	bic.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4949      	ldr	r1, [pc, #292]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002610:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800261c:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	4a43      	ldr	r2, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	4a40      	ldr	r2, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800262e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	4a3d      	ldr	r2, [pc, #244]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe ff1a 	bl	8001484 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe ff16 	bl	8001484 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e05f      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x670>
 8002672:	e057      	b.n	8002724 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2d      	ldr	r2, [pc, #180]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe ff00 	bl	8001484 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fefc 	bl	8001484 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e045      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x6a4>
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_OscConfig+0x74c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d031      	beq.n	8002720 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0203 	and.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d12a      	bne.n	8002720 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d122      	bne.n	8002720 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d11a      	bne.n	8002720 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0a5b      	lsrs	r3, r3, #9
 80026ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	0e1b      	lsrs	r3, r3, #24
 8002712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3730      	adds	r7, #48	; 0x30
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	58024400 	.word	0x58024400
 8002734:	fffffc0c 	.word	0xfffffc0c
 8002738:	ffff0007 	.word	0xffff0007

0800273c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e19c      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b8a      	ldr	r3, [pc, #552]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b87      	ldr	r3, [pc, #540]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	4985      	ldr	r1, [pc, #532]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b83      	ldr	r3, [pc, #524]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e184      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800279c:	4b78      	ldr	r3, [pc, #480]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4975      	ldr	r1, [pc, #468]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b70      	ldr	r3, [pc, #448]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	496a      	ldr	r1, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d908      	bls.n	800280a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	495e      	ldr	r1, [pc, #376]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002822:	429a      	cmp	r2, r3
 8002824:	d908      	bls.n	8002838 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4953      	ldr	r1, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f023 020f 	bic.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4947      	ldr	r1, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002862:	4313      	orrs	r3, r2
 8002864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d055      	beq.n	800291e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4940      	ldr	r1, [pc, #256]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002880:	4313      	orrs	r3, r2
 8002882:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0f6      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0ea      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0de      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0d6      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f023 0207 	bic.w	r2, r3, #7
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fdc9 	bl	8001484 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f4:	e00a      	b.n	800290c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe fdc5 	bl	8001484 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0be      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	429a      	cmp	r2, r3
 800291c:	d1eb      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002948:	4313      	orrs	r3, r2
 800294a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d214      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	4906      	ldr	r1, [pc, #24]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e086      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
 800297c:	52002000 	.word	0x52002000
 8002980:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800299c:	429a      	cmp	r2, r3
 800299e:	d208      	bcs.n	80029b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4939      	ldr	r1, [pc, #228]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d208      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	492e      	ldr	r1, [pc, #184]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d208      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4917      	ldr	r1, [pc, #92]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a3c:	f000 f834 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	4912      	ldr	r1, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x35c>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x35c>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x360>)
 8002a72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x364>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x368>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fb42 	bl	8001108 <HAL_InitTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
 8002a98:	0801036c 	.word	0x0801036c
 8002a9c:	2400022c 	.word	0x2400022c
 8002aa0:	24000228 	.word	0x24000228
 8002aa4:	24000230 	.word	0x24000230

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aae:	4bb3      	ldr	r3, [pc, #716]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab6:	2b18      	cmp	r3, #24
 8002ab8:	f200 8155 	bhi.w	8002d66 <HAL_RCC_GetSysClockFreq+0x2be>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002b29 	.word	0x08002b29
 8002ac8:	08002d67 	.word	0x08002d67
 8002acc:	08002d67 	.word	0x08002d67
 8002ad0:	08002d67 	.word	0x08002d67
 8002ad4:	08002d67 	.word	0x08002d67
 8002ad8:	08002d67 	.word	0x08002d67
 8002adc:	08002d67 	.word	0x08002d67
 8002ae0:	08002d67 	.word	0x08002d67
 8002ae4:	08002b4f 	.word	0x08002b4f
 8002ae8:	08002d67 	.word	0x08002d67
 8002aec:	08002d67 	.word	0x08002d67
 8002af0:	08002d67 	.word	0x08002d67
 8002af4:	08002d67 	.word	0x08002d67
 8002af8:	08002d67 	.word	0x08002d67
 8002afc:	08002d67 	.word	0x08002d67
 8002b00:	08002d67 	.word	0x08002d67
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002d67 	.word	0x08002d67
 8002b0c:	08002d67 	.word	0x08002d67
 8002b10:	08002d67 	.word	0x08002d67
 8002b14:	08002d67 	.word	0x08002d67
 8002b18:	08002d67 	.word	0x08002d67
 8002b1c:	08002d67 	.word	0x08002d67
 8002b20:	08002d67 	.word	0x08002d67
 8002b24:	08002b5b 	.word	0x08002b5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b28:	4b94      	ldr	r3, [pc, #592]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b34:	4b91      	ldr	r3, [pc, #580]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	4a90      	ldr	r2, [pc, #576]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b46:	e111      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b48:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b4a:	61bb      	str	r3, [r7, #24]
    break;
 8002b4c:	e10e      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b4e:	4b8d      	ldr	r3, [pc, #564]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b50:	61bb      	str	r3, [r7, #24]
    break;
 8002b52:	e10b      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b56:	61bb      	str	r3, [r7, #24]
    break;
 8002b58:	e108      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b5a:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b64:	4b85      	ldr	r3, [pc, #532]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b70:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b7a:	4b80      	ldr	r3, [pc, #512]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80e1 	beq.w	8002d60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	f000 8083 	beq.w	8002cac <HAL_RCC_GetSysClockFreq+0x204>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	f200 80a1 	bhi.w	8002cf0 <HAL_RCC_GetSysClockFreq+0x248>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x114>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d056      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bba:	e099      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02d      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	4a6b      	ldr	r2, [pc, #428]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c22:	e087      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002d90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c36:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c66:	e065      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002d94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002caa:	e043      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002d98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cee:	e021      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002d94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	0a5b      	lsrs	r3, r3, #9
 8002d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3e:	3301      	adds	r3, #1
 8002d40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d58:	ee17 3a90 	vmov	r3, s15
 8002d5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
    break;
 8002d64:	e002      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d68:	61bb      	str	r3, [r7, #24]
    break;
 8002d6a:	bf00      	nop
  }

  return sysclockfreq;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	03d09000 	.word	0x03d09000
 8002d84:	003d0900 	.word	0x003d0900
 8002d88:	02faf080 	.word	0x02faf080
 8002d8c:	46000000 	.word	0x46000000
 8002d90:	4c742400 	.word	0x4c742400
 8002d94:	4a742400 	.word	0x4a742400
 8002d98:	4c3ebc20 	.word	0x4c3ebc20

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002da2:	f7ff fe81 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_GetHCLKFreq+0x50>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490f      	ldr	r1, [pc, #60]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_GetHCLKFreq+0x50>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dda:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	0801036c 	.word	0x0801036c
 8002df4:	2400022c 	.word	0x2400022c
 8002df8:	24000228 	.word	0x24000228

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e00:	f7ff ffcc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4904      	ldr	r1, [pc, #16]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024400 	.word	0x58024400
 8002e24:	0801036c 	.word	0x0801036c

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e2c:	f7ff ffb6 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	0801036c 	.word	0x0801036c

08002e54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	223f      	movs	r2, #63	; 0x3f
 8002e62:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0207 	and.w	r2, r3, #7
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_GetClockConfig+0x80>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	52002000 	.word	0x52002000

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d03f      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002efc:	d02a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002efe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f02:	d824      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f08:	d018      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f0e:	d81e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f18:	d007      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f1a:	e018      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1c:	4bab      	ldr	r3, [pc, #684]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4aaa      	ldr	r2, [pc, #680]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 feff 	bl	8004d34 <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3324      	adds	r3, #36	; 0x24
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 ffa8 	bl	8004e98 <RCCEx_PLL3_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f5c:	4b9b      	ldr	r3, [pc, #620]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	4998      	ldr	r1, [pc, #608]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8002f6e:	e001      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03d      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d826      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fa5 	.word	0x08002fa5
 8002f94:	08002fb3 	.word	0x08002fb3
 8002f98:	08002fc5 	.word	0x08002fc5
 8002f9c:	08002fdd 	.word	0x08002fdd
 8002fa0:	08002fdd 	.word	0x08002fdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa4:	4b89      	ldr	r3, [pc, #548]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	4a88      	ldr	r2, [pc, #544]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fb0:	e015      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 febb 	bl	8004d34 <RCCEx_PLL2_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fc2:	e00c      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 ff64 	bl	8004e98 <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002fda:	e000      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	f023 0207 	bic.w	r2, r3, #7
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	4976      	ldr	r1, [pc, #472]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d051      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800300e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003012:	d036      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003014:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003018:	d830      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800301a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800301e:	d032      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003024:	d82a      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003026:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800302a:	d02e      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800302c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003030:	d824      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d018      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303c:	d81e      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003046:	d007      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003048:	e018      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304a:	4b60      	ldr	r3, [pc, #384]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	4a5f      	ldr	r2, [pc, #380]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003056:	e019      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fe68 	bl	8004d34 <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003068:	e010      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f001 ff11 	bl	8004e98 <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800307a:	e007      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
      break;
 8003080:	e004      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003082:	bf00      	nop
 8003084:	e002      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800308a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030a0:	494a      	ldr	r1, [pc, #296]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	658b      	str	r3, [r1, #88]	; 0x58
 80030a6:	e001      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d051      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030be:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80030c2:	d036      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80030c4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80030c8:	d830      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ce:	d032      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80030d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d4:	d82a      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030da:	d02e      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80030dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030e0:	d824      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030e6:	d018      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80030e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ec:	d81e      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x222>
 80030f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f6:	d007      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80030f8:	e018      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	4a33      	ldr	r2, [pc, #204]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003106:	e019      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f001 fe10 	bl	8004d34 <RCCEx_PLL2_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003118:	e010      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3324      	adds	r3, #36	; 0x24
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f001 feb9 	bl	8004e98 <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800312a:	e007      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	75fb      	strb	r3, [r7, #23]
      break;
 8003130:	e004      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800313a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003150:	491e      	ldr	r1, [pc, #120]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	658b      	str	r3, [r1, #88]	; 0x58
 8003156:	e001      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d035      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	2b30      	cmp	r3, #48	; 0x30
 800316e:	d01c      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003170:	2b30      	cmp	r3, #48	; 0x30
 8003172:	d817      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d00c      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003178:	2b20      	cmp	r3, #32
 800317a:	d813      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d016      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003180:	2b10      	cmp	r3, #16
 8003182:	d10f      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a10      	ldr	r2, [pc, #64]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800318a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003190:	e00e      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3304      	adds	r3, #4
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f001 fdcb 	bl	8004d34 <RCCEx_PLL2_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80031a2:	e005      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
      break;
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80031ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	4902      	ldr	r1, [pc, #8]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80031ca:	bf00      	nop
 80031cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d047      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e8:	d030      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80031ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ee:	d82a      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80031f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031f4:	d02c      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80031f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031fa:	d824      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80031fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003200:	d018      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003206:	d81e      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003210:	d007      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003212:	e018      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003214:	4bac      	ldr	r3, [pc, #688]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	4aab      	ldr	r2, [pc, #684]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800321a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003220:	e017      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f001 fd83 	bl	8004d34 <RCCEx_PLL2_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003232:	e00e      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3324      	adds	r3, #36	; 0x24
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f001 fe2c 	bl	8004e98 <RCCEx_PLL3_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003244:	e005      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003258:	4b9b      	ldr	r3, [pc, #620]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4998      	ldr	r1, [pc, #608]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	650b      	str	r3, [r1, #80]	; 0x50
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d049      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d02e      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328a:	d828      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x406>
 800328c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003290:	d02a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003292:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003296:	d822      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003298:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800329c:	d026      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x414>
 800329e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032a2:	d81c      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x406>
 80032a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a8:	d010      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80032aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ae:	d816      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x406>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01d      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b8:	d111      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 fd37 	bl	8004d34 <RCCEx_PLL2_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032ca:	e012      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3324      	adds	r3, #36	; 0x24
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fde0 	bl	8004e98 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032dc:	e009      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
      break;
 80032e2:	e006      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80032e4:	bf00      	nop
 80032e6:	e004      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80032e8:	bf00      	nop
 80032ea:	e002      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80032ec:	bf00      	nop
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80032f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032f8:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	4970      	ldr	r1, [pc, #448]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	650b      	str	r3, [r1, #80]	; 0x50
 800330a:	e001      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d04b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003326:	d02e      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800332c:	d828      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d02a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d822      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800333a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800333e:	d026      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003340:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003344:	d81c      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334a:	d010      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003350:	d816      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01d      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335a:	d111      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fce6 	bl	8004d34 <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800336c:	e012      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f001 fd8f 	bl	8004e98 <RCCEx_PLL3_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800337e:	e009      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	e006      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800339a:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033a8:	4947      	ldr	r1, [pc, #284]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	658b      	str	r3, [r1, #88]	; 0x58
 80033ae:	e001      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c8:	d00e      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80033ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ce:	d814      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d015      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80033d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d8:	d10f      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80033e6:	e00c      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	2101      	movs	r1, #1
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fca0 	bl	8004d34 <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80033f8:	e003      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      break;
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003408:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	492c      	ldr	r1, [pc, #176]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	650b      	str	r3, [r1, #80]	; 0x50
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d032      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	2b03      	cmp	r3, #3
 8003432:	d81b      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003473 	.word	0x08003473
 8003440:	0800344d 	.word	0x0800344d
 8003444:	0800345b 	.word	0x0800345b
 8003448:	08003473 	.word	0x08003473
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003458:	e00c      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fc67 	bl	8004d34 <RCCEx_PLL2_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800346a:	e003      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	75fb      	strb	r3, [r7, #23]
      break;
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4910      	ldr	r1, [pc, #64]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 808a 	beq.w	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ac:	f7fd ffea 	bl	8001484 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034b2:	e00d      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fd ffe6 	bl	8001484 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d906      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	75fb      	strb	r3, [r7, #23]
        break;
 80034c6:	e009      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80034c8:	58024400 	.word	0x58024400
 80034cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d0:	4bb9      	ldr	r3, [pc, #740]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0eb      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d166      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034e2:	4bb6      	ldr	r3, [pc, #728]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034ec:	4053      	eors	r3, r2
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d013      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f6:	4bb1      	ldr	r3, [pc, #708]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003500:	4bae      	ldr	r3, [pc, #696]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4aad      	ldr	r2, [pc, #692]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800350c:	4bab      	ldr	r3, [pc, #684]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4aaa      	ldr	r2, [pc, #680]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003518:	4aa8      	ldr	r2, [pc, #672]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003528:	d115      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd ffab 	bl	8001484 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003530:	e00b      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fd ffa7 	bl	8001484 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d902      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	75fb      	strb	r3, [r7, #23]
            break;
 8003548:	e005      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800354a:	4b9c      	ldr	r3, [pc, #624]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ed      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d126      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356a:	d10d      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800356c:	4b93      	ldr	r3, [pc, #588]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800357a:	0919      	lsrs	r1, r3, #4
 800357c:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800357e:	400b      	ands	r3, r1
 8003580:	498e      	ldr	r1, [pc, #568]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	610b      	str	r3, [r1, #16]
 8003586:	e005      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003588:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4a8b      	ldr	r2, [pc, #556]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800358e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003592:	6113      	str	r3, [r2, #16]
 8003594:	4b89      	ldr	r3, [pc, #548]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	4986      	ldr	r1, [pc, #536]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	670b      	str	r3, [r1, #112]	; 0x70
 80035a8:	e004      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	75bb      	strb	r3, [r7, #22]
 80035ae:	e001      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d07e      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	2b28      	cmp	r3, #40	; 0x28
 80035c6:	d867      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80035c8:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	0800369f 	.word	0x0800369f
 80035d4:	08003699 	.word	0x08003699
 80035d8:	08003699 	.word	0x08003699
 80035dc:	08003699 	.word	0x08003699
 80035e0:	08003699 	.word	0x08003699
 80035e4:	08003699 	.word	0x08003699
 80035e8:	08003699 	.word	0x08003699
 80035ec:	08003699 	.word	0x08003699
 80035f0:	08003675 	.word	0x08003675
 80035f4:	08003699 	.word	0x08003699
 80035f8:	08003699 	.word	0x08003699
 80035fc:	08003699 	.word	0x08003699
 8003600:	08003699 	.word	0x08003699
 8003604:	08003699 	.word	0x08003699
 8003608:	08003699 	.word	0x08003699
 800360c:	08003699 	.word	0x08003699
 8003610:	08003687 	.word	0x08003687
 8003614:	08003699 	.word	0x08003699
 8003618:	08003699 	.word	0x08003699
 800361c:	08003699 	.word	0x08003699
 8003620:	08003699 	.word	0x08003699
 8003624:	08003699 	.word	0x08003699
 8003628:	08003699 	.word	0x08003699
 800362c:	08003699 	.word	0x08003699
 8003630:	0800369f 	.word	0x0800369f
 8003634:	08003699 	.word	0x08003699
 8003638:	08003699 	.word	0x08003699
 800363c:	08003699 	.word	0x08003699
 8003640:	08003699 	.word	0x08003699
 8003644:	08003699 	.word	0x08003699
 8003648:	08003699 	.word	0x08003699
 800364c:	08003699 	.word	0x08003699
 8003650:	0800369f 	.word	0x0800369f
 8003654:	08003699 	.word	0x08003699
 8003658:	08003699 	.word	0x08003699
 800365c:	08003699 	.word	0x08003699
 8003660:	08003699 	.word	0x08003699
 8003664:	08003699 	.word	0x08003699
 8003668:	08003699 	.word	0x08003699
 800366c:	08003699 	.word	0x08003699
 8003670:	0800369f 	.word	0x0800369f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fb5a 	bl	8004d34 <RCCEx_PLL2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003684:	e00c      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3324      	adds	r3, #36	; 0x24
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fc03 	bl	8004e98 <RCCEx_PLL3_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
      break;
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800369e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036a6:	4b45      	ldr	r3, [pc, #276]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4942      	ldr	r1, [pc, #264]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	654b      	str	r3, [r1, #84]	; 0x54
 80036b8:	e001      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d037      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d820      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	0800371b 	.word	0x0800371b
 80036dc:	080036f1 	.word	0x080036f1
 80036e0:	08003703 	.word	0x08003703
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fb1c 	bl	8004d34 <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003700:	e00c      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3324      	adds	r3, #36	; 0x24
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fbc5 	bl	8004e98 <RCCEx_PLL3_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003712:	e003      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
      break;
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800371a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f023 0207 	bic.w	r2, r3, #7
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4923      	ldr	r1, [pc, #140]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	654b      	str	r3, [r1, #84]	; 0x54
 8003734:	e001      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d040      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374c:	2b05      	cmp	r3, #5
 800374e:	d821      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800379b 	.word	0x0800379b
 800375c:	08003771 	.word	0x08003771
 8003760:	08003783 	.word	0x08003783
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800379b 	.word	0x0800379b
 800376c:	0800379b 	.word	0x0800379b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fadc 	bl	8004d34 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003780:	e00c      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f001 fb85 	bl	8004e98 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003792:	e003      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
      break;
 8003798:	e000      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800379a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d110      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b0:	4902      	ldr	r1, [pc, #8]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	658b      	str	r3, [r1, #88]	; 0x58
 80037b6:	e007      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80037b8:	58024800 	.word	0x58024800
 80037bc:	58024400 	.word	0x58024400
 80037c0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d04b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037de:	d02e      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e4:	d828      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d02a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d822      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80037f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037f6:	d026      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80037f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037fc:	d81c      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80037fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003802:	d010      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003808:	d816      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01d      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800380e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003812:	d111      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fa8a 	bl	8004d34 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003824:	e012      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3324      	adds	r3, #36	; 0x24
 800382a:	2102      	movs	r1, #2
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fb33 	bl	8004e98 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003836:	e009      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800383e:	bf00      	nop
 8003840:	e004      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800384a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003852:	4bb2      	ldr	r3, [pc, #712]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	49ae      	ldr	r1, [pc, #696]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003862:	4313      	orrs	r3, r2
 8003864:	654b      	str	r3, [r1, #84]	; 0x54
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d04b      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003882:	d02e      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003884:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003888:	d828      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d02a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d822      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800389a:	d026      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800389c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a0:	d81c      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80038a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a6:	d010      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ac:	d816      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01d      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d111      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 fa38 	bl	8004d34 <RCCEx_PLL2_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038c8:	e012      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3324      	adds	r3, #36	; 0x24
 80038ce:	2102      	movs	r1, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fae1 	bl	8004e98 <RCCEx_PLL3_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038da:	e009      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
      break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80038ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038f6:	4b89      	ldr	r3, [pc, #548]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003904:	4985      	ldr	r1, [pc, #532]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003906:	4313      	orrs	r3, r2
 8003908:	658b      	str	r3, [r1, #88]	; 0x58
 800390a:	e001      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	d04b      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003922:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003926:	d02e      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003928:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800392c:	d828      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003932:	d02a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003938:	d822      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800393a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800393e:	d026      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003940:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003944:	d81c      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394a:	d010      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800394c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003950:	d816      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01d      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395a:	d111      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f001 f9e6 	bl	8004d34 <RCCEx_PLL2_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800396c:	e012      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3324      	adds	r3, #36	; 0x24
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fa8f 	bl	8004e98 <RCCEx_PLL3_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800397e:	e009      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
      break;
 8003984:	e006      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003986:	bf00      	nop
 8003988:	e004      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800398a:	bf00      	nop
 800398c:	e002      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800399a:	4b60      	ldr	r3, [pc, #384]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a8:	495c      	ldr	r1, [pc, #368]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	658b      	str	r3, [r1, #88]	; 0x58
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c8:	d10a      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3324      	adds	r3, #36	; 0x24
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fa61 	bl	8004e98 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80039e0:	4b4e      	ldr	r3, [pc, #312]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ec:	494b      	ldr	r1, [pc, #300]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a08:	d10a      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 fa41 	bl	8004e98 <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a20:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	493b      	ldr	r1, [pc, #236]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d034      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a4a:	d01d      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a50:	d817      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d009      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a5c:	e011      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f965 	bl	8004d34 <RCCEx_PLL2_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a6e:	e00c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3324      	adds	r3, #36	; 0x24
 8003a74:	2102      	movs	r1, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fa0e 	bl	8004e98 <RCCEx_PLL3_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
      break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a90:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a9e:	491f      	ldr	r1, [pc, #124]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8003aa4:	e001      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ac0:	d01c      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003ac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ac6:	d816      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ad2:	d007      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003ad4:	e00f      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ae2:	e00c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 f9d4 	bl	8004e98 <RCCEx_PLL3_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
      break;
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b12:	4902      	ldr	r1, [pc, #8]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	654b      	str	r3, [r1, #84]	; 0x54
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003b1a:	bf00      	nop
 8003b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d029      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d007      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b40:	4b61      	ldr	r3, [pc, #388]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4a60      	ldr	r2, [pc, #384]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b4c:	e00b      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2102      	movs	r1, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 f8ed 	bl	8004d34 <RCCEx_PLL2_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
      break;
 8003b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b6c:	4b56      	ldr	r3, [pc, #344]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b78:	4953      	ldr	r1, [pc, #332]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b7e:	e001      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3324      	adds	r3, #36	; 0x24
 8003b94:	2102      	movs	r1, #2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 f97e 	bl	8004e98 <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d030      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d017      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc0:	d811      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bcc:	d80b      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4a3a      	ldr	r2, [pc, #232]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003be4:	e007      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bea:	e004      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003bec:	bf00      	nop
 8003bee:	e002      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c08:	492f      	ldr	r1, [pc, #188]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	654b      	str	r3, [r1, #84]	; 0x54
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c20:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	4926      	ldr	r1, [pc, #152]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4a:	491f      	ldr	r1, [pc, #124]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c66:	6113      	str	r3, [r2, #16]
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c72:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da08      	bge.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cac:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003cb2:	7dbb      	ldrb	r3, [r7, #22]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400

08003ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b090      	sub	sp, #64	; 0x40
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cda:	f040 8089 	bne.w	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003cde:	4b95      	ldr	r3, [pc, #596]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d87d      	bhi.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003de5 	.word	0x08003de5
 8003d04:	08003d75 	.word	0x08003d75

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d08:	4b8a      	ldr	r3, [pc, #552]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d14:	d107      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 feb8 	bl	8004a90 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003d24:	e3ed      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d2a:	e3ea      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d2c:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d38:	d107      	bne.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d3a:	f107 0318 	add.w	r3, r7, #24
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fbfe 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003d48:	e3db      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d4e:	e3d8      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d50:	4b78      	ldr	r3, [pc, #480]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fd40 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003d6c:	e3c9      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d72:	e3c6      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003d74:	4b6f      	ldr	r3, [pc, #444]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d90:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	4a67      	ldr	r2, [pc, #412]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da2:	e01e      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003da4:	4b63      	ldr	r3, [pc, #396]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003dba:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbe:	e010      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003dc0:	4b5c      	ldr	r3, [pc, #368]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd4:	d102      	bne.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003dd6:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dda:	e002      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003de0:	e38f      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8003de2:	e38e      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003de4:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003de8:	e38b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dee:	e388      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	f040 80a7 	bne.w	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003dfa:	4b4e      	ldr	r3, [pc, #312]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e0a:	d054      	beq.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e12:	f200 808b 	bhi.w	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e1c:	f000 8083 	beq.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e26:	f200 8081 	bhi.w	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e30:	d02f      	beq.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e38:	d878      	bhi.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e46:	d012      	beq.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8003e48:	e070      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e56:	d107      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fe17 	bl	8004a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e66:	e34c      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e6c:	e349      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e7c:	f107 0318 	add.w	r3, r7, #24
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb5d 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e8a:	e33a      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e90:	e337      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fc9f 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003eae:	e328      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003eb4:	e325      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003eb6:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	08db      	lsrs	r3, r3, #3
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee4:	e01e      	b.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efa:	d102      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	e010      	b.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f16:	d102      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f1c:	e002      	b.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003f22:	e2ee      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8003f24:	e2ed      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f2a:	e2ea      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f30:	e2e7      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8003f32:	bf00      	nop
 8003f34:	58024400 	.word	0x58024400
 8003f38:	03d09000 	.word	0x03d09000
 8003f3c:	003d0900 	.word	0x003d0900
 8003f40:	02faf080 	.word	0x02faf080
 8003f44:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4e:	f040 809c 	bne.w	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003f52:	4b9e      	ldr	r3, [pc, #632]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003f5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f62:	d054      	beq.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f6a:	f200 808b 	bhi.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f74:	f000 8083 	beq.w	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f7e:	f200 8081 	bhi.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f88:	d02f      	beq.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f90:	d878      	bhi.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f9e:	d012      	beq.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8003fa0:	e070      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fa2:	4b8a      	ldr	r3, [pc, #552]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fd6b 	bl	8004a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003fbe:	e2a0      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fc4:	e29d      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fc6:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fd4:	f107 0318 	add.w	r3, r7, #24
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fab1 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003fe2:	e28e      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fe8:	e28b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff6:	d107      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fbf3 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004006:	e27c      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800400c:	e279      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800400e:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004016:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004018:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b04      	cmp	r3, #4
 8004022:	d10c      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800402a:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	08db      	lsrs	r3, r3, #3
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	4a66      	ldr	r2, [pc, #408]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004036:	fa22 f303 	lsr.w	r3, r2, r3
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	e01e      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d106      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004052:	d102      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004054:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004058:	e010      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800405a:	4b5c      	ldr	r3, [pc, #368]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004066:	d106      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406e:	d102      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004074:	e002      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800407a:	e242      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800407c:	e241      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800407e:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004082:	e23e      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004088:	e23b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	f040 80a6 	bne.w	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004094:	4b4d      	ldr	r3, [pc, #308]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a4:	d054      	beq.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ac:	f200 808b 	bhi.w	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040b6:	f000 8083 	beq.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040c0:	f200 8081 	bhi.w	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d02f      	beq.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d878      	bhi.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d012      	beq.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80040e2:	e070      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040e4:	4b39      	ldr	r3, [pc, #228]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f0:	d107      	bne.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fcca 	bl	8004a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004100:	e1ff      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004106:	e1fc      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004108:	4b30      	ldr	r3, [pc, #192]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004114:	d107      	bne.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004116:	f107 0318 	add.w	r3, r7, #24
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fa10 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004124:	e1ed      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800412a:	e1ea      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004138:	d107      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb52 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004148:	e1db      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800414e:	e1d8      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004158:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800415a:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b04      	cmp	r3, #4
 8004164:	d10c      	bne.n	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800417e:	e01e      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418c:	d106      	bne.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004194:	d102      	bne.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419a:	e010      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a8:	d106      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80041aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d102      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b6:	e002      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80041bc:	e1a1      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80041be:	e1a0      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041c4:	e19d      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041ca:	e19a      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80041cc:	58024400 	.word	0x58024400
 80041d0:	03d09000 	.word	0x03d09000
 80041d4:	003d0900 	.word	0x003d0900
 80041d8:	02faf080 	.word	0x02faf080
 80041dc:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041e6:	d173      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80041e8:	4b9a      	ldr	r3, [pc, #616]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f8:	d02f      	beq.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004200:	d863      	bhi.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d012      	beq.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004210:	e05b      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004212:	4b90      	ldr	r3, [pc, #576]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421e:	d107      	bne.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004220:	f107 0318 	add.w	r3, r7, #24
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f98b 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800422e:	e168      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004234:	e165      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004236:	4b87      	ldr	r3, [pc, #540]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004242:	d107      	bne.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	4618      	mov	r0, r3
 800424a:	f000 facd 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004252:	e156      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004258:	e153      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800425a:	4b7e      	ldr	r3, [pc, #504]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004262:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004264:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d10c      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004276:	4b77      	ldr	r3, [pc, #476]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004288:	e01e      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800428a:	4b72      	ldr	r3, [pc, #456]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004296:	d106      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429e:	d102      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80042a0:	4b6e      	ldr	r3, [pc, #440]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a4:	e010      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042a6:	4b6b      	ldr	r3, [pc, #428]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ba:	d102      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80042bc:	4b68      	ldr	r3, [pc, #416]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80042c6:	e11c      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80042c8:	e11b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042ce:	e118      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d6:	d133      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80042da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80042f0:	e023      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042f2:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042fe:	d107      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fbc3 	bl	8004a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800430e:	e0f8      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004314:	e0f5      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004316:	4b4f      	ldr	r3, [pc, #316]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004322:	d107      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f909 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004332:	e0e6      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004338:	e0e3      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800433e:	e0e0      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004346:	f040 808d 	bne.w	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800434a:	4b42      	ldr	r3, [pc, #264]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435a:	d06b      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004362:	d874      	bhi.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d056      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800436c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d86c      	bhi.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800437a:	d03b      	beq.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004382:	d864      	bhi.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438a:	d021      	beq.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004392:	d85c      	bhi.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a0:	d004      	beq.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80043a2:	e054      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80043a4:	f000 f8b6 	bl	8004514 <HAL_RCCEx_GetD3PCLK1Freq>
 80043a8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80043aa:	e0aa      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043ac:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b8:	d107      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8be 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80043c8:	e09b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043ce:	e098      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043dc:	d107      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa00 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80043ec:	e089      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043f2:	e086      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d109      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004412:	e076      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004418:	e073      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004426:	d102      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800442c:	e069      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004432:	e066      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004440:	d102      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004446:	e05c      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800444c:	e059      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004452:	e056      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004454:	58024400 	.word	0x58024400
 8004458:	03d09000 	.word	0x03d09000
 800445c:	003d0900 	.word	0x003d0900
 8004460:	02faf080 	.word	0x02faf080
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446a:	d148      	bne.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800447c:	d02a      	beq.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004484:	d838      	bhi.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004492:	d00d      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004494:	e030      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a2:	d102      	bne.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80044a8:	e02b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044ae:	e028      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044bc:	d107      	bne.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fae4 	bl	8004a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80044cc:	e019      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044d2:	e016      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044d4:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e0:	d107      	bne.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044e2:	f107 0318 	add.w	r3, r7, #24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f82a 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80044f0:	e007      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044fc:	e001      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004504:	4618      	mov	r0, r3
 8004506:	3740      	adds	r7, #64	; 0x40
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	58024400 	.word	0x58024400
 8004510:	02faf080 	.word	0x02faf080

08004514 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004518:	f7fe fc40 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4904      	ldr	r1, [pc, #16]	; (800453c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	58024400 	.word	0x58024400
 800453c:	0801036c 	.word	0x0801036c

08004540 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004548:	4ba1      	ldr	r3, [pc, #644]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004552:	4b9f      	ldr	r3, [pc, #636]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	0b1b      	lsrs	r3, r3, #12
 8004558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800455e:	4b9c      	ldr	r3, [pc, #624]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800456a:	4b99      	ldr	r3, [pc, #612]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	08db      	lsrs	r3, r3, #3
 8004570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8111 	beq.w	80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b02      	cmp	r3, #2
 8004592:	f000 8083 	beq.w	800469c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b02      	cmp	r3, #2
 800459a:	f200 80a1 	bhi.w	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d056      	beq.n	8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045aa:	e099      	b.n	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ac:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02d      	beq.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b8:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	08db      	lsrs	r3, r3, #3
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	4a84      	ldr	r2, [pc, #528]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004612:	e087      	b.n	8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004626:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	ed97 6a03 	vldr	s12, [r7, #12]
 800463a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800463e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004656:	e065      	b.n	8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466a:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467a:	ed97 6a03 	vldr	s12, [r7, #12]
 800467e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800469a:	e043      	b.n	8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046de:	e021      	b.n	8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f2:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004702:	ed97 6a03 	vldr	s12, [r7, #12]
 8004706:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004722:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004724:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	0a5b      	lsrs	r3, r3, #9
 800472a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800473e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474a:	ee17 2a90 	vmov	r2, s15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004752:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	0c1b      	lsrs	r3, r3, #16
 8004758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800476c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004778:	ee17 2a90 	vmov	r2, s15
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	0e1b      	lsrs	r3, r3, #24
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479a:	edd7 6a07 	vldr	s13, [r7, #28]
 800479e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a6:	ee17 2a90 	vmov	r2, s15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	bf00      	nop
 80047c4:	3724      	adds	r7, #36	; 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
 80047d4:	03d09000 	.word	0x03d09000
 80047d8:	46000000 	.word	0x46000000
 80047dc:	4c742400 	.word	0x4c742400
 80047e0:	4a742400 	.word	0x4a742400
 80047e4:	4c3ebc20 	.word	0x4c3ebc20

080047e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f0:	4ba1      	ldr	r3, [pc, #644]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047fa:	4b9f      	ldr	r3, [pc, #636]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	0d1b      	lsrs	r3, r3, #20
 8004800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004804:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004806:	4b9c      	ldr	r3, [pc, #624]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004812:	4b99      	ldr	r3, [pc, #612]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8111 	beq.w	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f000 8083 	beq.w	8004944 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b02      	cmp	r3, #2
 8004842:	f200 80a1 	bhi.w	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d056      	beq.n	8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004852:	e099      	b.n	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004854:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02d      	beq.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004860:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	4a84      	ldr	r2, [pc, #528]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b7b      	ldr	r3, [pc, #492]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048ba:	e087      	b.n	80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048fe:	e065      	b.n	80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800490e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004912:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004922:	ed97 6a03 	vldr	s12, [r7, #12]
 8004926:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800492a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004942:	e043      	b.n	80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004956:	4b48      	ldr	r3, [pc, #288]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	ed97 6a03 	vldr	s12, [r7, #12]
 800496a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800496e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004986:	e021      	b.n	80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049cc:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f2:	ee17 2a90 	vmov	r2, s15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a20:	ee17 2a90 	vmov	r2, s15
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4e:	ee17 2a90 	vmov	r2, s15
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a56:	e008      	b.n	8004a6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
}
 8004a6a:	bf00      	nop
 8004a6c:	3724      	adds	r7, #36	; 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	03d09000 	.word	0x03d09000
 8004a80:	46000000 	.word	0x46000000
 8004a84:	4c742400 	.word	0x4c742400
 8004a88:	4a742400 	.word	0x4a742400
 8004a8c:	4c3ebc20 	.word	0x4c3ebc20

08004a90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a98:	4ba0      	ldr	r3, [pc, #640]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004aa2:	4b9e      	ldr	r3, [pc, #632]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004aae:	4b9b      	ldr	r3, [pc, #620]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ab8:	4b98      	ldr	r3, [pc, #608]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	08db      	lsrs	r3, r3, #3
 8004abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8111 	beq.w	8004cfe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	f000 8083 	beq.w	8004bea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	f200 80a1 	bhi.w	8004c2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d056      	beq.n	8004ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004af8:	e099      	b.n	8004c2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afa:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02d      	beq.n	8004b62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b06:	4b85      	ldr	r3, [pc, #532]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	4a83      	ldr	r2, [pc, #524]	; (8004d20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b30:	4b7a      	ldr	r3, [pc, #488]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b60:	e087      	b.n	8004c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004d28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b74:	4b69      	ldr	r3, [pc, #420]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b84:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba4:	e065      	b.n	8004c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb8:	4b58      	ldr	r3, [pc, #352]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bcc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004be8:	e043      	b.n	8004c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c10:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2c:	e021      	b.n	8004c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c38:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004d28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c40:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c50:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	0a5b      	lsrs	r3, r3, #9
 8004c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c98:	ee17 2a90 	vmov	r2, s15
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc6:	ee17 2a90 	vmov	r2, s15
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	0e1b      	lsrs	r3, r3, #24
 8004cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 2a90 	vmov	r2, s15
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]
}
 8004d10:	bf00      	nop
 8004d12:	3724      	adds	r7, #36	; 0x24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	03d09000 	.word	0x03d09000
 8004d24:	46000000 	.word	0x46000000
 8004d28:	4c742400 	.word	0x4c742400
 8004d2c:	4a742400 	.word	0x4a742400
 8004d30:	4c3ebc20 	.word	0x4c3ebc20

08004d34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d42:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d101      	bne.n	8004d52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e099      	b.n	8004e86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d52:	4b4f      	ldr	r3, [pc, #316]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4e      	ldr	r2, [pc, #312]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5e:	f7fc fb91 	bl	8001484 <HAL_GetTick>
 8004d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d66:	f7fc fb8d 	bl	8001484 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e086      	b.n	8004e86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d78:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d84:	4b42      	ldr	r3, [pc, #264]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	493f      	ldr	r1, [pc, #252]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	628b      	str	r3, [r1, #40]	; 0x28
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	025b      	lsls	r3, r3, #9
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dc8:	4931      	ldr	r1, [pc, #196]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	492d      	ldr	r1, [pc, #180]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004de0:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f023 0220 	bic.w	r2, r3, #32
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	4928      	ldr	r1, [pc, #160]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004df2:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	f023 0310 	bic.w	r3, r3, #16
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <RCCEx_PLL2_Config+0x160>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	69d2      	ldr	r2, [r2, #28]
 8004e0a:	00d2      	lsls	r2, r2, #3
 8004e0c:	4920      	ldr	r1, [pc, #128]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e12:	4b1f      	ldr	r3, [pc, #124]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	f043 0310 	orr.w	r3, r3, #16
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e30:	e00f      	b.n	8004e52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e44:	e005      	b.n	8004e52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fc fb11 	bl	8001484 <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e64:	e008      	b.n	8004e78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e66:	f7fc fb0d 	bl	8001484 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e006      	b.n	8004e86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	58024400 	.word	0x58024400
 8004e94:	ffff0007 	.word	0xffff0007

08004e98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ea6:	4b53      	ldr	r3, [pc, #332]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d101      	bne.n	8004eb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e099      	b.n	8004fea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eb6:	4b4f      	ldr	r3, [pc, #316]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4e      	ldr	r2, [pc, #312]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fadf 	bl	8001484 <HAL_GetTick>
 8004ec6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004eca:	f7fc fadb 	bl	8001484 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e086      	b.n	8004fea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004edc:	4b45      	ldr	r3, [pc, #276]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ee8:	4b42      	ldr	r3, [pc, #264]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	051b      	lsls	r3, r3, #20
 8004ef6:	493f      	ldr	r1, [pc, #252]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	628b      	str	r3, [r1, #40]	; 0x28
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	025b      	lsls	r3, r3, #9
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f2c:	4931      	ldr	r1, [pc, #196]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f32:	4b30      	ldr	r3, [pc, #192]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	492d      	ldr	r1, [pc, #180]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f44:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	4928      	ldr	r1, [pc, #160]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f56:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <RCCEx_PLL3_Config+0x160>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	69d2      	ldr	r2, [r2, #28]
 8004f6e:	00d2      	lsls	r2, r2, #3
 8004f70:	4920      	ldr	r1, [pc, #128]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f76:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f94:	e00f      	b.n	8004fb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f9c:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fa8:	e005      	b.n	8004fb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fc fa5f 	bl	8001484 <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc8:	e008      	b.n	8004fdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fca:	f7fc fa5b 	bl	8001484 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e006      	b.n	8004fea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	ffff0007 	.word	0xffff0007

08004ffc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e075      	b.n	80050fa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fb ff77 	bl	8000f14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f868 	bl	8005104 <HAL_SD_InitCard>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e05d      	b.n	80050fa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fda7 	bl	8005b98 <HAL_SD_GetCardStatus>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e052      	b.n	80050fa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005054:	7e3b      	ldrb	r3, [r7, #24]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800505a:	7e7b      	ldrb	r3, [r7, #25]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10a      	bne.n	800507e <HAL_SD_Init+0x82>
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <HAL_SD_Init+0x78>
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507a:	659a      	str	r2, [r3, #88]	; 0x58
 800507c:	e00b      	b.n	8005096 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	2b01      	cmp	r3, #1
 8005084:	d104      	bne.n	8005090 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800508c:	659a      	str	r2, [r3, #88]	; 0x58
 800508e:	e002      	b.n	8005096 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fe65 	bl	8005d6c <HAL_SD_ConfigWideBusOperation>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e026      	b.n	80050fa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80050ac:	f7fc f9ea 	bl	8001484 <HAL_GetTick>
 80050b0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80050b2:	e011      	b.n	80050d8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80050b4:	f7fc f9e6 	bl	8001484 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d109      	bne.n	80050d8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050ca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e010      	b.n	80050fa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 ff59 	bl	8005f90 <HAL_SD_GetCardState>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d1e7      	bne.n	80050b4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3728      	adds	r7, #40	; 0x28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b08d      	sub	sp, #52	; 0x34
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005120:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005124:	f7fe fdd2 	bl	8003ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8005128:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800513e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e06a      	b.n	800521a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	4a36      	ldr	r2, [pc, #216]	; (8005224 <HAL_SD_InitCard+0x120>)
 800514a:	fba2 2303 	umull	r2, r3, r2, r3
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	466a      	mov	r2, sp
 8005158:	f107 0318 	add.w	r3, r7, #24
 800515c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005160:	e882 0003 	stmia.w	r2, {r0, r1}
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800516a:	4620      	mov	r0, r4
 800516c:	f002 fffc 	bl	8008168 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f003 f83f 	bl	80081f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005186:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_SD_InitCard+0x124>)
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	3301      	adds	r3, #1
 8005190:	4618      	mov	r0, r3
 8005192:	f7fc f983 	bl	800149c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 ffe8 	bl	800616c <SD_PowerON>
 800519c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e02e      	b.n	800521a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 ff07 	bl	8005fd0 <SD_InitCard>
 80051c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e01b      	b.n	800521a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 f89a 	bl	8008324 <SDMMC_CmdBlockLength>
 80051f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00f      	beq.n	8005218 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a0b      	ldr	r2, [pc, #44]	; (800522c <HAL_SD_InitCard+0x128>)
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	372c      	adds	r7, #44	; 0x2c
 800521e:	46bd      	mov	sp, r7
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	bf00      	nop
 8005224:	014f8b59 	.word	0x014f8b59
 8005228:	00012110 	.word	0x00012110
 800522c:	1fe00fff 	.word	0x1fe00fff

08005230 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	; 0x30
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d107      	bne.n	8005258 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e08d      	b.n	8005374 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 8086 	bne.w	8005372 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800526c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	429a      	cmp	r2, r3
 8005278:	d907      	bls.n	800528a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e074      	b.n	8005374 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2203      	movs	r2, #3
 800528e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	025a      	lsls	r2, r3, #9
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d002      	beq.n	80052b6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	025b      	lsls	r3, r3, #9
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	025b      	lsls	r3, r3, #9
 80052c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80052c2:	2390      	movs	r3, #144	; 0x90
 80052c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80052c6:	2302      	movs	r3, #2
 80052c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f107 0210 	add.w	r2, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f002 fff5 	bl	80082cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2201      	movs	r2, #1
 8005300:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d90a      	bls.n	800531e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2282      	movs	r2, #130	; 0x82
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005314:	4618      	mov	r0, r3
 8005316:	f003 f84b 	bl	80083b0 <SDMMC_CmdReadMultiBlock>
 800531a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800531c:	e009      	b.n	8005332 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2281      	movs	r2, #129	; 0x81
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800532a:	4618      	mov	r0, r3
 800532c:	f003 f81d 	bl	800836a <SDMMC_CmdReadSingleBlock>
 8005330:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a0f      	ldr	r2, [pc, #60]	; (800537c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	431a      	orrs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e00a      	b.n	8005374 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3730      	adds	r7, #48	; 0x30
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	1fe00fff 	.word	0x1fe00fff

08005380 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e08d      	b.n	80054c4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 8086 	bne.w	80054c2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d907      	bls.n	80053da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e074      	b.n	80054c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	025a      	lsls	r2, r3, #9
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d002      	beq.n	8005406 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	025b      	lsls	r3, r3, #9
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295
 800540a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	025b      	lsls	r3, r3, #9
 8005410:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005412:	2390      	movs	r3, #144	; 0x90
 8005414:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f107 0210 	add.w	r2, r7, #16
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f002 ff4d 	bl	80082cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005440:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d90a      	bls.n	800546e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	22a0      	movs	r2, #160	; 0xa0
 800545c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005464:	4618      	mov	r0, r3
 8005466:	f002 ffe9 	bl	800843c <SDMMC_CmdWriteMultiBlock>
 800546a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800546c:	e009      	b.n	8005482 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2290      	movs	r2, #144	; 0x90
 8005472:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547a:	4618      	mov	r0, r3
 800547c:	f002 ffbb 	bl	80083f6 <SDMMC_CmdWriteSingleBlock>
 8005480:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d012      	beq.n	80054ae <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0f      	ldr	r2, [pc, #60]	; (80054cc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	431a      	orrs	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00a      	b.n	80054c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e000      	b.n	80054c4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
  }
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3730      	adds	r7, #48	; 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	1fe00fff 	.word	0x1fe00fff

080054d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_SD_IRQHandler+0x2e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f924 	bl	8006744 <SD_Read_IT>
 80054fc:	e19a      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80ac 	beq.w	8005666 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005516:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b9d      	ldr	r3, [pc, #628]	; (8005798 <HAL_SD_IRQHandler+0x2c8>)
 8005524:	400b      	ands	r3, r1
 8005526:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005546:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d038      	beq.n	80055c4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_SD_IRQHandler+0x96>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d011      	beq.n	800558a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f002 ff8a 	bl	8008484 <SDMMC_CmdStopTransfer>
 8005570:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f959 	bl	800583c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a83      	ldr	r2, [pc, #524]	; (800579c <HAL_SD_IRQHandler+0x2cc>)
 8005590:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_SD_IRQHandler+0xe4>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f003 fc3d 	bl	8008e34 <HAL_SD_RxCpltCallback>
 80055ba:	e13b      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f003 fc2f 	bl	8008e20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80055c2:	e137      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8132 	beq.w	8005834 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2200      	movs	r2, #0
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2200      	movs	r2, #0
 80055e6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <HAL_SD_IRQHandler+0x12c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d011      	beq.n	8005620 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f002 ff3f 	bl	8008484 <SDMMC_CmdStopTransfer>
 8005606:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f90e 	bl	800583c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <HAL_SD_IRQHandler+0x172>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f003 fbec 	bl	8008e20 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d105      	bne.n	800565e <HAL_SD_IRQHandler+0x18e>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80eb 	beq.w	8005834 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f003 fbe8 	bl	8008e34 <HAL_SD_RxCpltCallback>
}
 8005664:	e0e6      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_SD_IRQHandler+0x1b6>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 f8a6 	bl	80067d0 <SD_Write_IT>
 8005684:	e0d6      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80a2 	beq.w	80057da <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	f043 0202 	orr.w	r2, r3, #2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	f043 0208 	orr.w	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	f043 0210 	orr.w	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <HAL_SD_IRQHandler+0x2cc>)
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005714:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005724:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005744:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f002 fe9a 	bl	8008484 <SDMMC_CmdStopTransfer>
 8005750:	4602      	mov	r2, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800576a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f854 	bl	800583c <HAL_SD_ErrorCallback>
}
 8005794:	e04e      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
 8005796:	bf00      	nop
 8005798:	ffff3ec5 	.word	0xffff3ec5
 800579c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d044      	beq.n	8005834 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d040      	beq.n	8005834 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f832 	bl	800583c <HAL_SD_ErrorCallback>
}
 80057d8:	e02c      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d025      	beq.n	8005834 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10c      	bne.n	800581a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 f848 	bl	80068a0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005810:	e010      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 f830 	bl	8006878 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005818:	e00c      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 f831 	bl	800688c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800582a:	e003      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 f819 	bl	8006864 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005832:	e7ff      	b.n	8005834 <HAL_SD_IRQHandler+0x364>
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585e:	0f9b      	lsrs	r3, r3, #30
 8005860:	b2da      	uxtb	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586a:	0e9b      	lsrs	r3, r3, #26
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	b2da      	uxtb	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	0e1b      	lsrs	r3, r3, #24
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	b2da      	uxtb	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	b2da      	uxtb	r2, r3
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b2da      	uxtb	r2, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b0:	0d1b      	lsrs	r3, r3, #20
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ce:	0bdb      	lsrs	r3, r3, #15
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e0:	0b9b      	lsrs	r3, r3, #14
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	0b5b      	lsrs	r3, r3, #13
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005904:	0b1b      	lsrs	r3, r3, #12
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2200      	movs	r2, #0
 8005916:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d163      	bne.n	80059e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005924:	009a      	lsls	r2, r3, #2
 8005926:	f640 73fc 	movw	r3, #4092	; 0xffc
 800592a:	4013      	ands	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005930:	0f92      	lsrs	r2, r2, #30
 8005932:	431a      	orrs	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800593c:	0edb      	lsrs	r3, r3, #27
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	b2da      	uxtb	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594e:	0e1b      	lsrs	r3, r3, #24
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	b2da      	uxtb	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005960:	0d5b      	lsrs	r3, r3, #21
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	b2da      	uxtb	r2, r3
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005972:	0c9b      	lsrs	r3, r3, #18
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	b2da      	uxtb	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005984:	0bdb      	lsrs	r3, r3, #15
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	b2da      	uxtb	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	7e1b      	ldrb	r3, [r3, #24]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	3302      	adds	r3, #2
 80059a8:	2201      	movs	r2, #1
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059b2:	fb02 f203 	mul.w	r2, r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	7a1b      	ldrb	r3, [r3, #8]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	2201      	movs	r2, #1
 80059c6:	409a      	lsls	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80059d4:	0a52      	lsrs	r2, r2, #9
 80059d6:	fb02 f203 	mul.w	r2, r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
 80059e6:	e031      	b.n	8005a4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d11d      	bne.n	8005a2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	431a      	orrs	r2, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	029a      	lsls	r2, r3, #10
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a20:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
 8005a2a:	e00f      	b.n	8005a4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a58      	ldr	r2, [pc, #352]	; (8005b94 <HAL_SD_GetCardCSD+0x344>)
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e09d      	b.n	8005b88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a50:	0b9b      	lsrs	r3, r3, #14
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a62:	09db      	lsrs	r3, r3, #7
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a84:	0fdb      	lsrs	r3, r3, #31
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a90:	0f5b      	lsrs	r3, r3, #29
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa2:	0e9b      	lsrs	r3, r3, #26
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab4:	0d9b      	lsrs	r3, r3, #22
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac6:	0d5b      	lsrs	r3, r3, #21
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af6:	0bdb      	lsrs	r3, r3, #15
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b0a:	0b9b      	lsrs	r3, r3, #14
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1e:	0b5b      	lsrs	r3, r3, #13
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b32:	0b1b      	lsrs	r3, r3, #12
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b46:	0a9b      	lsrs	r3, r3, #10
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	1fe00fff 	.word	0x1fe00fff

08005b98 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b094      	sub	sp, #80	; 0x50
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d101      	bne.n	8005bb8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0a7      	b.n	8005d08 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005bb8:	f107 0308 	add.w	r3, r7, #8
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb62 	bl	8006288 <SD_SendSDStatus>
 8005bc4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a4f      	ldr	r2, [pc, #316]	; (8005d10 <HAL_SD_GetCardStatus+0x178>)
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005bee:	e070      	b.n	8005cd2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	0e1b      	lsrs	r3, r3, #24
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	061a      	lsls	r2, r3, #24
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c36:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c40:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	0e1b      	lsrs	r3, r3, #24
 8005c46:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	0a1b      	lsrs	r3, r3, #8
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	0d1b      	lsrs	r3, r3, #20
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	0a9b      	lsrs	r3, r3, #10
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	0e1b      	lsrs	r3, r3, #24
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f002 fb22 	bl	8008324 <SDMMC_CmdBlockLength>
 8005ce0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <HAL_SD_GetCardStatus+0x178>)
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005d04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3750      	adds	r7, #80	; 0x50
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	1fe00fff 	.word	0x1fe00fff

08005d14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b08d      	sub	sp, #52	; 0x34
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2203      	movs	r2, #3
 8005d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d02e      	beq.n	8005dee <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d96:	d106      	bne.n	8005da6 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	635a      	str	r2, [r3, #52]	; 0x34
 8005da4:	e029      	b.n	8005dfa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dac:	d10a      	bne.n	8005dc4 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb62 	bl	8006478 <SD_WideBus_Enable>
 8005db4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8005dc2:	e01a      	b.n	8005dfa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fb9f 	bl	800650e <SD_WideBus_Disable>
 8005dd0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8005dde:	e00c      	b.n	8005dfa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34
 8005dec:	e005      	b.n	8005dfa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5e      	ldr	r2, [pc, #376]	; (8005f80 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e10:	e094      	b.n	8005f3c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005e12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005e16:	f7fd ff59 	bl	8003ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8005e1a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8083 	beq.w	8005f2a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	4950      	ldr	r1, [pc, #320]	; (8005f84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e42:	fba1 1303 	umull	r1, r3, r1, r3
 8005e46:	0e1b      	lsrs	r3, r3, #24
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d303      	bcc.n	8005e54 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	e05a      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5c:	d103      	bne.n	8005e66 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e051      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6e:	d126      	bne.n	8005ebe <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10e      	bne.n	8005e96 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	4a43      	ldr	r2, [pc, #268]	; (8005f88 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d906      	bls.n	8005e8e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	4a40      	ldr	r2, [pc, #256]	; (8005f84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e84:	fba2 2303 	umull	r2, r3, r2, r3
 8005e88:	0e5b      	lsrs	r3, r3, #25
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e03d      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	e039      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	4a39      	ldr	r2, [pc, #228]	; (8005f88 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d906      	bls.n	8005eb6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	4a36      	ldr	r2, [pc, #216]	; (8005f84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	e029      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e025      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10e      	bne.n	8005ee4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	4a30      	ldr	r2, [pc, #192]	; (8005f8c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d906      	bls.n	8005edc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	0e1b      	lsrs	r3, r3, #24
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e016      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e012      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	6a3a      	ldr	r2, [r7, #32]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d906      	bls.n	8005f04 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0e1b      	lsrs	r3, r3, #24
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e002      	b.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	466a      	mov	r2, sp
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f18:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f22:	4620      	mov	r0, r4
 8005f24:	f002 f920 	bl	8008168 <SDMMC_Init>
 8005f28:	e008      	b.n	8005f3c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f44:	4618      	mov	r0, r3
 8005f46:	f002 f9ed 	bl	8008324 <SDMMC_CmdBlockLength>
 8005f4a:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a0a      	ldr	r2, [pc, #40]	; (8005f80 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	372c      	adds	r7, #44	; 0x2c
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd90      	pop	{r4, r7, pc}
 8005f80:	1fe00fff 	.word	0x1fe00fff
 8005f84:	55e63b89 	.word	0x55e63b89
 8005f88:	02faf080 	.word	0x02faf080
 8005f8c:	017d7840 	.word	0x017d7840

08005f90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f9c:	f107 030c 	add.w	r3, r7, #12
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa40 	bl	8006428 <SD_SendStatus>
 8005fa8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	0a5b      	lsrs	r3, r3, #9
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fc6:	693b      	ldr	r3, [r7, #16]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b090      	sub	sp, #64	; 0x40
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005fdc:	f7fb fa52 	bl	8001484 <HAL_GetTick>
 8005fe0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 f917 	bl	800821a <SDMMC_GetPowerState>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ff2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ff6:	e0b5      	b.n	8006164 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d02e      	beq.n	800605e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f002 fb62 	bl	80086ce <SDMMC_CmdSendCID>
 800600a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <SD_InitCard+0x46>
    {
      return errorstate;
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	e0a6      	b.n	8006164 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f002 f942 	bl	80082a6 <SDMMC_GetResponse>
 8006022:	4602      	mov	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2104      	movs	r1, #4
 800602e:	4618      	mov	r0, r3
 8006030:	f002 f939 	bl	80082a6 <SDMMC_GetResponse>
 8006034:	4602      	mov	r2, r0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2108      	movs	r1, #8
 8006040:	4618      	mov	r0, r3
 8006042:	f002 f930 	bl	80082a6 <SDMMC_GetResponse>
 8006046:	4602      	mov	r2, r0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	210c      	movs	r1, #12
 8006052:	4618      	mov	r0, r3
 8006054:	f002 f927 	bl	80082a6 <SDMMC_GetResponse>
 8006058:	4602      	mov	r2, r0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	2b03      	cmp	r3, #3
 8006064:	d01d      	beq.n	80060a2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006066:	e019      	b.n	800609c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f107 020a 	add.w	r2, r7, #10
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f002 fb6a 	bl	800874c <SDMMC_CmdSetRelAdd>
 8006078:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	e06f      	b.n	8006164 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006084:	f7fb f9fe 	bl	8001484 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3287 	movw	r2, #4999	; 0x1387
 8006092:	4293      	cmp	r3, r2
 8006094:	d902      	bls.n	800609c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006096:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800609a:	e063      	b.n	8006164 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800609c:	897b      	ldrh	r3, [r7, #10]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0e2      	beq.n	8006068 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d036      	beq.n	8006118 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80060aa:	897b      	ldrh	r3, [r7, #10]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	041b      	lsls	r3, r3, #16
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f002 fb24 	bl	800870c <SDMMC_CmdSendCSD>
 80060c4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <SD_InitCard+0x100>
    {
      return errorstate;
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	e049      	b.n	8006164 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 f8e5 	bl	80082a6 <SDMMC_GetResponse>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2104      	movs	r1, #4
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 f8dc 	bl	80082a6 <SDMMC_GetResponse>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2108      	movs	r1, #8
 80060fa:	4618      	mov	r0, r3
 80060fc:	f002 f8d3 	bl	80082a6 <SDMMC_GetResponse>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	210c      	movs	r1, #12
 800610c:	4618      	mov	r0, r3
 800610e:	f002 f8ca 	bl	80082a6 <SDMMC_GetResponse>
 8006112:	4602      	mov	r2, r0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2104      	movs	r1, #4
 800611e:	4618      	mov	r0, r3
 8006120:	f002 f8c1 	bl	80082a6 <SDMMC_GetResponse>
 8006124:	4603      	mov	r3, r0
 8006126:	0d1a      	lsrs	r2, r3, #20
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fb8c 	bl	8005850 <HAL_SD_GetCardCSD>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800613e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006142:	e00f      	b.n	8006164 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f002 f9d3 	bl	80084fc <SDMMC_CmdSelDesel>
 8006156:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <SD_InitCard+0x192>
  {
    return errorstate;
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	e000      	b.n	8006164 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3740      	adds	r7, #64	; 0x40
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f002 f9dc 	bl	8008542 <SDMMC_CmdGoIdleState>
 800618a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	e072      	b.n	800627c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f002 f9ef 	bl	800857e <SDMMC_CmdOperCond>
 80061a0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a8:	d10d      	bne.n	80061c6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f002 f9c4 	bl	8008542 <SDMMC_CmdGoIdleState>
 80061ba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <SD_PowerON+0x60>
    {
      return errorstate;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	e05a      	b.n	800627c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d137      	bne.n	8006244 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f002 f9ef 	bl	80085be <SDMMC_CmdAppCommand>
 80061e0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02d      	beq.n	8006244 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061ec:	e046      	b.n	800627c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2100      	movs	r1, #0
 80061f4:	4618      	mov	r0, r3
 80061f6:	f002 f9e2 	bl	80085be <SDMMC_CmdAppCommand>
 80061fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <SD_PowerON+0x9a>
    {
      return errorstate;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	e03a      	b.n	800627c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	491e      	ldr	r1, [pc, #120]	; (8006284 <SD_PowerON+0x118>)
 800620c:	4618      	mov	r0, r3
 800620e:	f002 f9f9 	bl	8008604 <SDMMC_CmdAppOperCommand>
 8006212:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800621a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800621e:	e02d      	b.n	800627c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f002 f83d 	bl	80082a6 <SDMMC_GetResponse>
 800622c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	0fdb      	lsrs	r3, r3, #31
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <SD_PowerON+0xce>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <SD_PowerON+0xd0>
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]

    count++;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	3301      	adds	r3, #1
 8006242:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800624a:	4293      	cmp	r3, r2
 800624c:	d802      	bhi.n	8006254 <SD_PowerON+0xe8>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0cc      	beq.n	80061ee <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800625a:	4293      	cmp	r3, r2
 800625c:	d902      	bls.n	8006264 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800625e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006262:	e00b      	b.n	800627c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	c1100000 	.word	0xc1100000

08006288 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08c      	sub	sp, #48	; 0x30
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006292:	f7fb f8f7 	bl	8001484 <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 ffff 	bl	80082a6 <SDMMC_GetResponse>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b2:	d102      	bne.n	80062ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80062b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b8:	e0b0      	b.n	800641c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2140      	movs	r1, #64	; 0x40
 80062c0:	4618      	mov	r0, r3
 80062c2:	f002 f82f 	bl	8008324 <SDMMC_CmdBlockLength>
 80062c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	e0a0      	b.n	800641c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f002 f969 	bl	80085be <SDMMC_CmdAppCommand>
 80062ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	e08d      	b.n	800641c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006306:	2340      	movs	r3, #64	; 0x40
 8006308:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800630a:	2360      	movs	r3, #96	; 0x60
 800630c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800630e:	2302      	movs	r3, #2
 8006310:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006316:	2301      	movs	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f107 0208 	add.w	r2, r7, #8
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f001 ffd1 	bl	80082cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f002 fa51 	bl	80087d6 <SDMMC_CmdStatusRegister>
 8006334:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d02b      	beq.n	8006394 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	e069      	b.n	800641c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d013      	beq.n	800637e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006356:	2300      	movs	r3, #0
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635a:	e00d      	b.n	8006378 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f001 ff2b 	bl	80081bc <SDMMC_ReadFIFO>
 8006366:	4602      	mov	r2, r0
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	601a      	str	r2, [r3, #0]
        pData++;
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	3304      	adds	r3, #4
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	3301      	adds	r3, #1
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	2b07      	cmp	r3, #7
 800637c:	d9ee      	bls.n	800635c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800637e:	f7fb f881 	bl	8001484 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d102      	bne.n	8006394 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800638e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006392:	e043      	b.n	800641c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0d2      	beq.n	8006348 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063b0:	2308      	movs	r3, #8
 80063b2:	e033      	b.n	800641c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063c2:	2302      	movs	r3, #2
 80063c4:	e02a      	b.n	800641c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80063d4:	2320      	movs	r3, #32
 80063d6:	e021      	b.n	800641c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 feed 	bl	80081bc <SDMMC_ReadFIFO>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	601a      	str	r2, [r3, #0]
    pData++;
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	3304      	adds	r3, #4
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80063ee:	f7fb f849 	bl	8001484 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d102      	bne.n	8006404 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80063fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006402:	e00b      	b.n	800641c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e2      	bne.n	80063d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a03      	ldr	r2, [pc, #12]	; (8006424 <SD_SendSDStatus+0x19c>)
 8006418:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3730      	adds	r7, #48	; 0x30
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	18000f3a 	.word	0x18000f3a

08006428 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006438:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800643c:	e018      	b.n	8006470 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	041b      	lsls	r3, r3, #16
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f002 f9a0 	bl	8008790 <SDMMC_CmdSendStatus>
 8006450:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	e009      	b.n	8006470 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f001 ff1f 	bl	80082a6 <SDMMC_GetResponse>
 8006468:	4602      	mov	r2, r0
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 ff09 	bl	80082a6 <SDMMC_GetResponse>
 8006494:	4603      	mov	r3, r0
 8006496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800649e:	d102      	bne.n	80064a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064a4:	e02f      	b.n	8006506 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064a6:	f107 030c 	add.w	r3, r7, #12
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f879 	bl	80065a4 <SD_FindSCR>
 80064b2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	e023      	b.n	8006506 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01c      	beq.n	8006502 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f002 f872 	bl	80085be <SDMMC_CmdAppCommand>
 80064da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e00f      	b.n	8006506 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2102      	movs	r1, #2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f002 f8a9 	bl	8008644 <SDMMC_CmdBusWidth>
 80064f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	e003      	b.n	8006506 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064fe:	2300      	movs	r3, #0
 8006500:	e001      	b.n	8006506 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006502:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f001 febe 	bl	80082a6 <SDMMC_GetResponse>
 800652a:	4603      	mov	r3, r0
 800652c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006534:	d102      	bne.n	800653c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800653a:	e02f      	b.n	800659c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800653c:	f107 030c 	add.w	r3, r7, #12
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f82e 	bl	80065a4 <SD_FindSCR>
 8006548:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	e023      	b.n	800659c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01c      	beq.n	8006598 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f002 f827 	bl	80085be <SDMMC_CmdAppCommand>
 8006570:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	e00f      	b.n	800659c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f002 f85e 	bl	8008644 <SDMMC_CmdBusWidth>
 8006588:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	e003      	b.n	800659c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006594:	2300      	movs	r3, #0
 8006596:	e001      	b.n	800659c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08e      	sub	sp, #56	; 0x38
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065ae:	f7fa ff69 	bl	8001484 <HAL_GetTick>
 80065b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80065b8:	2300      	movs	r3, #0
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2108      	movs	r1, #8
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 feaa 	bl	8008324 <SDMMC_CmdBlockLength>
 80065d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	e0ad      	b.n	8006738 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f001 ffe8 	bl	80085be <SDMMC_CmdAppCommand>
 80065ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	e09e      	b.n	8006738 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006600:	2308      	movs	r3, #8
 8006602:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006604:	2330      	movs	r3, #48	; 0x30
 8006606:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006608:	2302      	movs	r3, #2
 800660a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800660c:	2300      	movs	r3, #0
 800660e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006610:	2301      	movs	r3, #1
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f107 0210 	add.w	r2, r7, #16
 800661c:	4611      	mov	r1, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fe54 	bl	80082cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f002 f82e 	bl	800868a <SDMMC_CmdSendSCR>
 800662e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d027      	beq.n	8006686 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	e07e      	b.n	8006738 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d113      	bne.n	8006670 <SD_FindSCR+0xcc>
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fdb2 	bl	80081bc <SDMMC_ReadFIFO>
 8006658:	4603      	mov	r3, r0
 800665a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f001 fdab 	bl	80081bc <SDMMC_ReadFIFO>
 8006666:	4603      	mov	r3, r0
 8006668:	60fb      	str	r3, [r7, #12]
      index++;
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	3301      	adds	r3, #1
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006670:	f7fa ff08 	bl	8001484 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d102      	bne.n	8006686 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006684:	e058      	b.n	8006738 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668c:	f240 532a 	movw	r3, #1322	; 0x52a
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0d1      	beq.n	800663a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2208      	movs	r2, #8
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066ac:	2308      	movs	r3, #8
 80066ae:	e043      	b.n	8006738 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2202      	movs	r2, #2
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066c6:	2302      	movs	r3, #2
 80066c8:	e036      	b.n	8006738 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2220      	movs	r2, #32
 80066de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066e0:	2320      	movs	r3, #32
 80066e2:	e029      	b.n	8006738 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a15      	ldr	r2, [pc, #84]	; (8006740 <SD_FindSCR+0x19c>)
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	061a      	lsls	r2, r3, #24
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006702:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	0e1b      	lsrs	r3, r3, #24
 8006708:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	601a      	str	r2, [r3, #0]
    scr++;
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	3304      	adds	r3, #4
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	061a      	lsls	r2, r3, #24
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006720:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800672a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	0e1b      	lsrs	r3, r3, #24
 8006730:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3738      	adds	r7, #56	; 0x38
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	18000f3a 	.word	0x18000f3a

08006744 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	2b1f      	cmp	r3, #31
 8006758:	d936      	bls.n	80067c8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e027      	b.n	80067b0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fd29 	bl	80081bc <SDMMC_ReadFIFO>
 800676a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	b2da      	uxtb	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	3301      	adds	r3, #1
 8006788:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	0c1b      	lsrs	r3, r3, #16
 800678e:	b2da      	uxtb	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3301      	adds	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	0e1b      	lsrs	r3, r3, #24
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	3301      	adds	r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	3301      	adds	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b07      	cmp	r3, #7
 80067b4:	d9d4      	bls.n	8006760 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	f1a3 0220 	sub.w	r2, r3, #32
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80067c8:	bf00      	nop
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	2b1f      	cmp	r3, #31
 80067e4:	d93a      	bls.n	800685c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e02b      	b.n	8006844 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3301      	adds	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	021a      	lsls	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	3301      	adds	r3, #1
 8006808:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	041a      	lsls	r2, r3, #16
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3301      	adds	r3, #1
 800681a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	061a      	lsls	r2, r3, #24
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	3301      	adds	r3, #1
 800682c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f107 020c 	add.w	r2, r7, #12
 8006836:	4611      	mov	r1, r2
 8006838:	4618      	mov	r0, r3
 800683a:	f001 fccc 	bl	80081d6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	3301      	adds	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b07      	cmp	r3, #7
 8006848:	d9d0      	bls.n	80067ec <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f1a3 0220 	sub.w	r2, r3, #32
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	621a      	str	r2, [r3, #32]
  }
}
 800685c:	bf00      	nop
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e049      	b.n	800695a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f841 	bl	8006962 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f000 fa0e 	bl	8006d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d001      	beq.n	8006990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e05e      	b.n	8006a4e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <HAL_TIM_Base_Start_IT+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d02c      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ba:	d027      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a27      	ldr	r2, [pc, #156]	; (8006a60 <HAL_TIM_Base_Start_IT+0xe8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d022      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a26      	ldr	r2, [pc, #152]	; (8006a64 <HAL_TIM_Base_Start_IT+0xec>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d01d      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <HAL_TIM_Base_Start_IT+0xf0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a23      	ldr	r2, [pc, #140]	; (8006a6c <HAL_TIM_Base_Start_IT+0xf4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a21      	ldr	r2, [pc, #132]	; (8006a70 <HAL_TIM_Base_Start_IT+0xf8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <HAL_TIM_Base_Start_IT+0xfc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <HAL_TIM_Base_Start_IT+0x100>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x94>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <HAL_TIM_Base_Start_IT+0x104>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d115      	bne.n	8006a38 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <HAL_TIM_Base_Start_IT+0x108>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b06      	cmp	r3, #6
 8006a1c:	d015      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0xd2>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a24:	d011      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a36:	e008      	b.n	8006a4a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e000      	b.n	8006a4c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40001800 	.word	0x40001800
 8006a74:	40014000 	.word	0x40014000
 8006a78:	4000e000 	.word	0x4000e000
 8006a7c:	4000e400 	.word	0x4000e400
 8006a80:	00010007 	.word	0x00010007

08006a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d122      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0202 	mvn.w	r2, #2
 8006ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f905 	bl	8006cd6 <HAL_TIM_IC_CaptureCallback>
 8006acc:	e005      	b.n	8006ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8f7 	bl	8006cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f908 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d122      	bne.n	8006b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d11b      	bne.n	8006b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0204 	mvn.w	r2, #4
 8006b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f8db 	bl	8006cd6 <HAL_TIM_IC_CaptureCallback>
 8006b20:	e005      	b.n	8006b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f8cd 	bl	8006cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8de 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d122      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d11b      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0208 	mvn.w	r2, #8
 8006b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f8b1 	bl	8006cd6 <HAL_TIM_IC_CaptureCallback>
 8006b74:	e005      	b.n	8006b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8a3 	bl	8006cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f8b4 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d122      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d11b      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0210 	mvn.w	r2, #16
 8006bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f887 	bl	8006cd6 <HAL_TIM_IC_CaptureCallback>
 8006bc8:	e005      	b.n	8006bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f879 	bl	8006cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f88a 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10e      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d107      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0201 	mvn.w	r2, #1
 8006c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fa f93c 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b80      	cmp	r3, #128	; 0x80
 8006c14:	d10e      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d107      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f920 	bl	8006e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c42:	d10e      	bne.n	8006c62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d107      	bne.n	8006c62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f913 	bl	8006e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d10e      	bne.n	8006c8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d107      	bne.n	8006c8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f838 	bl	8006cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d10e      	bne.n	8006cba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d107      	bne.n	8006cba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f06f 0220 	mvn.w	r2, #32
 8006cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f8d3 	bl	8006e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a44      	ldr	r2, [pc, #272]	; (8006e38 <TIM_Base_SetConfig+0x124>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d013      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d32:	d00f      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a41      	ldr	r2, [pc, #260]	; (8006e3c <TIM_Base_SetConfig+0x128>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00b      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a40      	ldr	r2, [pc, #256]	; (8006e40 <TIM_Base_SetConfig+0x12c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a3f      	ldr	r2, [pc, #252]	; (8006e44 <TIM_Base_SetConfig+0x130>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a3e      	ldr	r2, [pc, #248]	; (8006e48 <TIM_Base_SetConfig+0x134>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d108      	bne.n	8006d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a33      	ldr	r2, [pc, #204]	; (8006e38 <TIM_Base_SetConfig+0x124>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d027      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d74:	d023      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a30      	ldr	r2, [pc, #192]	; (8006e3c <TIM_Base_SetConfig+0x128>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01f      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2f      	ldr	r2, [pc, #188]	; (8006e40 <TIM_Base_SetConfig+0x12c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01b      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2e      	ldr	r2, [pc, #184]	; (8006e44 <TIM_Base_SetConfig+0x130>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d017      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <TIM_Base_SetConfig+0x134>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <TIM_Base_SetConfig+0x138>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00f      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <TIM_Base_SetConfig+0x13c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00b      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <TIM_Base_SetConfig+0x140>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d007      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a29      	ldr	r2, [pc, #164]	; (8006e58 <TIM_Base_SetConfig+0x144>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d003      	beq.n	8006dbe <TIM_Base_SetConfig+0xaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <TIM_Base_SetConfig+0x148>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d108      	bne.n	8006dd0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <TIM_Base_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00f      	beq.n	8006e1c <TIM_Base_SetConfig+0x108>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a12      	ldr	r2, [pc, #72]	; (8006e48 <TIM_Base_SetConfig+0x134>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <TIM_Base_SetConfig+0x108>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <TIM_Base_SetConfig+0x138>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_Base_SetConfig+0x108>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a10      	ldr	r2, [pc, #64]	; (8006e50 <TIM_Base_SetConfig+0x13c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_Base_SetConfig+0x108>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a0f      	ldr	r2, [pc, #60]	; (8006e54 <TIM_Base_SetConfig+0x140>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d103      	bne.n	8006e24 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	615a      	str	r2, [r3, #20]
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40000800 	.word	0x40000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	40010400 	.word	0x40010400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800
 8006e58:	4000e000 	.word	0x4000e000
 8006e5c:	4000e400 	.word	0x4000e400

08006e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e042      	b.n	8006f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fa f8bb 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	; 0x24
 8006eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f82c 	bl	8006f3c <UART_SetConfig>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e022      	b.n	8006f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fe7e 	bl	8007bf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 ff05 	bl	8007d3c <UART_CheckIdleState>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	b5b0      	push	{r4, r5, r7, lr}
 8006f3e:	b08e      	sub	sp, #56	; 0x38
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4bbf      	ldr	r3, [pc, #764]	; (8007268 <UART_SetConfig+0x32c>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4ab5      	ldr	r2, [pc, #724]	; (800726c <UART_SetConfig+0x330>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	4bb0      	ldr	r3, [pc, #704]	; (8007270 <UART_SetConfig+0x334>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	f023 010f 	bic.w	r1, r3, #15
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4aa7      	ldr	r2, [pc, #668]	; (8007274 <UART_SetConfig+0x338>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d176      	bne.n	80070c8 <UART_SetConfig+0x18c>
 8006fda:	4ba7      	ldr	r3, [pc, #668]	; (8007278 <UART_SetConfig+0x33c>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe2:	2b28      	cmp	r3, #40	; 0x28
 8006fe4:	d86c      	bhi.n	80070c0 <UART_SetConfig+0x184>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <UART_SetConfig+0xb0>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007091 	.word	0x08007091
 8006ff0:	080070c1 	.word	0x080070c1
 8006ff4:	080070c1 	.word	0x080070c1
 8006ff8:	080070c1 	.word	0x080070c1
 8006ffc:	080070c1 	.word	0x080070c1
 8007000:	080070c1 	.word	0x080070c1
 8007004:	080070c1 	.word	0x080070c1
 8007008:	080070c1 	.word	0x080070c1
 800700c:	08007099 	.word	0x08007099
 8007010:	080070c1 	.word	0x080070c1
 8007014:	080070c1 	.word	0x080070c1
 8007018:	080070c1 	.word	0x080070c1
 800701c:	080070c1 	.word	0x080070c1
 8007020:	080070c1 	.word	0x080070c1
 8007024:	080070c1 	.word	0x080070c1
 8007028:	080070c1 	.word	0x080070c1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070c1 	.word	0x080070c1
 8007034:	080070c1 	.word	0x080070c1
 8007038:	080070c1 	.word	0x080070c1
 800703c:	080070c1 	.word	0x080070c1
 8007040:	080070c1 	.word	0x080070c1
 8007044:	080070c1 	.word	0x080070c1
 8007048:	080070c1 	.word	0x080070c1
 800704c:	080070a9 	.word	0x080070a9
 8007050:	080070c1 	.word	0x080070c1
 8007054:	080070c1 	.word	0x080070c1
 8007058:	080070c1 	.word	0x080070c1
 800705c:	080070c1 	.word	0x080070c1
 8007060:	080070c1 	.word	0x080070c1
 8007064:	080070c1 	.word	0x080070c1
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070b1 	.word	0x080070b1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070c1 	.word	0x080070c1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e326      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e322      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e31e      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ae:	e31a      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b6:	e316      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070be:	e312      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c6:	e30e      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6b      	ldr	r2, [pc, #428]	; (800727c <UART_SetConfig+0x340>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d130      	bne.n	8007134 <UART_SetConfig+0x1f8>
 80070d2:	4b69      	ldr	r3, [pc, #420]	; (8007278 <UART_SetConfig+0x33c>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d826      	bhi.n	800712c <UART_SetConfig+0x1f0>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <UART_SetConfig+0x1a8>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	08007115 	.word	0x08007115
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007102:	e2f0      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710a:	e2ec      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e2e8      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711a:	e2e4      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800711c:	2320      	movs	r3, #32
 800711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007122:	e2e0      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800712a:	e2dc      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007132:	e2d8      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a51      	ldr	r2, [pc, #324]	; (8007280 <UART_SetConfig+0x344>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d130      	bne.n	80071a0 <UART_SetConfig+0x264>
 800713e:	4b4e      	ldr	r3, [pc, #312]	; (8007278 <UART_SetConfig+0x33c>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b05      	cmp	r3, #5
 8007148:	d826      	bhi.n	8007198 <UART_SetConfig+0x25c>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x214>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007169 	.word	0x08007169
 8007154:	08007171 	.word	0x08007171
 8007158:	08007179 	.word	0x08007179
 800715c:	08007181 	.word	0x08007181
 8007160:	08007189 	.word	0x08007189
 8007164:	08007191 	.word	0x08007191
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e2ba      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007176:	e2b6      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e2b2      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e2ae      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718e:	e2aa      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007196:	e2a6      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e2a2      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a37      	ldr	r2, [pc, #220]	; (8007284 <UART_SetConfig+0x348>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d130      	bne.n	800720c <UART_SetConfig+0x2d0>
 80071aa:	4b33      	ldr	r3, [pc, #204]	; (8007278 <UART_SetConfig+0x33c>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d826      	bhi.n	8007204 <UART_SetConfig+0x2c8>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x280>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071fd 	.word	0x080071fd
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071da:	e284      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e2:	e280      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ea:	e27c      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f2:	e278      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80071f4:	2320      	movs	r3, #32
 80071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fa:	e274      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007202:	e270      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720a:	e26c      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <UART_SetConfig+0x34c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d142      	bne.n	800729c <UART_SetConfig+0x360>
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <UART_SetConfig+0x33c>)
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b05      	cmp	r3, #5
 8007220:	d838      	bhi.n	8007294 <UART_SetConfig+0x358>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x2ec>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007241 	.word	0x08007241
 800722c:	08007249 	.word	0x08007249
 8007230:	08007251 	.word	0x08007251
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	0800728d 	.word	0x0800728d
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007246:	e24e      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724e:	e24a      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007256:	e246      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725e:	e242      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007266:	e23e      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007268:	cfff69f3 	.word	0xcfff69f3
 800726c:	58000c00 	.word	0x58000c00
 8007270:	11fff4ff 	.word	0x11fff4ff
 8007274:	40011000 	.word	0x40011000
 8007278:	58024400 	.word	0x58024400
 800727c:	40004400 	.word	0x40004400
 8007280:	40004800 	.word	0x40004800
 8007284:	40004c00 	.word	0x40004c00
 8007288:	40005000 	.word	0x40005000
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e228      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	e224      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4ab1      	ldr	r2, [pc, #708]	; (8007568 <UART_SetConfig+0x62c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d176      	bne.n	8007394 <UART_SetConfig+0x458>
 80072a6:	4bb1      	ldr	r3, [pc, #708]	; (800756c <UART_SetConfig+0x630>)
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ae:	2b28      	cmp	r3, #40	; 0x28
 80072b0:	d86c      	bhi.n	800738c <UART_SetConfig+0x450>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x37c>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	0800735d 	.word	0x0800735d
 80072bc:	0800738d 	.word	0x0800738d
 80072c0:	0800738d 	.word	0x0800738d
 80072c4:	0800738d 	.word	0x0800738d
 80072c8:	0800738d 	.word	0x0800738d
 80072cc:	0800738d 	.word	0x0800738d
 80072d0:	0800738d 	.word	0x0800738d
 80072d4:	0800738d 	.word	0x0800738d
 80072d8:	08007365 	.word	0x08007365
 80072dc:	0800738d 	.word	0x0800738d
 80072e0:	0800738d 	.word	0x0800738d
 80072e4:	0800738d 	.word	0x0800738d
 80072e8:	0800738d 	.word	0x0800738d
 80072ec:	0800738d 	.word	0x0800738d
 80072f0:	0800738d 	.word	0x0800738d
 80072f4:	0800738d 	.word	0x0800738d
 80072f8:	0800736d 	.word	0x0800736d
 80072fc:	0800738d 	.word	0x0800738d
 8007300:	0800738d 	.word	0x0800738d
 8007304:	0800738d 	.word	0x0800738d
 8007308:	0800738d 	.word	0x0800738d
 800730c:	0800738d 	.word	0x0800738d
 8007310:	0800738d 	.word	0x0800738d
 8007314:	0800738d 	.word	0x0800738d
 8007318:	08007375 	.word	0x08007375
 800731c:	0800738d 	.word	0x0800738d
 8007320:	0800738d 	.word	0x0800738d
 8007324:	0800738d 	.word	0x0800738d
 8007328:	0800738d 	.word	0x0800738d
 800732c:	0800738d 	.word	0x0800738d
 8007330:	0800738d 	.word	0x0800738d
 8007334:	0800738d 	.word	0x0800738d
 8007338:	0800737d 	.word	0x0800737d
 800733c:	0800738d 	.word	0x0800738d
 8007340:	0800738d 	.word	0x0800738d
 8007344:	0800738d 	.word	0x0800738d
 8007348:	0800738d 	.word	0x0800738d
 800734c:	0800738d 	.word	0x0800738d
 8007350:	0800738d 	.word	0x0800738d
 8007354:	0800738d 	.word	0x0800738d
 8007358:	08007385 	.word	0x08007385
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007362:	e1c0      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736a:	e1bc      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007372:	e1b8      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737a:	e1b4      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800737c:	2320      	movs	r3, #32
 800737e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007382:	e1b0      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800738a:	e1ac      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007392:	e1a8      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a75      	ldr	r2, [pc, #468]	; (8007570 <UART_SetConfig+0x634>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d130      	bne.n	8007400 <UART_SetConfig+0x4c4>
 800739e:	4b73      	ldr	r3, [pc, #460]	; (800756c <UART_SetConfig+0x630>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d826      	bhi.n	80073f8 <UART_SetConfig+0x4bc>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0x474>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c9 	.word	0x080073c9
 80073b4:	080073d1 	.word	0x080073d1
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073e9 	.word	0x080073e9
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ce:	e18a      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d6:	e186      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073de:	e182      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e6:	e17e      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80073e8:	2320      	movs	r3, #32
 80073ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ee:	e17a      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80073f0:	2340      	movs	r3, #64	; 0x40
 80073f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f6:	e176      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80073f8:	2380      	movs	r3, #128	; 0x80
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fe:	e172      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a5b      	ldr	r2, [pc, #364]	; (8007574 <UART_SetConfig+0x638>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d130      	bne.n	800746c <UART_SetConfig+0x530>
 800740a:	4b58      	ldr	r3, [pc, #352]	; (800756c <UART_SetConfig+0x630>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b05      	cmp	r3, #5
 8007414:	d826      	bhi.n	8007464 <UART_SetConfig+0x528>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x4e0>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007435 	.word	0x08007435
 8007420:	0800743d 	.word	0x0800743d
 8007424:	08007445 	.word	0x08007445
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743a:	e154      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007442:	e150      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744a:	e14c      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007452:	e148      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007454:	2320      	movs	r3, #32
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e144      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e140      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e13c      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a41      	ldr	r2, [pc, #260]	; (8007578 <UART_SetConfig+0x63c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	f040 8082 	bne.w	800757c <UART_SetConfig+0x640>
 8007478:	4b3c      	ldr	r3, [pc, #240]	; (800756c <UART_SetConfig+0x630>)
 800747a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007480:	2b28      	cmp	r3, #40	; 0x28
 8007482:	d86d      	bhi.n	8007560 <UART_SetConfig+0x624>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x550>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	08007531 	.word	0x08007531
 8007490:	08007561 	.word	0x08007561
 8007494:	08007561 	.word	0x08007561
 8007498:	08007561 	.word	0x08007561
 800749c:	08007561 	.word	0x08007561
 80074a0:	08007561 	.word	0x08007561
 80074a4:	08007561 	.word	0x08007561
 80074a8:	08007561 	.word	0x08007561
 80074ac:	08007539 	.word	0x08007539
 80074b0:	08007561 	.word	0x08007561
 80074b4:	08007561 	.word	0x08007561
 80074b8:	08007561 	.word	0x08007561
 80074bc:	08007561 	.word	0x08007561
 80074c0:	08007561 	.word	0x08007561
 80074c4:	08007561 	.word	0x08007561
 80074c8:	08007561 	.word	0x08007561
 80074cc:	08007541 	.word	0x08007541
 80074d0:	08007561 	.word	0x08007561
 80074d4:	08007561 	.word	0x08007561
 80074d8:	08007561 	.word	0x08007561
 80074dc:	08007561 	.word	0x08007561
 80074e0:	08007561 	.word	0x08007561
 80074e4:	08007561 	.word	0x08007561
 80074e8:	08007561 	.word	0x08007561
 80074ec:	08007549 	.word	0x08007549
 80074f0:	08007561 	.word	0x08007561
 80074f4:	08007561 	.word	0x08007561
 80074f8:	08007561 	.word	0x08007561
 80074fc:	08007561 	.word	0x08007561
 8007500:	08007561 	.word	0x08007561
 8007504:	08007561 	.word	0x08007561
 8007508:	08007561 	.word	0x08007561
 800750c:	08007551 	.word	0x08007551
 8007510:	08007561 	.word	0x08007561
 8007514:	08007561 	.word	0x08007561
 8007518:	08007561 	.word	0x08007561
 800751c:	08007561 	.word	0x08007561
 8007520:	08007561 	.word	0x08007561
 8007524:	08007561 	.word	0x08007561
 8007528:	08007561 	.word	0x08007561
 800752c:	08007559 	.word	0x08007559
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007536:	e0d6      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753e:	e0d2      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007546:	e0ce      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754e:	e0ca      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007550:	2320      	movs	r3, #32
 8007552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007556:	e0c6      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755e:	e0c2      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007560:	2380      	movs	r3, #128	; 0x80
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007566:	e0be      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007568:	40011400 	.word	0x40011400
 800756c:	58024400 	.word	0x58024400
 8007570:	40007800 	.word	0x40007800
 8007574:	40007c00 	.word	0x40007c00
 8007578:	40011800 	.word	0x40011800
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4aad      	ldr	r2, [pc, #692]	; (8007838 <UART_SetConfig+0x8fc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d176      	bne.n	8007674 <UART_SetConfig+0x738>
 8007586:	4bad      	ldr	r3, [pc, #692]	; (800783c <UART_SetConfig+0x900>)
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800758e:	2b28      	cmp	r3, #40	; 0x28
 8007590:	d86c      	bhi.n	800766c <UART_SetConfig+0x730>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x65c>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	0800763d 	.word	0x0800763d
 800759c:	0800766d 	.word	0x0800766d
 80075a0:	0800766d 	.word	0x0800766d
 80075a4:	0800766d 	.word	0x0800766d
 80075a8:	0800766d 	.word	0x0800766d
 80075ac:	0800766d 	.word	0x0800766d
 80075b0:	0800766d 	.word	0x0800766d
 80075b4:	0800766d 	.word	0x0800766d
 80075b8:	08007645 	.word	0x08007645
 80075bc:	0800766d 	.word	0x0800766d
 80075c0:	0800766d 	.word	0x0800766d
 80075c4:	0800766d 	.word	0x0800766d
 80075c8:	0800766d 	.word	0x0800766d
 80075cc:	0800766d 	.word	0x0800766d
 80075d0:	0800766d 	.word	0x0800766d
 80075d4:	0800766d 	.word	0x0800766d
 80075d8:	0800764d 	.word	0x0800764d
 80075dc:	0800766d 	.word	0x0800766d
 80075e0:	0800766d 	.word	0x0800766d
 80075e4:	0800766d 	.word	0x0800766d
 80075e8:	0800766d 	.word	0x0800766d
 80075ec:	0800766d 	.word	0x0800766d
 80075f0:	0800766d 	.word	0x0800766d
 80075f4:	0800766d 	.word	0x0800766d
 80075f8:	08007655 	.word	0x08007655
 80075fc:	0800766d 	.word	0x0800766d
 8007600:	0800766d 	.word	0x0800766d
 8007604:	0800766d 	.word	0x0800766d
 8007608:	0800766d 	.word	0x0800766d
 800760c:	0800766d 	.word	0x0800766d
 8007610:	0800766d 	.word	0x0800766d
 8007614:	0800766d 	.word	0x0800766d
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800766d 	.word	0x0800766d
 8007620:	0800766d 	.word	0x0800766d
 8007624:	0800766d 	.word	0x0800766d
 8007628:	0800766d 	.word	0x0800766d
 800762c:	0800766d 	.word	0x0800766d
 8007630:	0800766d 	.word	0x0800766d
 8007634:	0800766d 	.word	0x0800766d
 8007638:	08007665 	.word	0x08007665
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007642:	e050      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800764a:	e04c      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007652:	e048      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765a:	e044      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800765c:	2320      	movs	r3, #32
 800765e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007662:	e040      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800766a:	e03c      	b.n	80076e6 <UART_SetConfig+0x7aa>
 800766c:	2380      	movs	r3, #128	; 0x80
 800766e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007672:	e038      	b.n	80076e6 <UART_SetConfig+0x7aa>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a71      	ldr	r2, [pc, #452]	; (8007840 <UART_SetConfig+0x904>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d130      	bne.n	80076e0 <UART_SetConfig+0x7a4>
 800767e:	4b6f      	ldr	r3, [pc, #444]	; (800783c <UART_SetConfig+0x900>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b05      	cmp	r3, #5
 8007688:	d826      	bhi.n	80076d8 <UART_SetConfig+0x79c>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <UART_SetConfig+0x754>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	2302      	movs	r3, #2
 80076aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ae:	e01a      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076b6:	e016      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076be:	e012      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076c6:	e00e      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076c8:	2320      	movs	r3, #32
 80076ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ce:	e00a      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076d0:	2340      	movs	r3, #64	; 0x40
 80076d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d6:	e006      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076de:	e002      	b.n	80076e6 <UART_SetConfig+0x7aa>
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a55      	ldr	r2, [pc, #340]	; (8007840 <UART_SetConfig+0x904>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	f040 80f0 	bne.w	80078d2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	dc46      	bgt.n	8007788 <UART_SetConfig+0x84c>
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	db75      	blt.n	80077ea <UART_SetConfig+0x8ae>
 80076fe:	3b02      	subs	r3, #2
 8007700:	2b1e      	cmp	r3, #30
 8007702:	d872      	bhi.n	80077ea <UART_SetConfig+0x8ae>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0x7d0>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	0800778f 	.word	0x0800778f
 8007710:	080077eb 	.word	0x080077eb
 8007714:	08007797 	.word	0x08007797
 8007718:	080077eb 	.word	0x080077eb
 800771c:	080077eb 	.word	0x080077eb
 8007720:	080077eb 	.word	0x080077eb
 8007724:	080077a7 	.word	0x080077a7
 8007728:	080077eb 	.word	0x080077eb
 800772c:	080077eb 	.word	0x080077eb
 8007730:	080077eb 	.word	0x080077eb
 8007734:	080077eb 	.word	0x080077eb
 8007738:	080077eb 	.word	0x080077eb
 800773c:	080077eb 	.word	0x080077eb
 8007740:	080077eb 	.word	0x080077eb
 8007744:	080077b7 	.word	0x080077b7
 8007748:	080077eb 	.word	0x080077eb
 800774c:	080077eb 	.word	0x080077eb
 8007750:	080077eb 	.word	0x080077eb
 8007754:	080077eb 	.word	0x080077eb
 8007758:	080077eb 	.word	0x080077eb
 800775c:	080077eb 	.word	0x080077eb
 8007760:	080077eb 	.word	0x080077eb
 8007764:	080077eb 	.word	0x080077eb
 8007768:	080077eb 	.word	0x080077eb
 800776c:	080077eb 	.word	0x080077eb
 8007770:	080077eb 	.word	0x080077eb
 8007774:	080077eb 	.word	0x080077eb
 8007778:	080077eb 	.word	0x080077eb
 800777c:	080077eb 	.word	0x080077eb
 8007780:	080077eb 	.word	0x080077eb
 8007784:	080077dd 	.word	0x080077dd
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d02a      	beq.n	80077e2 <UART_SetConfig+0x8a6>
 800778c:	e02d      	b.n	80077ea <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800778e:	f7fc fec1 	bl	8004514 <HAL_RCCEx_GetD3PCLK1Freq>
 8007792:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007794:	e02f      	b.n	80077f6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	4618      	mov	r0, r3
 800779c:	f7fc fed0 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a4:	e027      	b.n	80077f6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a6:	f107 0308 	add.w	r3, r7, #8
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fd f81c 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077b4:	e01f      	b.n	80077f6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077b6:	4b21      	ldr	r3, [pc, #132]	; (800783c <UART_SetConfig+0x900>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077c2:	4b1e      	ldr	r3, [pc, #120]	; (800783c <UART_SetConfig+0x900>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	08db      	lsrs	r3, r3, #3
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <UART_SetConfig+0x908>)
 80077ce:	fa22 f303 	lsr.w	r3, r2, r3
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077d4:	e00f      	b.n	80077f6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <UART_SetConfig+0x908>)
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077da:	e00c      	b.n	80077f6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077dc:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <UART_SetConfig+0x90c>)
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e0:	e009      	b.n	80077f6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e8:	e005      	b.n	80077f6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 81e6 	beq.w	8007bca <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	4a12      	ldr	r2, [pc, #72]	; (800784c <UART_SetConfig+0x910>)
 8007804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007808:	461a      	mov	r2, r3
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007810:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	6a3a      	ldr	r2, [r7, #32]
 800781e:	429a      	cmp	r2, r3
 8007820:	d305      	bcc.n	800782e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007828:	6a3a      	ldr	r2, [r7, #32]
 800782a:	429a      	cmp	r2, r3
 800782c:	d910      	bls.n	8007850 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007834:	e1c9      	b.n	8007bca <UART_SetConfig+0xc8e>
 8007836:	bf00      	nop
 8007838:	40011c00 	.word	0x40011c00
 800783c:	58024400 	.word	0x58024400
 8007840:	58000c00 	.word	0x58000c00
 8007844:	03d09000 	.word	0x03d09000
 8007848:	003d0900 	.word	0x003d0900
 800784c:	0801037c 	.word	0x0801037c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	4618      	mov	r0, r3
 8007854:	f04f 0100 	mov.w	r1, #0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	4ac1      	ldr	r2, [pc, #772]	; (8007b64 <UART_SetConfig+0xc28>)
 800785e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007862:	b29a      	uxth	r2, r3
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	f7f8 fdaa 	bl	80003c0 <__aeabi_uldivmod>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4610      	mov	r0, r2
 8007872:	4619      	mov	r1, r3
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	020b      	lsls	r3, r1, #8
 800787e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007882:	0202      	lsls	r2, r0, #8
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	6849      	ldr	r1, [r1, #4]
 8007888:	0849      	lsrs	r1, r1, #1
 800788a:	4608      	mov	r0, r1
 800788c:	f04f 0100 	mov.w	r1, #0
 8007890:	1814      	adds	r4, r2, r0
 8007892:	eb43 0501 	adc.w	r5, r3, r1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	461a      	mov	r2, r3
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	4620      	mov	r0, r4
 80078a2:	4629      	mov	r1, r5
 80078a4:	f7f8 fd8c 	bl	80003c0 <__aeabi_uldivmod>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4613      	mov	r3, r2
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078b6:	d308      	bcc.n	80078ca <UART_SetConfig+0x98e>
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078be:	d204      	bcs.n	80078ca <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c6:	60da      	str	r2, [r3, #12]
 80078c8:	e17f      	b.n	8007bca <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80078d0:	e17b      	b.n	8007bca <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078da:	f040 80bd 	bne.w	8007a58 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80078de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	dc48      	bgt.n	8007978 <UART_SetConfig+0xa3c>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	db7b      	blt.n	80079e2 <UART_SetConfig+0xaa6>
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d879      	bhi.n	80079e2 <UART_SetConfig+0xaa6>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <UART_SetConfig+0x9b8>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	0800797f 	.word	0x0800797f
 80078f8:	08007987 	.word	0x08007987
 80078fc:	080079e3 	.word	0x080079e3
 8007900:	080079e3 	.word	0x080079e3
 8007904:	0800798f 	.word	0x0800798f
 8007908:	080079e3 	.word	0x080079e3
 800790c:	080079e3 	.word	0x080079e3
 8007910:	080079e3 	.word	0x080079e3
 8007914:	0800799f 	.word	0x0800799f
 8007918:	080079e3 	.word	0x080079e3
 800791c:	080079e3 	.word	0x080079e3
 8007920:	080079e3 	.word	0x080079e3
 8007924:	080079e3 	.word	0x080079e3
 8007928:	080079e3 	.word	0x080079e3
 800792c:	080079e3 	.word	0x080079e3
 8007930:	080079e3 	.word	0x080079e3
 8007934:	080079af 	.word	0x080079af
 8007938:	080079e3 	.word	0x080079e3
 800793c:	080079e3 	.word	0x080079e3
 8007940:	080079e3 	.word	0x080079e3
 8007944:	080079e3 	.word	0x080079e3
 8007948:	080079e3 	.word	0x080079e3
 800794c:	080079e3 	.word	0x080079e3
 8007950:	080079e3 	.word	0x080079e3
 8007954:	080079e3 	.word	0x080079e3
 8007958:	080079e3 	.word	0x080079e3
 800795c:	080079e3 	.word	0x080079e3
 8007960:	080079e3 	.word	0x080079e3
 8007964:	080079e3 	.word	0x080079e3
 8007968:	080079e3 	.word	0x080079e3
 800796c:	080079e3 	.word	0x080079e3
 8007970:	080079e3 	.word	0x080079e3
 8007974:	080079d5 	.word	0x080079d5
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d02e      	beq.n	80079da <UART_SetConfig+0xa9e>
 800797c:	e031      	b.n	80079e2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800797e:	f7fb fa3d 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8007982:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007984:	e033      	b.n	80079ee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007986:	f7fb fa4f 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 800798a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800798c:	e02f      	b.n	80079ee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800798e:	f107 0314 	add.w	r3, r7, #20
 8007992:	4618      	mov	r0, r3
 8007994:	f7fc fdd4 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800799c:	e027      	b.n	80079ee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fc ff20 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ac:	e01f      	b.n	80079ee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ae:	4b6e      	ldr	r3, [pc, #440]	; (8007b68 <UART_SetConfig+0xc2c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079ba:	4b6b      	ldr	r3, [pc, #428]	; (8007b68 <UART_SetConfig+0xc2c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	08db      	lsrs	r3, r3, #3
 80079c0:	f003 0303 	and.w	r3, r3, #3
 80079c4:	4a69      	ldr	r2, [pc, #420]	; (8007b6c <UART_SetConfig+0xc30>)
 80079c6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079cc:	e00f      	b.n	80079ee <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80079ce:	4b67      	ldr	r3, [pc, #412]	; (8007b6c <UART_SetConfig+0xc30>)
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d2:	e00c      	b.n	80079ee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079d4:	4b66      	ldr	r3, [pc, #408]	; (8007b70 <UART_SetConfig+0xc34>)
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d8:	e009      	b.n	80079ee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e0:	e005      	b.n	80079ee <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80079ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80ea 	beq.w	8007bca <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	4a5a      	ldr	r2, [pc, #360]	; (8007b64 <UART_SetConfig+0xc28>)
 80079fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a08:	005a      	lsls	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2b0f      	cmp	r3, #15
 8007a20:	d916      	bls.n	8007a50 <UART_SetConfig+0xb14>
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a28:	d212      	bcs.n	8007a50 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f023 030f 	bic.w	r3, r3, #15
 8007a32:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a42:	4313      	orrs	r3, r2
 8007a44:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a4c:	60da      	str	r2, [r3, #12]
 8007a4e:	e0bc      	b.n	8007bca <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a56:	e0b8      	b.n	8007bca <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	dc4b      	bgt.n	8007af8 <UART_SetConfig+0xbbc>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f2c0 8087 	blt.w	8007b74 <UART_SetConfig+0xc38>
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	f200 8084 	bhi.w	8007b74 <UART_SetConfig+0xc38>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <UART_SetConfig+0xb38>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007aff 	.word	0x08007aff
 8007a78:	08007b07 	.word	0x08007b07
 8007a7c:	08007b75 	.word	0x08007b75
 8007a80:	08007b75 	.word	0x08007b75
 8007a84:	08007b0f 	.word	0x08007b0f
 8007a88:	08007b75 	.word	0x08007b75
 8007a8c:	08007b75 	.word	0x08007b75
 8007a90:	08007b75 	.word	0x08007b75
 8007a94:	08007b1f 	.word	0x08007b1f
 8007a98:	08007b75 	.word	0x08007b75
 8007a9c:	08007b75 	.word	0x08007b75
 8007aa0:	08007b75 	.word	0x08007b75
 8007aa4:	08007b75 	.word	0x08007b75
 8007aa8:	08007b75 	.word	0x08007b75
 8007aac:	08007b75 	.word	0x08007b75
 8007ab0:	08007b75 	.word	0x08007b75
 8007ab4:	08007b2f 	.word	0x08007b2f
 8007ab8:	08007b75 	.word	0x08007b75
 8007abc:	08007b75 	.word	0x08007b75
 8007ac0:	08007b75 	.word	0x08007b75
 8007ac4:	08007b75 	.word	0x08007b75
 8007ac8:	08007b75 	.word	0x08007b75
 8007acc:	08007b75 	.word	0x08007b75
 8007ad0:	08007b75 	.word	0x08007b75
 8007ad4:	08007b75 	.word	0x08007b75
 8007ad8:	08007b75 	.word	0x08007b75
 8007adc:	08007b75 	.word	0x08007b75
 8007ae0:	08007b75 	.word	0x08007b75
 8007ae4:	08007b75 	.word	0x08007b75
 8007ae8:	08007b75 	.word	0x08007b75
 8007aec:	08007b75 	.word	0x08007b75
 8007af0:	08007b75 	.word	0x08007b75
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	d02e      	beq.n	8007b5a <UART_SetConfig+0xc1e>
 8007afc:	e03a      	b.n	8007b74 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007afe:	f7fb f97d 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8007b02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b04:	e03c      	b.n	8007b80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b06:	f7fb f98f 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8007b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b0c:	e038      	b.n	8007b80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0e:	f107 0314 	add.w	r3, r7, #20
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fc fd14 	bl	8004540 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1c:	e030      	b.n	8007b80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fc fe60 	bl	80047e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b2c:	e028      	b.n	8007b80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <UART_SetConfig+0xc2c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <UART_SetConfig+0xc2c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	08db      	lsrs	r3, r3, #3
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <UART_SetConfig+0xc30>)
 8007b46:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b4c:	e018      	b.n	8007b80 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <UART_SetConfig+0xc30>)
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b52:	e015      	b.n	8007b80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <UART_SetConfig+0xc34>)
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b58:	e012      	b.n	8007b80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b60:	e00e      	b.n	8007b80 <UART_SetConfig+0xc44>
 8007b62:	bf00      	nop
 8007b64:	0801037c 	.word	0x0801037c
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	03d09000 	.word	0x03d09000
 8007b70:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b7e:	bf00      	nop
    }

    if (pclk != 0U)
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d021      	beq.n	8007bca <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <UART_SetConfig+0xcb8>)
 8007b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	441a      	add	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	2b0f      	cmp	r3, #15
 8007bae:	d909      	bls.n	8007bc4 <UART_SetConfig+0xc88>
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb6:	d205      	bcs.n	8007bc4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60da      	str	r2, [r3, #12]
 8007bc2:	e002      	b.n	8007bca <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007be6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3738      	adds	r7, #56	; 0x38
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	0801037c 	.word	0x0801037c

08007bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01a      	beq.n	8007d0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf6:	d10a      	bne.n	8007d0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
  }
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d4c:	f7f9 fb9a 	bl	8001484 <HAL_GetTick>
 8007d50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d10e      	bne.n	8007d7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f82f 	bl	8007dd2 <UART_WaitOnFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e025      	b.n	8007dca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d10e      	bne.n	8007daa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f819 	bl	8007dd2 <UART_WaitOnFlagUntilTimeout>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e00f      	b.n	8007dca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b09c      	sub	sp, #112	; 0x70
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de2:	e0a9      	b.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	f000 80a5 	beq.w	8007f38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dee:	f7f9 fb49 	bl	8001484 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d302      	bcc.n	8007e04 <UART_WaitOnFlagUntilTimeout+0x32>
 8007dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d140      	bne.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e18:	667b      	str	r3, [r7, #100]	; 0x64
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e6      	bne.n	8007e04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3308      	adds	r3, #8
 8007e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e56:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e5      	bne.n	8007e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e069      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d051      	beq.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea2:	d149      	bne.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ece:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e6      	bne.n	8007eae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f023 0301 	bic.w	r3, r3, #1
 8007ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f00:	623a      	str	r2, [r7, #32]
 8007f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	6a3a      	ldr	r2, [r7, #32]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e5      	bne.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e010      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69da      	ldr	r2, [r3, #28]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4013      	ands	r3, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	bf0c      	ite	eq
 8007f48:	2301      	moveq	r3, #1
 8007f4a:	2300      	movne	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	f43f af46 	beq.w	8007de4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3770      	adds	r7, #112	; 0x70
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e027      	b.n	8007fc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	; 0x24
 8007f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0201 	bic.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e02d      	b.n	8008048 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2224      	movs	r2, #36	; 0x24
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0201 	bic.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f84f 	bl	80080cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008060:	2b01      	cmp	r3, #1
 8008062:	d101      	bne.n	8008068 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008064:	2302      	movs	r3, #2
 8008066:	e02d      	b.n	80080c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2224      	movs	r2, #36	; 0x24
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f811 	bl	80080cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d108      	bne.n	80080ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080ec:	e031      	b.n	8008152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ee:	2310      	movs	r3, #16
 80080f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080f2:	2310      	movs	r3, #16
 80080f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	0e5b      	lsrs	r3, r3, #25
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	0f5b      	lsrs	r3, r3, #29
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	7b3a      	ldrb	r2, [r7, #12]
 800811a:	4911      	ldr	r1, [pc, #68]	; (8008160 <UARTEx_SetNbDataToProcess+0x94>)
 800811c:	5c8a      	ldrb	r2, [r1, r2]
 800811e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008122:	7b3a      	ldrb	r2, [r7, #12]
 8008124:	490f      	ldr	r1, [pc, #60]	; (8008164 <UARTEx_SetNbDataToProcess+0x98>)
 8008126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008128:	fb93 f3f2 	sdiv	r3, r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	7b7a      	ldrb	r2, [r7, #13]
 8008138:	4909      	ldr	r1, [pc, #36]	; (8008160 <UARTEx_SetNbDataToProcess+0x94>)
 800813a:	5c8a      	ldrb	r2, [r1, r2]
 800813c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008140:	7b7a      	ldrb	r2, [r7, #13]
 8008142:	4908      	ldr	r1, [pc, #32]	; (8008164 <UARTEx_SetNbDataToProcess+0x98>)
 8008144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008146:	fb93 f3f2 	sdiv	r3, r3, r2
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	08010394 	.word	0x08010394
 8008164:	0801039c 	.word	0x0801039c

08008168 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008168:	b084      	sub	sp, #16
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	f107 001c 	add.w	r0, r7, #28
 8008176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800817e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008180:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008182:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008186:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800818a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800818e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <SDMMC_Init+0x50>)
 800819c:	4013      	ands	r3, r2
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	b004      	add	sp, #16
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	ffc02c00 	.word	0xffc02c00

080081bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f043 0203 	orr.w	r2, r3, #3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0303 	and.w	r3, r3, #3
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008256:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800825c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008262:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	4b06      	ldr	r3, [pc, #24]	; (8008288 <SDMMC_SendCommand+0x50>)
 8008270:	4013      	ands	r3, r2
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	fffee0c0 	.word	0xfffee0c0

0800828c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	b2db      	uxtb	r3, r3
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3314      	adds	r3, #20
 80082b4:	461a      	mov	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	4413      	add	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80082f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80082f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80082fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008316:	2300      	movs	r3, #0

}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b088      	sub	sp, #32
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008332:	2310      	movs	r3, #16
 8008334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800833a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008344:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008346:	f107 0308 	add.w	r3, r7, #8
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff ff73 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008352:	f241 3288 	movw	r2, #5000	; 0x1388
 8008356:	2110      	movs	r1, #16
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fa5f 	bl	800881c <SDMMC_GetCmdResp1>
 800835e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008360:	69fb      	ldr	r3, [r7, #28]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3720      	adds	r7, #32
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b088      	sub	sp, #32
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008378:	2311      	movs	r3, #17
 800837a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800837c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800838a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800838c:	f107 0308 	add.w	r3, r7, #8
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff ff50 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008398:	f241 3288 	movw	r2, #5000	; 0x1388
 800839c:	2111      	movs	r1, #17
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa3c 	bl	800881c <SDMMC_GetCmdResp1>
 80083a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083a6:	69fb      	ldr	r3, [r7, #28]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80083be:	2312      	movs	r3, #18
 80083c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083d2:	f107 0308 	add.w	r3, r7, #8
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff2d 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80083de:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e2:	2112      	movs	r1, #18
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa19 	bl	800881c <SDMMC_GetCmdResp1>
 80083ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ec:	69fb      	ldr	r3, [r7, #28]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b088      	sub	sp, #32
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008404:	2318      	movs	r3, #24
 8008406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800840c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008418:	f107 0308 	add.w	r3, r7, #8
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ff0a 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008424:	f241 3288 	movw	r2, #5000	; 0x1388
 8008428:	2118      	movs	r1, #24
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f9f6 	bl	800881c <SDMMC_GetCmdResp1>
 8008430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008432:	69fb      	ldr	r3, [r7, #28]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800844a:	2319      	movs	r3, #25
 800844c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800844e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008454:	2300      	movs	r3, #0
 8008456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800845c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fee7 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800846a:	f241 3288 	movw	r2, #5000	; 0x1388
 800846e:	2119      	movs	r1, #25
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f9d3 	bl	800881c <SDMMC_GetCmdResp1>
 8008476:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008478:	69fb      	ldr	r3, [r7, #28]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008490:	230c      	movs	r3, #12
 8008492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800849e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff feb8 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80084c8:	4a0b      	ldr	r2, [pc, #44]	; (80084f8 <SDMMC_CmdStopTransfer+0x74>)
 80084ca:	210c      	movs	r1, #12
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9a5 	bl	800881c <SDMMC_GetCmdResp1>
 80084d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084e6:	d101      	bne.n	80084ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80084ec:	69fb      	ldr	r3, [r7, #28]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	05f5e100 	.word	0x05f5e100

080084fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800850a:	2307      	movs	r3, #7
 800850c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800850e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800851c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fe87 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800852a:	f241 3288 	movw	r2, #5000	; 0x1388
 800852e:	2107      	movs	r1, #7
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f973 	bl	800881c <SDMMC_GetCmdResp1>
 8008536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008538:	69fb      	ldr	r3, [r7, #28]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b088      	sub	sp, #32
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800855a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800855e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008560:	f107 0308 	add.w	r3, r7, #8
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fe66 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fb97 	bl	8008ca0 <SDMMC_GetCmdError>
 8008572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008574:	69fb      	ldr	r3, [r7, #28]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3720      	adds	r7, #32
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b088      	sub	sp, #32
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008586:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800858a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800858c:	2308      	movs	r3, #8
 800858e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800859a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800859e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085a0:	f107 0308 	add.w	r3, r7, #8
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fe46 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fb29 	bl	8008c04 <SDMMC_GetCmdResp7>
 80085b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085b4:	69fb      	ldr	r3, [r7, #28]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b088      	sub	sp, #32
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80085cc:	2337      	movs	r3, #55	; 0x37
 80085ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085e0:	f107 0308 	add.w	r3, r7, #8
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff fe26 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80085ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f0:	2137      	movs	r1, #55	; 0x37
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f912 	bl	800881c <SDMMC_GetCmdResp1>
 80085f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085fa:	69fb      	ldr	r3, [r7, #28]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008612:	2329      	movs	r3, #41	; 0x29
 8008614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800861a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008626:	f107 0308 	add.w	r3, r7, #8
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff fe03 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa2e 	bl	8008a94 <SDMMC_GetCmdResp3>
 8008638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800863a:	69fb      	ldr	r3, [r7, #28]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3720      	adds	r7, #32
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008652:	2306      	movs	r3, #6
 8008654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800865a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800865c:	2300      	movs	r3, #0
 800865e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fde3 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008672:	f241 3288 	movw	r2, #5000	; 0x1388
 8008676:	2106      	movs	r1, #6
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8cf 	bl	800881c <SDMMC_GetCmdResp1>
 800867e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008680:	69fb      	ldr	r3, [r7, #28]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3720      	adds	r7, #32
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b088      	sub	sp, #32
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008696:	2333      	movs	r3, #51	; 0x33
 8008698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800869a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800869e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fdc1 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80086b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ba:	2133      	movs	r1, #51	; 0x33
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f8ad 	bl	800881c <SDMMC_GetCmdResp1>
 80086c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086c4:	69fb      	ldr	r3, [r7, #28]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3720      	adds	r7, #32
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b088      	sub	sp, #32
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80086da:	2302      	movs	r3, #2
 80086dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80086de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80086e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086ee:	f107 0308 	add.w	r3, r7, #8
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fd9f 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f980 	bl	8008a00 <SDMMC_GetCmdResp2>
 8008700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800871a:	2309      	movs	r3, #9
 800871c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800871e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800872c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800872e:	f107 0308 	add.w	r3, r7, #8
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff fd7f 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f960 	bl	8008a00 <SDMMC_GetCmdResp2>
 8008740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008742:	69fb      	ldr	r3, [r7, #28]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800875a:	2303      	movs	r3, #3
 800875c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800875e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800876c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800876e:	f107 0308 	add.w	r3, r7, #8
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff fd5f 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	2103      	movs	r1, #3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f9c8 	bl	8008b14 <SDMMC_GetCmdResp6>
 8008784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008786:	69fb      	ldr	r3, [r7, #28]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800879e:	230d      	movs	r3, #13
 80087a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087b2:	f107 0308 	add.w	r3, r7, #8
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff fd3d 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80087be:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c2:	210d      	movs	r1, #13
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f829 	bl	800881c <SDMMC_GetCmdResp1>
 80087ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087cc:	69fb      	ldr	r3, [r7, #28]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b088      	sub	sp, #32
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80087e2:	230d      	movs	r3, #13
 80087e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087f6:	f107 0308 	add.w	r3, r7, #8
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff fd1b 	bl	8008238 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008802:	f241 3288 	movw	r2, #5000	; 0x1388
 8008806:	210d      	movs	r1, #13
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f807 	bl	800881c <SDMMC_GetCmdResp1>
 800880e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008810:	69fb      	ldr	r3, [r7, #28]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	460b      	mov	r3, r1
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800882a:	4b70      	ldr	r3, [pc, #448]	; (80089ec <SDMMC_GetCmdResp1+0x1d0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a70      	ldr	r2, [pc, #448]	; (80089f0 <SDMMC_GetCmdResp1+0x1d4>)
 8008830:	fba2 2303 	umull	r2, r3, r2, r3
 8008834:	0a5a      	lsrs	r2, r3, #9
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	fb02 f303 	mul.w	r3, r2, r3
 800883c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	1e5a      	subs	r2, r3, #1
 8008842:	61fa      	str	r2, [r7, #28]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800884c:	e0c9      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	4b67      	ldr	r3, [pc, #412]	; (80089f4 <SDMMC_GetCmdResp1+0x1d8>)
 8008858:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0ef      	beq.n	800883e <SDMMC_GetCmdResp1+0x22>
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1ea      	bne.n	800883e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2204      	movs	r2, #4
 8008878:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800887a:	2304      	movs	r3, #4
 800887c:	e0b1      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2201      	movs	r2, #1
 800888e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008890:	2301      	movs	r3, #1
 8008892:	e0a6      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4a58      	ldr	r2, [pc, #352]	; (80089f8 <SDMMC_GetCmdResp1+0x1dc>)
 8008898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fcf6 	bl	800828c <SDMMC_GetCommandResponse>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d001      	beq.n	80088ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e099      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80088ae:	2100      	movs	r1, #0
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7ff fcf8 	bl	80082a6 <SDMMC_GetResponse>
 80088b6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4b50      	ldr	r3, [pc, #320]	; (80089fc <SDMMC_GetCmdResp1+0x1e0>)
 80088bc:	4013      	ands	r3, r2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e08d      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	da02      	bge.n	80088d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80088cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088d0:	e087      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80088dc:	2340      	movs	r3, #64	; 0x40
 80088de:	e080      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	e079      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80088f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088fc:	e071      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800890c:	e069      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891c:	e061      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800892c:	e059      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800893c:	e051      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800894c:	e049      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800895c:	e041      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800896c:	e039      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800897c:	e031      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800898c:	e029      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008998:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800899c:	e021      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80089a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089ac:	e019      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80089b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089bc:	e011      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80089c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089cc:	e009      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80089d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80089dc:	e001      	b.n	80089e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80089de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	24000228 	.word	0x24000228
 80089f0:	10624dd3 	.word	0x10624dd3
 80089f4:	00200045 	.word	0x00200045
 80089f8:	002000c5 	.word	0x002000c5
 80089fc:	fdffe008 	.word	0xfdffe008

08008a00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008a08:	4b1f      	ldr	r3, [pc, #124]	; (8008a88 <SDMMC_GetCmdResp2+0x88>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a1f      	ldr	r2, [pc, #124]	; (8008a8c <SDMMC_GetCmdResp2+0x8c>)
 8008a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a12:	0a5b      	lsrs	r3, r3, #9
 8008a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a18:	fb02 f303 	mul.w	r3, r2, r3
 8008a1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1e5a      	subs	r2, r3, #1
 8008a22:	60fa      	str	r2, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a2c:	e026      	b.n	8008a7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0ef      	beq.n	8008a1e <SDMMC_GetCmdResp2+0x1e>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1ea      	bne.n	8008a1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2204      	movs	r2, #4
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a5a:	2304      	movs	r3, #4
 8008a5c:	e00e      	b.n	8008a7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e003      	b.n	8008a7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a06      	ldr	r2, [pc, #24]	; (8008a90 <SDMMC_GetCmdResp2+0x90>)
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	24000228 	.word	0x24000228
 8008a8c:	10624dd3 	.word	0x10624dd3
 8008a90:	002000c5 	.word	0x002000c5

08008a94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <SDMMC_GetCmdResp3+0x74>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <SDMMC_GetCmdResp3+0x78>)
 8008aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa6:	0a5b      	lsrs	r3, r3, #9
 8008aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aac:	fb02 f303 	mul.w	r3, r2, r3
 8008ab0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1e5a      	subs	r2, r3, #1
 8008ab6:	60fa      	str	r2, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ac0:	e01b      	b.n	8008afa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0ef      	beq.n	8008ab2 <SDMMC_GetCmdResp3+0x1e>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1ea      	bne.n	8008ab2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2204      	movs	r2, #4
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008aee:	2304      	movs	r3, #4
 8008af0:	e003      	b.n	8008afa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <SDMMC_GetCmdResp3+0x7c>)
 8008af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	24000228 	.word	0x24000228
 8008b0c:	10624dd3 	.word	0x10624dd3
 8008b10:	002000c5 	.word	0x002000c5

08008b14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008b22:	4b35      	ldr	r3, [pc, #212]	; (8008bf8 <SDMMC_GetCmdResp6+0xe4>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a35      	ldr	r2, [pc, #212]	; (8008bfc <SDMMC_GetCmdResp6+0xe8>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	0a5b      	lsrs	r3, r3, #9
 8008b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
 8008b36:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	1e5a      	subs	r2, r3, #1
 8008b3c:	61fa      	str	r2, [r7, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b46:	e052      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0ef      	beq.n	8008b38 <SDMMC_GetCmdResp6+0x24>
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1ea      	bne.n	8008b38 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2204      	movs	r2, #4
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b74:	2304      	movs	r3, #4
 8008b76:	e03a      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e02f      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff fb7c 	bl	800828c <SDMMC_GetCommandResponse>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	7afb      	ldrb	r3, [r7, #11]
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d001      	beq.n	8008ba2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e025      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <SDMMC_GetCmdResp6+0xec>)
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008ba8:	2100      	movs	r1, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7ff fb7b 	bl	80082a6 <SDMMC_GetResponse>
 8008bb0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	0c1b      	lsrs	r3, r3, #16
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e011      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bd8:	e009      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008be8:	e001      	b.n	8008bee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	24000228 	.word	0x24000228
 8008bfc:	10624dd3 	.word	0x10624dd3
 8008c00:	002000c5 	.word	0x002000c5

08008c04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008c0c:	4b22      	ldr	r3, [pc, #136]	; (8008c98 <SDMMC_GetCmdResp7+0x94>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a22      	ldr	r2, [pc, #136]	; (8008c9c <SDMMC_GetCmdResp7+0x98>)
 8008c12:	fba2 2303 	umull	r2, r3, r2, r3
 8008c16:	0a5b      	lsrs	r3, r3, #9
 8008c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c1c:	fb02 f303 	mul.w	r3, r2, r3
 8008c20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1e5a      	subs	r2, r3, #1
 8008c26:	60fa      	str	r2, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c30:	e02c      	b.n	8008c8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0ef      	beq.n	8008c22 <SDMMC_GetCmdResp7+0x1e>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1ea      	bne.n	8008c22 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c5e:	2304      	movs	r3, #4
 8008c60:	e014      	b.n	8008c8c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d004      	beq.n	8008c78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e009      	b.n	8008c8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2240      	movs	r2, #64	; 0x40
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c8a:	2300      	movs	r3, #0

}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	24000228 	.word	0x24000228
 8008c9c:	10624dd3 	.word	0x10624dd3

08008ca0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ca8:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <SDMMC_GetCmdError+0x50>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a11      	ldr	r2, [pc, #68]	; (8008cf4 <SDMMC_GetCmdError+0x54>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	0a5b      	lsrs	r3, r3, #9
 8008cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb8:	fb02 f303 	mul.w	r3, r2, r3
 8008cbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	1e5a      	subs	r2, r3, #1
 8008cc2:	60fa      	str	r2, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ccc:	e009      	b.n	8008ce2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f1      	beq.n	8008cbe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a06      	ldr	r2, [pc, #24]	; (8008cf8 <SDMMC_GetCmdError+0x58>)
 8008cde:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	24000228 	.word	0x24000228
 8008cf4:	10624dd3 	.word	0x10624dd3
 8008cf8:	002000c5 	.word	0x002000c5

08008cfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008d00:	4904      	ldr	r1, [pc, #16]	; (8008d14 <MX_FATFS_Init+0x18>)
 8008d02:	4805      	ldr	r0, [pc, #20]	; (8008d18 <MX_FATFS_Init+0x1c>)
 8008d04:	f003 f8ea 	bl	800bedc <FATFS_LinkDriver>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <MX_FATFS_Init+0x20>)
 8008d0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d10:	bf00      	nop
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	24013a0c 	.word	0x24013a0c
 8008d18:	080103a4 	.word	0x080103a4
 8008d1c:	24013a08 	.word	0x24013a08

08008d20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008d24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d3a:	f000 f885 	bl	8008e48 <BSP_SD_IsDetected>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d001      	beq.n	8008d48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008d44:	2302      	movs	r3, #2
 8008d46:	e012      	b.n	8008d6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008d48:	480b      	ldr	r0, [pc, #44]	; (8008d78 <BSP_SD_Init+0x48>)
 8008d4a:	f7fc f957 	bl	8004ffc <HAL_SD_Init>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d5c:	4806      	ldr	r0, [pc, #24]	; (8008d78 <BSP_SD_Init+0x48>)
 8008d5e:	f7fd f805 	bl	8005d6c <HAL_SD_ConfigWideBusOperation>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	24013664 	.word	0x24013664

08008d7c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	68f9      	ldr	r1, [r7, #12]
 8008d92:	4806      	ldr	r0, [pc, #24]	; (8008dac <BSP_SD_ReadBlocks_DMA+0x30>)
 8008d94:	f7fc fa4c 	bl	8005230 <HAL_SD_ReadBlocks_DMA>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	24013664 	.word	0x24013664

08008db0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	68f9      	ldr	r1, [r7, #12]
 8008dc6:	4806      	ldr	r0, [pc, #24]	; (8008de0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008dc8:	f7fc fada 	bl	8005380 <HAL_SD_WriteBlocks_DMA>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	24013664 	.word	0x24013664

08008de4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <BSP_SD_GetCardState+0x1c>)
 8008dea:	f7fd f8d1 	bl	8005f90 <HAL_SD_GetCardState>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	24013664 	.word	0x24013664

08008e04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4803      	ldr	r0, [pc, #12]	; (8008e1c <BSP_SD_GetCardInfo+0x18>)
 8008e10:	f7fc ff80 	bl	8005d14 <HAL_SD_GetCardInfo>
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	24013664 	.word	0x24013664

08008e20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e28:	f000 f9ac 	bl	8009184 <BSP_SD_WriteCpltCallback>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008e3c:	f000 f9b4 	bl	80091a8 <BSP_SD_ReadCpltCallback>
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008e52:	f000 f80b 	bl	8008e6c <BSP_PlatformIsDetected>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	b2db      	uxtb	r3, r3
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008e72:	2301      	movs	r3, #1
 8008e74:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e7a:	4806      	ldr	r0, [pc, #24]	; (8008e94 <BSP_PlatformIsDetected+0x28>)
 8008e7c:	f7f8 fdba 	bl	80019f4 <HAL_GPIO_ReadPin>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008e86:	2300      	movs	r3, #0
 8008e88:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	58020800 	.word	0x58020800

08008e98 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008ea0:	f003 f922 	bl	800c0e8 <osKernelGetTickCount>
 8008ea4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008ea6:	e006      	b.n	8008eb6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ea8:	f7ff ff9c 	bl	8008de4 <BSP_SD_GetCardState>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e009      	b.n	8008eca <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008eb6:	f003 f917 	bl	800c0e8 <osKernelGetTickCount>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d8f0      	bhi.n	8008ea8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008ede:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <SD_CheckStatus+0x38>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ee4:	f7ff ff7e 	bl	8008de4 <BSP_SD_GetCardState>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d107      	bne.n	8008efe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <SD_CheckStatus+0x38>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f023 0301 	bic.w	r3, r3, #1
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <SD_CheckStatus+0x38>)
 8008efc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <SD_CheckStatus+0x38>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b2db      	uxtb	r3, r3
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	24000235 	.word	0x24000235

08008f10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008f1a:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <SD_initialize+0x7c>)
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008f20:	f003 f89a 	bl	800c058 <osKernelGetState>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d129      	bne.n	8008f7e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008f2a:	f7ff ff01 	bl	8008d30 <BSP_SD_Init>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d107      	bne.n	8008f44 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff ffcc 	bl	8008ed4 <SD_CheckStatus>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <SD_initialize+0x7c>)
 8008f42:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008f44:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <SD_initialize+0x7c>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d017      	beq.n	8008f7e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008f4e:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <SD_initialize+0x80>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d107      	bne.n	8008f66 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008f56:	2200      	movs	r2, #0
 8008f58:	2102      	movs	r1, #2
 8008f5a:	200a      	movs	r0, #10
 8008f5c:	f003 faca 	bl	800c4f4 <osMessageQueueNew>
 8008f60:	4603      	mov	r3, r0
 8008f62:	4a0b      	ldr	r2, [pc, #44]	; (8008f90 <SD_initialize+0x80>)
 8008f64:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008f66:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <SD_initialize+0x80>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <SD_initialize+0x7c>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f043 0301 	orr.w	r3, r3, #1
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <SD_initialize+0x7c>)
 8008f7c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008f7e:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <SD_initialize+0x7c>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	b2db      	uxtb	r3, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	24000235 	.word	0x24000235
 8008f90:	240002c4 	.word	0x240002c4

08008f94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff ff97 	bl	8008ed4 <SD_CheckStatus>
 8008fa6:	4603      	mov	r3, r0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008fc4:	f247 5030 	movw	r0, #30000	; 0x7530
 8008fc8:	f7ff ff66 	bl	8008e98 <SD_CheckStatusWithTimeout>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da01      	bge.n	8008fd6 <SD_read+0x26>
  {
    return res;
 8008fd2:	7ffb      	ldrb	r3, [r7, #31]
 8008fd4:	e02f      	b.n	8009036 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	68b8      	ldr	r0, [r7, #8]
 8008fdc:	f7ff fece 	bl	8008d7c <BSP_SD_ReadBlocks_DMA>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008fe4:	7fbb      	ldrb	r3, [r7, #30]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d124      	bne.n	8009034 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008fea:	4b15      	ldr	r3, [pc, #84]	; (8009040 <SD_read+0x90>)
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f107 0112 	add.w	r1, r7, #18
 8008ff2:	f247 5330 	movw	r3, #30000	; 0x7530
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f003 fb50 	bl	800c69c <osMessageQueueGet>
 8008ffc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d117      	bne.n	8009034 <SD_read+0x84>
 8009004:	8a7b      	ldrh	r3, [r7, #18]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d114      	bne.n	8009034 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800900a:	f003 f86d 	bl	800c0e8 <osKernelGetTickCount>
 800900e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009010:	e007      	b.n	8009022 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009012:	f7ff fee7 	bl	8008de4 <BSP_SD_GetCardState>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <SD_read+0x72>
              {
                res = RES_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009020:	e008      	b.n	8009034 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009022:	f003 f861 	bl	800c0e8 <osKernelGetTickCount>
 8009026:	4602      	mov	r2, r0
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009030:	4293      	cmp	r3, r2
 8009032:	d9ee      	bls.n	8009012 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009034:	7ffb      	ldrb	r3, [r7, #31]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3720      	adds	r7, #32
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	240002c4 	.word	0x240002c4

08009044 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009058:	f247 5030 	movw	r0, #30000	; 0x7530
 800905c:	f7ff ff1c 	bl	8008e98 <SD_CheckStatusWithTimeout>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	da01      	bge.n	800906a <SD_write+0x26>
  {
    return res;
 8009066:	7ffb      	ldrb	r3, [r7, #31]
 8009068:	e02d      	b.n	80090c6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	68b8      	ldr	r0, [r7, #8]
 8009070:	f7ff fe9e 	bl	8008db0 <BSP_SD_WriteBlocks_DMA>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d124      	bne.n	80090c4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800907a:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <SD_write+0x8c>)
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f107 0112 	add.w	r1, r7, #18
 8009082:	f247 5330 	movw	r3, #30000	; 0x7530
 8009086:	2200      	movs	r2, #0
 8009088:	f003 fb08 	bl	800c69c <osMessageQueueGet>
 800908c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d117      	bne.n	80090c4 <SD_write+0x80>
 8009094:	8a7b      	ldrh	r3, [r7, #18]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d114      	bne.n	80090c4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800909a:	f003 f825 	bl	800c0e8 <osKernelGetTickCount>
 800909e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80090a0:	e007      	b.n	80090b2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090a2:	f7ff fe9f 	bl	8008de4 <BSP_SD_GetCardState>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <SD_write+0x6e>
          {
            res = RES_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	77fb      	strb	r3, [r7, #31]
            break;
 80090b0:	e008      	b.n	80090c4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80090b2:	f003 f819 	bl	800c0e8 <osKernelGetTickCount>
 80090b6:	4602      	mov	r2, r0
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d9ee      	bls.n	80090a2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80090c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	240002c4 	.word	0x240002c4

080090d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08c      	sub	sp, #48	; 0x30
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	603a      	str	r2, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
 80090e0:	460b      	mov	r3, r1
 80090e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80090ea:	4b25      	ldr	r3, [pc, #148]	; (8009180 <SD_ioctl+0xac>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <SD_ioctl+0x28>
 80090f8:	2303      	movs	r3, #3
 80090fa:	e03c      	b.n	8009176 <SD_ioctl+0xa2>

  switch (cmd)
 80090fc:	79bb      	ldrb	r3, [r7, #6]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d834      	bhi.n	800916c <SD_ioctl+0x98>
 8009102:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <SD_ioctl+0x34>)
 8009104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009108:	08009119 	.word	0x08009119
 800910c:	08009121 	.word	0x08009121
 8009110:	08009139 	.word	0x08009139
 8009114:	08009153 	.word	0x08009153
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800911e:	e028      	b.n	8009172 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	4618      	mov	r0, r3
 8009126:	f7ff fe6d 	bl	8008e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800912a:	6a3a      	ldr	r2, [r7, #32]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009136:	e01c      	b.n	8009172 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fe61 	bl	8008e04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	b29a      	uxth	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009150:	e00f      	b.n	8009172 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fe54 	bl	8008e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	0a5a      	lsrs	r2, r3, #9
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800916a:	e002      	b.n	8009172 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800916c:	2304      	movs	r3, #4
 800916e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009176:	4618      	mov	r0, r3
 8009178:	3730      	adds	r7, #48	; 0x30
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	24000235 	.word	0x24000235

08009184 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800918a:	2302      	movs	r3, #2
 800918c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800918e:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <BSP_SD_WriteCpltCallback+0x20>)
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	1db9      	adds	r1, r7, #6
 8009194:	2300      	movs	r3, #0
 8009196:	2200      	movs	r2, #0
 8009198:	f003 fa20 	bl	800c5dc <osMessageQueuePut>
#endif
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	240002c4 	.word	0x240002c4

080091a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80091ae:	2301      	movs	r3, #1
 80091b0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <BSP_SD_ReadCpltCallback+0x20>)
 80091b4:	6818      	ldr	r0, [r3, #0]
 80091b6:	1db9      	adds	r1, r7, #6
 80091b8:	2300      	movs	r3, #0
 80091ba:	2200      	movs	r2, #0
 80091bc:	f003 fa0e 	bl	800c5dc <osMessageQueuePut>
#endif
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	240002c4 	.word	0x240002c4

080091cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	4a08      	ldr	r2, [pc, #32]	; (80091fc <disk_status+0x30>)
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	79fa      	ldrb	r2, [r7, #7]
 80091e4:	4905      	ldr	r1, [pc, #20]	; (80091fc <disk_status+0x30>)
 80091e6:	440a      	add	r2, r1
 80091e8:	7a12      	ldrb	r2, [r2, #8]
 80091ea:	4610      	mov	r0, r2
 80091ec:	4798      	blx	r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	240002f0 	.word	0x240002f0

08009200 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	4a0d      	ldr	r2, [pc, #52]	; (8009248 <disk_initialize+0x48>)
 8009212:	5cd3      	ldrb	r3, [r2, r3]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d111      	bne.n	800923c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	4a0b      	ldr	r2, [pc, #44]	; (8009248 <disk_initialize+0x48>)
 800921c:	2101      	movs	r1, #1
 800921e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	4a09      	ldr	r2, [pc, #36]	; (8009248 <disk_initialize+0x48>)
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	79fa      	ldrb	r2, [r7, #7]
 800922e:	4906      	ldr	r1, [pc, #24]	; (8009248 <disk_initialize+0x48>)
 8009230:	440a      	add	r2, r1
 8009232:	7a12      	ldrb	r2, [r2, #8]
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	240002f0 	.word	0x240002f0

0800924c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800924c:	b590      	push	{r4, r7, lr}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	4a0a      	ldr	r2, [pc, #40]	; (8009288 <disk_read+0x3c>)
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	689c      	ldr	r4, [r3, #8]
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4a07      	ldr	r2, [pc, #28]	; (8009288 <disk_read+0x3c>)
 800926c:	4413      	add	r3, r2
 800926e:	7a18      	ldrb	r0, [r3, #8]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	47a0      	blx	r4
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
  return res;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
}
 800927e:	4618      	mov	r0, r3
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	bd90      	pop	{r4, r7, pc}
 8009286:	bf00      	nop
 8009288:	240002f0 	.word	0x240002f0

0800928c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800928c:	b590      	push	{r4, r7, lr}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	4a0a      	ldr	r2, [pc, #40]	; (80092c8 <disk_write+0x3c>)
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	68dc      	ldr	r4, [r3, #12]
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	4a07      	ldr	r2, [pc, #28]	; (80092c8 <disk_write+0x3c>)
 80092ac:	4413      	add	r3, r2
 80092ae:	7a18      	ldrb	r0, [r3, #8]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	47a0      	blx	r4
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd90      	pop	{r4, r7, pc}
 80092c6:	bf00      	nop
 80092c8:	240002f0 	.word	0x240002f0

080092cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	603a      	str	r2, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
 80092d8:	460b      	mov	r3, r1
 80092da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	4a09      	ldr	r2, [pc, #36]	; (8009304 <disk_ioctl+0x38>)
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	79fa      	ldrb	r2, [r7, #7]
 80092ea:	4906      	ldr	r1, [pc, #24]	; (8009304 <disk_ioctl+0x38>)
 80092ec:	440a      	add	r2, r1
 80092ee:	7a10      	ldrb	r0, [r2, #8]
 80092f0:	79b9      	ldrb	r1, [r7, #6]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	240002f0 	.word	0x240002f0

08009308 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3301      	adds	r3, #1
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009318:	89fb      	ldrh	r3, [r7, #14]
 800931a:	021b      	lsls	r3, r3, #8
 800931c:	b21a      	sxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b21b      	sxth	r3, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	b21b      	sxth	r3, r3
 8009328:	81fb      	strh	r3, [r7, #14]
	return rv;
 800932a:	89fb      	ldrh	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3303      	adds	r3, #3
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	021b      	lsls	r3, r3, #8
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	3202      	adds	r2, #2
 8009350:	7812      	ldrb	r2, [r2, #0]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	3201      	adds	r2, #1
 800935e:	7812      	ldrb	r2, [r2, #0]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	7812      	ldrb	r2, [r2, #0]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009370:	68fb      	ldr	r3, [r7, #12]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	887a      	ldrh	r2, [r7, #2]
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	887b      	ldrh	r3, [r7, #2]
 8009398:	0a1b      	lsrs	r3, r3, #8
 800939a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	887a      	ldrh	r2, [r7, #2]
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	0a1b      	lsrs	r3, r3, #8
 80093ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	0a1b      	lsrs	r3, r3, #8
 80093e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	0a1b      	lsrs	r3, r3, #8
 80093f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	701a      	strb	r2, [r3, #0]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00d      	beq.n	8009442 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	1c53      	adds	r3, r2, #1
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	1c59      	adds	r1, r3, #1
 8009430:	6179      	str	r1, [r7, #20]
 8009432:	7812      	ldrb	r2, [r2, #0]
 8009434:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3b01      	subs	r3, #1
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f1      	bne.n	8009426 <mem_cpy+0x1a>
	}
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800944e:	b480      	push	{r7}
 8009450:	b087      	sub	sp, #28
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	617a      	str	r2, [r7, #20]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3b01      	subs	r3, #1
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1f3      	bne.n	800945e <mem_set+0x10>
}
 8009476:	bf00      	nop
 8009478:	bf00      	nop
 800947a:	371c      	adds	r7, #28
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009484:	b480      	push	{r7}
 8009486:	b089      	sub	sp, #36	; 0x24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	61fa      	str	r2, [r7, #28]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	61ba      	str	r2, [r7, #24]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	1acb      	subs	r3, r1, r3
 80094b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	607b      	str	r3, [r7, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <mem_cmp+0x40>
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0eb      	beq.n	800949c <mem_cmp+0x18>

	return r;
 80094c4:	697b      	ldr	r3, [r7, #20]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3724      	adds	r7, #36	; 0x24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80094dc:	e002      	b.n	80094e4 <chk_chr+0x12>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3301      	adds	r3, #1
 80094e2:	607b      	str	r3, [r7, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <chk_chr+0x26>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d1f2      	bne.n	80094de <chk_chr+0xc>
	return *str;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	781b      	ldrb	r3, [r3, #0]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <lock_fs+0x22>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	4618      	mov	r0, r3
 800951c:	f002 fd14 	bl	800bf48 <ff_req_grant>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <lock_fs+0x22>
 8009526:	2301      	movs	r3, #1
 8009528:	e000      	b.n	800952c <lock_fs+0x24>
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00d      	beq.n	8009562 <unlock_fs+0x2e>
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	2b0c      	cmp	r3, #12
 800954a:	d00a      	beq.n	8009562 <unlock_fs+0x2e>
 800954c:	78fb      	ldrb	r3, [r7, #3]
 800954e:	2b0b      	cmp	r3, #11
 8009550:	d007      	beq.n	8009562 <unlock_fs+0x2e>
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	2b0f      	cmp	r3, #15
 8009556:	d004      	beq.n	8009562 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	4618      	mov	r0, r3
 800955e:	f002 fd08 	bl	800bf72 <ff_rel_grant>
	}
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009576:	2300      	movs	r3, #0
 8009578:	60bb      	str	r3, [r7, #8]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	e029      	b.n	80095d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009580:	4a27      	ldr	r2, [pc, #156]	; (8009620 <chk_lock+0xb4>)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	011b      	lsls	r3, r3, #4
 8009586:	4413      	add	r3, r2
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01d      	beq.n	80095ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800958e:	4a24      	ldr	r2, [pc, #144]	; (8009620 <chk_lock+0xb4>)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	4413      	add	r3, r2
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d116      	bne.n	80095ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80095a0:	4a1f      	ldr	r2, [pc, #124]	; (8009620 <chk_lock+0xb4>)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	4413      	add	r3, r2
 80095a8:	3304      	adds	r3, #4
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d10c      	bne.n	80095ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80095b4:	4a1a      	ldr	r2, [pc, #104]	; (8009620 <chk_lock+0xb4>)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	4413      	add	r3, r2
 80095bc:	3308      	adds	r3, #8
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d102      	bne.n	80095ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80095c8:	e007      	b.n	80095da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80095ca:	2301      	movs	r3, #1
 80095cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3301      	adds	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d9d2      	bls.n	8009580 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d109      	bne.n	80095f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <chk_lock+0x80>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d101      	bne.n	80095f0 <chk_lock+0x84>
 80095ec:	2300      	movs	r3, #0
 80095ee:	e010      	b.n	8009612 <chk_lock+0xa6>
 80095f0:	2312      	movs	r3, #18
 80095f2:	e00e      	b.n	8009612 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d108      	bne.n	800960c <chk_lock+0xa0>
 80095fa:	4a09      	ldr	r2, [pc, #36]	; (8009620 <chk_lock+0xb4>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	4413      	add	r3, r2
 8009602:	330c      	adds	r3, #12
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800960a:	d101      	bne.n	8009610 <chk_lock+0xa4>
 800960c:	2310      	movs	r3, #16
 800960e:	e000      	b.n	8009612 <chk_lock+0xa6>
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	240002d0 	.word	0x240002d0

08009624 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800962a:	2300      	movs	r3, #0
 800962c:	607b      	str	r3, [r7, #4]
 800962e:	e002      	b.n	8009636 <enq_lock+0x12>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3301      	adds	r3, #1
 8009634:	607b      	str	r3, [r7, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d806      	bhi.n	800964a <enq_lock+0x26>
 800963c:	4a09      	ldr	r2, [pc, #36]	; (8009664 <enq_lock+0x40>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	4413      	add	r3, r2
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1f2      	bne.n	8009630 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b02      	cmp	r3, #2
 800964e:	bf14      	ite	ne
 8009650:	2301      	movne	r3, #1
 8009652:	2300      	moveq	r3, #0
 8009654:	b2db      	uxtb	r3, r3
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	240002d0 	.word	0x240002d0

08009668 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	e01f      	b.n	80096b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009678:	4a41      	ldr	r2, [pc, #260]	; (8009780 <inc_lock+0x118>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	4413      	add	r3, r2
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d113      	bne.n	80096b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800968a:	4a3d      	ldr	r2, [pc, #244]	; (8009780 <inc_lock+0x118>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	4413      	add	r3, r2
 8009692:	3304      	adds	r3, #4
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800969a:	429a      	cmp	r2, r3
 800969c:	d109      	bne.n	80096b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800969e:	4a38      	ldr	r2, [pc, #224]	; (8009780 <inc_lock+0x118>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	4413      	add	r3, r2
 80096a6:	3308      	adds	r3, #8
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d006      	beq.n	80096c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3301      	adds	r3, #1
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d9dc      	bls.n	8009678 <inc_lock+0x10>
 80096be:	e000      	b.n	80096c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80096c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d132      	bne.n	800972e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e002      	b.n	80096d4 <inc_lock+0x6c>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d806      	bhi.n	80096e8 <inc_lock+0x80>
 80096da:	4a29      	ldr	r2, [pc, #164]	; (8009780 <inc_lock+0x118>)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	011b      	lsls	r3, r3, #4
 80096e0:	4413      	add	r3, r2
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f2      	bne.n	80096ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d101      	bne.n	80096f2 <inc_lock+0x8a>
 80096ee:	2300      	movs	r3, #0
 80096f0:	e040      	b.n	8009774 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4922      	ldr	r1, [pc, #136]	; (8009780 <inc_lock+0x118>)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	440b      	add	r3, r1
 80096fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	491e      	ldr	r1, [pc, #120]	; (8009780 <inc_lock+0x118>)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	440b      	add	r3, r1
 800970c:	3304      	adds	r3, #4
 800970e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	695a      	ldr	r2, [r3, #20]
 8009714:	491a      	ldr	r1, [pc, #104]	; (8009780 <inc_lock+0x118>)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	440b      	add	r3, r1
 800971c:	3308      	adds	r3, #8
 800971e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009720:	4a17      	ldr	r2, [pc, #92]	; (8009780 <inc_lock+0x118>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	011b      	lsls	r3, r3, #4
 8009726:	4413      	add	r3, r2
 8009728:	330c      	adds	r3, #12
 800972a:	2200      	movs	r2, #0
 800972c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <inc_lock+0xe0>
 8009734:	4a12      	ldr	r2, [pc, #72]	; (8009780 <inc_lock+0x118>)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	4413      	add	r3, r2
 800973c:	330c      	adds	r3, #12
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <inc_lock+0xe0>
 8009744:	2300      	movs	r3, #0
 8009746:	e015      	b.n	8009774 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d108      	bne.n	8009760 <inc_lock+0xf8>
 800974e:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <inc_lock+0x118>)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	4413      	add	r3, r2
 8009756:	330c      	adds	r3, #12
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	b29a      	uxth	r2, r3
 800975e:	e001      	b.n	8009764 <inc_lock+0xfc>
 8009760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009764:	4906      	ldr	r1, [pc, #24]	; (8009780 <inc_lock+0x118>)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	440b      	add	r3, r1
 800976c:	330c      	adds	r3, #12
 800976e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	240002d0 	.word	0x240002d0

08009784 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3b01      	subs	r3, #1
 8009790:	607b      	str	r3, [r7, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d825      	bhi.n	80097e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009798:	4a17      	ldr	r2, [pc, #92]	; (80097f8 <dec_lock+0x74>)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	011b      	lsls	r3, r3, #4
 800979e:	4413      	add	r3, r2
 80097a0:	330c      	adds	r3, #12
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80097a6:	89fb      	ldrh	r3, [r7, #14]
 80097a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ac:	d101      	bne.n	80097b2 <dec_lock+0x2e>
 80097ae:	2300      	movs	r3, #0
 80097b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80097b2:	89fb      	ldrh	r3, [r7, #14]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <dec_lock+0x3a>
 80097b8:	89fb      	ldrh	r3, [r7, #14]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80097be:	4a0e      	ldr	r2, [pc, #56]	; (80097f8 <dec_lock+0x74>)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	4413      	add	r3, r2
 80097c6:	330c      	adds	r3, #12
 80097c8:	89fa      	ldrh	r2, [r7, #14]
 80097ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <dec_lock+0x5a>
 80097d2:	4a09      	ldr	r2, [pc, #36]	; (80097f8 <dec_lock+0x74>)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	4413      	add	r3, r2
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	737b      	strb	r3, [r7, #13]
 80097e2:	e001      	b.n	80097e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80097e4:	2302      	movs	r3, #2
 80097e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80097e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	240002d0 	.word	0x240002d0

080097fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	e010      	b.n	800982c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800980a:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <clear_lock+0x44>)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	4413      	add	r3, r2
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	429a      	cmp	r2, r3
 8009818:	d105      	bne.n	8009826 <clear_lock+0x2a>
 800981a:	4a09      	ldr	r2, [pc, #36]	; (8009840 <clear_lock+0x44>)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	4413      	add	r3, r2
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d9eb      	bls.n	800980a <clear_lock+0xe>
	}
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	240002d0 	.word	0x240002d0

08009844 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	78db      	ldrb	r3, [r3, #3]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d034      	beq.n	80098c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7858      	ldrb	r0, [r3, #1]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009868:	2301      	movs	r3, #1
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	f7ff fd0e 	bl	800928c <disk_write>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009876:	2301      	movs	r3, #1
 8009878:	73fb      	strb	r3, [r7, #15]
 800987a:	e022      	b.n	80098c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	1ad2      	subs	r2, r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	429a      	cmp	r2, r3
 8009890:	d217      	bcs.n	80098c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	789b      	ldrb	r3, [r3, #2]
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	e010      	b.n	80098bc <sync_window+0x78>
					wsect += fs->fsize;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7858      	ldrb	r0, [r3, #1]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80098ae:	2301      	movs	r3, #1
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	f7ff fceb 	bl	800928c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d8eb      	bhi.n	800989a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d01b      	beq.n	800991c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff ffad 	bl	8009844 <sync_window>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d113      	bne.n	800991c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	7858      	ldrb	r0, [r3, #1]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80098fe:	2301      	movs	r3, #1
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	f7ff fca3 	bl	800924c <disk_read>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800990c:	f04f 33ff 	mov.w	r3, #4294967295
 8009910:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009912:	2301      	movs	r3, #1
 8009914:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ff87 	bl	8009844 <sync_window>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d158      	bne.n	80099f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b03      	cmp	r3, #3
 8009946:	d148      	bne.n	80099da <sync_fs+0xb2>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	791b      	ldrb	r3, [r3, #4]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d144      	bne.n	80099da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3334      	adds	r3, #52	; 0x34
 8009954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fd77 	bl	800944e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3334      	adds	r3, #52	; 0x34
 8009964:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009968:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff fd06 	bl	800937e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3334      	adds	r3, #52	; 0x34
 8009976:	4921      	ldr	r1, [pc, #132]	; (80099fc <sync_fs+0xd4>)
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fd1b 	bl	80093b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3334      	adds	r3, #52	; 0x34
 8009982:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009986:	491e      	ldr	r1, [pc, #120]	; (8009a00 <sync_fs+0xd8>)
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff fd13 	bl	80093b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3334      	adds	r3, #52	; 0x34
 8009992:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f7ff fd09 	bl	80093b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3334      	adds	r3, #52	; 0x34
 80099a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	4619      	mov	r1, r3
 80099b0:	4610      	mov	r0, r2
 80099b2:	f7ff fcff 	bl	80093b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	7858      	ldrb	r0, [r3, #1]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ce:	2301      	movs	r3, #1
 80099d0:	f7ff fc5c 	bl	800928c <disk_write>
			fs->fsi_flag = 0;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2200      	movs	r2, #0
 80099e0:	2100      	movs	r1, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fc72 	bl	80092cc <disk_ioctl>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <sync_fs+0xca>
 80099ee:	2301      	movs	r3, #1
 80099f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	41615252 	.word	0x41615252
 8009a00:	61417272 	.word	0x61417272

08009a04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	3b02      	subs	r3, #2
 8009a12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	3b02      	subs	r3, #2
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d301      	bcc.n	8009a24 <clust2sect+0x20>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e008      	b.n	8009a36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	895b      	ldrh	r3, [r3, #10]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	fb03 f202 	mul.w	r2, r3, r2
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	4413      	add	r3, r2
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b086      	sub	sp, #24
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d904      	bls.n	8009a62 <get_fat+0x20>
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d302      	bcc.n	8009a68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009a62:	2301      	movs	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]
 8009a66:	e08f      	b.n	8009b88 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d062      	beq.n	8009b3c <get_fat+0xfa>
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	dc7c      	bgt.n	8009b74 <get_fat+0x132>
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d002      	beq.n	8009a84 <get_fat+0x42>
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d042      	beq.n	8009b08 <get_fat+0xc6>
 8009a82:	e077      	b.n	8009b74 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	0a5b      	lsrs	r3, r3, #9
 8009a9a:	4413      	add	r3, r2
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6938      	ldr	r0, [r7, #16]
 8009aa0:	f7ff ff14 	bl	80098cc <move_window>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d167      	bne.n	8009b7a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	60fa      	str	r2, [r7, #12]
 8009ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009abc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	0a5b      	lsrs	r3, r3, #9
 8009ac6:	4413      	add	r3, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6938      	ldr	r0, [r7, #16]
 8009acc:	f7ff fefe 	bl	80098cc <move_window>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d153      	bne.n	8009b7e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <get_fat+0xbc>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	e002      	b.n	8009b04 <get_fat+0xc2>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b04:	617b      	str	r3, [r7, #20]
			break;
 8009b06:	e03f      	b.n	8009b88 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	4413      	add	r3, r2
 8009b12:	4619      	mov	r1, r3
 8009b14:	6938      	ldr	r0, [r7, #16]
 8009b16:	f7ff fed9 	bl	80098cc <move_window>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d130      	bne.n	8009b82 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009b2e:	4413      	add	r3, r2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff fbe9 	bl	8009308 <ld_word>
 8009b36:	4603      	mov	r3, r0
 8009b38:	617b      	str	r3, [r7, #20]
			break;
 8009b3a:	e025      	b.n	8009b88 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	09db      	lsrs	r3, r3, #7
 8009b44:	4413      	add	r3, r2
 8009b46:	4619      	mov	r1, r3
 8009b48:	6938      	ldr	r0, [r7, #16]
 8009b4a:	f7ff febf 	bl	80098cc <move_window>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d118      	bne.n	8009b86 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b62:	4413      	add	r3, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff fbe7 	bl	8009338 <ld_dword>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009b70:	617b      	str	r3, [r7, #20]
			break;
 8009b72:	e009      	b.n	8009b88 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009b74:	2301      	movs	r3, #1
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	e006      	b.n	8009b88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b7a:	bf00      	nop
 8009b7c:	e004      	b.n	8009b88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b7e:	bf00      	nop
 8009b80:	e002      	b.n	8009b88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b82:	bf00      	nop
 8009b84:	e000      	b.n	8009b88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b86:	bf00      	nop
		}
	}

	return val;
 8009b88:	697b      	ldr	r3, [r7, #20]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009b92:	b590      	push	{r4, r7, lr}
 8009b94:	b089      	sub	sp, #36	; 0x24
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	f240 80d2 	bls.w	8009d4e <put_fat+0x1bc>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	f080 80cc 	bcs.w	8009d4e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	f000 8096 	beq.w	8009cec <put_fat+0x15a>
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	f300 80cd 	bgt.w	8009d60 <put_fat+0x1ce>
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d002      	beq.n	8009bd0 <put_fat+0x3e>
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d06e      	beq.n	8009cac <put_fat+0x11a>
 8009bce:	e0c7      	b.n	8009d60 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	4413      	add	r3, r2
 8009bdc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	0a5b      	lsrs	r3, r3, #9
 8009be6:	4413      	add	r3, r2
 8009be8:	4619      	mov	r1, r3
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fe6e 	bl	80098cc <move_window>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bf4:	7ffb      	ldrb	r3, [r7, #31]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f040 80ab 	bne.w	8009d52 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	1c59      	adds	r1, r3, #1
 8009c06:	61b9      	str	r1, [r7, #24]
 8009c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0c:	4413      	add	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00d      	beq.n	8009c36 <put_fat+0xa4>
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	f003 030f 	and.w	r3, r3, #15
 8009c24:	b25a      	sxtb	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	b25b      	sxtb	r3, r3
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	b25b      	sxtb	r3, r3
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	e001      	b.n	8009c3a <put_fat+0xa8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	0a5b      	lsrs	r3, r3, #9
 8009c4c:	4413      	add	r3, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f7ff fe3b 	bl	80098cc <move_window>
 8009c56:	4603      	mov	r3, r0
 8009c58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c5a:	7ffb      	ldrb	r3, [r7, #31]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d17a      	bne.n	8009d56 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6c:	4413      	add	r3, r2
 8009c6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <put_fat+0xf0>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	091b      	lsrs	r3, r3, #4
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	e00e      	b.n	8009ca0 <put_fat+0x10e>
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	f023 030f 	bic.w	r3, r3, #15
 8009c8c:	b25a      	sxtb	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	0a1b      	lsrs	r3, r3, #8
 8009c92:	b25b      	sxtb	r3, r3
 8009c94:	f003 030f 	and.w	r3, r3, #15
 8009c98:	b25b      	sxtb	r3, r3
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	70da      	strb	r2, [r3, #3]
			break;
 8009caa:	e059      	b.n	8009d60 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	4413      	add	r3, r2
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fe07 	bl	80098cc <move_window>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009cc2:	7ffb      	ldrb	r3, [r7, #31]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d148      	bne.n	8009d5a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009cd6:	4413      	add	r3, r2
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	b292      	uxth	r2, r2
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff fb4d 	bl	800937e <st_word>
			fs->wflag = 1;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	70da      	strb	r2, [r3, #3]
			break;
 8009cea:	e039      	b.n	8009d60 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	09db      	lsrs	r3, r3, #7
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff fde7 	bl	80098cc <move_window>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d02:	7ffb      	ldrb	r3, [r7, #31]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d12a      	bne.n	8009d5e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009d1c:	4413      	add	r3, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fb0a 	bl	8009338 <ld_dword>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009d2a:	4323      	orrs	r3, r4
 8009d2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009d3c:	4413      	add	r3, r2
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fb37 	bl	80093b4 <st_dword>
			fs->wflag = 1;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	70da      	strb	r2, [r3, #3]
			break;
 8009d4c:	e008      	b.n	8009d60 <put_fat+0x1ce>
		}
	}
 8009d4e:	bf00      	nop
 8009d50:	e006      	b.n	8009d60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d52:	bf00      	nop
 8009d54:	e004      	b.n	8009d60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d56:	bf00      	nop
 8009d58:	e002      	b.n	8009d60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d5a:	bf00      	nop
 8009d5c:	e000      	b.n	8009d60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d5e:	bf00      	nop
	return res;
 8009d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3724      	adds	r7, #36	; 0x24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd90      	pop	{r4, r7, pc}

08009d6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b088      	sub	sp, #32
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d904      	bls.n	8009d90 <remove_chain+0x26>
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d301      	bcc.n	8009d94 <remove_chain+0x2a>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e04b      	b.n	8009e2c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00c      	beq.n	8009db4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f7ff fef6 	bl	8009b92 <put_fat>
 8009da6:	4603      	mov	r3, r0
 8009da8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009daa:	7ffb      	ldrb	r3, [r7, #31]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <remove_chain+0x4a>
 8009db0:	7ffb      	ldrb	r3, [r7, #31]
 8009db2:	e03b      	b.n	8009e2c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7ff fe43 	bl	8009a42 <get_fat>
 8009dbc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d031      	beq.n	8009e28 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <remove_chain+0x64>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e02e      	b.n	8009e2c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d101      	bne.n	8009dda <remove_chain+0x70>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e028      	b.n	8009e2c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009dda:	2200      	movs	r2, #0
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	69b8      	ldr	r0, [r7, #24]
 8009de0:	f7ff fed7 	bl	8009b92 <put_fat>
 8009de4:	4603      	mov	r3, r0
 8009de6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009de8:	7ffb      	ldrb	r3, [r7, #31]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <remove_chain+0x88>
 8009dee:	7ffb      	ldrb	r3, [r7, #31]
 8009df0:	e01c      	b.n	8009e2c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	695a      	ldr	r2, [r3, #20]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	3b02      	subs	r3, #2
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d20b      	bcs.n	8009e18 <remove_chain+0xae>
			fs->free_clst++;
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	791b      	ldrb	r3, [r3, #4]
 8009e0e:	f043 0301 	orr.w	r3, r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d3c6      	bcc.n	8009db4 <remove_chain+0x4a>
 8009e26:	e000      	b.n	8009e2a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009e28:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3720      	adds	r7, #32
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10d      	bne.n	8009e66 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d004      	beq.n	8009e60 <create_chain+0x2c>
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d31b      	bcc.n	8009e98 <create_chain+0x64>
 8009e60:	2301      	movs	r3, #1
 8009e62:	61bb      	str	r3, [r7, #24]
 8009e64:	e018      	b.n	8009e98 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff fdea 	bl	8009a42 <get_fat>
 8009e6e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d801      	bhi.n	8009e7a <create_chain+0x46>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e070      	b.n	8009f5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d101      	bne.n	8009e86 <create_chain+0x52>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	e06a      	b.n	8009f5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d201      	bcs.n	8009e94 <create_chain+0x60>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	e063      	b.n	8009f5c <create_chain+0x128>
		scl = clst;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d307      	bcc.n	8009ebc <create_chain+0x88>
				ncl = 2;
 8009eac:	2302      	movs	r3, #2
 8009eae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d901      	bls.n	8009ebc <create_chain+0x88>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e04f      	b.n	8009f5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009ebc:	69f9      	ldr	r1, [r7, #28]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fdbf 	bl	8009a42 <get_fat>
 8009ec4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00e      	beq.n	8009eea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d003      	beq.n	8009eda <create_chain+0xa6>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed8:	d101      	bne.n	8009ede <create_chain+0xaa>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	e03e      	b.n	8009f5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d1da      	bne.n	8009e9c <create_chain+0x68>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e038      	b.n	8009f5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009eea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	69f9      	ldr	r1, [r7, #28]
 8009ef2:	6938      	ldr	r0, [r7, #16]
 8009ef4:	f7ff fe4d 	bl	8009b92 <put_fat>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <create_chain+0xe2>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d006      	beq.n	8009f16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6938      	ldr	r0, [r7, #16]
 8009f0e:	f7ff fe40 	bl	8009b92 <put_fat>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d116      	bne.n	8009f4a <create_chain+0x116>
		fs->last_clst = ncl;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	695a      	ldr	r2, [r3, #20]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	3b02      	subs	r3, #2
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d804      	bhi.n	8009f3a <create_chain+0x106>
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	1e5a      	subs	r2, r3, #1
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	791b      	ldrb	r3, [r3, #4]
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	711a      	strb	r2, [r3, #4]
 8009f48:	e007      	b.n	8009f5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d102      	bne.n	8009f56 <create_chain+0x122>
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	e000      	b.n	8009f58 <create_chain+0x124>
 8009f56:	2301      	movs	r3, #1
 8009f58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009f5a:	69fb      	ldr	r3, [r7, #28]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3720      	adds	r7, #32
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	3304      	adds	r3, #4
 8009f7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	0a5b      	lsrs	r3, r3, #9
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	8952      	ldrh	r2, [r2, #10]
 8009f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	1d1a      	adds	r2, r3, #4
 8009f8e:	613a      	str	r2, [r7, #16]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <clmt_clust+0x3a>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e010      	b.n	8009fc0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d307      	bcc.n	8009fb6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009fb4:	e7e9      	b.n	8009f8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009fb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	4413      	add	r3, r2
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	371c      	adds	r7, #28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fe2:	d204      	bcs.n	8009fee <dir_sdi+0x22>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	f003 031f 	and.w	r3, r3, #31
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e063      	b.n	800a0ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d106      	bne.n	800a012 <dir_sdi+0x46>
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d902      	bls.n	800a012 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a010:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10c      	bne.n	800a032 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	095b      	lsrs	r3, r3, #5
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	8912      	ldrh	r2, [r2, #8]
 800a020:	4293      	cmp	r3, r2
 800a022:	d301      	bcc.n	800a028 <dir_sdi+0x5c>
 800a024:	2302      	movs	r3, #2
 800a026:	e048      	b.n	800a0ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	61da      	str	r2, [r3, #28]
 800a030:	e029      	b.n	800a086 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	895b      	ldrh	r3, [r3, #10]
 800a036:	025b      	lsls	r3, r3, #9
 800a038:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a03a:	e019      	b.n	800a070 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6979      	ldr	r1, [r7, #20]
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff fcfe 	bl	8009a42 <get_fat>
 800a046:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d101      	bne.n	800a054 <dir_sdi+0x88>
 800a050:	2301      	movs	r3, #1
 800a052:	e032      	b.n	800a0ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d904      	bls.n	800a064 <dir_sdi+0x98>
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	429a      	cmp	r2, r3
 800a062:	d301      	bcc.n	800a068 <dir_sdi+0x9c>
 800a064:	2302      	movs	r3, #2
 800a066:	e028      	b.n	800a0ba <dir_sdi+0xee>
			ofs -= csz;
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	429a      	cmp	r2, r3
 800a076:	d2e1      	bcs.n	800a03c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a078:	6979      	ldr	r1, [r7, #20]
 800a07a:	6938      	ldr	r0, [r7, #16]
 800a07c:	f7ff fcc2 	bl	8009a04 <clust2sect>
 800a080:	4602      	mov	r2, r0
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <dir_sdi+0xcc>
 800a094:	2302      	movs	r3, #2
 800a096:	e010      	b.n	800a0ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	0a5b      	lsrs	r3, r3, #9
 800a0a0:	441a      	add	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b2:	441a      	add	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b086      	sub	sp, #24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	3320      	adds	r3, #32
 800a0d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <dir_next+0x28>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0e8:	d301      	bcc.n	800a0ee <dir_next+0x2c>
 800a0ea:	2304      	movs	r3, #4
 800a0ec:	e0aa      	b.n	800a244 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f040 8098 	bne.w	800a22a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10b      	bne.n	800a124 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	095b      	lsrs	r3, r3, #5
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	8912      	ldrh	r2, [r2, #8]
 800a114:	4293      	cmp	r3, r2
 800a116:	f0c0 8088 	bcc.w	800a22a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	61da      	str	r2, [r3, #28]
 800a120:	2304      	movs	r3, #4
 800a122:	e08f      	b.n	800a244 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	0a5b      	lsrs	r3, r3, #9
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	8952      	ldrh	r2, [r2, #10]
 800a12c:	3a01      	subs	r2, #1
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d17a      	bne.n	800a22a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	4619      	mov	r1, r3
 800a13c:	4610      	mov	r0, r2
 800a13e:	f7ff fc80 	bl	8009a42 <get_fat>
 800a142:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d801      	bhi.n	800a14e <dir_next+0x8c>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e07a      	b.n	800a244 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a154:	d101      	bne.n	800a15a <dir_next+0x98>
 800a156:	2301      	movs	r3, #1
 800a158:	e074      	b.n	800a244 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	429a      	cmp	r2, r3
 800a162:	d358      	bcc.n	800a216 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d104      	bne.n	800a174 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	61da      	str	r2, [r3, #28]
 800a170:	2304      	movs	r3, #4
 800a172:	e067      	b.n	800a244 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f7ff fe59 	bl	8009e34 <create_chain>
 800a182:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <dir_next+0xcc>
 800a18a:	2307      	movs	r3, #7
 800a18c:	e05a      	b.n	800a244 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d101      	bne.n	800a198 <dir_next+0xd6>
 800a194:	2302      	movs	r3, #2
 800a196:	e055      	b.n	800a244 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19e:	d101      	bne.n	800a1a4 <dir_next+0xe2>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e04f      	b.n	800a244 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff fb4d 	bl	8009844 <sync_window>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <dir_next+0xf2>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e047      	b.n	800a244 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3334      	adds	r3, #52	; 0x34
 800a1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff f945 	bl	800944e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	613b      	str	r3, [r7, #16]
 800a1c8:	6979      	ldr	r1, [r7, #20]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f7ff fc1a 	bl	8009a04 <clust2sect>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	631a      	str	r2, [r3, #48]	; 0x30
 800a1d6:	e012      	b.n	800a1fe <dir_next+0x13c>
						fs->wflag = 1;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff fb30 	bl	8009844 <sync_window>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <dir_next+0x12c>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e02a      	b.n	800a244 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	613b      	str	r3, [r7, #16]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	631a      	str	r2, [r3, #48]	; 0x30
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	895b      	ldrh	r3, [r3, #10]
 800a202:	461a      	mov	r2, r3
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	4293      	cmp	r3, r2
 800a208:	d3e6      	bcc.n	800a1d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	1ad2      	subs	r2, r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a21c:	6979      	ldr	r1, [r7, #20]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fbf0 	bl	8009a04 <clust2sect>
 800a224:	4602      	mov	r2, r0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a23c:	441a      	add	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a25c:	2100      	movs	r1, #0
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7ff feb4 	bl	8009fcc <dir_sdi>
 800a264:	4603      	mov	r3, r0
 800a266:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d12b      	bne.n	800a2c6 <dir_alloc+0x7a>
		n = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	4619      	mov	r1, r3
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff fb27 	bl	80098cc <move_window>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11d      	bne.n	800a2c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2be5      	cmp	r3, #229	; 0xe5
 800a290:	d004      	beq.n	800a29c <dir_alloc+0x50>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d107      	bne.n	800a2ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	613b      	str	r3, [r7, #16]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d102      	bne.n	800a2b0 <dir_alloc+0x64>
 800a2aa:	e00c      	b.n	800a2c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff ff05 	bl	800a0c2 <dir_next>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0d7      	beq.n	800a272 <dir_alloc+0x26>
 800a2c2:	e000      	b.n	800a2c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a2c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d101      	bne.n	800a2d0 <dir_alloc+0x84>
 800a2cc:	2307      	movs	r3, #7
 800a2ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	331a      	adds	r3, #26
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff f80d 	bl	8009308 <ld_word>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d109      	bne.n	800a30e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	3314      	adds	r3, #20
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7ff f802 	bl	8009308 <ld_word>
 800a304:	4603      	mov	r3, r0
 800a306:	041b      	lsls	r3, r3, #16
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a30e:	68fb      	ldr	r3, [r7, #12]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	331a      	adds	r3, #26
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	b292      	uxth	r2, r2
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff f825 	bl	800937e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d109      	bne.n	800a350 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f103 0214 	add.w	r2, r3, #20
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	0c1b      	lsrs	r3, r3, #16
 800a346:	b29b      	uxth	r3, r3
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f7ff f817 	bl	800937e <st_word>
	}
}
 800a350:	bf00      	nop
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a366:	2100      	movs	r1, #0
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff fe2f 	bl	8009fcc <dir_sdi>
 800a36e:	4603      	mov	r3, r0
 800a370:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <dir_find+0x24>
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	e03e      	b.n	800a3fa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	4619      	mov	r1, r3
 800a382:	6938      	ldr	r0, [r7, #16]
 800a384:	f7ff faa2 	bl	80098cc <move_window>
 800a388:	4603      	mov	r3, r0
 800a38a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d12f      	bne.n	800a3f2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <dir_find+0x4e>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	75fb      	strb	r3, [r7, #23]
 800a3a4:	e028      	b.n	800a3f8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	330b      	adds	r3, #11
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	330b      	adds	r3, #11
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	f003 0308 	and.w	r3, r3, #8
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <dir_find+0x86>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a18      	ldr	r0, [r3, #32]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3324      	adds	r3, #36	; 0x24
 800a3d0:	220b      	movs	r2, #11
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	f7ff f856 	bl	8009484 <mem_cmp>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00b      	beq.n	800a3f6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff fe6e 	bl	800a0c2 <dir_next>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0c5      	beq.n	800a37c <dir_find+0x24>
 800a3f0:	e002      	b.n	800a3f8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a3f2:	bf00      	nop
 800a3f4:	e000      	b.n	800a3f8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a3f6:	bf00      	nop

	return res;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a410:	2101      	movs	r1, #1
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff ff1a 	bl	800a24c <dir_alloc>
 800a418:	4603      	mov	r3, r0
 800a41a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d11c      	bne.n	800a45c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	4619      	mov	r1, r3
 800a428:	68b8      	ldr	r0, [r7, #8]
 800a42a:	f7ff fa4f 	bl	80098cc <move_window>
 800a42e:	4603      	mov	r3, r0
 800a430:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d111      	bne.n	800a45c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	2220      	movs	r2, #32
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff f804 	bl	800944e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a18      	ldr	r0, [r3, #32]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3324      	adds	r3, #36	; 0x24
 800a44e:	220b      	movs	r2, #11
 800a450:	4619      	mov	r1, r3
 800a452:	f7fe ffdb 	bl	800940c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2201      	movs	r2, #1
 800a45a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3324      	adds	r3, #36	; 0x24
 800a47c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a47e:	220b      	movs	r2, #11
 800a480:	2120      	movs	r1, #32
 800a482:	68b8      	ldr	r0, [r7, #8]
 800a484:	f7fe ffe3 	bl	800944e <mem_set>
	si = i = 0; ni = 8;
 800a488:	2300      	movs	r3, #0
 800a48a:	613b      	str	r3, [r7, #16]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	2308      	movs	r3, #8
 800a492:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	61fa      	str	r2, [r7, #28]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4413      	add	r3, r2
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a4a2:	7efb      	ldrb	r3, [r7, #27]
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	d94e      	bls.n	800a546 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a4a8:	7efb      	ldrb	r3, [r7, #27]
 800a4aa:	2b2f      	cmp	r3, #47	; 0x2f
 800a4ac:	d006      	beq.n	800a4bc <create_name+0x54>
 800a4ae:	7efb      	ldrb	r3, [r7, #27]
 800a4b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a4b2:	d110      	bne.n	800a4d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a4b4:	e002      	b.n	800a4bc <create_name+0x54>
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	61fb      	str	r3, [r7, #28]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	2b2f      	cmp	r3, #47	; 0x2f
 800a4c6:	d0f6      	beq.n	800a4b6 <create_name+0x4e>
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2b5c      	cmp	r3, #92	; 0x5c
 800a4d2:	d0f0      	beq.n	800a4b6 <create_name+0x4e>
			break;
 800a4d4:	e038      	b.n	800a548 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a4d6:	7efb      	ldrb	r3, [r7, #27]
 800a4d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4da:	d003      	beq.n	800a4e4 <create_name+0x7c>
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d30c      	bcc.n	800a4fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2b0b      	cmp	r3, #11
 800a4e8:	d002      	beq.n	800a4f0 <create_name+0x88>
 800a4ea:	7efb      	ldrb	r3, [r7, #27]
 800a4ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ee:	d001      	beq.n	800a4f4 <create_name+0x8c>
 800a4f0:	2306      	movs	r3, #6
 800a4f2:	e044      	b.n	800a57e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	230b      	movs	r3, #11
 800a4fa:	617b      	str	r3, [r7, #20]
			continue;
 800a4fc:	e022      	b.n	800a544 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a4fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a502:	2b00      	cmp	r3, #0
 800a504:	da04      	bge.n	800a510 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a506:	7efb      	ldrb	r3, [r7, #27]
 800a508:	3b80      	subs	r3, #128	; 0x80
 800a50a:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <create_name+0x120>)
 800a50c:	5cd3      	ldrb	r3, [r2, r3]
 800a50e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a510:	7efb      	ldrb	r3, [r7, #27]
 800a512:	4619      	mov	r1, r3
 800a514:	481d      	ldr	r0, [pc, #116]	; (800a58c <create_name+0x124>)
 800a516:	f7fe ffdc 	bl	80094d2 <chk_chr>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <create_name+0xbc>
 800a520:	2306      	movs	r3, #6
 800a522:	e02c      	b.n	800a57e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a524:	7efb      	ldrb	r3, [r7, #27]
 800a526:	2b60      	cmp	r3, #96	; 0x60
 800a528:	d905      	bls.n	800a536 <create_name+0xce>
 800a52a:	7efb      	ldrb	r3, [r7, #27]
 800a52c:	2b7a      	cmp	r3, #122	; 0x7a
 800a52e:	d802      	bhi.n	800a536 <create_name+0xce>
 800a530:	7efb      	ldrb	r3, [r7, #27]
 800a532:	3b20      	subs	r3, #32
 800a534:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	613a      	str	r2, [r7, #16]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	4413      	add	r3, r2
 800a540:	7efa      	ldrb	r2, [r7, #27]
 800a542:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a544:	e7a6      	b.n	800a494 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a546:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	441a      	add	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <create_name+0xf4>
 800a558:	2306      	movs	r3, #6
 800a55a:	e010      	b.n	800a57e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2be5      	cmp	r3, #229	; 0xe5
 800a562:	d102      	bne.n	800a56a <create_name+0x102>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2205      	movs	r2, #5
 800a568:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a56a:	7efb      	ldrb	r3, [r7, #27]
 800a56c:	2b20      	cmp	r3, #32
 800a56e:	d801      	bhi.n	800a574 <create_name+0x10c>
 800a570:	2204      	movs	r2, #4
 800a572:	e000      	b.n	800a576 <create_name+0x10e>
 800a574:	2200      	movs	r2, #0
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	330b      	adds	r3, #11
 800a57a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a57c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	080103b8 	.word	0x080103b8
 800a58c:	080102ec 	.word	0x080102ec

0800a590 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a5a4:	e002      	b.n	800a5ac <follow_path+0x1c>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b2f      	cmp	r3, #47	; 0x2f
 800a5b2:	d0f8      	beq.n	800a5a6 <follow_path+0x16>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ba:	d0f4      	beq.n	800a5a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b1f      	cmp	r3, #31
 800a5c8:	d80a      	bhi.n	800a5e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2280      	movs	r2, #128	; 0x80
 800a5ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff fcf9 	bl	8009fcc <dir_sdi>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]
 800a5de:	e043      	b.n	800a668 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a5e0:	463b      	mov	r3, r7
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff ff3f 	bl	800a468 <create_name>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d134      	bne.n	800a65e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff feaf 	bl	800a358 <dir_find>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a604:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d127      	bne.n	800a662 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d122      	bne.n	800a662 <follow_path+0xd2>
 800a61c:	2305      	movs	r3, #5
 800a61e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a620:	e01f      	b.n	800a662 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a622:	7afb      	ldrb	r3, [r7, #11]
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d11c      	bne.n	800a666 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	799b      	ldrb	r3, [r3, #6]
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	d102      	bne.n	800a63e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a638:	2305      	movs	r3, #5
 800a63a:	75fb      	strb	r3, [r7, #23]
 800a63c:	e014      	b.n	800a668 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64c:	4413      	add	r3, r2
 800a64e:	4619      	mov	r1, r3
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7ff fe42 	bl	800a2da <ld_clust>
 800a656:	4602      	mov	r2, r0
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a65c:	e7c0      	b.n	800a5e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a65e:	bf00      	nop
 800a660:	e002      	b.n	800a668 <follow_path+0xd8>
				break;
 800a662:	bf00      	nop
 800a664:	e000      	b.n	800a668 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a666:	bf00      	nop
			}
		}
	}

	return res;
 800a668:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a672:	b480      	push	{r7}
 800a674:	b087      	sub	sp, #28
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a67a:	f04f 33ff 	mov.w	r3, #4294967295
 800a67e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d031      	beq.n	800a6ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e002      	b.n	800a696 <get_ldnumber+0x24>
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	3301      	adds	r3, #1
 800a694:	617b      	str	r3, [r7, #20]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d903      	bls.n	800a6a6 <get_ldnumber+0x34>
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	2b3a      	cmp	r3, #58	; 0x3a
 800a6a4:	d1f4      	bne.n	800a690 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b3a      	cmp	r3, #58	; 0x3a
 800a6ac:	d11c      	bne.n	800a6e8 <get_ldnumber+0x76>
			tp = *path;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	60fa      	str	r2, [r7, #12]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	3b30      	subs	r3, #48	; 0x30
 800a6be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b09      	cmp	r3, #9
 800a6c4:	d80e      	bhi.n	800a6e4 <get_ldnumber+0x72>
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d10a      	bne.n	800a6e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d107      	bne.n	800a6e4 <get_ldnumber+0x72>
					vol = (int)i;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	e002      	b.n	800a6ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a6ec:	693b      	ldr	r3, [r7, #16]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	70da      	strb	r2, [r3, #3]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f04f 32ff 	mov.w	r2, #4294967295
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff f8d8 	bl	80098cc <move_window>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <check_fs+0x2a>
 800a722:	2304      	movs	r3, #4
 800a724:	e038      	b.n	800a798 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3334      	adds	r3, #52	; 0x34
 800a72a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fdea 	bl	8009308 <ld_word>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d001      	beq.n	800a744 <check_fs+0x48>
 800a740:	2303      	movs	r3, #3
 800a742:	e029      	b.n	800a798 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a74a:	2be9      	cmp	r3, #233	; 0xe9
 800a74c:	d009      	beq.n	800a762 <check_fs+0x66>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a754:	2beb      	cmp	r3, #235	; 0xeb
 800a756:	d11e      	bne.n	800a796 <check_fs+0x9a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a75e:	2b90      	cmp	r3, #144	; 0x90
 800a760:	d119      	bne.n	800a796 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	3334      	adds	r3, #52	; 0x34
 800a766:	3336      	adds	r3, #54	; 0x36
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fde5 	bl	8009338 <ld_dword>
 800a76e:	4603      	mov	r3, r0
 800a770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a774:	4a0a      	ldr	r2, [pc, #40]	; (800a7a0 <check_fs+0xa4>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d101      	bne.n	800a77e <check_fs+0x82>
 800a77a:	2300      	movs	r3, #0
 800a77c:	e00c      	b.n	800a798 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	3334      	adds	r3, #52	; 0x34
 800a782:	3352      	adds	r3, #82	; 0x52
 800a784:	4618      	mov	r0, r3
 800a786:	f7fe fdd7 	bl	8009338 <ld_dword>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4a05      	ldr	r2, [pc, #20]	; (800a7a4 <check_fs+0xa8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d101      	bne.n	800a796 <check_fs+0x9a>
 800a792:	2300      	movs	r3, #0
 800a794:	e000      	b.n	800a798 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a796:	2302      	movs	r3, #2
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	00544146 	.word	0x00544146
 800a7a4:	33544146 	.word	0x33544146

0800a7a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b096      	sub	sp, #88	; 0x58
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7ff ff58 	bl	800a672 <get_ldnumber>
 800a7c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	da01      	bge.n	800a7ce <find_volume+0x26>
 800a7ca:	230b      	movs	r3, #11
 800a7cc:	e236      	b.n	800ac3c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a7ce:	4aac      	ldr	r2, [pc, #688]	; (800aa80 <find_volume+0x2d8>)
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <find_volume+0x3a>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	e22c      	b.n	800ac3c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800a7e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7e4:	f7fe fe90 	bl	8009508 <lock_fs>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <find_volume+0x4a>
 800a7ee:	230f      	movs	r3, #15
 800a7f0:	e224      	b.n	800ac3c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	f023 0301 	bic.w	r3, r3, #1
 800a7fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01a      	beq.n	800a83e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80a:	785b      	ldrb	r3, [r3, #1]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7fe fcdd 	bl	80091cc <disk_status>
 800a812:	4603      	mov	r3, r0
 800a814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10c      	bne.n	800a83e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <find_volume+0x92>
 800a82a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a836:	230a      	movs	r3, #10
 800a838:	e200      	b.n	800ac3c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a83a:	2300      	movs	r3, #0
 800a83c:	e1fe      	b.n	800ac3c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	2200      	movs	r2, #0
 800a842:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	b2da      	uxtb	r2, r3
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	785b      	ldrb	r3, [r3, #1]
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fcd5 	bl	8009200 <disk_initialize>
 800a856:	4603      	mov	r3, r0
 800a858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a85c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a868:	2303      	movs	r3, #3
 800a86a:	e1e7      	b.n	800ac3c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d007      	beq.n	800a882 <find_volume+0xda>
 800a872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a876:	f003 0304 	and.w	r3, r3, #4
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a87e:	230a      	movs	r3, #10
 800a880:	e1dc      	b.n	800ac3c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a88a:	f7ff ff37 	bl	800a6fc <check_fs>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d14b      	bne.n	800a934 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a89c:	2300      	movs	r3, #0
 800a89e:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a0:	e01f      	b.n	800a8e2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a8b0:	4413      	add	r3, r2
 800a8b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d006      	beq.n	800a8cc <find_volume+0x124>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe fd38 	bl	8009338 <ld_dword>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	e000      	b.n	800a8ce <find_volume+0x126>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a8d6:	440b      	add	r3, r1
 800a8d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8de:	3301      	adds	r3, #1
 800a8e0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d9dc      	bls.n	800a8a2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <find_volume+0x150>
 800a8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a900:	4413      	add	r3, r2
 800a902:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a906:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d005      	beq.n	800a91a <find_volume+0x172>
 800a90e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a912:	f7ff fef3 	bl	800a6fc <check_fs>
 800a916:	4603      	mov	r3, r0
 800a918:	e000      	b.n	800a91c <find_volume+0x174>
 800a91a:	2303      	movs	r3, #3
 800a91c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a924:	2b01      	cmp	r3, #1
 800a926:	d905      	bls.n	800a934 <find_volume+0x18c>
 800a928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92a:	3301      	adds	r3, #1
 800a92c:	643b      	str	r3, [r7, #64]	; 0x40
 800a92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a930:	2b03      	cmp	r3, #3
 800a932:	d9e1      	bls.n	800a8f8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d101      	bne.n	800a940 <find_volume+0x198>
 800a93c:	2301      	movs	r3, #1
 800a93e:	e17d      	b.n	800ac3c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a944:	2b01      	cmp	r3, #1
 800a946:	d901      	bls.n	800a94c <find_volume+0x1a4>
 800a948:	230d      	movs	r3, #13
 800a94a:	e177      	b.n	800ac3c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	3334      	adds	r3, #52	; 0x34
 800a950:	330b      	adds	r3, #11
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fcd8 	bl	8009308 <ld_word>
 800a958:	4603      	mov	r3, r0
 800a95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a95e:	d001      	beq.n	800a964 <find_volume+0x1bc>
 800a960:	230d      	movs	r3, #13
 800a962:	e16b      	b.n	800ac3c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	3334      	adds	r3, #52	; 0x34
 800a968:	3316      	adds	r3, #22
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fccc 	bl	8009308 <ld_word>
 800a970:	4603      	mov	r3, r0
 800a972:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <find_volume+0x1e0>
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	3334      	adds	r3, #52	; 0x34
 800a97e:	3324      	adds	r3, #36	; 0x24
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe fcd9 	bl	8009338 <ld_dword>
 800a986:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a98c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	789b      	ldrb	r3, [r3, #2]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d005      	beq.n	800a9ac <find_volume+0x204>
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	789b      	ldrb	r3, [r3, #2]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d001      	beq.n	800a9ac <find_volume+0x204>
 800a9a8:	230d      	movs	r3, #13
 800a9aa:	e147      	b.n	800ac3c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	789b      	ldrb	r3, [r3, #2]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
 800a9b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	895b      	ldrh	r3, [r3, #10]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d008      	beq.n	800a9e0 <find_volume+0x238>
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	895b      	ldrh	r3, [r3, #10]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	895b      	ldrh	r3, [r3, #10]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <find_volume+0x23c>
 800a9e0:	230d      	movs	r3, #13
 800a9e2:	e12b      	b.n	800ac3c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	3334      	adds	r3, #52	; 0x34
 800a9e8:	3311      	adds	r3, #17
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fc8c 	bl	8009308 <ld_word>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	891b      	ldrh	r3, [r3, #8]
 800a9fc:	f003 030f 	and.w	r3, r3, #15
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <find_volume+0x262>
 800aa06:	230d      	movs	r3, #13
 800aa08:	e118      	b.n	800ac3c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0c:	3334      	adds	r3, #52	; 0x34
 800aa0e:	3313      	adds	r3, #19
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fc79 	bl	8009308 <ld_word>
 800aa16:	4603      	mov	r3, r0
 800aa18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aa1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d106      	bne.n	800aa2e <find_volume+0x286>
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	3334      	adds	r3, #52	; 0x34
 800aa24:	3320      	adds	r3, #32
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fc86 	bl	8009338 <ld_dword>
 800aa2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	3334      	adds	r3, #52	; 0x34
 800aa32:	330e      	adds	r3, #14
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fc67 	bl	8009308 <ld_word>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aa3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <find_volume+0x2a0>
 800aa44:	230d      	movs	r3, #13
 800aa46:	e0f9      	b.n	800ac3c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aa48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4c:	4413      	add	r3, r2
 800aa4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa50:	8912      	ldrh	r2, [r2, #8]
 800aa52:	0912      	lsrs	r2, r2, #4
 800aa54:	b292      	uxth	r2, r2
 800aa56:	4413      	add	r3, r2
 800aa58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aa5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d201      	bcs.n	800aa66 <find_volume+0x2be>
 800aa62:	230d      	movs	r3, #13
 800aa64:	e0ea      	b.n	800ac3c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aa66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa6e:	8952      	ldrh	r2, [r2, #10]
 800aa70:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d103      	bne.n	800aa84 <find_volume+0x2dc>
 800aa7c:	230d      	movs	r3, #13
 800aa7e:	e0dd      	b.n	800ac3c <find_volume+0x494>
 800aa80:	240002c8 	.word	0x240002c8
		fmt = FS_FAT32;
 800aa84:	2303      	movs	r3, #3
 800aa86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d802      	bhi.n	800aa9a <find_volume+0x2f2>
 800aa94:	2302      	movs	r3, #2
 800aa96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d802      	bhi.n	800aaaa <find_volume+0x302>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	1c9a      	adds	r2, r3, #2
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aab6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aabc:	441a      	add	r2, r3
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800aac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	441a      	add	r2, r3
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800aacc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d11e      	bne.n	800ab12 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	3334      	adds	r3, #52	; 0x34
 800aad8:	332a      	adds	r3, #42	; 0x2a
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fc14 	bl	8009308 <ld_word>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <find_volume+0x342>
 800aae6:	230d      	movs	r3, #13
 800aae8:	e0a8      	b.n	800ac3c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	891b      	ldrh	r3, [r3, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <find_volume+0x34e>
 800aaf2:	230d      	movs	r3, #13
 800aaf4:	e0a2      	b.n	800ac3c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	3334      	adds	r3, #52	; 0x34
 800aafa:	332c      	adds	r3, #44	; 0x2c
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fc1b 	bl	8009338 <ld_dword>
 800ab02:	4602      	mov	r2, r0
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab10:	e01f      	b.n	800ab52 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	891b      	ldrh	r3, [r3, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <find_volume+0x376>
 800ab1a:	230d      	movs	r3, #13
 800ab1c:	e08e      	b.n	800ac3c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab24:	441a      	add	r2, r3
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ab2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d103      	bne.n	800ab3a <find_volume+0x392>
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	e00a      	b.n	800ab50 <find_volume+0x3a8>
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	4413      	add	r3, r2
 800ab44:	085a      	lsrs	r2, r3, #1
 800ab46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ab50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	69da      	ldr	r2, [r3, #28]
 800ab56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ab5c:	0a5b      	lsrs	r3, r3, #9
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d201      	bcs.n	800ab66 <find_volume+0x3be>
 800ab62:	230d      	movs	r3, #13
 800ab64:	e06a      	b.n	800ac3c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ab66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab68:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6c:	615a      	str	r2, [r3, #20]
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	695a      	ldr	r2, [r3, #20]
 800ab72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab74:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ab76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab78:	2280      	movs	r2, #128	; 0x80
 800ab7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ab7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d149      	bne.n	800ac18 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	3334      	adds	r3, #52	; 0x34
 800ab88:	3330      	adds	r3, #48	; 0x30
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe fbbc 	bl	8009308 <ld_word>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d140      	bne.n	800ac18 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ab96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab98:	3301      	adds	r3, #1
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab9e:	f7fe fe95 	bl	80098cc <move_window>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d137      	bne.n	800ac18 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	2200      	movs	r2, #0
 800abac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	3334      	adds	r3, #52	; 0x34
 800abb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fba6 	bl	8009308 <ld_word>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d127      	bne.n	800ac18 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abca:	3334      	adds	r3, #52	; 0x34
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe fbb3 	bl	8009338 <ld_dword>
 800abd2:	4603      	mov	r3, r0
 800abd4:	4a1b      	ldr	r2, [pc, #108]	; (800ac44 <find_volume+0x49c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d11e      	bne.n	800ac18 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	3334      	adds	r3, #52	; 0x34
 800abde:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fba8 	bl	8009338 <ld_dword>
 800abe8:	4603      	mov	r3, r0
 800abea:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <find_volume+0x4a0>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d113      	bne.n	800ac18 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	3334      	adds	r3, #52	; 0x34
 800abf4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fe fb9d 	bl	8009338 <ld_dword>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac02:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	3334      	adds	r3, #52	; 0x34
 800ac08:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe fb93 	bl	8009338 <ld_dword>
 800ac12:	4602      	mov	r2, r0
 800ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac16:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ac18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ac1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ac20:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <find_volume+0x4a4>)
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	3301      	adds	r3, #1
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	4b08      	ldr	r3, [pc, #32]	; (800ac4c <find_volume+0x4a4>)
 800ac2a:	801a      	strh	r2, [r3, #0]
 800ac2c:	4b07      	ldr	r3, [pc, #28]	; (800ac4c <find_volume+0x4a4>)
 800ac2e:	881a      	ldrh	r2, [r3, #0]
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ac34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac36:	f7fe fde1 	bl	80097fc <clear_lock>
#endif
	return FR_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3758      	adds	r7, #88	; 0x58
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	41615252 	.word	0x41615252
 800ac48:	61417272 	.word	0x61417272
 800ac4c:	240002cc 	.word	0x240002cc

0800ac50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ac5a:	2309      	movs	r3, #9
 800ac5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d02e      	beq.n	800acc2 <validate+0x72>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d02a      	beq.n	800acc2 <validate+0x72>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d025      	beq.n	800acc2 <validate+0x72>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	889a      	ldrh	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	88db      	ldrh	r3, [r3, #6]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d11e      	bne.n	800acc2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fe fc3d 	bl	8009508 <lock_fs>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d014      	beq.n	800acbe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	785b      	ldrb	r3, [r3, #1]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fa96 	bl	80091cc <disk_status>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <validate+0x60>
				res = FR_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]
 800acae:	e008      	b.n	800acc2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2100      	movs	r1, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fc3c 	bl	8009534 <unlock_fs>
 800acbc:	e001      	b.n	800acc2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800acbe:	230f      	movs	r3, #15
 800acc0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d102      	bne.n	800acce <validate+0x7e>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	e000      	b.n	800acd0 <validate+0x80>
 800acce:	2300      	movs	r3, #0
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	6013      	str	r3, [r2, #0]
	return res;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	4613      	mov	r3, r2
 800acec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800acf2:	f107 0310 	add.w	r3, r7, #16
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff fcbb 	bl	800a672 <get_ldnumber>
 800acfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	da01      	bge.n	800ad08 <f_mount+0x28>
 800ad04:	230b      	movs	r3, #11
 800ad06:	e048      	b.n	800ad9a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ad08:	4a26      	ldr	r2, [pc, #152]	; (800ada4 <f_mount+0xc4>)
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00f      	beq.n	800ad38 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ad18:	69b8      	ldr	r0, [r7, #24]
 800ad1a:	f7fe fd6f 	bl	80097fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 f904 	bl	800bf30 <ff_del_syncobj>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <f_mount+0x52>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e033      	b.n	800ad9a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	2200      	movs	r2, #0
 800ad36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00f      	beq.n	800ad5e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	330c      	adds	r3, #12
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f001 f8d3 	bl	800befa <ff_cre_syncobj>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <f_mount+0x7e>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e01d      	b.n	800ad9a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4910      	ldr	r1, [pc, #64]	; (800ada4 <f_mount+0xc4>)
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <f_mount+0x94>
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d001      	beq.n	800ad78 <f_mount+0x98>
 800ad74:	2300      	movs	r3, #0
 800ad76:	e010      	b.n	800ad9a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ad78:	f107 010c 	add.w	r1, r7, #12
 800ad7c:	f107 0308 	add.w	r3, r7, #8
 800ad80:	2200      	movs	r2, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff fd10 	bl	800a7a8 <find_volume>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	7dfa      	ldrb	r2, [r7, #23]
 800ad90:	4611      	mov	r1, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fbce 	bl	8009534 <unlock_fs>
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	240002c8 	.word	0x240002c8

0800ada8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b098      	sub	sp, #96	; 0x60
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <f_open+0x18>
 800adbc:	2309      	movs	r3, #9
 800adbe:	e1b4      	b.n	800b12a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800adc8:	79fa      	ldrb	r2, [r7, #7]
 800adca:	f107 0110 	add.w	r1, r7, #16
 800adce:	f107 0308 	add.w	r3, r7, #8
 800add2:	4618      	mov	r0, r3
 800add4:	f7ff fce8 	bl	800a7a8 <find_volume>
 800add8:	4603      	mov	r3, r0
 800adda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800adde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 8191 	bne.w	800b10a <f_open+0x362>
		dj.obj.fs = fs;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	f107 0314 	add.w	r3, r7, #20
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fbcb 	bl	800a590 <follow_path>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ae00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d11a      	bne.n	800ae3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ae08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae0c:	b25b      	sxtb	r3, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	da03      	bge.n	800ae1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ae12:	2306      	movs	r3, #6
 800ae14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae18:	e011      	b.n	800ae3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf14      	ite	ne
 800ae24:	2301      	movne	r3, #1
 800ae26:	2300      	moveq	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fb9a 	bl	800956c <chk_lock>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	f003 031c 	and.w	r3, r3, #28
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d07f      	beq.n	800af48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ae48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d017      	beq.n	800ae80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ae50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d10e      	bne.n	800ae76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ae58:	f7fe fbe4 	bl	8009624 <enq_lock>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d006      	beq.n	800ae70 <f_open+0xc8>
 800ae62:	f107 0314 	add.w	r3, r7, #20
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff facb 	bl	800a402 <dir_register>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	e000      	b.n	800ae72 <f_open+0xca>
 800ae70:	2312      	movs	r3, #18
 800ae72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	f043 0308 	orr.w	r3, r3, #8
 800ae7c:	71fb      	strb	r3, [r7, #7]
 800ae7e:	e010      	b.n	800aea2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ae80:	7ebb      	ldrb	r3, [r7, #26]
 800ae82:	f003 0311 	and.w	r3, r3, #17
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <f_open+0xea>
					res = FR_DENIED;
 800ae8a:	2307      	movs	r3, #7
 800ae8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae90:	e007      	b.n	800aea2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <f_open+0xfa>
 800ae9c:	2308      	movs	r3, #8
 800ae9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d168      	bne.n	800af7c <f_open+0x1d4>
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d063      	beq.n	800af7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800aeb4:	f7fd ff34 	bl	8008d20 <get_fattime>
 800aeb8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aeba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebc:	330e      	adds	r3, #14
 800aebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe fa77 	bl	80093b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec8:	3316      	adds	r3, #22
 800aeca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fa71 	bl	80093b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed4:	330b      	adds	r3, #11
 800aed6:	2220      	movs	r2, #32
 800aed8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff f9fa 	bl	800a2da <ld_clust>
 800aee6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aeec:	2200      	movs	r2, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff fa12 	bl	800a318 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	331c      	adds	r3, #28
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe fa5a 	bl	80093b4 <st_dword>
					fs->wflag = 1;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2201      	movs	r2, #1
 800af04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800af06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d037      	beq.n	800af7c <f_open+0x1d4>
						dw = fs->winsect;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800af12:	f107 0314 	add.w	r3, r7, #20
 800af16:	2200      	movs	r2, #0
 800af18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe ff25 	bl	8009d6a <remove_chain>
 800af20:	4603      	mov	r3, r0
 800af22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800af26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d126      	bne.n	800af7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fcca 	bl	80098cc <move_window>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af42:	3a01      	subs	r2, #1
 800af44:	611a      	str	r2, [r3, #16]
 800af46:	e019      	b.n	800af7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800af48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d115      	bne.n	800af7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800af50:	7ebb      	ldrb	r3, [r7, #26]
 800af52:	f003 0310 	and.w	r3, r3, #16
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800af5a:	2304      	movs	r3, #4
 800af5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af60:	e00c      	b.n	800af7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d007      	beq.n	800af7c <f_open+0x1d4>
 800af6c:	7ebb      	ldrb	r3, [r7, #26]
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <f_open+0x1d4>
						res = FR_DENIED;
 800af76:	2307      	movs	r3, #7
 800af78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800af7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af80:	2b00      	cmp	r3, #0
 800af82:	d128      	bne.n	800afd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800af9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	f023 0301 	bic.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bf14      	ite	ne
 800afae:	2301      	movne	r3, #1
 800afb0:	2300      	moveq	r3, #0
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	461a      	mov	r2, r3
 800afb6:	f107 0314 	add.w	r3, r7, #20
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fe fb53 	bl	8009668 <inc_lock>
 800afc2:	4602      	mov	r2, r0
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <f_open+0x22e>
 800afd0:	2302      	movs	r3, #2
 800afd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800afd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f040 8095 	bne.w	800b10a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff f977 	bl	800a2da <ld_clust>
 800afec:	4602      	mov	r2, r0
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	331c      	adds	r3, #28
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe f99e 	bl	8009338 <ld_dword>
 800affc:	4602      	mov	r2, r0
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	88da      	ldrh	r2, [r3, #6]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	79fa      	ldrb	r2, [r7, #7]
 800b01a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3330      	adds	r3, #48	; 0x30
 800b032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b036:	2100      	movs	r1, #0
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fe fa08 	bl	800944e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b00      	cmp	r3, #0
 800b046:	d060      	beq.n	800b10a <f_open+0x362>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d05c      	beq.n	800b10a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	68da      	ldr	r2, [r3, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	895b      	ldrh	r3, [r3, #10]
 800b05c:	025b      	lsls	r3, r3, #9
 800b05e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	657b      	str	r3, [r7, #84]	; 0x54
 800b06c:	e016      	b.n	800b09c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b072:	4618      	mov	r0, r3
 800b074:	f7fe fce5 	bl	8009a42 <get_fat>
 800b078:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d802      	bhi.n	800b086 <f_open+0x2de>
 800b080:	2302      	movs	r3, #2
 800b082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08c:	d102      	bne.n	800b094 <f_open+0x2ec>
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	657b      	str	r3, [r7, #84]	; 0x54
 800b09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <f_open+0x304>
 800b0a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d8e0      	bhi.n	800b06e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d127      	bne.n	800b10a <f_open+0x362>
 800b0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d022      	beq.n	800b10a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe fc9b 	bl	8009a04 <clust2sect>
 800b0ce:	6478      	str	r0, [r7, #68]	; 0x44
 800b0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <f_open+0x336>
						res = FR_INT_ERR;
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b0dc:	e015      	b.n	800b10a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e0:	0a5a      	lsrs	r2, r3, #9
 800b0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e4:	441a      	add	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	7858      	ldrb	r0, [r3, #1]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a1a      	ldr	r2, [r3, #32]
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f7fe f8a7 	bl	800924c <disk_read>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <f_open+0x362>
 800b104:	2301      	movs	r3, #1
 800b106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <f_open+0x370>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fa07 	bl	8009534 <unlock_fs>
 800b126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3760      	adds	r7, #96	; 0x60
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b08c      	sub	sp, #48	; 0x30
 800b136:	af00      	add	r7, sp, #0
 800b138:	60f8      	str	r0, [r7, #12]
 800b13a:	60b9      	str	r1, [r7, #8]
 800b13c:	607a      	str	r2, [r7, #4]
 800b13e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f107 0210 	add.w	r2, r7, #16
 800b150:	4611      	mov	r1, r2
 800b152:	4618      	mov	r0, r3
 800b154:	f7ff fd7c 	bl	800ac50 <validate>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b15e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b162:	2b00      	cmp	r3, #0
 800b164:	d107      	bne.n	800b176 <f_write+0x44>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	7d5b      	ldrb	r3, [r3, #21]
 800b16a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b16e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b172:	2b00      	cmp	r3, #0
 800b174:	d009      	beq.n	800b18a <f_write+0x58>
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe f9d8 	bl	8009534 <unlock_fs>
 800b184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b188:	e173      	b.n	800b472 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	7d1b      	ldrb	r3, [r3, #20]
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <f_write+0x72>
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2107      	movs	r1, #7
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe f9ca 	bl	8009534 <unlock_fs>
 800b1a0:	2307      	movs	r3, #7
 800b1a2:	e166      	b.n	800b472 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	699a      	ldr	r2, [r3, #24]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	441a      	add	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	f080 814b 	bcs.w	800b44c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	43db      	mvns	r3, r3
 800b1bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b1be:	e145      	b.n	800b44c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f040 8101 	bne.w	800b3d0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	0a5b      	lsrs	r3, r3, #9
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	8952      	ldrh	r2, [r2, #10]
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	4013      	ands	r3, r2
 800b1dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d14d      	bne.n	800b280 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10c      	bne.n	800b206 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d11a      	bne.n	800b22e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fe19 	bl	8009e34 <create_chain>
 800b202:	62b8      	str	r0, [r7, #40]	; 0x28
 800b204:	e013      	b.n	800b22e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d007      	beq.n	800b21e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	4619      	mov	r1, r3
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7fe fea5 	bl	8009f64 <clmt_clust>
 800b21a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b21c:	e007      	b.n	800b22e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	4619      	mov	r1, r3
 800b226:	4610      	mov	r0, r2
 800b228:	f7fe fe04 	bl	8009e34 <create_chain>
 800b22c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8110 	beq.w	800b456 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d109      	bne.n	800b250 <f_write+0x11e>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2202      	movs	r2, #2
 800b240:	755a      	strb	r2, [r3, #21]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2102      	movs	r1, #2
 800b246:	4618      	mov	r0, r3
 800b248:	f7fe f974 	bl	8009534 <unlock_fs>
 800b24c:	2302      	movs	r3, #2
 800b24e:	e110      	b.n	800b472 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b256:	d109      	bne.n	800b26c <f_write+0x13a>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2201      	movs	r2, #1
 800b25c:	755a      	strb	r2, [r3, #21]
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2101      	movs	r1, #1
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe f966 	bl	8009534 <unlock_fs>
 800b268:	2301      	movs	r3, #1
 800b26a:	e102      	b.n	800b472 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b270:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <f_write+0x14e>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b27e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	7d1b      	ldrb	r3, [r3, #20]
 800b284:	b25b      	sxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	da1d      	bge.n	800b2c6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	7858      	ldrb	r0, [r3, #1]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a1a      	ldr	r2, [r3, #32]
 800b298:	2301      	movs	r3, #1
 800b29a:	f7fd fff7 	bl	800928c <disk_write>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d009      	beq.n	800b2b8 <f_write+0x186>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	755a      	strb	r2, [r3, #21]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe f940 	bl	8009534 <unlock_fs>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e0dc      	b.n	800b472 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	7d1b      	ldrb	r3, [r3, #20]
 800b2bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f7fe fb98 	bl	8009a04 <clust2sect>
 800b2d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <f_write+0x1be>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2202      	movs	r2, #2
 800b2e0:	755a      	strb	r2, [r3, #21]
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2102      	movs	r1, #2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe f924 	bl	8009534 <unlock_fs>
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e0c0      	b.n	800b472 <f_write+0x340>
			sect += csect;
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	0a5b      	lsrs	r3, r3, #9
 800b2fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d041      	beq.n	800b388 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	4413      	add	r3, r2
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	8952      	ldrh	r2, [r2, #10]
 800b30e:	4293      	cmp	r3, r2
 800b310:	d905      	bls.n	800b31e <f_write+0x1ec>
					cc = fs->csize - csect;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	895b      	ldrh	r3, [r3, #10]
 800b316:	461a      	mov	r2, r3
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	7858      	ldrb	r0, [r3, #1]
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	69f9      	ldr	r1, [r7, #28]
 800b328:	f7fd ffb0 	bl	800928c <disk_write>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <f_write+0x214>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2201      	movs	r2, #1
 800b336:	755a      	strb	r2, [r3, #21]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2101      	movs	r1, #1
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe f8f9 	bl	8009534 <unlock_fs>
 800b342:	2301      	movs	r3, #1
 800b344:	e095      	b.n	800b472 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a1a      	ldr	r2, [r3, #32]
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	6a3a      	ldr	r2, [r7, #32]
 800b350:	429a      	cmp	r2, r3
 800b352:	d915      	bls.n	800b380 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a1a      	ldr	r2, [r3, #32]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	025b      	lsls	r3, r3, #9
 800b364:	69fa      	ldr	r2, [r7, #28]
 800b366:	4413      	add	r3, r2
 800b368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b36c:	4619      	mov	r1, r3
 800b36e:	f7fe f84d 	bl	800940c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	7d1b      	ldrb	r3, [r3, #20]
 800b376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	025b      	lsls	r3, r3, #9
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b386:	e044      	b.n	800b412 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d01b      	beq.n	800b3ca <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	699a      	ldr	r2, [r3, #24]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d215      	bcs.n	800b3ca <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	7858      	ldrb	r0, [r3, #1]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	f7fd ff4e 	bl	800924c <disk_read>
 800b3b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	755a      	strb	r2, [r3, #21]
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	2101      	movs	r1, #1
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe f8b7 	bl	8009534 <unlock_fs>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e053      	b.n	800b472 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d901      	bls.n	800b3ea <f_write+0x2b8>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f8:	4413      	add	r3, r2
 800b3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fc:	69f9      	ldr	r1, [r7, #28]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe f804 	bl	800940c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	7d1b      	ldrb	r3, [r3, #20]
 800b408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	4413      	add	r3, r2
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	699a      	ldr	r2, [r3, #24]
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	441a      	add	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	619a      	str	r2, [r3, #24]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	429a      	cmp	r2, r3
 800b430:	bf38      	it	cc
 800b432:	461a      	movcc	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	60da      	str	r2, [r3, #12]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	441a      	add	r2, r3
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f47f aeb6 	bne.w	800b1c0 <f_write+0x8e>
 800b454:	e000      	b.n	800b458 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b456:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	7d1b      	ldrb	r3, [r3, #20]
 800b45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b460:	b2da      	uxtb	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	2100      	movs	r1, #0
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe f862 	bl	8009534 <unlock_fs>
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3730      	adds	r7, #48	; 0x30
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b086      	sub	sp, #24
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f107 0208 	add.w	r2, r7, #8
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff fbe0 	bl	800ac50 <validate>
 800b490:	4603      	mov	r3, r0
 800b492:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d16d      	bne.n	800b576 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7d1b      	ldrb	r3, [r3, #20]
 800b49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d067      	beq.n	800b576 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7d1b      	ldrb	r3, [r3, #20]
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	da1a      	bge.n	800b4e6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	7858      	ldrb	r0, [r3, #1]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1a      	ldr	r2, [r3, #32]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f7fd fee4 	bl	800928c <disk_write>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d006      	beq.n	800b4d8 <f_sync+0x5e>
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe f830 	bl	8009534 <unlock_fs>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e055      	b.n	800b584 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	7d1b      	ldrb	r3, [r3, #20]
 800b4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b4e6:	f7fd fc1b 	bl	8008d20 <get_fattime>
 800b4ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7fe f9e9 	bl	80098cc <move_window>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d138      	bne.n	800b576 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b508:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	330b      	adds	r3, #11
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	330b      	adds	r3, #11
 800b514:	f042 0220 	orr.w	r2, r2, #32
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	461a      	mov	r2, r3
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	f7fe fef6 	bl	800a318 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f103 021c 	add.w	r2, r3, #28
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	4619      	mov	r1, r3
 800b538:	4610      	mov	r0, r2
 800b53a:	f7fd ff3b 	bl	80093b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3316      	adds	r3, #22
 800b542:	6939      	ldr	r1, [r7, #16]
 800b544:	4618      	mov	r0, r3
 800b546:	f7fd ff35 	bl	80093b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3312      	adds	r3, #18
 800b54e:	2100      	movs	r1, #0
 800b550:	4618      	mov	r0, r3
 800b552:	f7fd ff14 	bl	800937e <st_word>
					fs->wflag = 1;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2201      	movs	r2, #1
 800b55a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe f9e2 	bl	8009928 <sync_fs>
 800b564:	4603      	mov	r3, r0
 800b566:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7d1b      	ldrb	r3, [r3, #20]
 800b56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b570:	b2da      	uxtb	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	7dfa      	ldrb	r2, [r7, #23]
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fd ffd9 	bl	8009534 <unlock_fs>
 800b582:	7dfb      	ldrb	r3, [r7, #23]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff ff70 	bl	800b47a <f_sync>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d11d      	bne.n	800b5e0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f107 0208 	add.w	r2, r7, #8
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7ff fb4f 	bl	800ac50 <validate>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d111      	bne.n	800b5e0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe f8df 	bl	8009784 <dec_lock>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fd ffaa 	bl	8009534 <unlock_fs>
#endif
		}
	}
	return res;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b5ec:	b590      	push	{r4, r7, lr}
 800b5ee:	b09d      	sub	sp, #116	; 0x74
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	607a      	str	r2, [r7, #4]
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b600:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b604:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b606:	f107 030c 	add.w	r3, r7, #12
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff f831 	bl	800a672 <get_ldnumber>
 800b610:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b614:	2b00      	cmp	r3, #0
 800b616:	da02      	bge.n	800b61e <f_mkfs+0x32>
 800b618:	230b      	movs	r3, #11
 800b61a:	f000 bc0d 	b.w	800be38 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b61e:	4a94      	ldr	r2, [pc, #592]	; (800b870 <f_mkfs+0x284>)
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d005      	beq.n	800b636 <f_mkfs+0x4a>
 800b62a:	4a91      	ldr	r2, [pc, #580]	; (800b870 <f_mkfs+0x284>)
 800b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b638:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b63c:	2300      	movs	r3, #0
 800b63e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b642:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b646:	4618      	mov	r0, r3
 800b648:	f7fd fdda 	bl	8009200 <disk_initialize>
 800b64c:	4603      	mov	r3, r0
 800b64e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b652:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <f_mkfs+0x76>
 800b65e:	2303      	movs	r3, #3
 800b660:	e3ea      	b.n	800be38 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b662:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b666:	f003 0304 	and.w	r3, r3, #4
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <f_mkfs+0x86>
 800b66e:	230a      	movs	r3, #10
 800b670:	e3e2      	b.n	800be38 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b672:	f107 0214 	add.w	r2, r7, #20
 800b676:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b67a:	2103      	movs	r1, #3
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fd fe25 	bl	80092cc <disk_ioctl>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10c      	bne.n	800b6a2 <f_mkfs+0xb6>
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <f_mkfs+0xb6>
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b694:	d805      	bhi.n	800b6a2 <f_mkfs+0xb6>
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	1e5a      	subs	r2, r3, #1
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	4013      	ands	r3, r2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <f_mkfs+0xba>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b6a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6aa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <f_mkfs+0xce>
 800b6b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d309      	bcc.n	800b6ce <f_mkfs+0xe2>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6c0:	d805      	bhi.n	800b6ce <f_mkfs+0xe2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	1e5a      	subs	r2, r3, #1
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <f_mkfs+0xe6>
 800b6ce:	2313      	movs	r3, #19
 800b6d0:	e3b2      	b.n	800be38 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b6d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6da:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b6e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b6ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	fb02 f303 	mul.w	r3, r2, r3
 800b6f4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <f_mkfs+0x114>
 800b6fc:	230e      	movs	r3, #14
 800b6fe:	e39b      	b.n	800be38 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b700:	f107 0210 	add.w	r2, r7, #16
 800b704:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b708:	2101      	movs	r1, #1
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd fdde 	bl	80092cc <disk_ioctl>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <f_mkfs+0x12e>
 800b716:	2301      	movs	r3, #1
 800b718:	e38e      	b.n	800be38 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b71a:	7afb      	ldrb	r3, [r7, #11]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <f_mkfs+0x13c>
 800b724:	2300      	movs	r3, #0
 800b726:	e000      	b.n	800b72a <f_mkfs+0x13e>
 800b728:	233f      	movs	r3, #63	; 0x3f
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b730:	429a      	cmp	r2, r3
 800b732:	d901      	bls.n	800b738 <f_mkfs+0x14c>
 800b734:	230e      	movs	r3, #14
 800b736:	e37f      	b.n	800be38 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	2b7f      	cmp	r3, #127	; 0x7f
 800b744:	d801      	bhi.n	800b74a <f_mkfs+0x15e>
 800b746:	230e      	movs	r3, #14
 800b748:	e376      	b.n	800be38 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b80      	cmp	r3, #128	; 0x80
 800b74e:	d901      	bls.n	800b754 <f_mkfs+0x168>
 800b750:	2313      	movs	r3, #19
 800b752:	e371      	b.n	800be38 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b754:	7afb      	ldrb	r3, [r7, #11]
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00d      	beq.n	800b77a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b75e:	7afb      	ldrb	r3, [r7, #11]
 800b760:	f003 0307 	and.w	r3, r3, #7
 800b764:	2b02      	cmp	r3, #2
 800b766:	d004      	beq.n	800b772 <f_mkfs+0x186>
 800b768:	7afb      	ldrb	r3, [r7, #11]
 800b76a:	f003 0301 	and.w	r3, r3, #1
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d103      	bne.n	800b77a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b772:	2303      	movs	r3, #3
 800b774:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b778:	e009      	b.n	800b78e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <f_mkfs+0x19c>
 800b784:	2313      	movs	r3, #19
 800b786:	e357      	b.n	800be38 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b788:	2302      	movs	r3, #2
 800b78a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b792:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b796:	2b03      	cmp	r3, #3
 800b798:	d13c      	bne.n	800b814 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d11b      	bne.n	800b7d8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	0c5b      	lsrs	r3, r3, #17
 800b7a4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	653b      	str	r3, [r7, #80]	; 0x50
 800b7ae:	e005      	b.n	800b7bc <f_mkfs+0x1d0>
 800b7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b7bc:	4a2d      	ldr	r2, [pc, #180]	; (800b874 <f_mkfs+0x288>)
 800b7be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <f_mkfs+0x1ec>
 800b7c8:	4a2a      	ldr	r2, [pc, #168]	; (800b874 <f_mkfs+0x288>)
 800b7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d2eb      	bcs.n	800b7b0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	3302      	adds	r3, #2
 800b7e6:	009a      	lsls	r2, r3, #2
 800b7e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7ea:	4413      	add	r3, r2
 800b7ec:	1e5a      	subs	r2, r3, #1
 800b7ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b804:	4293      	cmp	r3, r2
 800b806:	d903      	bls.n	800b810 <f_mkfs+0x224>
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	4a1b      	ldr	r2, [pc, #108]	; (800b878 <f_mkfs+0x28c>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d952      	bls.n	800b8b6 <f_mkfs+0x2ca>
 800b810:	230e      	movs	r3, #14
 800b812:	e311      	b.n	800be38 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b816:	2b00      	cmp	r3, #0
 800b818:	d11b      	bne.n	800b852 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	0b1b      	lsrs	r3, r3, #12
 800b81e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b820:	2300      	movs	r3, #0
 800b822:	64bb      	str	r3, [r7, #72]	; 0x48
 800b824:	2301      	movs	r3, #1
 800b826:	653b      	str	r3, [r7, #80]	; 0x50
 800b828:	e005      	b.n	800b836 <f_mkfs+0x24a>
 800b82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b82c:	3301      	adds	r3, #1
 800b82e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	653b      	str	r3, [r7, #80]	; 0x50
 800b836:	4a11      	ldr	r2, [pc, #68]	; (800b87c <f_mkfs+0x290>)
 800b838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b83a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d007      	beq.n	800b852 <f_mkfs+0x266>
 800b842:	4a0e      	ldr	r2, [pc, #56]	; (800b87c <f_mkfs+0x290>)
 800b844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b84a:	461a      	mov	r2, r3
 800b84c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b84e:	4293      	cmp	r3, r2
 800b850:	d2eb      	bcs.n	800b82a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b856:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b862:	4293      	cmp	r3, r2
 800b864:	d90c      	bls.n	800b880 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	3302      	adds	r3, #2
 800b86a:	005b      	lsls	r3, r3, #1
 800b86c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b86e:	e012      	b.n	800b896 <f_mkfs+0x2aa>
 800b870:	240002c8 	.word	0x240002c8
 800b874:	08010438 	.word	0x08010438
 800b878:	0ffffff5 	.word	0x0ffffff5
 800b87c:	08010448 	.word	0x08010448
				} else {
					fmt = FS_FAT12;
 800b880:	2301      	movs	r3, #1
 800b882:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b886:	6a3a      	ldr	r2, [r7, #32]
 800b888:	4613      	mov	r3, r2
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	4413      	add	r3, r2
 800b88e:	3301      	adds	r3, #1
 800b890:	085b      	lsrs	r3, r3, #1
 800b892:	3303      	adds	r3, #3
 800b894:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b896:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b89a:	4413      	add	r3, r2
 800b89c:	1e5a      	subs	r2, r3, #1
 800b89e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ac:	015a      	lsls	r2, r3, #5
 800b8ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ba:	4413      	add	r3, r2
 800b8bc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b8be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8c2:	fb02 f203 	mul.w	r2, r2, r3
 800b8c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8c8:	4413      	add	r3, r2
 800b8ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8cc:	4413      	add	r3, r2
 800b8ce:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	1e5a      	subs	r2, r3, #1
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	425b      	negs	r3, r3
 800b8dc:	401a      	ands	r2, r3
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b8e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8e8:	2b03      	cmp	r3, #3
 800b8ea:	d108      	bne.n	800b8fe <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b8ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f0:	4413      	add	r3, r2
 800b8f2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f8:	4413      	add	r3, r2
 800b8fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8fc:	e006      	b.n	800b90c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b8fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b902:	fbb2 f3f3 	udiv	r3, r2, r3
 800b906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b908:	4413      	add	r3, r2
 800b90a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90e:	011a      	lsls	r2, r3, #4
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	441a      	add	r2, r3
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d901      	bls.n	800b922 <f_mkfs+0x336>
 800b91e:	230e      	movs	r3, #14
 800b920:	e28a      	b.n	800be38 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b926:	1ad2      	subs	r2, r2, r3
 800b928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b92a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b92c:	fb01 f303 	mul.w	r3, r1, r3
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b934:	1ad2      	subs	r2, r2, r3
 800b936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b938:	fbb2 f3f3 	udiv	r3, r2, r3
 800b93c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800b93e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b942:	2b03      	cmp	r3, #3
 800b944:	d10f      	bne.n	800b966 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d80a      	bhi.n	800b966 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d105      	bne.n	800b962 <f_mkfs+0x376>
 800b956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b958:	085b      	lsrs	r3, r3, #1
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d144      	bne.n	800b9ec <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800b962:	230e      	movs	r3, #14
 800b964:	e268      	b.n	800be38 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800b966:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d133      	bne.n	800b9d6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b974:	4293      	cmp	r3, r2
 800b976:	d91e      	bls.n	800b9b6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d107      	bne.n	800b98e <f_mkfs+0x3a2>
 800b97e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	2b40      	cmp	r3, #64	; 0x40
 800b984:	d803      	bhi.n	800b98e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800b986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	607b      	str	r3, [r7, #4]
 800b98c:	e033      	b.n	800b9f6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800b98e:	7afb      	ldrb	r3, [r7, #11]
 800b990:	f003 0302 	and.w	r3, r3, #2
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b998:	2303      	movs	r3, #3
 800b99a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b99e:	e02a      	b.n	800b9f6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <f_mkfs+0x3c6>
 800b9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	607b      	str	r3, [r7, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b80      	cmp	r3, #128	; 0x80
 800b9b0:	d91e      	bls.n	800b9f0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800b9b2:	230e      	movs	r3, #14
 800b9b4:	e240      	b.n	800be38 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d80a      	bhi.n	800b9d6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <f_mkfs+0x3e6>
 800b9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	607b      	str	r3, [r7, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b80      	cmp	r3, #128	; 0x80
 800b9d0:	d910      	bls.n	800b9f4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800b9d2:	230e      	movs	r3, #14
 800b9d4:	e230      	b.n	800be38 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b9d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d10c      	bne.n	800b9f8 <f_mkfs+0x40c>
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d907      	bls.n	800b9f8 <f_mkfs+0x40c>
 800b9e8:	230e      	movs	r3, #14
 800b9ea:	e225      	b.n	800be38 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b9ec:	bf00      	nop
 800b9ee:	e6ce      	b.n	800b78e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b9f0:	bf00      	nop
 800b9f2:	e6cc      	b.n	800b78e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b9f4:	bf00      	nop
			pau = au;
 800b9f6:	e6ca      	b.n	800b78e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800b9f8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b9fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	2100      	movs	r1, #0
 800ba00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba02:	f7fd fd24 	bl	800944e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ba06:	220b      	movs	r2, #11
 800ba08:	49bc      	ldr	r1, [pc, #752]	; (800bcfc <f_mkfs+0x710>)
 800ba0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba0c:	f7fd fcfe 	bl	800940c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	330b      	adds	r3, #11
 800ba14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba16:	4611      	mov	r1, r2
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fd fcb0 	bl	800937e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	330d      	adds	r3, #13
 800ba22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	330e      	adds	r3, #14
 800ba2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba2e:	b292      	uxth	r2, r2
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fd fca3 	bl	800937e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	f103 0211 	add.w	r2, r3, #17
 800ba48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d002      	beq.n	800ba56 <f_mkfs+0x46a>
 800ba50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	e000      	b.n	800ba58 <f_mkfs+0x46c>
 800ba56:	2300      	movs	r3, #0
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	f7fd fc8f 	bl	800937e <st_word>
		if (sz_vol < 0x10000) {
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba66:	d208      	bcs.n	800ba7a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	3313      	adds	r3, #19
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	b292      	uxth	r2, r2
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fd fc83 	bl	800937e <st_word>
 800ba78:	e006      	b.n	800ba88 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	3320      	adds	r3, #32
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4611      	mov	r1, r2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fd fc96 	bl	80093b4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	3315      	adds	r3, #21
 800ba8c:	22f8      	movs	r2, #248	; 0xf8
 800ba8e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	3318      	adds	r3, #24
 800ba94:	213f      	movs	r1, #63	; 0x3f
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fd fc71 	bl	800937e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	331a      	adds	r3, #26
 800baa0:	21ff      	movs	r1, #255	; 0xff
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd fc6b 	bl	800937e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	331c      	adds	r3, #28
 800baac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fd fc80 	bl	80093b4 <st_dword>
		if (fmt == FS_FAT32) {
 800bab4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bab8:	2b03      	cmp	r3, #3
 800baba:	d131      	bne.n	800bb20 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bac2:	f7fd f92d 	bl	8008d20 <get_fattime>
 800bac6:	4603      	mov	r3, r0
 800bac8:	4619      	mov	r1, r3
 800baca:	4620      	mov	r0, r4
 800bacc:	f7fd fc72 	bl	80093b4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad2:	3324      	adds	r3, #36	; 0x24
 800bad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fd fc6c 	bl	80093b4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	332c      	adds	r3, #44	; 0x2c
 800bae0:	2102      	movs	r1, #2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fd fc66 	bl	80093b4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	3330      	adds	r3, #48	; 0x30
 800baec:	2101      	movs	r1, #1
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fd fc45 	bl	800937e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	3332      	adds	r3, #50	; 0x32
 800baf8:	2106      	movs	r1, #6
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fd fc3f 	bl	800937e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	3340      	adds	r3, #64	; 0x40
 800bb04:	2280      	movs	r2, #128	; 0x80
 800bb06:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	3342      	adds	r3, #66	; 0x42
 800bb0c:	2229      	movs	r2, #41	; 0x29
 800bb0e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	3347      	adds	r3, #71	; 0x47
 800bb14:	2213      	movs	r2, #19
 800bb16:	497a      	ldr	r1, [pc, #488]	; (800bd00 <f_mkfs+0x714>)
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fd fc77 	bl	800940c <mem_cpy>
 800bb1e:	e020      	b.n	800bb62 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb22:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800bb26:	f7fd f8fb 	bl	8008d20 <get_fattime>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f7fd fc40 	bl	80093b4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb36:	3316      	adds	r3, #22
 800bb38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb3a:	b292      	uxth	r2, r2
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fd fc1d 	bl	800937e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	3324      	adds	r3, #36	; 0x24
 800bb48:	2280      	movs	r2, #128	; 0x80
 800bb4a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	3326      	adds	r3, #38	; 0x26
 800bb50:	2229      	movs	r2, #41	; 0x29
 800bb52:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	332b      	adds	r3, #43	; 0x2b
 800bb58:	2213      	movs	r2, #19
 800bb5a:	496a      	ldr	r1, [pc, #424]	; (800bd04 <f_mkfs+0x718>)
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fd fc55 	bl	800940c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb68:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fd fc06 	bl	800937e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800bb72:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bb76:	2301      	movs	r3, #1
 800bb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb7c:	f7fd fb86 	bl	800928c <disk_write>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <f_mkfs+0x59e>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e156      	b.n	800be38 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800bb8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d140      	bne.n	800bc14 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	1d9a      	adds	r2, r3, #6
 800bb96:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb9e:	f7fd fb75 	bl	800928c <disk_write>
			mem_set(buf, 0, ss);
 800bba2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bba4:	461a      	mov	r2, r3
 800bba6:	2100      	movs	r1, #0
 800bba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbaa:	f7fd fc50 	bl	800944e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bbae:	4956      	ldr	r1, [pc, #344]	; (800bd08 <f_mkfs+0x71c>)
 800bbb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbb2:	f7fd fbff 	bl	80093b4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbbc:	4953      	ldr	r1, [pc, #332]	; (800bd0c <f_mkfs+0x720>)
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fd fbf8 	bl	80093b4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f7fd fbef 	bl	80093b4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bbdc:	2102      	movs	r1, #2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fd fbe8 	bl	80093b4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fd fbc5 	bl	800937e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	1dda      	adds	r2, r3, #7
 800bbf8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc00:	f7fd fb44 	bl	800928c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc10:	f7fd fb3c 	bl	800928c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800bc14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc16:	2100      	movs	r1, #0
 800bc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc1a:	f7fd fc18 	bl	800944e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800bc1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc20:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bc22:	2300      	movs	r3, #0
 800bc24:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc26:	e04b      	b.n	800bcc0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800bc28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d113      	bne.n	800bc58 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800bc30:	f06f 0107 	mvn.w	r1, #7
 800bc34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc36:	f7fd fbbd 	bl	80093b4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	f04f 31ff 	mov.w	r1, #4294967295
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd fbb6 	bl	80093b4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fd fbaf 	bl	80093b4 <st_dword>
 800bc56:	e00b      	b.n	800bc70 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800bc58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d101      	bne.n	800bc64 <f_mkfs+0x678>
 800bc60:	4b2b      	ldr	r3, [pc, #172]	; (800bd10 <f_mkfs+0x724>)
 800bc62:	e001      	b.n	800bc68 <f_mkfs+0x67c>
 800bc64:	f06f 0307 	mvn.w	r3, #7
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc6c:	f7fd fba2 	bl	80093b4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800bc70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc72:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800bc74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	bf28      	it	cs
 800bc7c:	4613      	movcs	r3, r2
 800bc7e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800bc80:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc8a:	f7fd faff 	bl	800928c <disk_write>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <f_mkfs+0x6ac>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e0cf      	b.n	800be38 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800bc98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bca0:	f7fd fbd5 	bl	800944e <mem_set>
				sect += n; nsect -= n;
 800bca4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bca8:	4413      	add	r3, r2
 800bcaa:	667b      	str	r3, [r7, #100]	; 0x64
 800bcac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800bcb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1dc      	bne.n	800bc74 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bcba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d3af      	bcc.n	800bc28 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800bcc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d101      	bne.n	800bcd4 <f_mkfs+0x6e8>
 800bcd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd2:	e000      	b.n	800bcd6 <f_mkfs+0x6ea>
 800bcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800bcd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	bf28      	it	cs
 800bce0:	4613      	movcs	r3, r2
 800bce2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800bce4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcee:	f7fd facd 	bl	800928c <disk_write>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00d      	beq.n	800bd14 <f_mkfs+0x728>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e09d      	b.n	800be38 <f_mkfs+0x84c>
 800bcfc:	080102fc 	.word	0x080102fc
 800bd00:	08010308 	.word	0x08010308
 800bd04:	0801031c 	.word	0x0801031c
 800bd08:	41615252 	.word	0x41615252
 800bd0c:	61417272 	.word	0x61417272
 800bd10:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800bd14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd18:	4413      	add	r3, r2
 800bd1a:	667b      	str	r3, [r7, #100]	; 0x64
 800bd1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800bd24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1d6      	bne.n	800bcd8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800bd2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d103      	bne.n	800bd3a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800bd32:	230c      	movs	r3, #12
 800bd34:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800bd38:	e010      	b.n	800bd5c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd40:	d303      	bcc.n	800bd4a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800bd42:	2306      	movs	r3, #6
 800bd44:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800bd48:	e008      	b.n	800bd5c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800bd4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d101      	bne.n	800bd56 <f_mkfs+0x76a>
 800bd52:	2304      	movs	r3, #4
 800bd54:	e000      	b.n	800bd58 <f_mkfs+0x76c>
 800bd56:	2301      	movs	r3, #1
 800bd58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d15b      	bne.n	800be1e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800bd66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd68:	461a      	mov	r2, r3
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd6e:	f7fd fb6e 	bl	800944e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd78:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fd fafe 	bl	800937e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bd88:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	3301      	adds	r3, #1
 800bd94:	2201      	movs	r2, #1
 800bd96:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	3302      	adds	r3, #2
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	3303      	adds	r3, #3
 800bda4:	2200      	movs	r2, #0
 800bda6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800bdb0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	441a      	add	r2, r3
 800bdb8:	4b21      	ldr	r3, [pc, #132]	; (800be40 <f_mkfs+0x854>)
 800bdba:	fba3 1302 	umull	r1, r3, r3, r2
 800bdbe:	1ad2      	subs	r2, r2, r3
 800bdc0:	0852      	lsrs	r2, r2, #1
 800bdc2:	4413      	add	r3, r2
 800bdc4:	0b5b      	lsrs	r3, r3, #13
 800bdc6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	3305      	adds	r3, #5
 800bdcc:	22fe      	movs	r2, #254	; 0xfe
 800bdce:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800bdd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd2:	089b      	lsrs	r3, r3, #2
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	3306      	adds	r3, #6
 800bdda:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800bdde:	b2d2      	uxtb	r2, r2
 800bde0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	3307      	adds	r3, #7
 800bde6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bde8:	b2d2      	uxtb	r2, r2
 800bdea:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fd fade 	bl	80093b4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	330c      	adds	r3, #12
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4611      	mov	r1, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f7fd fad7 	bl	80093b4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800be06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800be0a:	2301      	movs	r3, #1
 800be0c:	2200      	movs	r2, #0
 800be0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be10:	f7fd fa3c 	bl	800928c <disk_write>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <f_mkfs+0x832>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e00c      	b.n	800be38 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800be1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800be22:	2200      	movs	r2, #0
 800be24:	2100      	movs	r1, #0
 800be26:	4618      	mov	r0, r3
 800be28:	f7fd fa50 	bl	80092cc <disk_ioctl>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <f_mkfs+0x84a>
 800be32:	2301      	movs	r3, #1
 800be34:	e000      	b.n	800be38 <f_mkfs+0x84c>

	return FR_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3774      	adds	r7, #116	; 0x74
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd90      	pop	{r4, r7, pc}
 800be40:	0515565b 	.word	0x0515565b

0800be44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be52:	2301      	movs	r3, #1
 800be54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be5a:	4b1f      	ldr	r3, [pc, #124]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be5c:	7a5b      	ldrb	r3, [r3, #9]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d131      	bne.n	800bec8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be64:	4b1c      	ldr	r3, [pc, #112]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be66:	7a5b      	ldrb	r3, [r3, #9]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	461a      	mov	r2, r3
 800be6c:	4b1a      	ldr	r3, [pc, #104]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be6e:	2100      	movs	r1, #0
 800be70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be72:	4b19      	ldr	r3, [pc, #100]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be74:	7a5b      	ldrb	r3, [r3, #9]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	4a17      	ldr	r2, [pc, #92]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be82:	4b15      	ldr	r3, [pc, #84]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be84:	7a5b      	ldrb	r3, [r3, #9]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	461a      	mov	r2, r3
 800be8a:	4b13      	ldr	r3, [pc, #76]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be8c:	4413      	add	r3, r2
 800be8e:	79fa      	ldrb	r2, [r7, #7]
 800be90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be92:	4b11      	ldr	r3, [pc, #68]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be94:	7a5b      	ldrb	r3, [r3, #9]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	b2d1      	uxtb	r1, r2
 800be9c:	4a0e      	ldr	r2, [pc, #56]	; (800bed8 <FATFS_LinkDriverEx+0x94>)
 800be9e:	7251      	strb	r1, [r2, #9]
 800bea0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bea2:	7dbb      	ldrb	r3, [r7, #22]
 800bea4:	3330      	adds	r3, #48	; 0x30
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	3301      	adds	r3, #1
 800beb0:	223a      	movs	r2, #58	; 0x3a
 800beb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	3302      	adds	r3, #2
 800beb8:	222f      	movs	r2, #47	; 0x2f
 800beba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3303      	adds	r3, #3
 800bec0:	2200      	movs	r2, #0
 800bec2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beca:	4618      	mov	r0, r3
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	240002f0 	.word	0x240002f0

0800bedc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bee6:	2200      	movs	r2, #0
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff ffaa 	bl	800be44 <FATFS_LinkDriverEx>
 800bef0:	4603      	mov	r3, r0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	4603      	mov	r3, r0
 800bf02:	6039      	str	r1, [r7, #0]
 800bf04:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800bf06:	2200      	movs	r2, #0
 800bf08:	2101      	movs	r1, #1
 800bf0a:	2001      	movs	r0, #1
 800bf0c:	f000 f9ae 	bl	800c26c <osSemaphoreNew>
 800bf10:	4602      	mov	r2, r0
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	bf14      	ite	ne
 800bf1e:	2301      	movne	r3, #1
 800bf20:	2300      	moveq	r3, #0
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	60fb      	str	r3, [r7, #12]

    return ret;
 800bf26:	68fb      	ldr	r3, [r7, #12]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fab7 	bl	800c4ac <osSemaphoreDelete>
#endif
    return 1;
 800bf3e:	2301      	movs	r3, #1
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800bf54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fa11 	bl	800c380 <osSemaphoreAcquire>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800bf64:	2301      	movs	r3, #1
 800bf66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa52 	bl	800c424 <osSemaphoreRelease>
#endif
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <__NVIC_SetPriority>:
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bf94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	db0a      	blt.n	800bfb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	490c      	ldr	r1, [pc, #48]	; (800bfd4 <__NVIC_SetPriority+0x4c>)
 800bfa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bfa6:	0112      	lsls	r2, r2, #4
 800bfa8:	b2d2      	uxtb	r2, r2
 800bfaa:	440b      	add	r3, r1
 800bfac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bfb0:	e00a      	b.n	800bfc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	4908      	ldr	r1, [pc, #32]	; (800bfd8 <__NVIC_SetPriority+0x50>)
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	3b04      	subs	r3, #4
 800bfc0:	0112      	lsls	r2, r2, #4
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	440b      	add	r3, r1
 800bfc6:	761a      	strb	r2, [r3, #24]
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	e000e100 	.word	0xe000e100
 800bfd8:	e000ed00 	.word	0xe000ed00

0800bfdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bfe0:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <SysTick_Handler+0x1c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bfe4:	f002 fb08 	bl	800e5f8 <xTaskGetSchedulerState>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d001      	beq.n	800bff2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bfee:	f003 f9eb 	bl	800f3c8 <xPortSysTickHandler>
  }
}
 800bff2:	bf00      	nop
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	e000e010 	.word	0xe000e010

0800bffc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c000:	2100      	movs	r1, #0
 800c002:	f06f 0004 	mvn.w	r0, #4
 800c006:	f7ff ffbf 	bl	800bf88 <__NVIC_SetPriority>
#endif
}
 800c00a:	bf00      	nop
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c016:	f3ef 8305 	mrs	r3, IPSR
 800c01a:	603b      	str	r3, [r7, #0]
  return(result);
 800c01c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c022:	f06f 0305 	mvn.w	r3, #5
 800c026:	607b      	str	r3, [r7, #4]
 800c028:	e00c      	b.n	800c044 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c02a:	4b0a      	ldr	r3, [pc, #40]	; (800c054 <osKernelInitialize+0x44>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d105      	bne.n	800c03e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c032:	4b08      	ldr	r3, [pc, #32]	; (800c054 <osKernelInitialize+0x44>)
 800c034:	2201      	movs	r2, #1
 800c036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c038:	2300      	movs	r3, #0
 800c03a:	607b      	str	r3, [r7, #4]
 800c03c:	e002      	b.n	800c044 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c03e:	f04f 33ff 	mov.w	r3, #4294967295
 800c042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c044:	687b      	ldr	r3, [r7, #4]
}
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	240002fc 	.word	0x240002fc

0800c058 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c05e:	f002 facb 	bl	800e5f8 <xTaskGetSchedulerState>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d004      	beq.n	800c072 <osKernelGetState+0x1a>
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d105      	bne.n	800c078 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c06c:	2302      	movs	r3, #2
 800c06e:	607b      	str	r3, [r7, #4]
      break;
 800c070:	e00c      	b.n	800c08c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c072:	2303      	movs	r3, #3
 800c074:	607b      	str	r3, [r7, #4]
      break;
 800c076:	e009      	b.n	800c08c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c078:	4b07      	ldr	r3, [pc, #28]	; (800c098 <osKernelGetState+0x40>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d102      	bne.n	800c086 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c080:	2301      	movs	r3, #1
 800c082:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c084:	e001      	b.n	800c08a <osKernelGetState+0x32>
        state = osKernelInactive;
 800c086:	2300      	movs	r3, #0
 800c088:	607b      	str	r3, [r7, #4]
      break;
 800c08a:	bf00      	nop
  }

  return (state);
 800c08c:	687b      	ldr	r3, [r7, #4]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	240002fc 	.word	0x240002fc

0800c09c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0a2:	f3ef 8305 	mrs	r3, IPSR
 800c0a6:	603b      	str	r3, [r7, #0]
  return(result);
 800c0a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c0ae:	f06f 0305 	mvn.w	r3, #5
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	e010      	b.n	800c0d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <osKernelStart+0x48>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d109      	bne.n	800c0d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c0be:	f7ff ff9d 	bl	800bffc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c0c2:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <osKernelStart+0x48>)
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c0c8:	f001 fe28 	bl	800dd1c <vTaskStartScheduler>
      stat = osOK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e002      	b.n	800c0d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0d8:	687b      	ldr	r3, [r7, #4]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	240002fc 	.word	0x240002fc

0800c0e8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ee:	f3ef 8305 	mrs	r3, IPSR
 800c0f2:	603b      	str	r3, [r7, #0]
  return(result);
 800c0f4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c0fa:	f001 ff3b 	bl	800df74 <xTaskGetTickCountFromISR>
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	e002      	b.n	800c108 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c102:	f001 ff27 	bl	800df54 <xTaskGetTickCount>
 800c106:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c108:	687b      	ldr	r3, [r7, #4]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c112:	b580      	push	{r7, lr}
 800c114:	b08e      	sub	sp, #56	; 0x38
 800c116:	af04      	add	r7, sp, #16
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c122:	f3ef 8305 	mrs	r3, IPSR
 800c126:	617b      	str	r3, [r7, #20]
  return(result);
 800c128:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d17e      	bne.n	800c22c <osThreadNew+0x11a>
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d07b      	beq.n	800c22c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c134:	2380      	movs	r3, #128	; 0x80
 800c136:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c138:	2318      	movs	r3, #24
 800c13a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c140:	f04f 33ff 	mov.w	r3, #4294967295
 800c144:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d045      	beq.n	800c1d8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <osThreadNew+0x48>
        name = attr->name;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d008      	beq.n	800c180 <osThreadNew+0x6e>
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	2b38      	cmp	r3, #56	; 0x38
 800c172:	d805      	bhi.n	800c180 <osThreadNew+0x6e>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <osThreadNew+0x72>
        return (NULL);
 800c180:	2300      	movs	r3, #0
 800c182:	e054      	b.n	800c22e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	695b      	ldr	r3, [r3, #20]
 800c190:	089b      	lsrs	r3, r3, #2
 800c192:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00e      	beq.n	800c1ba <osThreadNew+0xa8>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	2bbb      	cmp	r3, #187	; 0xbb
 800c1a2:	d90a      	bls.n	800c1ba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d006      	beq.n	800c1ba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <osThreadNew+0xa8>
        mem = 1;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	e010      	b.n	800c1dc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10c      	bne.n	800c1dc <osThreadNew+0xca>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d108      	bne.n	800c1dc <osThreadNew+0xca>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d104      	bne.n	800c1dc <osThreadNew+0xca>
          mem = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	61bb      	str	r3, [r7, #24]
 800c1d6:	e001      	b.n	800c1dc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d110      	bne.n	800c204 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c1ea:	9202      	str	r2, [sp, #8]
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	6a3a      	ldr	r2, [r7, #32]
 800c1f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f001 fba3 	bl	800d944 <xTaskCreateStatic>
 800c1fe:	4603      	mov	r3, r0
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	e013      	b.n	800c22c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d110      	bne.n	800c22c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	f107 0310 	add.w	r3, r7, #16
 800c212:	9301      	str	r3, [sp, #4]
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f001 fbee 	bl	800d9fe <xTaskCreate>
 800c222:	4603      	mov	r3, r0
 800c224:	2b01      	cmp	r3, #1
 800c226:	d001      	beq.n	800c22c <osThreadNew+0x11a>
            hTask = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c22c:	693b      	ldr	r3, [r7, #16]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3728      	adds	r7, #40	; 0x28
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c23e:	f3ef 8305 	mrs	r3, IPSR
 800c242:	60bb      	str	r3, [r7, #8]
  return(result);
 800c244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <osDelay+0x1c>
    stat = osErrorISR;
 800c24a:	f06f 0305 	mvn.w	r3, #5
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	e007      	b.n	800c262 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c252:	2300      	movs	r3, #0
 800c254:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 fd29 	bl	800dcb4 <vTaskDelay>
    }
  }

  return (stat);
 800c262:	68fb      	ldr	r3, [r7, #12]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08a      	sub	sp, #40	; 0x28
 800c270:	af02      	add	r7, sp, #8
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27c:	f3ef 8305 	mrs	r3, IPSR
 800c280:	613b      	str	r3, [r7, #16]
  return(result);
 800c282:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c284:	2b00      	cmp	r3, #0
 800c286:	d175      	bne.n	800c374 <osSemaphoreNew+0x108>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d072      	beq.n	800c374 <osSemaphoreNew+0x108>
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	429a      	cmp	r2, r3
 800c294:	d86e      	bhi.n	800c374 <osSemaphoreNew+0x108>
    mem = -1;
 800c296:	f04f 33ff 	mov.w	r3, #4294967295
 800c29a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d015      	beq.n	800c2ce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d006      	beq.n	800c2b8 <osSemaphoreNew+0x4c>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	2b4f      	cmp	r3, #79	; 0x4f
 800c2b0:	d902      	bls.n	800c2b8 <osSemaphoreNew+0x4c>
        mem = 1;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	e00c      	b.n	800c2d2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d108      	bne.n	800c2d2 <osSemaphoreNew+0x66>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <osSemaphoreNew+0x66>
          mem = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61bb      	str	r3, [r7, #24]
 800c2cc:	e001      	b.n	800c2d2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d8:	d04c      	beq.n	800c374 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d128      	bne.n	800c332 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d10a      	bne.n	800c2fc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	2203      	movs	r2, #3
 800c2ec:	9200      	str	r2, [sp, #0]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	f000 fb80 	bl	800c9f8 <xQueueGenericCreateStatic>
 800c2f8:	61f8      	str	r0, [r7, #28]
 800c2fa:	e005      	b.n	800c308 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	2100      	movs	r1, #0
 800c300:	2001      	movs	r0, #1
 800c302:	f000 fbf1 	bl	800cae8 <xQueueGenericCreate>
 800c306:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d022      	beq.n	800c354 <osSemaphoreNew+0xe8>
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d01f      	beq.n	800c354 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c314:	2300      	movs	r3, #0
 800c316:	2200      	movs	r2, #0
 800c318:	2100      	movs	r1, #0
 800c31a:	69f8      	ldr	r0, [r7, #28]
 800c31c:	f000 fcac 	bl	800cc78 <xQueueGenericSend>
 800c320:	4603      	mov	r3, r0
 800c322:	2b01      	cmp	r3, #1
 800c324:	d016      	beq.n	800c354 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c326:	69f8      	ldr	r0, [r7, #28]
 800c328:	f001 f938 	bl	800d59c <vQueueDelete>
            hSemaphore = NULL;
 800c32c:	2300      	movs	r3, #0
 800c32e:	61fb      	str	r3, [r7, #28]
 800c330:	e010      	b.n	800c354 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d108      	bne.n	800c34a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	461a      	mov	r2, r3
 800c33e:	68b9      	ldr	r1, [r7, #8]
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 fc2e 	bl	800cba2 <xQueueCreateCountingSemaphoreStatic>
 800c346:	61f8      	str	r0, [r7, #28]
 800c348:	e004      	b.n	800c354 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 fc5f 	bl	800cc10 <xQueueCreateCountingSemaphore>
 800c352:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00c      	beq.n	800c374 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	617b      	str	r3, [r7, #20]
 800c366:	e001      	b.n	800c36c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c368:	2300      	movs	r3, #0
 800c36a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c36c:	6979      	ldr	r1, [r7, #20]
 800c36e:	69f8      	ldr	r0, [r7, #28]
 800c370:	f001 fa60 	bl	800d834 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c374:	69fb      	ldr	r3, [r7, #28]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3720      	adds	r7, #32
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c38e:	2300      	movs	r3, #0
 800c390:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c398:	f06f 0303 	mvn.w	r3, #3
 800c39c:	617b      	str	r3, [r7, #20]
 800c39e:	e039      	b.n	800c414 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3a0:	f3ef 8305 	mrs	r3, IPSR
 800c3a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d022      	beq.n	800c3f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c3b2:	f06f 0303 	mvn.w	r3, #3
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e02c      	b.n	800c414 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c3be:	f107 0308 	add.w	r3, r7, #8
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	6938      	ldr	r0, [r7, #16]
 800c3c8:	f001 f868 	bl	800d49c <xQueueReceiveFromISR>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d003      	beq.n	800c3da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c3d2:	f06f 0302 	mvn.w	r3, #2
 800c3d6:	617b      	str	r3, [r7, #20]
 800c3d8:	e01c      	b.n	800c414 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d019      	beq.n	800c414 <osSemaphoreAcquire+0x94>
 800c3e0:	4b0f      	ldr	r3, [pc, #60]	; (800c420 <osSemaphoreAcquire+0xa0>)
 800c3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	e010      	b.n	800c414 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6938      	ldr	r0, [r7, #16]
 800c3f6:	f000 ff45 	bl	800d284 <xQueueSemaphoreTake>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d009      	beq.n	800c414 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c406:	f06f 0301 	mvn.w	r3, #1
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	e002      	b.n	800c414 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c40e:	f06f 0302 	mvn.w	r3, #2
 800c412:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c414:	697b      	ldr	r3, [r7, #20]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c43a:	f06f 0303 	mvn.w	r3, #3
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	e02c      	b.n	800c49c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c442:	f3ef 8305 	mrs	r3, IPSR
 800c446:	60fb      	str	r3, [r7, #12]
  return(result);
 800c448:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d01a      	beq.n	800c484 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c44e:	2300      	movs	r3, #0
 800c450:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c452:	f107 0308 	add.w	r3, r7, #8
 800c456:	4619      	mov	r1, r3
 800c458:	6938      	ldr	r0, [r7, #16]
 800c45a:	f000 fda6 	bl	800cfaa <xQueueGiveFromISR>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b01      	cmp	r3, #1
 800c462:	d003      	beq.n	800c46c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c464:	f06f 0302 	mvn.w	r3, #2
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	e017      	b.n	800c49c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d014      	beq.n	800c49c <osSemaphoreRelease+0x78>
 800c472:	4b0d      	ldr	r3, [pc, #52]	; (800c4a8 <osSemaphoreRelease+0x84>)
 800c474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c478:	601a      	str	r2, [r3, #0]
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	e00b      	b.n	800c49c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c484:	2300      	movs	r3, #0
 800c486:	2200      	movs	r2, #0
 800c488:	2100      	movs	r1, #0
 800c48a:	6938      	ldr	r0, [r7, #16]
 800c48c:	f000 fbf4 	bl	800cc78 <xQueueGenericSend>
 800c490:	4603      	mov	r3, r0
 800c492:	2b01      	cmp	r3, #1
 800c494:	d002      	beq.n	800c49c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c496:	f06f 0302 	mvn.w	r3, #2
 800c49a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c49c:	697b      	ldr	r3, [r7, #20]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4b8:	f3ef 8305 	mrs	r3, IPSR
 800c4bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c4c4:	f06f 0305 	mvn.w	r3, #5
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	e00e      	b.n	800c4ea <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d103      	bne.n	800c4da <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c4d2:	f06f 0303 	mvn.w	r3, #3
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e007      	b.n	800c4ea <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c4da:	6938      	ldr	r0, [r7, #16]
 800c4dc:	f001 f9d4 	bl	800d888 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c4e4:	6938      	ldr	r0, [r7, #16]
 800c4e6:	f001 f859 	bl	800d59c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c4ea:	697b      	ldr	r3, [r7, #20]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af02      	add	r7, sp, #8
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c500:	2300      	movs	r3, #0
 800c502:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c504:	f3ef 8305 	mrs	r3, IPSR
 800c508:	613b      	str	r3, [r7, #16]
  return(result);
 800c50a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d15f      	bne.n	800c5d0 <osMessageQueueNew+0xdc>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d05c      	beq.n	800c5d0 <osMessageQueueNew+0xdc>
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d059      	beq.n	800c5d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800c51c:	f04f 33ff 	mov.w	r3, #4294967295
 800c520:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d029      	beq.n	800c57c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d012      	beq.n	800c556 <osMessageQueueNew+0x62>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	2b4f      	cmp	r3, #79	; 0x4f
 800c536:	d90e      	bls.n	800c556 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	695a      	ldr	r2, [r3, #20]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	68b9      	ldr	r1, [r7, #8]
 800c548:	fb01 f303 	mul.w	r3, r1, r3
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d302      	bcc.n	800c556 <osMessageQueueNew+0x62>
        mem = 1;
 800c550:	2301      	movs	r3, #1
 800c552:	61bb      	str	r3, [r7, #24]
 800c554:	e014      	b.n	800c580 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d110      	bne.n	800c580 <osMessageQueueNew+0x8c>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10c      	bne.n	800c580 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d108      	bne.n	800c580 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d104      	bne.n	800c580 <osMessageQueueNew+0x8c>
          mem = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	61bb      	str	r3, [r7, #24]
 800c57a:	e001      	b.n	800c580 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d10b      	bne.n	800c59e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	691a      	ldr	r2, [r3, #16]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	2100      	movs	r1, #0
 800c590:	9100      	str	r1, [sp, #0]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 fa2f 	bl	800c9f8 <xQueueGenericCreateStatic>
 800c59a:	61f8      	str	r0, [r7, #28]
 800c59c:	e008      	b.n	800c5b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 fa9d 	bl	800cae8 <xQueueGenericCreate>
 800c5ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00c      	beq.n	800c5d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	e001      	b.n	800c5c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c5c8:	6979      	ldr	r1, [r7, #20]
 800c5ca:	69f8      	ldr	r0, [r7, #28]
 800c5cc:	f001 f932 	bl	800d834 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c5d0:	69fb      	ldr	r3, [r7, #28]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3720      	adds	r7, #32
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	603b      	str	r3, [r7, #0]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5f4:	f3ef 8305 	mrs	r3, IPSR
 800c5f8:	617b      	str	r3, [r7, #20]
  return(result);
 800c5fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d028      	beq.n	800c652 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d005      	beq.n	800c612 <osMessageQueuePut+0x36>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <osMessageQueuePut+0x36>
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c612:	f06f 0303 	mvn.w	r3, #3
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	e038      	b.n	800c68c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c61e:	f107 0210 	add.w	r2, r7, #16
 800c622:	2300      	movs	r3, #0
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	69b8      	ldr	r0, [r7, #24]
 800c628:	f000 fc24 	bl	800ce74 <xQueueGenericSendFromISR>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d003      	beq.n	800c63a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c632:	f06f 0302 	mvn.w	r3, #2
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	e028      	b.n	800c68c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d025      	beq.n	800c68c <osMessageQueuePut+0xb0>
 800c640:	4b15      	ldr	r3, [pc, #84]	; (800c698 <osMessageQueuePut+0xbc>)
 800c642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	e01c      	b.n	800c68c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <osMessageQueuePut+0x82>
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d103      	bne.n	800c666 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c65e:	f06f 0303 	mvn.w	r3, #3
 800c662:	61fb      	str	r3, [r7, #28]
 800c664:	e012      	b.n	800c68c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c666:	2300      	movs	r3, #0
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	69b8      	ldr	r0, [r7, #24]
 800c66e:	f000 fb03 	bl	800cc78 <xQueueGenericSend>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d009      	beq.n	800c68c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c67e:	f06f 0301 	mvn.w	r3, #1
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	e002      	b.n	800c68c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c686:	f06f 0302 	mvn.w	r3, #2
 800c68a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c68c:	69fb      	ldr	r3, [r7, #28]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6b2:	f3ef 8305 	mrs	r3, IPSR
 800c6b6:	617b      	str	r3, [r7, #20]
  return(result);
 800c6b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d028      	beq.n	800c710 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d005      	beq.n	800c6d0 <osMessageQueueGet+0x34>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d002      	beq.n	800c6d0 <osMessageQueueGet+0x34>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c6d0:	f06f 0303 	mvn.w	r3, #3
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	e037      	b.n	800c748 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c6dc:	f107 0310 	add.w	r3, r7, #16
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	68b9      	ldr	r1, [r7, #8]
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f000 fed9 	bl	800d49c <xQueueReceiveFromISR>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d003      	beq.n	800c6f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c6f0:	f06f 0302 	mvn.w	r3, #2
 800c6f4:	61fb      	str	r3, [r7, #28]
 800c6f6:	e027      	b.n	800c748 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d024      	beq.n	800c748 <osMessageQueueGet+0xac>
 800c6fe:	4b15      	ldr	r3, [pc, #84]	; (800c754 <osMessageQueueGet+0xb8>)
 800c700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	e01b      	b.n	800c748 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d002      	beq.n	800c71c <osMessageQueueGet+0x80>
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d103      	bne.n	800c724 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c71c:	f06f 0303 	mvn.w	r3, #3
 800c720:	61fb      	str	r3, [r7, #28]
 800c722:	e011      	b.n	800c748 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	68b9      	ldr	r1, [r7, #8]
 800c728:	69b8      	ldr	r0, [r7, #24]
 800c72a:	f000 fccb 	bl	800d0c4 <xQueueReceive>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b01      	cmp	r3, #1
 800c732:	d009      	beq.n	800c748 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c73a:	f06f 0301 	mvn.w	r3, #1
 800c73e:	61fb      	str	r3, [r7, #28]
 800c740:	e002      	b.n	800c748 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c742:	f06f 0302 	mvn.w	r3, #2
 800c746:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c748:	69fb      	ldr	r3, [r7, #28]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3720      	adds	r7, #32
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	e000ed04 	.word	0xe000ed04

0800c758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	4a07      	ldr	r2, [pc, #28]	; (800c784 <vApplicationGetIdleTaskMemory+0x2c>)
 800c768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	4a06      	ldr	r2, [pc, #24]	; (800c788 <vApplicationGetIdleTaskMemory+0x30>)
 800c76e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2280      	movs	r2, #128	; 0x80
 800c774:	601a      	str	r2, [r3, #0]
}
 800c776:	bf00      	nop
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	24000300 	.word	0x24000300
 800c788:	240003bc 	.word	0x240003bc

0800c78c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4a07      	ldr	r2, [pc, #28]	; (800c7b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c79c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	4a06      	ldr	r2, [pc, #24]	; (800c7bc <vApplicationGetTimerTaskMemory+0x30>)
 800c7a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7aa:	601a      	str	r2, [r3, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	240005bc 	.word	0x240005bc
 800c7bc:	24000678 	.word	0x24000678

0800c7c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f103 0208 	add.w	r2, r3, #8
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f103 0208 	add.w	r2, r3, #8
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f103 0208 	add.w	r2, r3, #8
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c81a:	b480      	push	{r7}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	689a      	ldr	r2, [r3, #8]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c862:	b480      	push	{r7}
 800c864:	b085      	sub	sp, #20
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c878:	d103      	bne.n	800c882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e00c      	b.n	800c89c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3308      	adds	r3, #8
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e002      	b.n	800c890 <vListInsert+0x2e>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d2f6      	bcs.n	800c88a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	685a      	ldr	r2, [r3, #4]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	683a      	ldr	r2, [r7, #0]
 800c8aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	601a      	str	r2, [r3, #0]
}
 800c8c8:	bf00      	nop
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	6892      	ldr	r2, [r2, #8]
 800c8ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	6852      	ldr	r2, [r2, #4]
 800c8f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d103      	bne.n	800c908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	689a      	ldr	r2, [r3, #8]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	1e5a      	subs	r2, r3, #1
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c952:	f002 fca7 	bl	800f2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c95e:	68f9      	ldr	r1, [r7, #12]
 800c960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c962:	fb01 f303 	mul.w	r3, r1, r3
 800c966:	441a      	add	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2200      	movs	r2, #0
 800c970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c982:	3b01      	subs	r3, #1
 800c984:	68f9      	ldr	r1, [r7, #12]
 800c986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c988:	fb01 f303 	mul.w	r3, r1, r3
 800c98c:	441a      	add	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	22ff      	movs	r2, #255	; 0xff
 800c996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	22ff      	movs	r2, #255	; 0xff
 800c99e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d114      	bne.n	800c9d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d01a      	beq.n	800c9e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3310      	adds	r3, #16
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f001 fc5d 	bl	800e274 <xTaskRemoveFromEventList>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d012      	beq.n	800c9e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9c0:	4b0c      	ldr	r3, [pc, #48]	; (800c9f4 <xQueueGenericReset+0xcc>)
 800c9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	e009      	b.n	800c9e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3310      	adds	r3, #16
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff fef2 	bl	800c7c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3324      	adds	r3, #36	; 0x24
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff feed 	bl	800c7c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9e6:	f002 fc8d 	bl	800f304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9ea:	2301      	movs	r3, #1
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	e000ed04 	.word	0xe000ed04

0800c9f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08e      	sub	sp, #56	; 0x38
 800c9fc:	af02      	add	r7, sp, #8
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <xQueueGenericCreateStatic+0x52>
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <xQueueGenericCreateStatic+0x56>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e000      	b.n	800ca50 <xQueueGenericCreateStatic+0x58>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10a      	bne.n	800ca6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	623b      	str	r3, [r7, #32]
}
 800ca66:	bf00      	nop
 800ca68:	e7fe      	b.n	800ca68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <xQueueGenericCreateStatic+0x7e>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <xQueueGenericCreateStatic+0x82>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e000      	b.n	800ca7c <xQueueGenericCreateStatic+0x84>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10a      	bne.n	800ca96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	61fb      	str	r3, [r7, #28]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca96:	2350      	movs	r3, #80	; 0x50
 800ca98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b50      	cmp	r3, #80	; 0x50
 800ca9e:	d00a      	beq.n	800cab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	61bb      	str	r3, [r7, #24]
}
 800cab2:	bf00      	nop
 800cab4:	e7fe      	b.n	800cab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00d      	beq.n	800cade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	4613      	mov	r3, r2
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	68b9      	ldr	r1, [r7, #8]
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f000 f83f 	bl	800cb5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3730      	adds	r7, #48	; 0x30
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b08a      	sub	sp, #40	; 0x28
 800caec:	af02      	add	r7, sp, #8
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4613      	mov	r3, r2
 800caf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	613b      	str	r3, [r7, #16]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	fb02 f303 	mul.w	r3, r2, r3
 800cb1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	3350      	adds	r3, #80	; 0x50
 800cb20:	4618      	mov	r0, r3
 800cb22:	f002 fce1 	bl	800f4e8 <pvPortMalloc>
 800cb26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d011      	beq.n	800cb52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	3350      	adds	r3, #80	; 0x50
 800cb36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb40:	79fa      	ldrb	r2, [r7, #7]
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	4613      	mov	r3, r2
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	68b9      	ldr	r1, [r7, #8]
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f000 f805 	bl	800cb5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb52:	69bb      	ldr	r3, [r7, #24]
	}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	e002      	b.n	800cb7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	69b8      	ldr	r0, [r7, #24]
 800cb8e:	f7ff fecb 	bl	800c928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	78fa      	ldrb	r2, [r7, #3]
 800cb96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b08a      	sub	sp, #40	; 0x28
 800cba6:	af02      	add	r7, sp, #8
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	60b9      	str	r1, [r7, #8]
 800cbac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	61bb      	str	r3, [r7, #24]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d90a      	bls.n	800cbe8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	617b      	str	r3, [r7, #20]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cbe8:	2302      	movs	r3, #2
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff ff00 	bl	800c9f8 <xQueueGenericCreateStatic>
 800cbf8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc06:	69fb      	ldr	r3, [r7, #28]
	}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10a      	bne.n	800cc36 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	613b      	str	r3, [r7, #16]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d90a      	bls.n	800cc54 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	60fb      	str	r3, [r7, #12]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc54:	2202      	movs	r2, #2
 800cc56:	2100      	movs	r1, #0
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff ff45 	bl	800cae8 <xQueueGenericCreate>
 800cc5e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc6c:	697b      	ldr	r3, [r7, #20]
	}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08e      	sub	sp, #56	; 0x38
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc86:	2300      	movs	r3, #0
 800cc88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xQueueGenericSend+0x32>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d103      	bne.n	800ccb8 <xQueueGenericSend+0x40>
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <xQueueGenericSend+0x44>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e000      	b.n	800ccbe <xQueueGenericSend+0x46>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <xQueueGenericSend+0x60>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccd4:	bf00      	nop
 800ccd6:	e7fe      	b.n	800ccd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d103      	bne.n	800cce6 <xQueueGenericSend+0x6e>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d101      	bne.n	800ccea <xQueueGenericSend+0x72>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e000      	b.n	800ccec <xQueueGenericSend+0x74>
 800ccea:	2300      	movs	r3, #0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <xQueueGenericSend+0x8e>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	623b      	str	r3, [r7, #32]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd06:	f001 fc77 	bl	800e5f8 <xTaskGetSchedulerState>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d102      	bne.n	800cd16 <xQueueGenericSend+0x9e>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <xQueueGenericSend+0xa2>
 800cd16:	2301      	movs	r3, #1
 800cd18:	e000      	b.n	800cd1c <xQueueGenericSend+0xa4>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10a      	bne.n	800cd36 <xQueueGenericSend+0xbe>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	61fb      	str	r3, [r7, #28]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd36:	f002 fab5 	bl	800f2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d302      	bcc.n	800cd4c <xQueueGenericSend+0xd4>
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d129      	bne.n	800cda0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd52:	f000 fc5e 	bl	800d612 <prvCopyDataToQueue>
 800cd56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d010      	beq.n	800cd82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	3324      	adds	r3, #36	; 0x24
 800cd64:	4618      	mov	r0, r3
 800cd66:	f001 fa85 	bl	800e274 <xTaskRemoveFromEventList>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d013      	beq.n	800cd98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd70:	4b3f      	ldr	r3, [pc, #252]	; (800ce70 <xQueueGenericSend+0x1f8>)
 800cd72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	e00a      	b.n	800cd98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d007      	beq.n	800cd98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd88:	4b39      	ldr	r3, [pc, #228]	; (800ce70 <xQueueGenericSend+0x1f8>)
 800cd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd8e:	601a      	str	r2, [r3, #0]
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd98:	f002 fab4 	bl	800f304 <vPortExitCritical>
				return pdPASS;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e063      	b.n	800ce68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d103      	bne.n	800cdae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cda6:	f002 faad 	bl	800f304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	e05c      	b.n	800ce68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdb4:	f107 0314 	add.w	r3, r7, #20
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f001 fabf 	bl	800e33c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdc2:	f002 fa9f 	bl	800f304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdc6:	f001 f819 	bl	800ddfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdca:	f002 fa6b 	bl	800f2a4 <vPortEnterCritical>
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdd4:	b25b      	sxtb	r3, r3
 800cdd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdda:	d103      	bne.n	800cde4 <xQueueGenericSend+0x16c>
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdea:	b25b      	sxtb	r3, r3
 800cdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf0:	d103      	bne.n	800cdfa <xQueueGenericSend+0x182>
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdfa:	f002 fa83 	bl	800f304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdfe:	1d3a      	adds	r2, r7, #4
 800ce00:	f107 0314 	add.w	r3, r7, #20
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f001 faae 	bl	800e368 <xTaskCheckForTimeOut>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d124      	bne.n	800ce5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce14:	f000 fcf5 	bl	800d802 <prvIsQueueFull>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d018      	beq.n	800ce50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	3310      	adds	r3, #16
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	4611      	mov	r1, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f001 f9d4 	bl	800e1d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce2e:	f000 fc80 	bl	800d732 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce32:	f000 fff1 	bl	800de18 <xTaskResumeAll>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f47f af7c 	bne.w	800cd36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <xQueueGenericSend+0x1f8>)
 800ce40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	e772      	b.n	800cd36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce52:	f000 fc6e 	bl	800d732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce56:	f000 ffdf 	bl	800de18 <xTaskResumeAll>
 800ce5a:	e76c      	b.n	800cd36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce5e:	f000 fc68 	bl	800d732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce62:	f000 ffd9 	bl	800de18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3738      	adds	r7, #56	; 0x38
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	e000ed04 	.word	0xe000ed04

0800ce74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b090      	sub	sp, #64	; 0x40
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10a      	bne.n	800cea2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d103      	bne.n	800ceb0 <xQueueGenericSendFromISR+0x3c>
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d101      	bne.n	800ceb4 <xQueueGenericSendFromISR+0x40>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e000      	b.n	800ceb6 <xQueueGenericSendFromISR+0x42>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10a      	bne.n	800ced0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d103      	bne.n	800cede <xQueueGenericSendFromISR+0x6a>
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d101      	bne.n	800cee2 <xQueueGenericSendFromISR+0x6e>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <xQueueGenericSendFromISR+0x70>
 800cee2:	2300      	movs	r3, #0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	623b      	str	r3, [r7, #32]
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cefe:	f002 fab3 	bl	800f468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf02:	f3ef 8211 	mrs	r2, BASEPRI
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	61fa      	str	r2, [r7, #28]
 800cf18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d302      	bcc.n	800cf30 <xQueueGenericSendFromISR+0xbc>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d12f      	bne.n	800cf90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	68b9      	ldr	r1, [r7, #8]
 800cf44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf46:	f000 fb64 	bl	800d612 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	d112      	bne.n	800cf7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d016      	beq.n	800cf8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	3324      	adds	r3, #36	; 0x24
 800cf60:	4618      	mov	r0, r3
 800cf62:	f001 f987 	bl	800e274 <xTaskRemoveFromEventList>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00e      	beq.n	800cf8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00b      	beq.n	800cf8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	e007      	b.n	800cf8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf7e:	3301      	adds	r3, #1
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	b25a      	sxtb	r2, r3
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf8e:	e001      	b.n	800cf94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3740      	adds	r7, #64	; 0x40
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b08e      	sub	sp, #56	; 0x38
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	623b      	str	r3, [r7, #32]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	61fb      	str	r3, [r7, #28]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d103      	bne.n	800d002 <xQueueGiveFromISR+0x58>
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <xQueueGiveFromISR+0x5c>
 800d002:	2301      	movs	r3, #1
 800d004:	e000      	b.n	800d008 <xQueueGiveFromISR+0x5e>
 800d006:	2300      	movs	r3, #0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d10a      	bne.n	800d022 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	61bb      	str	r3, [r7, #24]
}
 800d01e:	bf00      	nop
 800d020:	e7fe      	b.n	800d020 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d022:	f002 fa21 	bl	800f468 <vPortValidateInterruptPriority>
	__asm volatile
 800d026:	f3ef 8211 	mrs	r2, BASEPRI
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	617a      	str	r2, [r7, #20]
 800d03c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d03e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d046:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d04e:	429a      	cmp	r2, r3
 800d050:	d22b      	bcs.n	800d0aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d062:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d064:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06c:	d112      	bne.n	800d094 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d072:	2b00      	cmp	r3, #0
 800d074:	d016      	beq.n	800d0a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	3324      	adds	r3, #36	; 0x24
 800d07a:	4618      	mov	r0, r3
 800d07c:	f001 f8fa 	bl	800e274 <xTaskRemoveFromEventList>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00e      	beq.n	800d0a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00b      	beq.n	800d0a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2201      	movs	r2, #1
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	e007      	b.n	800d0a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d098:	3301      	adds	r3, #1
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	b25a      	sxtb	r2, r3
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0a8:	e001      	b.n	800d0ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f383 8811 	msr	BASEPRI, r3
}
 800d0b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3738      	adds	r7, #56	; 0x38
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08c      	sub	sp, #48	; 0x30
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10a      	bne.n	800d0f4 <xQueueReceive+0x30>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	623b      	str	r3, [r7, #32]
}
 800d0f0:	bf00      	nop
 800d0f2:	e7fe      	b.n	800d0f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d103      	bne.n	800d102 <xQueueReceive+0x3e>
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <xQueueReceive+0x42>
 800d102:	2301      	movs	r3, #1
 800d104:	e000      	b.n	800d108 <xQueueReceive+0x44>
 800d106:	2300      	movs	r3, #0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10a      	bne.n	800d122 <xQueueReceive+0x5e>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	61fb      	str	r3, [r7, #28]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d122:	f001 fa69 	bl	800e5f8 <xTaskGetSchedulerState>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <xQueueReceive+0x6e>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <xQueueReceive+0x72>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <xQueueReceive+0x74>
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10a      	bne.n	800d152 <xQueueReceive+0x8e>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	61bb      	str	r3, [r7, #24]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d152:	f002 f8a7 	bl	800f2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d01f      	beq.n	800d1a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d162:	68b9      	ldr	r1, [r7, #8]
 800d164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d166:	f000 fabe 	bl	800d6e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	1e5a      	subs	r2, r3, #1
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00f      	beq.n	800d19a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	3310      	adds	r3, #16
 800d17e:	4618      	mov	r0, r3
 800d180:	f001 f878 	bl	800e274 <xTaskRemoveFromEventList>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d18a:	4b3d      	ldr	r3, [pc, #244]	; (800d280 <xQueueReceive+0x1bc>)
 800d18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d19a:	f002 f8b3 	bl	800f304 <vPortExitCritical>
				return pdPASS;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e069      	b.n	800d276 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1a8:	f002 f8ac 	bl	800f304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e062      	b.n	800d276 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d106      	bne.n	800d1c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1b6:	f107 0310 	add.w	r3, r7, #16
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f001 f8be 	bl	800e33c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1c4:	f002 f89e 	bl	800f304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1c8:	f000 fe18 	bl	800ddfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1cc:	f002 f86a 	bl	800f2a4 <vPortEnterCritical>
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1d6:	b25b      	sxtb	r3, r3
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1dc:	d103      	bne.n	800d1e6 <xQueueReceive+0x122>
 800d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1ec:	b25b      	sxtb	r3, r3
 800d1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f2:	d103      	bne.n	800d1fc <xQueueReceive+0x138>
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1fc:	f002 f882 	bl	800f304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d200:	1d3a      	adds	r2, r7, #4
 800d202:	f107 0310 	add.w	r3, r7, #16
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f001 f8ad 	bl	800e368 <xTaskCheckForTimeOut>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d123      	bne.n	800d25c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d216:	f000 fade 	bl	800d7d6 <prvIsQueueEmpty>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d017      	beq.n	800d250 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	3324      	adds	r3, #36	; 0x24
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	4611      	mov	r1, r2
 800d228:	4618      	mov	r0, r3
 800d22a:	f000 ffd3 	bl	800e1d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d230:	f000 fa7f 	bl	800d732 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d234:	f000 fdf0 	bl	800de18 <xTaskResumeAll>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d189      	bne.n	800d152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d23e:	4b10      	ldr	r3, [pc, #64]	; (800d280 <xQueueReceive+0x1bc>)
 800d240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	e780      	b.n	800d152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d252:	f000 fa6e 	bl	800d732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d256:	f000 fddf 	bl	800de18 <xTaskResumeAll>
 800d25a:	e77a      	b.n	800d152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d25e:	f000 fa68 	bl	800d732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d262:	f000 fdd9 	bl	800de18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d268:	f000 fab5 	bl	800d7d6 <prvIsQueueEmpty>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f43f af6f 	beq.w	800d152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d276:	4618      	mov	r0, r3
 800d278:	3730      	adds	r7, #48	; 0x30
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	e000ed04 	.word	0xe000ed04

0800d284 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b08e      	sub	sp, #56	; 0x38
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d28e:	2300      	movs	r3, #0
 800d290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d296:	2300      	movs	r3, #0
 800d298:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10a      	bne.n	800d2b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	623b      	str	r3, [r7, #32]
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	61fb      	str	r3, [r7, #28]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2d4:	f001 f990 	bl	800e5f8 <xTaskGetSchedulerState>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <xQueueSemaphoreTake+0x60>
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <xQueueSemaphoreTake+0x64>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e000      	b.n	800d2ea <xQueueSemaphoreTake+0x66>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	61bb      	str	r3, [r7, #24]
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d304:	f001 ffce 	bl	800f2a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d310:	2b00      	cmp	r3, #0
 800d312:	d024      	beq.n	800d35e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	1e5a      	subs	r2, r3, #1
 800d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d104      	bne.n	800d32e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d324:	f001 fade 	bl	800e8e4 <pvTaskIncrementMutexHeldCount>
 800d328:	4602      	mov	r2, r0
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00f      	beq.n	800d356 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	3310      	adds	r3, #16
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 ff9a 	bl	800e274 <xTaskRemoveFromEventList>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d007      	beq.n	800d356 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d346:	4b54      	ldr	r3, [pc, #336]	; (800d498 <xQueueSemaphoreTake+0x214>)
 800d348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d356:	f001 ffd5 	bl	800f304 <vPortExitCritical>
				return pdPASS;
 800d35a:	2301      	movs	r3, #1
 800d35c:	e097      	b.n	800d48e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d111      	bne.n	800d388 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	617b      	str	r3, [r7, #20]
}
 800d37c:	bf00      	nop
 800d37e:	e7fe      	b.n	800d37e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d380:	f001 ffc0 	bl	800f304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d384:	2300      	movs	r3, #0
 800d386:	e082      	b.n	800d48e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d106      	bne.n	800d39c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d38e:	f107 030c 	add.w	r3, r7, #12
 800d392:	4618      	mov	r0, r3
 800d394:	f000 ffd2 	bl	800e33c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d398:	2301      	movs	r3, #1
 800d39a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d39c:	f001 ffb2 	bl	800f304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3a0:	f000 fd2c 	bl	800ddfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3a4:	f001 ff7e 	bl	800f2a4 <vPortEnterCritical>
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ae:	b25b      	sxtb	r3, r3
 800d3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b4:	d103      	bne.n	800d3be <xQueueSemaphoreTake+0x13a>
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3c4:	b25b      	sxtb	r3, r3
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ca:	d103      	bne.n	800d3d4 <xQueueSemaphoreTake+0x150>
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3d4:	f001 ff96 	bl	800f304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3d8:	463a      	mov	r2, r7
 800d3da:	f107 030c 	add.w	r3, r7, #12
 800d3de:	4611      	mov	r1, r2
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 ffc1 	bl	800e368 <xTaskCheckForTimeOut>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d132      	bne.n	800d452 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ee:	f000 f9f2 	bl	800d7d6 <prvIsQueueEmpty>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d026      	beq.n	800d446 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d109      	bne.n	800d414 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d400:	f001 ff50 	bl	800f2a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	4618      	mov	r0, r3
 800d40a:	f001 f913 	bl	800e634 <xTaskPriorityInherit>
 800d40e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d410:	f001 ff78 	bl	800f304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	3324      	adds	r3, #36	; 0x24
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 fed9 	bl	800e1d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d424:	f000 f985 	bl	800d732 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d428:	f000 fcf6 	bl	800de18 <xTaskResumeAll>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f47f af68 	bne.w	800d304 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d434:	4b18      	ldr	r3, [pc, #96]	; (800d498 <xQueueSemaphoreTake+0x214>)
 800d436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	e75e      	b.n	800d304 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d448:	f000 f973 	bl	800d732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d44c:	f000 fce4 	bl	800de18 <xTaskResumeAll>
 800d450:	e758      	b.n	800d304 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d454:	f000 f96d 	bl	800d732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d458:	f000 fcde 	bl	800de18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d45c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d45e:	f000 f9ba 	bl	800d7d6 <prvIsQueueEmpty>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	f43f af4d 	beq.w	800d304 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00d      	beq.n	800d48c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d470:	f001 ff18 	bl	800f2a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d476:	f000 f8b4 	bl	800d5e2 <prvGetDisinheritPriorityAfterTimeout>
 800d47a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d482:	4618      	mov	r0, r3
 800d484:	f001 f9ac 	bl	800e7e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d488:	f001 ff3c 	bl	800f304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d48c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3738      	adds	r7, #56	; 0x38
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	e000ed04 	.word	0xe000ed04

0800d49c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b08e      	sub	sp, #56	; 0x38
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10a      	bne.n	800d4c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	623b      	str	r3, [r7, #32]
}
 800d4c4:	bf00      	nop
 800d4c6:	e7fe      	b.n	800d4c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d103      	bne.n	800d4d6 <xQueueReceiveFromISR+0x3a>
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <xQueueReceiveFromISR+0x3e>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e000      	b.n	800d4dc <xQueueReceiveFromISR+0x40>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10a      	bne.n	800d4f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	61fb      	str	r3, [r7, #28]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4f6:	f001 ffb7 	bl	800f468 <vPortValidateInterruptPriority>
	__asm volatile
 800d4fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	61ba      	str	r2, [r7, #24]
 800d510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d02f      	beq.n	800d582 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d530:	f000 f8d9 	bl	800d6e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d53c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d544:	d112      	bne.n	800d56c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d016      	beq.n	800d57c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	3310      	adds	r3, #16
 800d552:	4618      	mov	r0, r3
 800d554:	f000 fe8e 	bl	800e274 <xTaskRemoveFromEventList>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00e      	beq.n	800d57c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00b      	beq.n	800d57c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	e007      	b.n	800d57c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d570:	3301      	adds	r3, #1
 800d572:	b2db      	uxtb	r3, r3
 800d574:	b25a      	sxtb	r2, r3
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d57c:	2301      	movs	r3, #1
 800d57e:	637b      	str	r3, [r7, #52]	; 0x34
 800d580:	e001      	b.n	800d586 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d582:	2300      	movs	r3, #0
 800d584:	637b      	str	r3, [r7, #52]	; 0x34
 800d586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d588:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	f383 8811 	msr	BASEPRI, r3
}
 800d590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d594:	4618      	mov	r0, r3
 800d596:	3738      	adds	r7, #56	; 0x38
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10a      	bne.n	800d5c4 <vQueueDelete+0x28>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	60bb      	str	r3, [r7, #8]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f95f 	bl	800d888 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d102      	bne.n	800d5da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f002 f853 	bl	800f680 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5da:	bf00      	nop
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b085      	sub	sp, #20
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d006      	beq.n	800d600 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	e001      	b.n	800d604 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d600:	2300      	movs	r3, #0
 800d602:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d604:	68fb      	ldr	r3, [r7, #12]
	}
 800d606:	4618      	mov	r0, r3
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b086      	sub	sp, #24
 800d616:	af00      	add	r7, sp, #0
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10d      	bne.n	800d64c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d14d      	bne.n	800d6d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f001 f861 	bl	800e704 <xTaskPriorityDisinherit>
 800d642:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	609a      	str	r2, [r3, #8]
 800d64a:	e043      	b.n	800d6d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d119      	bne.n	800d686 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6858      	ldr	r0, [r3, #4]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65a:	461a      	mov	r2, r3
 800d65c:	68b9      	ldr	r1, [r7, #8]
 800d65e:	f002 f95b 	bl	800f918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	441a      	add	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d32b      	bcc.n	800d6d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	605a      	str	r2, [r3, #4]
 800d684:	e026      	b.n	800d6d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68d8      	ldr	r0, [r3, #12]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d68e:	461a      	mov	r2, r3
 800d690:	68b9      	ldr	r1, [r7, #8]
 800d692:	f002 f941 	bl	800f918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69e:	425b      	negs	r3, r3
 800d6a0:	441a      	add	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	68da      	ldr	r2, [r3, #12]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d207      	bcs.n	800d6c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	689a      	ldr	r2, [r3, #8]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ba:	425b      	negs	r3, r3
 800d6bc:	441a      	add	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d105      	bne.n	800d6d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d002      	beq.n	800d6d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6dc:	697b      	ldr	r3, [r7, #20]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d018      	beq.n	800d72a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d700:	441a      	add	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68da      	ldr	r2, [r3, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d303      	bcc.n	800d71a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68d9      	ldr	r1, [r3, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d722:	461a      	mov	r2, r3
 800d724:	6838      	ldr	r0, [r7, #0]
 800d726:	f002 f8f7 	bl	800f918 <memcpy>
	}
}
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d73a:	f001 fdb3 	bl	800f2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d744:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d746:	e011      	b.n	800d76c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d012      	beq.n	800d776 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	3324      	adds	r3, #36	; 0x24
 800d754:	4618      	mov	r0, r3
 800d756:	f000 fd8d 	bl	800e274 <xTaskRemoveFromEventList>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d760:	f000 fe64 	bl	800e42c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	3b01      	subs	r3, #1
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d76c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d770:	2b00      	cmp	r3, #0
 800d772:	dce9      	bgt.n	800d748 <prvUnlockQueue+0x16>
 800d774:	e000      	b.n	800d778 <prvUnlockQueue+0x46>
					break;
 800d776:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	22ff      	movs	r2, #255	; 0xff
 800d77c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d780:	f001 fdc0 	bl	800f304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d784:	f001 fd8e 	bl	800f2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d78e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d790:	e011      	b.n	800d7b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d012      	beq.n	800d7c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3310      	adds	r3, #16
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fd68 	bl	800e274 <xTaskRemoveFromEventList>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7aa:	f000 fe3f 	bl	800e42c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7ae:	7bbb      	ldrb	r3, [r7, #14]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dce9      	bgt.n	800d792 <prvUnlockQueue+0x60>
 800d7be:	e000      	b.n	800d7c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	22ff      	movs	r2, #255	; 0xff
 800d7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7ca:	f001 fd9b 	bl	800f304 <vPortExitCritical>
}
 800d7ce:	bf00      	nop
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b084      	sub	sp, #16
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7de:	f001 fd61 	bl	800f2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	e001      	b.n	800d7f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7f4:	f001 fd86 	bl	800f304 <vPortExitCritical>

	return xReturn;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d80a:	f001 fd4b 	bl	800f2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d816:	429a      	cmp	r2, r3
 800d818:	d102      	bne.n	800d820 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d81a:	2301      	movs	r3, #1
 800d81c:	60fb      	str	r3, [r7, #12]
 800d81e:	e001      	b.n	800d824 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d824:	f001 fd6e 	bl	800f304 <vPortExitCritical>

	return xReturn;
 800d828:	68fb      	ldr	r3, [r7, #12]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d83e:	2300      	movs	r3, #0
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	e014      	b.n	800d86e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d844:	4a0f      	ldr	r2, [pc, #60]	; (800d884 <vQueueAddToRegistry+0x50>)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10b      	bne.n	800d868 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d850:	490c      	ldr	r1, [pc, #48]	; (800d884 <vQueueAddToRegistry+0x50>)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d85a:	4a0a      	ldr	r2, [pc, #40]	; (800d884 <vQueueAddToRegistry+0x50>)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	00db      	lsls	r3, r3, #3
 800d860:	4413      	add	r3, r2
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d866:	e006      	b.n	800d876 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	3301      	adds	r3, #1
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b07      	cmp	r3, #7
 800d872:	d9e7      	bls.n	800d844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d874:	bf00      	nop
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	24013e74 	.word	0x24013e74

0800d888 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d890:	2300      	movs	r3, #0
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	e016      	b.n	800d8c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d896:	4a10      	ldr	r2, [pc, #64]	; (800d8d8 <vQueueUnregisterQueue+0x50>)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	4413      	add	r3, r2
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d10b      	bne.n	800d8be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8a6:	4a0c      	ldr	r2, [pc, #48]	; (800d8d8 <vQueueUnregisterQueue+0x50>)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8b0:	4a09      	ldr	r2, [pc, #36]	; (800d8d8 <vQueueUnregisterQueue+0x50>)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	4413      	add	r3, r2
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	605a      	str	r2, [r3, #4]
				break;
 800d8bc:	e006      	b.n	800d8cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b07      	cmp	r3, #7
 800d8c8:	d9e5      	bls.n	800d896 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8ca:	bf00      	nop
 800d8cc:	bf00      	nop
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	24013e74 	.word	0x24013e74

0800d8dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8ec:	f001 fcda 	bl	800f2a4 <vPortEnterCritical>
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8f6:	b25b      	sxtb	r3, r3
 800d8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fc:	d103      	bne.n	800d906 <vQueueWaitForMessageRestricted+0x2a>
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d90c:	b25b      	sxtb	r3, r3
 800d90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d912:	d103      	bne.n	800d91c <vQueueWaitForMessageRestricted+0x40>
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	2200      	movs	r2, #0
 800d918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d91c:	f001 fcf2 	bl	800f304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d924:	2b00      	cmp	r3, #0
 800d926:	d106      	bne.n	800d936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	3324      	adds	r3, #36	; 0x24
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	68b9      	ldr	r1, [r7, #8]
 800d930:	4618      	mov	r0, r3
 800d932:	f000 fc73 	bl	800e21c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d936:	6978      	ldr	r0, [r7, #20]
 800d938:	f7ff fefb 	bl	800d732 <prvUnlockQueue>
	}
 800d93c:	bf00      	nop
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08e      	sub	sp, #56	; 0x38
 800d948:	af04      	add	r7, sp, #16
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	623b      	str	r3, [r7, #32]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10a      	bne.n	800d98a <xTaskCreateStatic+0x46>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	61fb      	str	r3, [r7, #28]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d98a:	23bc      	movs	r3, #188	; 0xbc
 800d98c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	2bbc      	cmp	r3, #188	; 0xbc
 800d992:	d00a      	beq.n	800d9aa <xTaskCreateStatic+0x66>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	61bb      	str	r3, [r7, #24]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d01e      	beq.n	800d9f0 <xTaskCreateStatic+0xac>
 800d9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01b      	beq.n	800d9f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	9303      	str	r3, [sp, #12]
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	9302      	str	r3, [sp, #8]
 800d9d2:	f107 0314 	add.w	r3, r7, #20
 800d9d6:	9301      	str	r3, [sp, #4]
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	68b9      	ldr	r1, [r7, #8]
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f000 f850 	bl	800da88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ea:	f000 f8f3 	bl	800dbd4 <prvAddNewTaskToReadyList>
 800d9ee:	e001      	b.n	800d9f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9f4:	697b      	ldr	r3, [r7, #20]
	}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3728      	adds	r7, #40	; 0x28
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b08c      	sub	sp, #48	; 0x30
 800da02:	af04      	add	r7, sp, #16
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	60b9      	str	r1, [r7, #8]
 800da08:	603b      	str	r3, [r7, #0]
 800da0a:	4613      	mov	r3, r2
 800da0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da0e:	88fb      	ldrh	r3, [r7, #6]
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4618      	mov	r0, r3
 800da14:	f001 fd68 	bl	800f4e8 <pvPortMalloc>
 800da18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00e      	beq.n	800da3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da20:	20bc      	movs	r0, #188	; 0xbc
 800da22:	f001 fd61 	bl	800f4e8 <pvPortMalloc>
 800da26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	631a      	str	r2, [r3, #48]	; 0x30
 800da34:	e005      	b.n	800da42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da36:	6978      	ldr	r0, [r7, #20]
 800da38:	f001 fe22 	bl	800f680 <vPortFree>
 800da3c:	e001      	b.n	800da42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da3e:	2300      	movs	r3, #0
 800da40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d017      	beq.n	800da78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da50:	88fa      	ldrh	r2, [r7, #6]
 800da52:	2300      	movs	r3, #0
 800da54:	9303      	str	r3, [sp, #12]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	9302      	str	r3, [sp, #8]
 800da5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f000 f80e 	bl	800da88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da6c:	69f8      	ldr	r0, [r7, #28]
 800da6e:	f000 f8b1 	bl	800dbd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da72:	2301      	movs	r3, #1
 800da74:	61bb      	str	r3, [r7, #24]
 800da76:	e002      	b.n	800da7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da78:	f04f 33ff 	mov.w	r3, #4294967295
 800da7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da7e:	69bb      	ldr	r3, [r7, #24]
	}
 800da80:	4618      	mov	r0, r3
 800da82:	3720      	adds	r7, #32
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	461a      	mov	r2, r3
 800daa0:	21a5      	movs	r1, #165	; 0xa5
 800daa2:	f001 ff47 	bl	800f934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800daa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dab0:	440b      	add	r3, r1
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	f023 0307 	bic.w	r3, r3, #7
 800dabe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	f003 0307 	and.w	r3, r3, #7
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00a      	beq.n	800dae0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	617b      	str	r3, [r7, #20]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d01f      	beq.n	800db26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dae6:	2300      	movs	r3, #0
 800dae8:	61fb      	str	r3, [r7, #28]
 800daea:	e012      	b.n	800db12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	4413      	add	r3, r2
 800daf2:	7819      	ldrb	r1, [r3, #0]
 800daf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	4413      	add	r3, r2
 800dafa:	3334      	adds	r3, #52	; 0x34
 800dafc:	460a      	mov	r2, r1
 800dafe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	4413      	add	r3, r2
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d006      	beq.n	800db1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	3301      	adds	r3, #1
 800db10:	61fb      	str	r3, [r7, #28]
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	2b0f      	cmp	r3, #15
 800db16:	d9e9      	bls.n	800daec <prvInitialiseNewTask+0x64>
 800db18:	e000      	b.n	800db1c <prvInitialiseNewTask+0x94>
			{
				break;
 800db1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db24:	e003      	b.n	800db2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	2b37      	cmp	r3, #55	; 0x37
 800db32:	d901      	bls.n	800db38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db34:	2337      	movs	r3, #55	; 0x37
 800db36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	2200      	movs	r2, #0
 800db48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	3304      	adds	r3, #4
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fe fe56 	bl	800c800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	3318      	adds	r3, #24
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe fe51 	bl	800c800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	2200      	movs	r2, #0
 800db78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	2200      	movs	r2, #0
 800db80:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	3354      	adds	r3, #84	; 0x54
 800db88:	2260      	movs	r2, #96	; 0x60
 800db8a:	2100      	movs	r1, #0
 800db8c:	4618      	mov	r0, r3
 800db8e:	f001 fed1 	bl	800f934 <memset>
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	4a0c      	ldr	r2, [pc, #48]	; (800dbc8 <prvInitialiseNewTask+0x140>)
 800db96:	659a      	str	r2, [r3, #88]	; 0x58
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	4a0c      	ldr	r2, [pc, #48]	; (800dbcc <prvInitialiseNewTask+0x144>)
 800db9c:	65da      	str	r2, [r3, #92]	; 0x5c
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	4a0b      	ldr	r2, [pc, #44]	; (800dbd0 <prvInitialiseNewTask+0x148>)
 800dba2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	69b8      	ldr	r0, [r7, #24]
 800dbaa:	f001 fa51 	bl	800f050 <pxPortInitialiseStack>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d002      	beq.n	800dbc0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	3720      	adds	r7, #32
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	08010478 	.word	0x08010478
 800dbcc:	08010498 	.word	0x08010498
 800dbd0:	08010458 	.word	0x08010458

0800dbd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbdc:	f001 fb62 	bl	800f2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbe0:	4b2d      	ldr	r3, [pc, #180]	; (800dc98 <prvAddNewTaskToReadyList+0xc4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a2c      	ldr	r2, [pc, #176]	; (800dc98 <prvAddNewTaskToReadyList+0xc4>)
 800dbe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbea:	4b2c      	ldr	r3, [pc, #176]	; (800dc9c <prvAddNewTaskToReadyList+0xc8>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d109      	bne.n	800dc06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbf2:	4a2a      	ldr	r2, [pc, #168]	; (800dc9c <prvAddNewTaskToReadyList+0xc8>)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbf8:	4b27      	ldr	r3, [pc, #156]	; (800dc98 <prvAddNewTaskToReadyList+0xc4>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d110      	bne.n	800dc22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc00:	f000 fc38 	bl	800e474 <prvInitialiseTaskLists>
 800dc04:	e00d      	b.n	800dc22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc06:	4b26      	ldr	r3, [pc, #152]	; (800dca0 <prvAddNewTaskToReadyList+0xcc>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d109      	bne.n	800dc22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc0e:	4b23      	ldr	r3, [pc, #140]	; (800dc9c <prvAddNewTaskToReadyList+0xc8>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d802      	bhi.n	800dc22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc1c:	4a1f      	ldr	r2, [pc, #124]	; (800dc9c <prvAddNewTaskToReadyList+0xc8>)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc22:	4b20      	ldr	r3, [pc, #128]	; (800dca4 <prvAddNewTaskToReadyList+0xd0>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	3301      	adds	r3, #1
 800dc28:	4a1e      	ldr	r2, [pc, #120]	; (800dca4 <prvAddNewTaskToReadyList+0xd0>)
 800dc2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc2c:	4b1d      	ldr	r3, [pc, #116]	; (800dca4 <prvAddNewTaskToReadyList+0xd0>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc38:	4b1b      	ldr	r3, [pc, #108]	; (800dca8 <prvAddNewTaskToReadyList+0xd4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d903      	bls.n	800dc48 <prvAddNewTaskToReadyList+0x74>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc44:	4a18      	ldr	r2, [pc, #96]	; (800dca8 <prvAddNewTaskToReadyList+0xd4>)
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a15      	ldr	r2, [pc, #84]	; (800dcac <prvAddNewTaskToReadyList+0xd8>)
 800dc56:	441a      	add	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe fddb 	bl	800c81a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc64:	f001 fb4e 	bl	800f304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc68:	4b0d      	ldr	r3, [pc, #52]	; (800dca0 <prvAddNewTaskToReadyList+0xcc>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00e      	beq.n	800dc8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc70:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <prvAddNewTaskToReadyList+0xc8>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d207      	bcs.n	800dc8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc7e:	4b0c      	ldr	r3, [pc, #48]	; (800dcb0 <prvAddNewTaskToReadyList+0xdc>)
 800dc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc8e:	bf00      	nop
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	24000f4c 	.word	0x24000f4c
 800dc9c:	24000a78 	.word	0x24000a78
 800dca0:	24000f58 	.word	0x24000f58
 800dca4:	24000f68 	.word	0x24000f68
 800dca8:	24000f54 	.word	0x24000f54
 800dcac:	24000a7c 	.word	0x24000a7c
 800dcb0:	e000ed04 	.word	0xe000ed04

0800dcb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d017      	beq.n	800dcf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcc6:	4b13      	ldr	r3, [pc, #76]	; (800dd14 <vTaskDelay+0x60>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00a      	beq.n	800dce4 <vTaskDelay+0x30>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	60bb      	str	r3, [r7, #8]
}
 800dce0:	bf00      	nop
 800dce2:	e7fe      	b.n	800dce2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dce4:	f000 f88a 	bl	800ddfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dce8:	2100      	movs	r1, #0
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fe0e 	bl	800e90c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dcf0:	f000 f892 	bl	800de18 <xTaskResumeAll>
 800dcf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d107      	bne.n	800dd0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dcfc:	4b06      	ldr	r3, [pc, #24]	; (800dd18 <vTaskDelay+0x64>)
 800dcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd0c:	bf00      	nop
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	24000f74 	.word	0x24000f74
 800dd18:	e000ed04 	.word	0xe000ed04

0800dd1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b08a      	sub	sp, #40	; 0x28
 800dd20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd22:	2300      	movs	r3, #0
 800dd24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd26:	2300      	movs	r3, #0
 800dd28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd2a:	463a      	mov	r2, r7
 800dd2c:	1d39      	adds	r1, r7, #4
 800dd2e:	f107 0308 	add.w	r3, r7, #8
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fd10 	bl	800c758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	9202      	str	r2, [sp, #8]
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	2300      	movs	r3, #0
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	2300      	movs	r3, #0
 800dd48:	460a      	mov	r2, r1
 800dd4a:	4924      	ldr	r1, [pc, #144]	; (800dddc <vTaskStartScheduler+0xc0>)
 800dd4c:	4824      	ldr	r0, [pc, #144]	; (800dde0 <vTaskStartScheduler+0xc4>)
 800dd4e:	f7ff fdf9 	bl	800d944 <xTaskCreateStatic>
 800dd52:	4603      	mov	r3, r0
 800dd54:	4a23      	ldr	r2, [pc, #140]	; (800dde4 <vTaskStartScheduler+0xc8>)
 800dd56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd58:	4b22      	ldr	r3, [pc, #136]	; (800dde4 <vTaskStartScheduler+0xc8>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd60:	2301      	movs	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	e001      	b.n	800dd6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d102      	bne.n	800dd76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd70:	f000 fe20 	bl	800e9b4 <xTimerCreateTimerTask>
 800dd74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d11b      	bne.n	800ddb4 <vTaskStartScheduler+0x98>
	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	613b      	str	r3, [r7, #16]
}
 800dd8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd90:	4b15      	ldr	r3, [pc, #84]	; (800dde8 <vTaskStartScheduler+0xcc>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3354      	adds	r3, #84	; 0x54
 800dd96:	4a15      	ldr	r2, [pc, #84]	; (800ddec <vTaskStartScheduler+0xd0>)
 800dd98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd9a:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <vTaskStartScheduler+0xd4>)
 800dd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dda0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dda2:	4b14      	ldr	r3, [pc, #80]	; (800ddf4 <vTaskStartScheduler+0xd8>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dda8:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <vTaskStartScheduler+0xdc>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddae:	f001 f9d7 	bl	800f160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddb2:	e00e      	b.n	800ddd2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddba:	d10a      	bne.n	800ddd2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	60fb      	str	r3, [r7, #12]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <vTaskStartScheduler+0xb4>
}
 800ddd2:	bf00      	nop
 800ddd4:	3718      	adds	r7, #24
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08010330 	.word	0x08010330
 800dde0:	0800e445 	.word	0x0800e445
 800dde4:	24000f70 	.word	0x24000f70
 800dde8:	24000a78 	.word	0x24000a78
 800ddec:	2400023c 	.word	0x2400023c
 800ddf0:	24000f6c 	.word	0x24000f6c
 800ddf4:	24000f58 	.word	0x24000f58
 800ddf8:	24000f50 	.word	0x24000f50

0800ddfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de00:	4b04      	ldr	r3, [pc, #16]	; (800de14 <vTaskSuspendAll+0x18>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	4a03      	ldr	r2, [pc, #12]	; (800de14 <vTaskSuspendAll+0x18>)
 800de08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de0a:	bf00      	nop
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	24000f74 	.word	0x24000f74

0800de18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de22:	2300      	movs	r3, #0
 800de24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de26:	4b42      	ldr	r3, [pc, #264]	; (800df30 <xTaskResumeAll+0x118>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10a      	bne.n	800de44 <xTaskResumeAll+0x2c>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	603b      	str	r3, [r7, #0]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de44:	f001 fa2e 	bl	800f2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de48:	4b39      	ldr	r3, [pc, #228]	; (800df30 <xTaskResumeAll+0x118>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	4a38      	ldr	r2, [pc, #224]	; (800df30 <xTaskResumeAll+0x118>)
 800de50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de52:	4b37      	ldr	r3, [pc, #220]	; (800df30 <xTaskResumeAll+0x118>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d162      	bne.n	800df20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de5a:	4b36      	ldr	r3, [pc, #216]	; (800df34 <xTaskResumeAll+0x11c>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d05e      	beq.n	800df20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de62:	e02f      	b.n	800dec4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de64:	4b34      	ldr	r3, [pc, #208]	; (800df38 <xTaskResumeAll+0x120>)
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3318      	adds	r3, #24
 800de70:	4618      	mov	r0, r3
 800de72:	f7fe fd2f 	bl	800c8d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3304      	adds	r3, #4
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe fd2a 	bl	800c8d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de84:	4b2d      	ldr	r3, [pc, #180]	; (800df3c <xTaskResumeAll+0x124>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d903      	bls.n	800de94 <xTaskResumeAll+0x7c>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de90:	4a2a      	ldr	r2, [pc, #168]	; (800df3c <xTaskResumeAll+0x124>)
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4613      	mov	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	4a27      	ldr	r2, [pc, #156]	; (800df40 <xTaskResumeAll+0x128>)
 800dea2:	441a      	add	r2, r3
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f7fe fcb5 	bl	800c81a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb4:	4b23      	ldr	r3, [pc, #140]	; (800df44 <xTaskResumeAll+0x12c>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deba:	429a      	cmp	r2, r3
 800debc:	d302      	bcc.n	800dec4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800debe:	4b22      	ldr	r3, [pc, #136]	; (800df48 <xTaskResumeAll+0x130>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dec4:	4b1c      	ldr	r3, [pc, #112]	; (800df38 <xTaskResumeAll+0x120>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1cb      	bne.n	800de64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ded2:	f000 fb71 	bl	800e5b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ded6:	4b1d      	ldr	r3, [pc, #116]	; (800df4c <xTaskResumeAll+0x134>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d010      	beq.n	800df04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dee2:	f000 f859 	bl	800df98 <xTaskIncrementTick>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800deec:	4b16      	ldr	r3, [pc, #88]	; (800df48 <xTaskResumeAll+0x130>)
 800deee:	2201      	movs	r2, #1
 800def0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3b01      	subs	r3, #1
 800def6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1f1      	bne.n	800dee2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800defe:	4b13      	ldr	r3, [pc, #76]	; (800df4c <xTaskResumeAll+0x134>)
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df04:	4b10      	ldr	r3, [pc, #64]	; (800df48 <xTaskResumeAll+0x130>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d009      	beq.n	800df20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df0c:	2301      	movs	r3, #1
 800df0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df10:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <xTaskResumeAll+0x138>)
 800df12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df20:	f001 f9f0 	bl	800f304 <vPortExitCritical>

	return xAlreadyYielded;
 800df24:	68bb      	ldr	r3, [r7, #8]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	24000f74 	.word	0x24000f74
 800df34:	24000f4c 	.word	0x24000f4c
 800df38:	24000f0c 	.word	0x24000f0c
 800df3c:	24000f54 	.word	0x24000f54
 800df40:	24000a7c 	.word	0x24000a7c
 800df44:	24000a78 	.word	0x24000a78
 800df48:	24000f60 	.word	0x24000f60
 800df4c:	24000f5c 	.word	0x24000f5c
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df5a:	4b05      	ldr	r3, [pc, #20]	; (800df70 <xTaskGetTickCount+0x1c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df60:	687b      	ldr	r3, [r7, #4]
}
 800df62:	4618      	mov	r0, r3
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	24000f50 	.word	0x24000f50

0800df74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df7a:	f001 fa75 	bl	800f468 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800df7e:	2300      	movs	r3, #0
 800df80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800df82:	4b04      	ldr	r3, [pc, #16]	; (800df94 <xTaskGetTickCountFromISR+0x20>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df88:	683b      	ldr	r3, [r7, #0]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	24000f50 	.word	0x24000f50

0800df98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfa2:	4b4f      	ldr	r3, [pc, #316]	; (800e0e0 <xTaskIncrementTick+0x148>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f040 808f 	bne.w	800e0ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfac:	4b4d      	ldr	r3, [pc, #308]	; (800e0e4 <xTaskIncrementTick+0x14c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfb4:	4a4b      	ldr	r2, [pc, #300]	; (800e0e4 <xTaskIncrementTick+0x14c>)
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d120      	bne.n	800e002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfc0:	4b49      	ldr	r3, [pc, #292]	; (800e0e8 <xTaskIncrementTick+0x150>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00a      	beq.n	800dfe0 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfce:	f383 8811 	msr	BASEPRI, r3
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	603b      	str	r3, [r7, #0]
}
 800dfdc:	bf00      	nop
 800dfde:	e7fe      	b.n	800dfde <xTaskIncrementTick+0x46>
 800dfe0:	4b41      	ldr	r3, [pc, #260]	; (800e0e8 <xTaskIncrementTick+0x150>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	60fb      	str	r3, [r7, #12]
 800dfe6:	4b41      	ldr	r3, [pc, #260]	; (800e0ec <xTaskIncrementTick+0x154>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a3f      	ldr	r2, [pc, #252]	; (800e0e8 <xTaskIncrementTick+0x150>)
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	4a3f      	ldr	r2, [pc, #252]	; (800e0ec <xTaskIncrementTick+0x154>)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	4b3e      	ldr	r3, [pc, #248]	; (800e0f0 <xTaskIncrementTick+0x158>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3301      	adds	r3, #1
 800dffa:	4a3d      	ldr	r2, [pc, #244]	; (800e0f0 <xTaskIncrementTick+0x158>)
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	f000 fadb 	bl	800e5b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e002:	4b3c      	ldr	r3, [pc, #240]	; (800e0f4 <xTaskIncrementTick+0x15c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d349      	bcc.n	800e0a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e00c:	4b36      	ldr	r3, [pc, #216]	; (800e0e8 <xTaskIncrementTick+0x150>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d104      	bne.n	800e020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e016:	4b37      	ldr	r3, [pc, #220]	; (800e0f4 <xTaskIncrementTick+0x15c>)
 800e018:	f04f 32ff 	mov.w	r2, #4294967295
 800e01c:	601a      	str	r2, [r3, #0]
					break;
 800e01e:	e03f      	b.n	800e0a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e020:	4b31      	ldr	r3, [pc, #196]	; (800e0e8 <xTaskIncrementTick+0x150>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e030:	693a      	ldr	r2, [r7, #16]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	429a      	cmp	r2, r3
 800e036:	d203      	bcs.n	800e040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e038:	4a2e      	ldr	r2, [pc, #184]	; (800e0f4 <xTaskIncrementTick+0x15c>)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e03e:	e02f      	b.n	800e0a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	3304      	adds	r3, #4
 800e044:	4618      	mov	r0, r3
 800e046:	f7fe fc45 	bl	800c8d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d004      	beq.n	800e05c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	3318      	adds	r3, #24
 800e056:	4618      	mov	r0, r3
 800e058:	f7fe fc3c 	bl	800c8d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e060:	4b25      	ldr	r3, [pc, #148]	; (800e0f8 <xTaskIncrementTick+0x160>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d903      	bls.n	800e070 <xTaskIncrementTick+0xd8>
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	4a22      	ldr	r2, [pc, #136]	; (800e0f8 <xTaskIncrementTick+0x160>)
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e074:	4613      	mov	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4413      	add	r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4a1f      	ldr	r2, [pc, #124]	; (800e0fc <xTaskIncrementTick+0x164>)
 800e07e:	441a      	add	r2, r3
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	3304      	adds	r3, #4
 800e084:	4619      	mov	r1, r3
 800e086:	4610      	mov	r0, r2
 800e088:	f7fe fbc7 	bl	800c81a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e090:	4b1b      	ldr	r3, [pc, #108]	; (800e100 <xTaskIncrementTick+0x168>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e096:	429a      	cmp	r2, r3
 800e098:	d3b8      	bcc.n	800e00c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e09a:	2301      	movs	r3, #1
 800e09c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e09e:	e7b5      	b.n	800e00c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0a0:	4b17      	ldr	r3, [pc, #92]	; (800e100 <xTaskIncrementTick+0x168>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a6:	4915      	ldr	r1, [pc, #84]	; (800e0fc <xTaskIncrementTick+0x164>)
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	440b      	add	r3, r1
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d901      	bls.n	800e0bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0bc:	4b11      	ldr	r3, [pc, #68]	; (800e104 <xTaskIncrementTick+0x16c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	e004      	b.n	800e0d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0ca:	4b0f      	ldr	r3, [pc, #60]	; (800e108 <xTaskIncrementTick+0x170>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	4a0d      	ldr	r2, [pc, #52]	; (800e108 <xTaskIncrementTick+0x170>)
 800e0d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0d4:	697b      	ldr	r3, [r7, #20]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3718      	adds	r7, #24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	24000f74 	.word	0x24000f74
 800e0e4:	24000f50 	.word	0x24000f50
 800e0e8:	24000f04 	.word	0x24000f04
 800e0ec:	24000f08 	.word	0x24000f08
 800e0f0:	24000f64 	.word	0x24000f64
 800e0f4:	24000f6c 	.word	0x24000f6c
 800e0f8:	24000f54 	.word	0x24000f54
 800e0fc:	24000a7c 	.word	0x24000a7c
 800e100:	24000a78 	.word	0x24000a78
 800e104:	24000f60 	.word	0x24000f60
 800e108:	24000f5c 	.word	0x24000f5c

0800e10c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e112:	4b2a      	ldr	r3, [pc, #168]	; (800e1bc <vTaskSwitchContext+0xb0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d003      	beq.n	800e122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e11a:	4b29      	ldr	r3, [pc, #164]	; (800e1c0 <vTaskSwitchContext+0xb4>)
 800e11c:	2201      	movs	r2, #1
 800e11e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e120:	e046      	b.n	800e1b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e122:	4b27      	ldr	r3, [pc, #156]	; (800e1c0 <vTaskSwitchContext+0xb4>)
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e128:	4b26      	ldr	r3, [pc, #152]	; (800e1c4 <vTaskSwitchContext+0xb8>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	60fb      	str	r3, [r7, #12]
 800e12e:	e010      	b.n	800e152 <vTaskSwitchContext+0x46>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10a      	bne.n	800e14c <vTaskSwitchContext+0x40>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	607b      	str	r3, [r7, #4]
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <vTaskSwitchContext+0x3e>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	3b01      	subs	r3, #1
 800e150:	60fb      	str	r3, [r7, #12]
 800e152:	491d      	ldr	r1, [pc, #116]	; (800e1c8 <vTaskSwitchContext+0xbc>)
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	4613      	mov	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	440b      	add	r3, r1
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d0e4      	beq.n	800e130 <vTaskSwitchContext+0x24>
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	4a15      	ldr	r2, [pc, #84]	; (800e1c8 <vTaskSwitchContext+0xbc>)
 800e172:	4413      	add	r3, r2
 800e174:	60bb      	str	r3, [r7, #8]
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	605a      	str	r2, [r3, #4]
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	3308      	adds	r3, #8
 800e188:	429a      	cmp	r2, r3
 800e18a:	d104      	bne.n	800e196 <vTaskSwitchContext+0x8a>
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	605a      	str	r2, [r3, #4]
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	4a0b      	ldr	r2, [pc, #44]	; (800e1cc <vTaskSwitchContext+0xc0>)
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	4a08      	ldr	r2, [pc, #32]	; (800e1c4 <vTaskSwitchContext+0xb8>)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1a6:	4b09      	ldr	r3, [pc, #36]	; (800e1cc <vTaskSwitchContext+0xc0>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3354      	adds	r3, #84	; 0x54
 800e1ac:	4a08      	ldr	r2, [pc, #32]	; (800e1d0 <vTaskSwitchContext+0xc4>)
 800e1ae:	6013      	str	r3, [r2, #0]
}
 800e1b0:	bf00      	nop
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	24000f74 	.word	0x24000f74
 800e1c0:	24000f60 	.word	0x24000f60
 800e1c4:	24000f54 	.word	0x24000f54
 800e1c8:	24000a7c 	.word	0x24000a7c
 800e1cc:	24000a78 	.word	0x24000a78
 800e1d0:	2400023c 	.word	0x2400023c

0800e1d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10a      	bne.n	800e1fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60fb      	str	r3, [r7, #12]
}
 800e1f6:	bf00      	nop
 800e1f8:	e7fe      	b.n	800e1f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1fa:	4b07      	ldr	r3, [pc, #28]	; (800e218 <vTaskPlaceOnEventList+0x44>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3318      	adds	r3, #24
 800e200:	4619      	mov	r1, r3
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7fe fb2d 	bl	800c862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e208:	2101      	movs	r1, #1
 800e20a:	6838      	ldr	r0, [r7, #0]
 800e20c:	f000 fb7e 	bl	800e90c <prvAddCurrentTaskToDelayedList>
}
 800e210:	bf00      	nop
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	24000a78 	.word	0x24000a78

0800e21c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10a      	bne.n	800e244 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	617b      	str	r3, [r7, #20]
}
 800e240:	bf00      	nop
 800e242:	e7fe      	b.n	800e242 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e244:	4b0a      	ldr	r3, [pc, #40]	; (800e270 <vTaskPlaceOnEventListRestricted+0x54>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	3318      	adds	r3, #24
 800e24a:	4619      	mov	r1, r3
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f7fe fae4 	bl	800c81a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e258:	f04f 33ff 	mov.w	r3, #4294967295
 800e25c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	68b8      	ldr	r0, [r7, #8]
 800e262:	f000 fb53 	bl	800e90c <prvAddCurrentTaskToDelayedList>
	}
 800e266:	bf00      	nop
 800e268:	3718      	adds	r7, #24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	24000a78 	.word	0x24000a78

0800e274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	60fb      	str	r3, [r7, #12]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	3318      	adds	r3, #24
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fe fb15 	bl	800c8d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2aa:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <xTaskRemoveFromEventList+0xb0>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d11d      	bne.n	800e2ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe fb0c 	bl	800c8d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c0:	4b19      	ldr	r3, [pc, #100]	; (800e328 <xTaskRemoveFromEventList+0xb4>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d903      	bls.n	800e2d0 <xTaskRemoveFromEventList+0x5c>
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2cc:	4a16      	ldr	r2, [pc, #88]	; (800e328 <xTaskRemoveFromEventList+0xb4>)
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4a13      	ldr	r2, [pc, #76]	; (800e32c <xTaskRemoveFromEventList+0xb8>)
 800e2de:	441a      	add	r2, r3
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	f7fe fa97 	bl	800c81a <vListInsertEnd>
 800e2ec:	e005      	b.n	800e2fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3318      	adds	r3, #24
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	480e      	ldr	r0, [pc, #56]	; (800e330 <xTaskRemoveFromEventList+0xbc>)
 800e2f6:	f7fe fa90 	bl	800c81a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2fe:	4b0d      	ldr	r3, [pc, #52]	; (800e334 <xTaskRemoveFromEventList+0xc0>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	429a      	cmp	r2, r3
 800e306:	d905      	bls.n	800e314 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e308:	2301      	movs	r3, #1
 800e30a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e30c:	4b0a      	ldr	r3, [pc, #40]	; (800e338 <xTaskRemoveFromEventList+0xc4>)
 800e30e:	2201      	movs	r2, #1
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	e001      	b.n	800e318 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e314:	2300      	movs	r3, #0
 800e316:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e318:	697b      	ldr	r3, [r7, #20]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	24000f74 	.word	0x24000f74
 800e328:	24000f54 	.word	0x24000f54
 800e32c:	24000a7c 	.word	0x24000a7c
 800e330:	24000f0c 	.word	0x24000f0c
 800e334:	24000a78 	.word	0x24000a78
 800e338:	24000f60 	.word	0x24000f60

0800e33c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e344:	4b06      	ldr	r3, [pc, #24]	; (800e360 <vTaskInternalSetTimeOutState+0x24>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <vTaskInternalSetTimeOutState+0x28>)
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	605a      	str	r2, [r3, #4]
}
 800e354:	bf00      	nop
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr
 800e360:	24000f64 	.word	0x24000f64
 800e364:	24000f50 	.word	0x24000f50

0800e368 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b088      	sub	sp, #32
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	613b      	str	r3, [r7, #16]
}
 800e38a:	bf00      	nop
 800e38c:	e7fe      	b.n	800e38c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	60fb      	str	r3, [r7, #12]
}
 800e3a6:	bf00      	nop
 800e3a8:	e7fe      	b.n	800e3a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e3aa:	f000 ff7b 	bl	800f2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e3ae:	4b1d      	ldr	r3, [pc, #116]	; (800e424 <xTaskCheckForTimeOut+0xbc>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	69ba      	ldr	r2, [r7, #24]
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c6:	d102      	bne.n	800e3ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	61fb      	str	r3, [r7, #28]
 800e3cc:	e023      	b.n	800e416 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	4b15      	ldr	r3, [pc, #84]	; (800e428 <xTaskCheckForTimeOut+0xc0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d007      	beq.n	800e3ea <xTaskCheckForTimeOut+0x82>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	69ba      	ldr	r2, [r7, #24]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d302      	bcc.n	800e3ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	61fb      	str	r3, [r7, #28]
 800e3e8:	e015      	b.n	800e416 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d20b      	bcs.n	800e40c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	1ad2      	subs	r2, r2, r3
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff ff9b 	bl	800e33c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e406:	2300      	movs	r3, #0
 800e408:	61fb      	str	r3, [r7, #28]
 800e40a:	e004      	b.n	800e416 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2200      	movs	r2, #0
 800e410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e412:	2301      	movs	r3, #1
 800e414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e416:	f000 ff75 	bl	800f304 <vPortExitCritical>

	return xReturn;
 800e41a:	69fb      	ldr	r3, [r7, #28]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3720      	adds	r7, #32
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	24000f50 	.word	0x24000f50
 800e428:	24000f64 	.word	0x24000f64

0800e42c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e430:	4b03      	ldr	r3, [pc, #12]	; (800e440 <vTaskMissedYield+0x14>)
 800e432:	2201      	movs	r2, #1
 800e434:	601a      	str	r2, [r3, #0]
}
 800e436:	bf00      	nop
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	24000f60 	.word	0x24000f60

0800e444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e44c:	f000 f852 	bl	800e4f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e450:	4b06      	ldr	r3, [pc, #24]	; (800e46c <prvIdleTask+0x28>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d9f9      	bls.n	800e44c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e458:	4b05      	ldr	r3, [pc, #20]	; (800e470 <prvIdleTask+0x2c>)
 800e45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45e:	601a      	str	r2, [r3, #0]
 800e460:	f3bf 8f4f 	dsb	sy
 800e464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e468:	e7f0      	b.n	800e44c <prvIdleTask+0x8>
 800e46a:	bf00      	nop
 800e46c:	24000a7c 	.word	0x24000a7c
 800e470:	e000ed04 	.word	0xe000ed04

0800e474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e47a:	2300      	movs	r3, #0
 800e47c:	607b      	str	r3, [r7, #4]
 800e47e:	e00c      	b.n	800e49a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	4613      	mov	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4a12      	ldr	r2, [pc, #72]	; (800e4d4 <prvInitialiseTaskLists+0x60>)
 800e48c:	4413      	add	r3, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fe f996 	bl	800c7c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3301      	adds	r3, #1
 800e498:	607b      	str	r3, [r7, #4]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b37      	cmp	r3, #55	; 0x37
 800e49e:	d9ef      	bls.n	800e480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4a0:	480d      	ldr	r0, [pc, #52]	; (800e4d8 <prvInitialiseTaskLists+0x64>)
 800e4a2:	f7fe f98d 	bl	800c7c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4a6:	480d      	ldr	r0, [pc, #52]	; (800e4dc <prvInitialiseTaskLists+0x68>)
 800e4a8:	f7fe f98a 	bl	800c7c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4ac:	480c      	ldr	r0, [pc, #48]	; (800e4e0 <prvInitialiseTaskLists+0x6c>)
 800e4ae:	f7fe f987 	bl	800c7c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e4b2:	480c      	ldr	r0, [pc, #48]	; (800e4e4 <prvInitialiseTaskLists+0x70>)
 800e4b4:	f7fe f984 	bl	800c7c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e4b8:	480b      	ldr	r0, [pc, #44]	; (800e4e8 <prvInitialiseTaskLists+0x74>)
 800e4ba:	f7fe f981 	bl	800c7c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4be:	4b0b      	ldr	r3, [pc, #44]	; (800e4ec <prvInitialiseTaskLists+0x78>)
 800e4c0:	4a05      	ldr	r2, [pc, #20]	; (800e4d8 <prvInitialiseTaskLists+0x64>)
 800e4c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4c4:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <prvInitialiseTaskLists+0x7c>)
 800e4c6:	4a05      	ldr	r2, [pc, #20]	; (800e4dc <prvInitialiseTaskLists+0x68>)
 800e4c8:	601a      	str	r2, [r3, #0]
}
 800e4ca:	bf00      	nop
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	24000a7c 	.word	0x24000a7c
 800e4d8:	24000edc 	.word	0x24000edc
 800e4dc:	24000ef0 	.word	0x24000ef0
 800e4e0:	24000f0c 	.word	0x24000f0c
 800e4e4:	24000f20 	.word	0x24000f20
 800e4e8:	24000f38 	.word	0x24000f38
 800e4ec:	24000f04 	.word	0x24000f04
 800e4f0:	24000f08 	.word	0x24000f08

0800e4f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4fa:	e019      	b.n	800e530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e4fc:	f000 fed2 	bl	800f2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e500:	4b10      	ldr	r3, [pc, #64]	; (800e544 <prvCheckTasksWaitingTermination+0x50>)
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3304      	adds	r3, #4
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fe f9e1 	bl	800c8d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e512:	4b0d      	ldr	r3, [pc, #52]	; (800e548 <prvCheckTasksWaitingTermination+0x54>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	3b01      	subs	r3, #1
 800e518:	4a0b      	ldr	r2, [pc, #44]	; (800e548 <prvCheckTasksWaitingTermination+0x54>)
 800e51a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e51c:	4b0b      	ldr	r3, [pc, #44]	; (800e54c <prvCheckTasksWaitingTermination+0x58>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3b01      	subs	r3, #1
 800e522:	4a0a      	ldr	r2, [pc, #40]	; (800e54c <prvCheckTasksWaitingTermination+0x58>)
 800e524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e526:	f000 feed 	bl	800f304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f810 	bl	800e550 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e530:	4b06      	ldr	r3, [pc, #24]	; (800e54c <prvCheckTasksWaitingTermination+0x58>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1e1      	bne.n	800e4fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e538:	bf00      	nop
 800e53a:	bf00      	nop
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	24000f20 	.word	0x24000f20
 800e548:	24000f4c 	.word	0x24000f4c
 800e54c:	24000f34 	.word	0x24000f34

0800e550 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3354      	adds	r3, #84	; 0x54
 800e55c:	4618      	mov	r0, r3
 800e55e:	f001 fa59 	bl	800fa14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d108      	bne.n	800e57e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e570:	4618      	mov	r0, r3
 800e572:	f001 f885 	bl	800f680 <vPortFree>
				vPortFree( pxTCB );
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f001 f882 	bl	800f680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e57c:	e018      	b.n	800e5b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e584:	2b01      	cmp	r3, #1
 800e586:	d103      	bne.n	800e590 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 f879 	bl	800f680 <vPortFree>
	}
 800e58e:	e00f      	b.n	800e5b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e596:	2b02      	cmp	r3, #2
 800e598:	d00a      	beq.n	800e5b0 <prvDeleteTCB+0x60>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	60fb      	str	r3, [r7, #12]
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <prvDeleteTCB+0x5e>
	}
 800e5b0:	bf00      	nop
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5be:	4b0c      	ldr	r3, [pc, #48]	; (800e5f0 <prvResetNextTaskUnblockTime+0x38>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d104      	bne.n	800e5d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5c8:	4b0a      	ldr	r3, [pc, #40]	; (800e5f4 <prvResetNextTaskUnblockTime+0x3c>)
 800e5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e5d0:	e008      	b.n	800e5e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d2:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <prvResetNextTaskUnblockTime+0x38>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	4a04      	ldr	r2, [pc, #16]	; (800e5f4 <prvResetNextTaskUnblockTime+0x3c>)
 800e5e2:	6013      	str	r3, [r2, #0]
}
 800e5e4:	bf00      	nop
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	24000f04 	.word	0x24000f04
 800e5f4:	24000f6c 	.word	0x24000f6c

0800e5f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5fe:	4b0b      	ldr	r3, [pc, #44]	; (800e62c <xTaskGetSchedulerState+0x34>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d102      	bne.n	800e60c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e606:	2301      	movs	r3, #1
 800e608:	607b      	str	r3, [r7, #4]
 800e60a:	e008      	b.n	800e61e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e60c:	4b08      	ldr	r3, [pc, #32]	; (800e630 <xTaskGetSchedulerState+0x38>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d102      	bne.n	800e61a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e614:	2302      	movs	r3, #2
 800e616:	607b      	str	r3, [r7, #4]
 800e618:	e001      	b.n	800e61e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e61a:	2300      	movs	r3, #0
 800e61c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e61e:	687b      	ldr	r3, [r7, #4]
	}
 800e620:	4618      	mov	r0, r3
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	24000f58 	.word	0x24000f58
 800e630:	24000f74 	.word	0x24000f74

0800e634 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e640:	2300      	movs	r3, #0
 800e642:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d051      	beq.n	800e6ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64e:	4b2a      	ldr	r3, [pc, #168]	; (800e6f8 <xTaskPriorityInherit+0xc4>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	429a      	cmp	r2, r3
 800e656:	d241      	bcs.n	800e6dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	db06      	blt.n	800e66e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e660:	4b25      	ldr	r3, [pc, #148]	; (800e6f8 <xTaskPriorityInherit+0xc4>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e666:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	6959      	ldr	r1, [r3, #20]
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e676:	4613      	mov	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4a1f      	ldr	r2, [pc, #124]	; (800e6fc <xTaskPriorityInherit+0xc8>)
 800e680:	4413      	add	r3, r2
 800e682:	4299      	cmp	r1, r3
 800e684:	d122      	bne.n	800e6cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	3304      	adds	r3, #4
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe f922 	bl	800c8d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e690:	4b19      	ldr	r3, [pc, #100]	; (800e6f8 <xTaskPriorityInherit+0xc4>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69e:	4b18      	ldr	r3, [pc, #96]	; (800e700 <xTaskPriorityInherit+0xcc>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d903      	bls.n	800e6ae <xTaskPriorityInherit+0x7a>
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6aa:	4a15      	ldr	r2, [pc, #84]	; (800e700 <xTaskPriorityInherit+0xcc>)
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	4a10      	ldr	r2, [pc, #64]	; (800e6fc <xTaskPriorityInherit+0xc8>)
 800e6bc:	441a      	add	r2, r3
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	4610      	mov	r0, r2
 800e6c6:	f7fe f8a8 	bl	800c81a <vListInsertEnd>
 800e6ca:	e004      	b.n	800e6d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <xTaskPriorityInherit+0xc4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	e008      	b.n	800e6ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6e0:	4b05      	ldr	r3, [pc, #20]	; (800e6f8 <xTaskPriorityInherit+0xc4>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d201      	bcs.n	800e6ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
	}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	24000a78 	.word	0x24000a78
 800e6fc:	24000a7c 	.word	0x24000a7c
 800e700:	24000f54 	.word	0x24000f54

0800e704 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e710:	2300      	movs	r3, #0
 800e712:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d056      	beq.n	800e7c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e71a:	4b2e      	ldr	r3, [pc, #184]	; (800e7d4 <xTaskPriorityDisinherit+0xd0>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	429a      	cmp	r2, r3
 800e722:	d00a      	beq.n	800e73a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	60fb      	str	r3, [r7, #12]
}
 800e736:	bf00      	nop
 800e738:	e7fe      	b.n	800e738 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10a      	bne.n	800e758 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e746:	f383 8811 	msr	BASEPRI, r3
 800e74a:	f3bf 8f6f 	isb	sy
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	60bb      	str	r3, [r7, #8]
}
 800e754:	bf00      	nop
 800e756:	e7fe      	b.n	800e756 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75c:	1e5a      	subs	r2, r3, #1
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d02c      	beq.n	800e7c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e772:	2b00      	cmp	r3, #0
 800e774:	d128      	bne.n	800e7c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	3304      	adds	r3, #4
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe f8aa 	bl	800c8d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e798:	4b0f      	ldr	r3, [pc, #60]	; (800e7d8 <xTaskPriorityDisinherit+0xd4>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d903      	bls.n	800e7a8 <xTaskPriorityDisinherit+0xa4>
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a4:	4a0c      	ldr	r2, [pc, #48]	; (800e7d8 <xTaskPriorityDisinherit+0xd4>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4413      	add	r3, r2
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	4a09      	ldr	r2, [pc, #36]	; (800e7dc <xTaskPriorityDisinherit+0xd8>)
 800e7b6:	441a      	add	r2, r3
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	4619      	mov	r1, r3
 800e7be:	4610      	mov	r0, r2
 800e7c0:	f7fe f82b 	bl	800c81a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7c8:	697b      	ldr	r3, [r7, #20]
	}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3718      	adds	r7, #24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	24000a78 	.word	0x24000a78
 800e7d8:	24000f54 	.word	0x24000f54
 800e7dc:	24000a7c 	.word	0x24000a7c

0800e7e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b088      	sub	sp, #32
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d06a      	beq.n	800e8ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	60fb      	str	r3, [r7, #12]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d902      	bls.n	800e826 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	61fb      	str	r3, [r7, #28]
 800e824:	e002      	b.n	800e82c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e826:	69bb      	ldr	r3, [r7, #24]
 800e828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e82a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	429a      	cmp	r2, r3
 800e834:	d04b      	beq.n	800e8ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d146      	bne.n	800e8ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e840:	4b25      	ldr	r3, [pc, #148]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	429a      	cmp	r2, r3
 800e848:	d10a      	bne.n	800e860 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	60bb      	str	r3, [r7, #8]
}
 800e85c:	bf00      	nop
 800e85e:	e7fe      	b.n	800e85e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e864:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	69fa      	ldr	r2, [r7, #28]
 800e86a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	2b00      	cmp	r3, #0
 800e872:	db04      	blt.n	800e87e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	6959      	ldr	r1, [r3, #20]
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4a13      	ldr	r2, [pc, #76]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e88e:	4413      	add	r3, r2
 800e890:	4299      	cmp	r1, r3
 800e892:	d11c      	bne.n	800e8ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	3304      	adds	r3, #4
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fe f81b 	bl	800c8d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a2:	4b0f      	ldr	r3, [pc, #60]	; (800e8e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d903      	bls.n	800e8b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ae:	4a0c      	ldr	r2, [pc, #48]	; (800e8e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8b0:	6013      	str	r3, [r2, #0]
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	4a07      	ldr	r2, [pc, #28]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8c0:	441a      	add	r2, r3
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	f7fd ffa6 	bl	800c81a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8ce:	bf00      	nop
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	24000a78 	.word	0x24000a78
 800e8dc:	24000a7c 	.word	0x24000a7c
 800e8e0:	24000f54 	.word	0x24000f54

0800e8e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8e4:	b480      	push	{r7}
 800e8e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8e8:	4b07      	ldr	r3, [pc, #28]	; (800e908 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d004      	beq.n	800e8fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8f0:	4b05      	ldr	r3, [pc, #20]	; (800e908 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8f6:	3201      	adds	r2, #1
 800e8f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e8fa:	4b03      	ldr	r3, [pc, #12]	; (800e908 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
	}
 800e8fe:	4618      	mov	r0, r3
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	24000a78 	.word	0x24000a78

0800e90c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e916:	4b21      	ldr	r3, [pc, #132]	; (800e99c <prvAddCurrentTaskToDelayedList+0x90>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e91c:	4b20      	ldr	r3, [pc, #128]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3304      	adds	r3, #4
 800e922:	4618      	mov	r0, r3
 800e924:	f7fd ffd6 	bl	800c8d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92e:	d10a      	bne.n	800e946 <prvAddCurrentTaskToDelayedList+0x3a>
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e936:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3304      	adds	r3, #4
 800e93c:	4619      	mov	r1, r3
 800e93e:	4819      	ldr	r0, [pc, #100]	; (800e9a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800e940:	f7fd ff6b 	bl	800c81a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e944:	e026      	b.n	800e994 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	4413      	add	r3, r2
 800e94c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e94e:	4b14      	ldr	r3, [pc, #80]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d209      	bcs.n	800e972 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e95e:	4b12      	ldr	r3, [pc, #72]	; (800e9a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3304      	adds	r3, #4
 800e968:	4619      	mov	r1, r3
 800e96a:	4610      	mov	r0, r2
 800e96c:	f7fd ff79 	bl	800c862 <vListInsert>
}
 800e970:	e010      	b.n	800e994 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e972:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	4b0a      	ldr	r3, [pc, #40]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	3304      	adds	r3, #4
 800e97c:	4619      	mov	r1, r3
 800e97e:	4610      	mov	r0, r2
 800e980:	f7fd ff6f 	bl	800c862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e984:	4b0a      	ldr	r3, [pc, #40]	; (800e9b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d202      	bcs.n	800e994 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e98e:	4a08      	ldr	r2, [pc, #32]	; (800e9b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	6013      	str	r3, [r2, #0]
}
 800e994:	bf00      	nop
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	24000f50 	.word	0x24000f50
 800e9a0:	24000a78 	.word	0x24000a78
 800e9a4:	24000f38 	.word	0x24000f38
 800e9a8:	24000f08 	.word	0x24000f08
 800e9ac:	24000f04 	.word	0x24000f04
 800e9b0:	24000f6c 	.word	0x24000f6c

0800e9b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b08a      	sub	sp, #40	; 0x28
 800e9b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9be:	f000 fb07 	bl	800efd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ea34 <xTimerCreateTimerTask+0x80>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d021      	beq.n	800ea0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e9d2:	1d3a      	adds	r2, r7, #4
 800e9d4:	f107 0108 	add.w	r1, r7, #8
 800e9d8:	f107 030c 	add.w	r3, r7, #12
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fd fed5 	bl	800c78c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9e2:	6879      	ldr	r1, [r7, #4]
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	9202      	str	r2, [sp, #8]
 800e9ea:	9301      	str	r3, [sp, #4]
 800e9ec:	2302      	movs	r3, #2
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	460a      	mov	r2, r1
 800e9f4:	4910      	ldr	r1, [pc, #64]	; (800ea38 <xTimerCreateTimerTask+0x84>)
 800e9f6:	4811      	ldr	r0, [pc, #68]	; (800ea3c <xTimerCreateTimerTask+0x88>)
 800e9f8:	f7fe ffa4 	bl	800d944 <xTaskCreateStatic>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	4a10      	ldr	r2, [pc, #64]	; (800ea40 <xTimerCreateTimerTask+0x8c>)
 800ea00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea02:	4b0f      	ldr	r3, [pc, #60]	; (800ea40 <xTimerCreateTimerTask+0x8c>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10a      	bne.n	800ea2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	613b      	str	r3, [r7, #16]
}
 800ea26:	bf00      	nop
 800ea28:	e7fe      	b.n	800ea28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea2a:	697b      	ldr	r3, [r7, #20]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	24000fa8 	.word	0x24000fa8
 800ea38:	08010338 	.word	0x08010338
 800ea3c:	0800eb79 	.word	0x0800eb79
 800ea40:	24000fac 	.word	0x24000fac

0800ea44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b08a      	sub	sp, #40	; 0x28
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d10a      	bne.n	800ea72 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea60:	f383 8811 	msr	BASEPRI, r3
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	f3bf 8f4f 	dsb	sy
 800ea6c:	623b      	str	r3, [r7, #32]
}
 800ea6e:	bf00      	nop
 800ea70:	e7fe      	b.n	800ea70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea72:	4b1a      	ldr	r3, [pc, #104]	; (800eadc <xTimerGenericCommand+0x98>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d02a      	beq.n	800ead0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b05      	cmp	r3, #5
 800ea8a:	dc18      	bgt.n	800eabe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea8c:	f7ff fdb4 	bl	800e5f8 <xTaskGetSchedulerState>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d109      	bne.n	800eaaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea96:	4b11      	ldr	r3, [pc, #68]	; (800eadc <xTimerGenericCommand+0x98>)
 800ea98:	6818      	ldr	r0, [r3, #0]
 800ea9a:	f107 0110 	add.w	r1, r7, #16
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa2:	f7fe f8e9 	bl	800cc78 <xQueueGenericSend>
 800eaa6:	6278      	str	r0, [r7, #36]	; 0x24
 800eaa8:	e012      	b.n	800ead0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eaaa:	4b0c      	ldr	r3, [pc, #48]	; (800eadc <xTimerGenericCommand+0x98>)
 800eaac:	6818      	ldr	r0, [r3, #0]
 800eaae:	f107 0110 	add.w	r1, r7, #16
 800eab2:	2300      	movs	r3, #0
 800eab4:	2200      	movs	r2, #0
 800eab6:	f7fe f8df 	bl	800cc78 <xQueueGenericSend>
 800eaba:	6278      	str	r0, [r7, #36]	; 0x24
 800eabc:	e008      	b.n	800ead0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eabe:	4b07      	ldr	r3, [pc, #28]	; (800eadc <xTimerGenericCommand+0x98>)
 800eac0:	6818      	ldr	r0, [r3, #0]
 800eac2:	f107 0110 	add.w	r1, r7, #16
 800eac6:	2300      	movs	r3, #0
 800eac8:	683a      	ldr	r2, [r7, #0]
 800eaca:	f7fe f9d3 	bl	800ce74 <xQueueGenericSendFromISR>
 800eace:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3728      	adds	r7, #40	; 0x28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	24000fa8 	.word	0x24000fa8

0800eae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af02      	add	r7, sp, #8
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaea:	4b22      	ldr	r3, [pc, #136]	; (800eb74 <prvProcessExpiredTimer+0x94>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fd feeb 	bl	800c8d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb04:	f003 0304 	and.w	r3, r3, #4
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d022      	beq.n	800eb52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	699a      	ldr	r2, [r3, #24]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	18d1      	adds	r1, r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	6978      	ldr	r0, [r7, #20]
 800eb1a:	f000 f8d1 	bl	800ecc0 <prvInsertTimerInActiveList>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d01f      	beq.n	800eb64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb24:	2300      	movs	r3, #0
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	2300      	movs	r3, #0
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	6978      	ldr	r0, [r7, #20]
 800eb30:	f7ff ff88 	bl	800ea44 <xTimerGenericCommand>
 800eb34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d113      	bne.n	800eb64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	60fb      	str	r3, [r7, #12]
}
 800eb4e:	bf00      	nop
 800eb50:	e7fe      	b.n	800eb50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb58:	f023 0301 	bic.w	r3, r3, #1
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	6a1b      	ldr	r3, [r3, #32]
 800eb68:	6978      	ldr	r0, [r7, #20]
 800eb6a:	4798      	blx	r3
}
 800eb6c:	bf00      	nop
 800eb6e:	3718      	adds	r7, #24
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	24000fa0 	.word	0x24000fa0

0800eb78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb80:	f107 0308 	add.w	r3, r7, #8
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 f857 	bl	800ec38 <prvGetNextExpireTime>
 800eb8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f000 f803 	bl	800eb9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb96:	f000 f8d5 	bl	800ed44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb9a:	e7f1      	b.n	800eb80 <prvTimerTask+0x8>

0800eb9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eba6:	f7ff f929 	bl	800ddfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebaa:	f107 0308 	add.w	r3, r7, #8
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 f866 	bl	800ec80 <prvSampleTimeNow>
 800ebb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d130      	bne.n	800ec1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10a      	bne.n	800ebd8 <prvProcessTimerOrBlockTask+0x3c>
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d806      	bhi.n	800ebd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ebca:	f7ff f925 	bl	800de18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ebce:	68f9      	ldr	r1, [r7, #12]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7ff ff85 	bl	800eae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ebd6:	e024      	b.n	800ec22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d008      	beq.n	800ebf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <prvProcessTimerOrBlockTask+0x90>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <prvProcessTimerOrBlockTask+0x50>
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e000      	b.n	800ebee <prvProcessTimerOrBlockTask+0x52>
 800ebec:	2300      	movs	r3, #0
 800ebee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ebf0:	4b0f      	ldr	r3, [pc, #60]	; (800ec30 <prvProcessTimerOrBlockTask+0x94>)
 800ebf2:	6818      	ldr	r0, [r3, #0]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	f7fe fe6d 	bl	800d8dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec02:	f7ff f909 	bl	800de18 <xTaskResumeAll>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10a      	bne.n	800ec22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec0c:	4b09      	ldr	r3, [pc, #36]	; (800ec34 <prvProcessTimerOrBlockTask+0x98>)
 800ec0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	f3bf 8f6f 	isb	sy
}
 800ec1c:	e001      	b.n	800ec22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec1e:	f7ff f8fb 	bl	800de18 <xTaskResumeAll>
}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	24000fa4 	.word	0x24000fa4
 800ec30:	24000fa8 	.word	0x24000fa8
 800ec34:	e000ed04 	.word	0xe000ed04

0800ec38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec40:	4b0e      	ldr	r3, [pc, #56]	; (800ec7c <prvGetNextExpireTime+0x44>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d101      	bne.n	800ec4e <prvGetNextExpireTime+0x16>
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	e000      	b.n	800ec50 <prvGetNextExpireTime+0x18>
 800ec4e:	2200      	movs	r2, #0
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d105      	bne.n	800ec68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec5c:	4b07      	ldr	r3, [pc, #28]	; (800ec7c <prvGetNextExpireTime+0x44>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	60fb      	str	r3, [r7, #12]
 800ec66:	e001      	b.n	800ec6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	24000fa0 	.word	0x24000fa0

0800ec80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec88:	f7ff f964 	bl	800df54 <xTaskGetTickCount>
 800ec8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec8e:	4b0b      	ldr	r3, [pc, #44]	; (800ecbc <prvSampleTimeNow+0x3c>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d205      	bcs.n	800eca4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec98:	f000 f936 	bl	800ef08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	601a      	str	r2, [r3, #0]
 800eca2:	e002      	b.n	800ecaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ecaa:	4a04      	ldr	r2, [pc, #16]	; (800ecbc <prvSampleTimeNow+0x3c>)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	24000fb0 	.word	0x24000fb0

0800ecc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
 800eccc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d812      	bhi.n	800ed0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	1ad2      	subs	r2, r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d302      	bcc.n	800ecfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	617b      	str	r3, [r7, #20]
 800ecf8:	e01b      	b.n	800ed32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ecfa:	4b10      	ldr	r3, [pc, #64]	; (800ed3c <prvInsertTimerInActiveList+0x7c>)
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3304      	adds	r3, #4
 800ed02:	4619      	mov	r1, r3
 800ed04:	4610      	mov	r0, r2
 800ed06:	f7fd fdac 	bl	800c862 <vListInsert>
 800ed0a:	e012      	b.n	800ed32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d206      	bcs.n	800ed22 <prvInsertTimerInActiveList+0x62>
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d302      	bcc.n	800ed22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	617b      	str	r3, [r7, #20]
 800ed20:	e007      	b.n	800ed32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed22:	4b07      	ldr	r3, [pc, #28]	; (800ed40 <prvInsertTimerInActiveList+0x80>)
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	f7fd fd98 	bl	800c862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed32:	697b      	ldr	r3, [r7, #20]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	24000fa4 	.word	0x24000fa4
 800ed40:	24000fa0 	.word	0x24000fa0

0800ed44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b08e      	sub	sp, #56	; 0x38
 800ed48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed4a:	e0ca      	b.n	800eee2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	da18      	bge.n	800ed84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed52:	1d3b      	adds	r3, r7, #4
 800ed54:	3304      	adds	r3, #4
 800ed56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10a      	bne.n	800ed74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	61fb      	str	r3, [r7, #28]
}
 800ed70:	bf00      	nop
 800ed72:	e7fe      	b.n	800ed72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7a:	6850      	ldr	r0, [r2, #4]
 800ed7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7e:	6892      	ldr	r2, [r2, #8]
 800ed80:	4611      	mov	r1, r2
 800ed82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f2c0 80aa 	blt.w	800eee0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d004      	beq.n	800eda2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fd fd99 	bl	800c8d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eda2:	463b      	mov	r3, r7
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff ff6b 	bl	800ec80 <prvSampleTimeNow>
 800edaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b09      	cmp	r3, #9
 800edb0:	f200 8097 	bhi.w	800eee2 <prvProcessReceivedCommands+0x19e>
 800edb4:	a201      	add	r2, pc, #4	; (adr r2, 800edbc <prvProcessReceivedCommands+0x78>)
 800edb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edba:	bf00      	nop
 800edbc:	0800ede5 	.word	0x0800ede5
 800edc0:	0800ede5 	.word	0x0800ede5
 800edc4:	0800ede5 	.word	0x0800ede5
 800edc8:	0800ee59 	.word	0x0800ee59
 800edcc:	0800ee6d 	.word	0x0800ee6d
 800edd0:	0800eeb7 	.word	0x0800eeb7
 800edd4:	0800ede5 	.word	0x0800ede5
 800edd8:	0800ede5 	.word	0x0800ede5
 800eddc:	0800ee59 	.word	0x0800ee59
 800ede0:	0800ee6d 	.word	0x0800ee6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edea:	f043 0301 	orr.w	r3, r3, #1
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	18d1      	adds	r1, r2, r3
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee04:	f7ff ff5c 	bl	800ecc0 <prvInsertTimerInActiveList>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d069      	beq.n	800eee2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee1c:	f003 0304 	and.w	r3, r3, #4
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d05e      	beq.n	800eee2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee28:	699b      	ldr	r3, [r3, #24]
 800ee2a:	441a      	add	r2, r3
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	2300      	movs	r3, #0
 800ee32:	2100      	movs	r1, #0
 800ee34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee36:	f7ff fe05 	bl	800ea44 <xTimerGenericCommand>
 800ee3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d14f      	bne.n	800eee2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee46:	f383 8811 	msr	BASEPRI, r3
 800ee4a:	f3bf 8f6f 	isb	sy
 800ee4e:	f3bf 8f4f 	dsb	sy
 800ee52:	61bb      	str	r3, [r7, #24]
}
 800ee54:	bf00      	nop
 800ee56:	e7fe      	b.n	800ee56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee5e:	f023 0301 	bic.w	r3, r3, #1
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee6a:	e03a      	b.n	800eee2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee72:	f043 0301 	orr.w	r3, r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	617b      	str	r3, [r7, #20]
}
 800ee9e:	bf00      	nop
 800eea0:	e7fe      	b.n	800eea0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	699a      	ldr	r2, [r3, #24]
 800eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea8:	18d1      	adds	r1, r2, r3
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeb0:	f7ff ff06 	bl	800ecc0 <prvInsertTimerInActiveList>
					break;
 800eeb4:	e015      	b.n	800eee2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eebc:	f003 0302 	and.w	r3, r3, #2
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d103      	bne.n	800eecc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec6:	f000 fbdb 	bl	800f680 <vPortFree>
 800eeca:	e00a      	b.n	800eee2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eed2:	f023 0301 	bic.w	r3, r3, #1
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eede:	e000      	b.n	800eee2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eee0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eee2:	4b08      	ldr	r3, [pc, #32]	; (800ef04 <prvProcessReceivedCommands+0x1c0>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	1d39      	adds	r1, r7, #4
 800eee8:	2200      	movs	r2, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe f8ea 	bl	800d0c4 <xQueueReceive>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f47f af2a 	bne.w	800ed4c <prvProcessReceivedCommands+0x8>
	}
}
 800eef8:	bf00      	nop
 800eefa:	bf00      	nop
 800eefc:	3730      	adds	r7, #48	; 0x30
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	24000fa8 	.word	0x24000fa8

0800ef08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef0e:	e048      	b.n	800efa2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef10:	4b2d      	ldr	r3, [pc, #180]	; (800efc8 <prvSwitchTimerLists+0xc0>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef1a:	4b2b      	ldr	r3, [pc, #172]	; (800efc8 <prvSwitchTimerLists+0xc0>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	3304      	adds	r3, #4
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fd fcd3 	bl	800c8d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef3c:	f003 0304 	and.w	r3, r3, #4
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d02e      	beq.n	800efa2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	699b      	ldr	r3, [r3, #24]
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d90e      	bls.n	800ef74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	68ba      	ldr	r2, [r7, #8]
 800ef5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef62:	4b19      	ldr	r3, [pc, #100]	; (800efc8 <prvSwitchTimerLists+0xc0>)
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3304      	adds	r3, #4
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	f7fd fc78 	bl	800c862 <vListInsert>
 800ef72:	e016      	b.n	800efa2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef74:	2300      	movs	r3, #0
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff fd60 	bl	800ea44 <xTimerGenericCommand>
 800ef84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10a      	bne.n	800efa2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	603b      	str	r3, [r7, #0]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efa2:	4b09      	ldr	r3, [pc, #36]	; (800efc8 <prvSwitchTimerLists+0xc0>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1b1      	bne.n	800ef10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efac:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <prvSwitchTimerLists+0xc0>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efb2:	4b06      	ldr	r3, [pc, #24]	; (800efcc <prvSwitchTimerLists+0xc4>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a04      	ldr	r2, [pc, #16]	; (800efc8 <prvSwitchTimerLists+0xc0>)
 800efb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efba:	4a04      	ldr	r2, [pc, #16]	; (800efcc <prvSwitchTimerLists+0xc4>)
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	6013      	str	r3, [r2, #0]
}
 800efc0:	bf00      	nop
 800efc2:	3718      	adds	r7, #24
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	24000fa0 	.word	0x24000fa0
 800efcc:	24000fa4 	.word	0x24000fa4

0800efd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800efd6:	f000 f965 	bl	800f2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800efda:	4b15      	ldr	r3, [pc, #84]	; (800f030 <prvCheckForValidListAndQueue+0x60>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d120      	bne.n	800f024 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800efe2:	4814      	ldr	r0, [pc, #80]	; (800f034 <prvCheckForValidListAndQueue+0x64>)
 800efe4:	f7fd fbec 	bl	800c7c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efe8:	4813      	ldr	r0, [pc, #76]	; (800f038 <prvCheckForValidListAndQueue+0x68>)
 800efea:	f7fd fbe9 	bl	800c7c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efee:	4b13      	ldr	r3, [pc, #76]	; (800f03c <prvCheckForValidListAndQueue+0x6c>)
 800eff0:	4a10      	ldr	r2, [pc, #64]	; (800f034 <prvCheckForValidListAndQueue+0x64>)
 800eff2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eff4:	4b12      	ldr	r3, [pc, #72]	; (800f040 <prvCheckForValidListAndQueue+0x70>)
 800eff6:	4a10      	ldr	r2, [pc, #64]	; (800f038 <prvCheckForValidListAndQueue+0x68>)
 800eff8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800effa:	2300      	movs	r3, #0
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	4b11      	ldr	r3, [pc, #68]	; (800f044 <prvCheckForValidListAndQueue+0x74>)
 800f000:	4a11      	ldr	r2, [pc, #68]	; (800f048 <prvCheckForValidListAndQueue+0x78>)
 800f002:	2110      	movs	r1, #16
 800f004:	200a      	movs	r0, #10
 800f006:	f7fd fcf7 	bl	800c9f8 <xQueueGenericCreateStatic>
 800f00a:	4603      	mov	r3, r0
 800f00c:	4a08      	ldr	r2, [pc, #32]	; (800f030 <prvCheckForValidListAndQueue+0x60>)
 800f00e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f010:	4b07      	ldr	r3, [pc, #28]	; (800f030 <prvCheckForValidListAndQueue+0x60>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d005      	beq.n	800f024 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f018:	4b05      	ldr	r3, [pc, #20]	; (800f030 <prvCheckForValidListAndQueue+0x60>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	490b      	ldr	r1, [pc, #44]	; (800f04c <prvCheckForValidListAndQueue+0x7c>)
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fe fc08 	bl	800d834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f024:	f000 f96e 	bl	800f304 <vPortExitCritical>
}
 800f028:	bf00      	nop
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	24000fa8 	.word	0x24000fa8
 800f034:	24000f78 	.word	0x24000f78
 800f038:	24000f8c 	.word	0x24000f8c
 800f03c:	24000fa0 	.word	0x24000fa0
 800f040:	24000fa4 	.word	0x24000fa4
 800f044:	24001054 	.word	0x24001054
 800f048:	24000fb4 	.word	0x24000fb4
 800f04c:	08010340 	.word	0x08010340

0800f050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	3b04      	subs	r3, #4
 800f060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3b04      	subs	r3, #4
 800f06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f023 0201 	bic.w	r2, r3, #1
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	3b04      	subs	r3, #4
 800f07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f080:	4a0c      	ldr	r2, [pc, #48]	; (800f0b4 <pxPortInitialiseStack+0x64>)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	3b14      	subs	r3, #20
 800f08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3b04      	subs	r3, #4
 800f096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f06f 0202 	mvn.w	r2, #2
 800f09e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3b20      	subs	r3, #32
 800f0a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	0800f0b9 	.word	0x0800f0b9

0800f0b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0c2:	4b12      	ldr	r3, [pc, #72]	; (800f10c <prvTaskExitError+0x54>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ca:	d00a      	beq.n	800f0e2 <prvTaskExitError+0x2a>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	60fb      	str	r3, [r7, #12]
}
 800f0de:	bf00      	nop
 800f0e0:	e7fe      	b.n	800f0e0 <prvTaskExitError+0x28>
	__asm volatile
 800f0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e6:	f383 8811 	msr	BASEPRI, r3
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	60bb      	str	r3, [r7, #8]
}
 800f0f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f0f6:	bf00      	nop
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d0fc      	beq.n	800f0f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f0fe:	bf00      	nop
 800f100:	bf00      	nop
 800f102:	3714      	adds	r7, #20
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	24000238 	.word	0x24000238

0800f110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f110:	4b07      	ldr	r3, [pc, #28]	; (800f130 <pxCurrentTCBConst2>)
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	6808      	ldr	r0, [r1, #0]
 800f116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11a:	f380 8809 	msr	PSP, r0
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f04f 0000 	mov.w	r0, #0
 800f126:	f380 8811 	msr	BASEPRI, r0
 800f12a:	4770      	bx	lr
 800f12c:	f3af 8000 	nop.w

0800f130 <pxCurrentTCBConst2>:
 800f130:	24000a78 	.word	0x24000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop

0800f138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f138:	4808      	ldr	r0, [pc, #32]	; (800f15c <prvPortStartFirstTask+0x24>)
 800f13a:	6800      	ldr	r0, [r0, #0]
 800f13c:	6800      	ldr	r0, [r0, #0]
 800f13e:	f380 8808 	msr	MSP, r0
 800f142:	f04f 0000 	mov.w	r0, #0
 800f146:	f380 8814 	msr	CONTROL, r0
 800f14a:	b662      	cpsie	i
 800f14c:	b661      	cpsie	f
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	df00      	svc	0
 800f158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f15a:	bf00      	nop
 800f15c:	e000ed08 	.word	0xe000ed08

0800f160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f166:	4b46      	ldr	r3, [pc, #280]	; (800f280 <xPortStartScheduler+0x120>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a46      	ldr	r2, [pc, #280]	; (800f284 <xPortStartScheduler+0x124>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d10a      	bne.n	800f186 <xPortStartScheduler+0x26>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	613b      	str	r3, [r7, #16]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f186:	4b3e      	ldr	r3, [pc, #248]	; (800f280 <xPortStartScheduler+0x120>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a3f      	ldr	r2, [pc, #252]	; (800f288 <xPortStartScheduler+0x128>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d10a      	bne.n	800f1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	60fb      	str	r3, [r7, #12]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1a6:	4b39      	ldr	r3, [pc, #228]	; (800f28c <xPortStartScheduler+0x12c>)
 800f1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	22ff      	movs	r2, #255	; 0xff
 800f1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1c0:	78fb      	ldrb	r3, [r7, #3]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	4b31      	ldr	r3, [pc, #196]	; (800f290 <xPortStartScheduler+0x130>)
 800f1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ce:	4b31      	ldr	r3, [pc, #196]	; (800f294 <xPortStartScheduler+0x134>)
 800f1d0:	2207      	movs	r2, #7
 800f1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1d4:	e009      	b.n	800f1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f1d6:	4b2f      	ldr	r3, [pc, #188]	; (800f294 <xPortStartScheduler+0x134>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	4a2d      	ldr	r2, [pc, #180]	; (800f294 <xPortStartScheduler+0x134>)
 800f1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f2:	2b80      	cmp	r3, #128	; 0x80
 800f1f4:	d0ef      	beq.n	800f1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f1f6:	4b27      	ldr	r3, [pc, #156]	; (800f294 <xPortStartScheduler+0x134>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f1c3 0307 	rsb	r3, r3, #7
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d00a      	beq.n	800f218 <xPortStartScheduler+0xb8>
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	60bb      	str	r3, [r7, #8]
}
 800f214:	bf00      	nop
 800f216:	e7fe      	b.n	800f216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f218:	4b1e      	ldr	r3, [pc, #120]	; (800f294 <xPortStartScheduler+0x134>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	021b      	lsls	r3, r3, #8
 800f21e:	4a1d      	ldr	r2, [pc, #116]	; (800f294 <xPortStartScheduler+0x134>)
 800f220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f222:	4b1c      	ldr	r3, [pc, #112]	; (800f294 <xPortStartScheduler+0x134>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f22a:	4a1a      	ldr	r2, [pc, #104]	; (800f294 <xPortStartScheduler+0x134>)
 800f22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	b2da      	uxtb	r2, r3
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f236:	4b18      	ldr	r3, [pc, #96]	; (800f298 <xPortStartScheduler+0x138>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a17      	ldr	r2, [pc, #92]	; (800f298 <xPortStartScheduler+0x138>)
 800f23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f242:	4b15      	ldr	r3, [pc, #84]	; (800f298 <xPortStartScheduler+0x138>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a14      	ldr	r2, [pc, #80]	; (800f298 <xPortStartScheduler+0x138>)
 800f248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f24e:	f000 f8dd 	bl	800f40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f252:	4b12      	ldr	r3, [pc, #72]	; (800f29c <xPortStartScheduler+0x13c>)
 800f254:	2200      	movs	r2, #0
 800f256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f258:	f000 f8fc 	bl	800f454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f25c:	4b10      	ldr	r3, [pc, #64]	; (800f2a0 <xPortStartScheduler+0x140>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a0f      	ldr	r2, [pc, #60]	; (800f2a0 <xPortStartScheduler+0x140>)
 800f262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f268:	f7ff ff66 	bl	800f138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f26c:	f7fe ff4e 	bl	800e10c <vTaskSwitchContext>
	prvTaskExitError();
 800f270:	f7ff ff22 	bl	800f0b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	e000ed00 	.word	0xe000ed00
 800f284:	410fc271 	.word	0x410fc271
 800f288:	410fc270 	.word	0x410fc270
 800f28c:	e000e400 	.word	0xe000e400
 800f290:	240010a4 	.word	0x240010a4
 800f294:	240010a8 	.word	0x240010a8
 800f298:	e000ed20 	.word	0xe000ed20
 800f29c:	24000238 	.word	0x24000238
 800f2a0:	e000ef34 	.word	0xe000ef34

0800f2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	607b      	str	r3, [r7, #4]
}
 800f2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2be:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <vPortEnterCritical+0x58>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	4a0d      	ldr	r2, [pc, #52]	; (800f2fc <vPortEnterCritical+0x58>)
 800f2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2c8:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <vPortEnterCritical+0x58>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d10f      	bne.n	800f2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <vPortEnterCritical+0x5c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00a      	beq.n	800f2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	603b      	str	r3, [r7, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	e7fe      	b.n	800f2ee <vPortEnterCritical+0x4a>
	}
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	24000238 	.word	0x24000238
 800f300:	e000ed04 	.word	0xe000ed04

0800f304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f30a:	4b12      	ldr	r3, [pc, #72]	; (800f354 <vPortExitCritical+0x50>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10a      	bne.n	800f328 <vPortExitCritical+0x24>
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	f383 8811 	msr	BASEPRI, r3
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	607b      	str	r3, [r7, #4]
}
 800f324:	bf00      	nop
 800f326:	e7fe      	b.n	800f326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f328:	4b0a      	ldr	r3, [pc, #40]	; (800f354 <vPortExitCritical+0x50>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	4a09      	ldr	r2, [pc, #36]	; (800f354 <vPortExitCritical+0x50>)
 800f330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f332:	4b08      	ldr	r3, [pc, #32]	; (800f354 <vPortExitCritical+0x50>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d105      	bne.n	800f346 <vPortExitCritical+0x42>
 800f33a:	2300      	movs	r3, #0
 800f33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	f383 8811 	msr	BASEPRI, r3
}
 800f344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f346:	bf00      	nop
 800f348:	370c      	adds	r7, #12
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	24000238 	.word	0x24000238
	...

0800f360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f360:	f3ef 8009 	mrs	r0, PSP
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	4b15      	ldr	r3, [pc, #84]	; (800f3c0 <pxCurrentTCBConst>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	f01e 0f10 	tst.w	lr, #16
 800f370:	bf08      	it	eq
 800f372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37a:	6010      	str	r0, [r2, #0]
 800f37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f384:	f380 8811 	msr	BASEPRI, r0
 800f388:	f3bf 8f4f 	dsb	sy
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f7fe febc 	bl	800e10c <vTaskSwitchContext>
 800f394:	f04f 0000 	mov.w	r0, #0
 800f398:	f380 8811 	msr	BASEPRI, r0
 800f39c:	bc09      	pop	{r0, r3}
 800f39e:	6819      	ldr	r1, [r3, #0]
 800f3a0:	6808      	ldr	r0, [r1, #0]
 800f3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a6:	f01e 0f10 	tst.w	lr, #16
 800f3aa:	bf08      	it	eq
 800f3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3b0:	f380 8809 	msr	PSP, r0
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	f3af 8000 	nop.w

0800f3c0 <pxCurrentTCBConst>:
 800f3c0:	24000a78 	.word	0x24000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3c4:	bf00      	nop
 800f3c6:	bf00      	nop

0800f3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	607b      	str	r3, [r7, #4]
}
 800f3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3e2:	f7fe fdd9 	bl	800df98 <xTaskIncrementTick>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d003      	beq.n	800f3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f3ec:	4b06      	ldr	r3, [pc, #24]	; (800f408 <xPortSysTickHandler+0x40>)
 800f3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	f383 8811 	msr	BASEPRI, r3
}
 800f3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	e000ed04 	.word	0xe000ed04

0800f40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f40c:	b480      	push	{r7}
 800f40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f410:	4b0b      	ldr	r3, [pc, #44]	; (800f440 <vPortSetupTimerInterrupt+0x34>)
 800f412:	2200      	movs	r2, #0
 800f414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f416:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <vPortSetupTimerInterrupt+0x38>)
 800f418:	2200      	movs	r2, #0
 800f41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f41c:	4b0a      	ldr	r3, [pc, #40]	; (800f448 <vPortSetupTimerInterrupt+0x3c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a0a      	ldr	r2, [pc, #40]	; (800f44c <vPortSetupTimerInterrupt+0x40>)
 800f422:	fba2 2303 	umull	r2, r3, r2, r3
 800f426:	099b      	lsrs	r3, r3, #6
 800f428:	4a09      	ldr	r2, [pc, #36]	; (800f450 <vPortSetupTimerInterrupt+0x44>)
 800f42a:	3b01      	subs	r3, #1
 800f42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f42e:	4b04      	ldr	r3, [pc, #16]	; (800f440 <vPortSetupTimerInterrupt+0x34>)
 800f430:	2207      	movs	r2, #7
 800f432:	601a      	str	r2, [r3, #0]
}
 800f434:	bf00      	nop
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	e000e010 	.word	0xe000e010
 800f444:	e000e018 	.word	0xe000e018
 800f448:	24000228 	.word	0x24000228
 800f44c:	10624dd3 	.word	0x10624dd3
 800f450:	e000e014 	.word	0xe000e014

0800f454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f464 <vPortEnableVFP+0x10>
 800f458:	6801      	ldr	r1, [r0, #0]
 800f45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f45e:	6001      	str	r1, [r0, #0]
 800f460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f462:	bf00      	nop
 800f464:	e000ed88 	.word	0xe000ed88

0800f468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f46e:	f3ef 8305 	mrs	r3, IPSR
 800f472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b0f      	cmp	r3, #15
 800f478:	d914      	bls.n	800f4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f47a:	4a17      	ldr	r2, [pc, #92]	; (800f4d8 <vPortValidateInterruptPriority+0x70>)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4413      	add	r3, r2
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f484:	4b15      	ldr	r3, [pc, #84]	; (800f4dc <vPortValidateInterruptPriority+0x74>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	7afa      	ldrb	r2, [r7, #11]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d20a      	bcs.n	800f4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	607b      	str	r3, [r7, #4]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4a4:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <vPortValidateInterruptPriority+0x78>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4ac:	4b0d      	ldr	r3, [pc, #52]	; (800f4e4 <vPortValidateInterruptPriority+0x7c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d90a      	bls.n	800f4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	603b      	str	r3, [r7, #0]
}
 800f4c6:	bf00      	nop
 800f4c8:	e7fe      	b.n	800f4c8 <vPortValidateInterruptPriority+0x60>
	}
 800f4ca:	bf00      	nop
 800f4cc:	3714      	adds	r7, #20
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	e000e3f0 	.word	0xe000e3f0
 800f4dc:	240010a4 	.word	0x240010a4
 800f4e0:	e000ed0c 	.word	0xe000ed0c
 800f4e4:	240010a8 	.word	0x240010a8

0800f4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b08a      	sub	sp, #40	; 0x28
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4f4:	f7fe fc82 	bl	800ddfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f4f8:	4b5b      	ldr	r3, [pc, #364]	; (800f668 <pvPortMalloc+0x180>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d101      	bne.n	800f504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f500:	f000 f920 	bl	800f744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f504:	4b59      	ldr	r3, [pc, #356]	; (800f66c <pvPortMalloc+0x184>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4013      	ands	r3, r2
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f040 8093 	bne.w	800f638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d01d      	beq.n	800f554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f518:	2208      	movs	r2, #8
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4413      	add	r3, r2
 800f51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	2b00      	cmp	r3, #0
 800f528:	d014      	beq.n	800f554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f023 0307 	bic.w	r3, r3, #7
 800f530:	3308      	adds	r3, #8
 800f532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f003 0307 	and.w	r3, r3, #7
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00a      	beq.n	800f554 <pvPortMalloc+0x6c>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	617b      	str	r3, [r7, #20]
}
 800f550:	bf00      	nop
 800f552:	e7fe      	b.n	800f552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d06e      	beq.n	800f638 <pvPortMalloc+0x150>
 800f55a:	4b45      	ldr	r3, [pc, #276]	; (800f670 <pvPortMalloc+0x188>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d869      	bhi.n	800f638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f564:	4b43      	ldr	r3, [pc, #268]	; (800f674 <pvPortMalloc+0x18c>)
 800f566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f568:	4b42      	ldr	r3, [pc, #264]	; (800f674 <pvPortMalloc+0x18c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f56e:	e004      	b.n	800f57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d903      	bls.n	800f58c <pvPortMalloc+0xa4>
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1f1      	bne.n	800f570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f58c:	4b36      	ldr	r3, [pc, #216]	; (800f668 <pvPortMalloc+0x180>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f592:	429a      	cmp	r2, r3
 800f594:	d050      	beq.n	800f638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f596:	6a3b      	ldr	r3, [r7, #32]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2208      	movs	r2, #8
 800f59c:	4413      	add	r3, r2
 800f59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	1ad2      	subs	r2, r2, r3
 800f5b0:	2308      	movs	r3, #8
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d91f      	bls.n	800f5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4413      	add	r3, r2
 800f5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	f003 0307 	and.w	r3, r3, #7
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00a      	beq.n	800f5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	613b      	str	r3, [r7, #16]
}
 800f5dc:	bf00      	nop
 800f5de:	e7fe      	b.n	800f5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	1ad2      	subs	r2, r2, r3
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5f2:	69b8      	ldr	r0, [r7, #24]
 800f5f4:	f000 f90a 	bl	800f80c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5f8:	4b1d      	ldr	r3, [pc, #116]	; (800f670 <pvPortMalloc+0x188>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	4a1b      	ldr	r2, [pc, #108]	; (800f670 <pvPortMalloc+0x188>)
 800f604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f606:	4b1a      	ldr	r3, [pc, #104]	; (800f670 <pvPortMalloc+0x188>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	4b1b      	ldr	r3, [pc, #108]	; (800f678 <pvPortMalloc+0x190>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d203      	bcs.n	800f61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f612:	4b17      	ldr	r3, [pc, #92]	; (800f670 <pvPortMalloc+0x188>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4a18      	ldr	r2, [pc, #96]	; (800f678 <pvPortMalloc+0x190>)
 800f618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	4b13      	ldr	r3, [pc, #76]	; (800f66c <pvPortMalloc+0x184>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	431a      	orrs	r2, r3
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	2200      	movs	r2, #0
 800f62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f62e:	4b13      	ldr	r3, [pc, #76]	; (800f67c <pvPortMalloc+0x194>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	4a11      	ldr	r2, [pc, #68]	; (800f67c <pvPortMalloc+0x194>)
 800f636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f638:	f7fe fbee 	bl	800de18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	f003 0307 	and.w	r3, r3, #7
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00a      	beq.n	800f65c <pvPortMalloc+0x174>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	60fb      	str	r3, [r7, #12]
}
 800f658:	bf00      	nop
 800f65a:	e7fe      	b.n	800f65a <pvPortMalloc+0x172>
	return pvReturn;
 800f65c:	69fb      	ldr	r3, [r7, #28]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3728      	adds	r7, #40	; 0x28
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	240135ac 	.word	0x240135ac
 800f66c:	240135c0 	.word	0x240135c0
 800f670:	240135b0 	.word	0x240135b0
 800f674:	240135a4 	.word	0x240135a4
 800f678:	240135b4 	.word	0x240135b4
 800f67c:	240135b8 	.word	0x240135b8

0800f680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d04d      	beq.n	800f72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f692:	2308      	movs	r3, #8
 800f694:	425b      	negs	r3, r3
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	4413      	add	r3, r2
 800f69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	4b24      	ldr	r3, [pc, #144]	; (800f738 <vPortFree+0xb8>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d10a      	bne.n	800f6c4 <vPortFree+0x44>
	__asm volatile
 800f6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b2:	f383 8811 	msr	BASEPRI, r3
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	60fb      	str	r3, [r7, #12]
}
 800f6c0:	bf00      	nop
 800f6c2:	e7fe      	b.n	800f6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00a      	beq.n	800f6e2 <vPortFree+0x62>
	__asm volatile
 800f6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d0:	f383 8811 	msr	BASEPRI, r3
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	60bb      	str	r3, [r7, #8]
}
 800f6de:	bf00      	nop
 800f6e0:	e7fe      	b.n	800f6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	685a      	ldr	r2, [r3, #4]
 800f6e6:	4b14      	ldr	r3, [pc, #80]	; (800f738 <vPortFree+0xb8>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d01e      	beq.n	800f72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d11a      	bne.n	800f72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	685a      	ldr	r2, [r3, #4]
 800f6fc:	4b0e      	ldr	r3, [pc, #56]	; (800f738 <vPortFree+0xb8>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	43db      	mvns	r3, r3
 800f702:	401a      	ands	r2, r3
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f708:	f7fe fb78 	bl	800ddfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	685a      	ldr	r2, [r3, #4]
 800f710:	4b0a      	ldr	r3, [pc, #40]	; (800f73c <vPortFree+0xbc>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4413      	add	r3, r2
 800f716:	4a09      	ldr	r2, [pc, #36]	; (800f73c <vPortFree+0xbc>)
 800f718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f71a:	6938      	ldr	r0, [r7, #16]
 800f71c:	f000 f876 	bl	800f80c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f720:	4b07      	ldr	r3, [pc, #28]	; (800f740 <vPortFree+0xc0>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3301      	adds	r3, #1
 800f726:	4a06      	ldr	r2, [pc, #24]	; (800f740 <vPortFree+0xc0>)
 800f728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f72a:	f7fe fb75 	bl	800de18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f72e:	bf00      	nop
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	240135c0 	.word	0x240135c0
 800f73c:	240135b0 	.word	0x240135b0
 800f740:	240135bc 	.word	0x240135bc

0800f744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f74a:	4b29      	ldr	r3, [pc, #164]	; (800f7f0 <prvHeapInit+0xac>)
 800f74c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f74e:	4b29      	ldr	r3, [pc, #164]	; (800f7f4 <prvHeapInit+0xb0>)
 800f750:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f003 0307 	and.w	r3, r3, #7
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00c      	beq.n	800f776 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	3307      	adds	r3, #7
 800f760:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f023 0307 	bic.w	r3, r3, #7
 800f768:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	4a20      	ldr	r2, [pc, #128]	; (800f7f4 <prvHeapInit+0xb0>)
 800f772:	4413      	add	r3, r2
 800f774:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f77a:	4a1f      	ldr	r2, [pc, #124]	; (800f7f8 <prvHeapInit+0xb4>)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f780:	4b1d      	ldr	r3, [pc, #116]	; (800f7f8 <prvHeapInit+0xb4>)
 800f782:	2200      	movs	r2, #0
 800f784:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	4413      	add	r3, r2
 800f78c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f78e:	2208      	movs	r2, #8
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	1a9b      	subs	r3, r3, r2
 800f794:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f023 0307 	bic.w	r3, r3, #7
 800f79c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	4a16      	ldr	r2, [pc, #88]	; (800f7fc <prvHeapInit+0xb8>)
 800f7a2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7a4:	4b15      	ldr	r3, [pc, #84]	; (800f7fc <prvHeapInit+0xb8>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7ac:	4b13      	ldr	r3, [pc, #76]	; (800f7fc <prvHeapInit+0xb8>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	1ad2      	subs	r2, r2, r3
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7c2:	4b0e      	ldr	r3, [pc, #56]	; (800f7fc <prvHeapInit+0xb8>)
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	4a0c      	ldr	r2, [pc, #48]	; (800f800 <prvHeapInit+0xbc>)
 800f7d0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	4a0b      	ldr	r2, [pc, #44]	; (800f804 <prvHeapInit+0xc0>)
 800f7d8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7da:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <prvHeapInit+0xc4>)
 800f7dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7e0:	601a      	str	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	000124f8 	.word	0x000124f8
 800f7f4:	240010ac 	.word	0x240010ac
 800f7f8:	240135a4 	.word	0x240135a4
 800f7fc:	240135ac 	.word	0x240135ac
 800f800:	240135b4 	.word	0x240135b4
 800f804:	240135b0 	.word	0x240135b0
 800f808:	240135c0 	.word	0x240135c0

0800f80c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f814:	4b28      	ldr	r3, [pc, #160]	; (800f8b8 <prvInsertBlockIntoFreeList+0xac>)
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	e002      	b.n	800f820 <prvInsertBlockIntoFreeList+0x14>
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	429a      	cmp	r2, r3
 800f828:	d8f7      	bhi.n	800f81a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	4413      	add	r3, r2
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d108      	bne.n	800f84e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	685a      	ldr	r2, [r3, #4]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	441a      	add	r2, r3
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	68ba      	ldr	r2, [r7, #8]
 800f858:	441a      	add	r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d118      	bne.n	800f894 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <prvInsertBlockIntoFreeList+0xb0>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d00d      	beq.n	800f88a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	441a      	add	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	681a      	ldr	r2, [r3, #0]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	601a      	str	r2, [r3, #0]
 800f888:	e008      	b.n	800f89c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f88a:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <prvInsertBlockIntoFreeList+0xb0>)
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	e003      	b.n	800f89c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d002      	beq.n	800f8aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8aa:	bf00      	nop
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	240135a4 	.word	0x240135a4
 800f8bc:	240135ac 	.word	0x240135ac

0800f8c0 <__errno>:
 800f8c0:	4b01      	ldr	r3, [pc, #4]	; (800f8c8 <__errno+0x8>)
 800f8c2:	6818      	ldr	r0, [r3, #0]
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	2400023c 	.word	0x2400023c

0800f8cc <__libc_init_array>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	4d0d      	ldr	r5, [pc, #52]	; (800f904 <__libc_init_array+0x38>)
 800f8d0:	4c0d      	ldr	r4, [pc, #52]	; (800f908 <__libc_init_array+0x3c>)
 800f8d2:	1b64      	subs	r4, r4, r5
 800f8d4:	10a4      	asrs	r4, r4, #2
 800f8d6:	2600      	movs	r6, #0
 800f8d8:	42a6      	cmp	r6, r4
 800f8da:	d109      	bne.n	800f8f0 <__libc_init_array+0x24>
 800f8dc:	4d0b      	ldr	r5, [pc, #44]	; (800f90c <__libc_init_array+0x40>)
 800f8de:	4c0c      	ldr	r4, [pc, #48]	; (800f910 <__libc_init_array+0x44>)
 800f8e0:	f000 fcb8 	bl	8010254 <_init>
 800f8e4:	1b64      	subs	r4, r4, r5
 800f8e6:	10a4      	asrs	r4, r4, #2
 800f8e8:	2600      	movs	r6, #0
 800f8ea:	42a6      	cmp	r6, r4
 800f8ec:	d105      	bne.n	800f8fa <__libc_init_array+0x2e>
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}
 800f8f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8f4:	4798      	blx	r3
 800f8f6:	3601      	adds	r6, #1
 800f8f8:	e7ee      	b.n	800f8d8 <__libc_init_array+0xc>
 800f8fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8fe:	4798      	blx	r3
 800f900:	3601      	adds	r6, #1
 800f902:	e7f2      	b.n	800f8ea <__libc_init_array+0x1e>
 800f904:	080104f4 	.word	0x080104f4
 800f908:	080104f4 	.word	0x080104f4
 800f90c:	080104f4 	.word	0x080104f4
 800f910:	080104f8 	.word	0x080104f8

0800f914 <__retarget_lock_acquire_recursive>:
 800f914:	4770      	bx	lr

0800f916 <__retarget_lock_release_recursive>:
 800f916:	4770      	bx	lr

0800f918 <memcpy>:
 800f918:	440a      	add	r2, r1
 800f91a:	4291      	cmp	r1, r2
 800f91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f920:	d100      	bne.n	800f924 <memcpy+0xc>
 800f922:	4770      	bx	lr
 800f924:	b510      	push	{r4, lr}
 800f926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f92e:	4291      	cmp	r1, r2
 800f930:	d1f9      	bne.n	800f926 <memcpy+0xe>
 800f932:	bd10      	pop	{r4, pc}

0800f934 <memset>:
 800f934:	4402      	add	r2, r0
 800f936:	4603      	mov	r3, r0
 800f938:	4293      	cmp	r3, r2
 800f93a:	d100      	bne.n	800f93e <memset+0xa>
 800f93c:	4770      	bx	lr
 800f93e:	f803 1b01 	strb.w	r1, [r3], #1
 800f942:	e7f9      	b.n	800f938 <memset+0x4>

0800f944 <_malloc_r>:
 800f944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f946:	1ccd      	adds	r5, r1, #3
 800f948:	f025 0503 	bic.w	r5, r5, #3
 800f94c:	3508      	adds	r5, #8
 800f94e:	2d0c      	cmp	r5, #12
 800f950:	bf38      	it	cc
 800f952:	250c      	movcc	r5, #12
 800f954:	2d00      	cmp	r5, #0
 800f956:	4606      	mov	r6, r0
 800f958:	db01      	blt.n	800f95e <_malloc_r+0x1a>
 800f95a:	42a9      	cmp	r1, r5
 800f95c:	d903      	bls.n	800f966 <_malloc_r+0x22>
 800f95e:	230c      	movs	r3, #12
 800f960:	6033      	str	r3, [r6, #0]
 800f962:	2000      	movs	r0, #0
 800f964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f966:	f000 f8e1 	bl	800fb2c <__malloc_lock>
 800f96a:	4921      	ldr	r1, [pc, #132]	; (800f9f0 <_malloc_r+0xac>)
 800f96c:	680a      	ldr	r2, [r1, #0]
 800f96e:	4614      	mov	r4, r2
 800f970:	b99c      	cbnz	r4, 800f99a <_malloc_r+0x56>
 800f972:	4f20      	ldr	r7, [pc, #128]	; (800f9f4 <_malloc_r+0xb0>)
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	b923      	cbnz	r3, 800f982 <_malloc_r+0x3e>
 800f978:	4621      	mov	r1, r4
 800f97a:	4630      	mov	r0, r6
 800f97c:	f000 f8a6 	bl	800facc <_sbrk_r>
 800f980:	6038      	str	r0, [r7, #0]
 800f982:	4629      	mov	r1, r5
 800f984:	4630      	mov	r0, r6
 800f986:	f000 f8a1 	bl	800facc <_sbrk_r>
 800f98a:	1c43      	adds	r3, r0, #1
 800f98c:	d123      	bne.n	800f9d6 <_malloc_r+0x92>
 800f98e:	230c      	movs	r3, #12
 800f990:	6033      	str	r3, [r6, #0]
 800f992:	4630      	mov	r0, r6
 800f994:	f000 f8d0 	bl	800fb38 <__malloc_unlock>
 800f998:	e7e3      	b.n	800f962 <_malloc_r+0x1e>
 800f99a:	6823      	ldr	r3, [r4, #0]
 800f99c:	1b5b      	subs	r3, r3, r5
 800f99e:	d417      	bmi.n	800f9d0 <_malloc_r+0x8c>
 800f9a0:	2b0b      	cmp	r3, #11
 800f9a2:	d903      	bls.n	800f9ac <_malloc_r+0x68>
 800f9a4:	6023      	str	r3, [r4, #0]
 800f9a6:	441c      	add	r4, r3
 800f9a8:	6025      	str	r5, [r4, #0]
 800f9aa:	e004      	b.n	800f9b6 <_malloc_r+0x72>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	42a2      	cmp	r2, r4
 800f9b0:	bf0c      	ite	eq
 800f9b2:	600b      	streq	r3, [r1, #0]
 800f9b4:	6053      	strne	r3, [r2, #4]
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f000 f8be 	bl	800fb38 <__malloc_unlock>
 800f9bc:	f104 000b 	add.w	r0, r4, #11
 800f9c0:	1d23      	adds	r3, r4, #4
 800f9c2:	f020 0007 	bic.w	r0, r0, #7
 800f9c6:	1ac2      	subs	r2, r0, r3
 800f9c8:	d0cc      	beq.n	800f964 <_malloc_r+0x20>
 800f9ca:	1a1b      	subs	r3, r3, r0
 800f9cc:	50a3      	str	r3, [r4, r2]
 800f9ce:	e7c9      	b.n	800f964 <_malloc_r+0x20>
 800f9d0:	4622      	mov	r2, r4
 800f9d2:	6864      	ldr	r4, [r4, #4]
 800f9d4:	e7cc      	b.n	800f970 <_malloc_r+0x2c>
 800f9d6:	1cc4      	adds	r4, r0, #3
 800f9d8:	f024 0403 	bic.w	r4, r4, #3
 800f9dc:	42a0      	cmp	r0, r4
 800f9de:	d0e3      	beq.n	800f9a8 <_malloc_r+0x64>
 800f9e0:	1a21      	subs	r1, r4, r0
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f000 f872 	bl	800facc <_sbrk_r>
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d1dd      	bne.n	800f9a8 <_malloc_r+0x64>
 800f9ec:	e7cf      	b.n	800f98e <_malloc_r+0x4a>
 800f9ee:	bf00      	nop
 800f9f0:	240135c4 	.word	0x240135c4
 800f9f4:	240135c8 	.word	0x240135c8

0800f9f8 <cleanup_glue>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	460c      	mov	r4, r1
 800f9fc:	6809      	ldr	r1, [r1, #0]
 800f9fe:	4605      	mov	r5, r0
 800fa00:	b109      	cbz	r1, 800fa06 <cleanup_glue+0xe>
 800fa02:	f7ff fff9 	bl	800f9f8 <cleanup_glue>
 800fa06:	4621      	mov	r1, r4
 800fa08:	4628      	mov	r0, r5
 800fa0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa0e:	f000 b899 	b.w	800fb44 <_free_r>
	...

0800fa14 <_reclaim_reent>:
 800fa14:	4b2c      	ldr	r3, [pc, #176]	; (800fac8 <_reclaim_reent+0xb4>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4283      	cmp	r3, r0
 800fa1a:	b570      	push	{r4, r5, r6, lr}
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	d051      	beq.n	800fac4 <_reclaim_reent+0xb0>
 800fa20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fa22:	b143      	cbz	r3, 800fa36 <_reclaim_reent+0x22>
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d14a      	bne.n	800fac0 <_reclaim_reent+0xac>
 800fa2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa2c:	6819      	ldr	r1, [r3, #0]
 800fa2e:	b111      	cbz	r1, 800fa36 <_reclaim_reent+0x22>
 800fa30:	4620      	mov	r0, r4
 800fa32:	f000 f887 	bl	800fb44 <_free_r>
 800fa36:	6961      	ldr	r1, [r4, #20]
 800fa38:	b111      	cbz	r1, 800fa40 <_reclaim_reent+0x2c>
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 f882 	bl	800fb44 <_free_r>
 800fa40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fa42:	b111      	cbz	r1, 800fa4a <_reclaim_reent+0x36>
 800fa44:	4620      	mov	r0, r4
 800fa46:	f000 f87d 	bl	800fb44 <_free_r>
 800fa4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fa4c:	b111      	cbz	r1, 800fa54 <_reclaim_reent+0x40>
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f000 f878 	bl	800fb44 <_free_r>
 800fa54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fa56:	b111      	cbz	r1, 800fa5e <_reclaim_reent+0x4a>
 800fa58:	4620      	mov	r0, r4
 800fa5a:	f000 f873 	bl	800fb44 <_free_r>
 800fa5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fa60:	b111      	cbz	r1, 800fa68 <_reclaim_reent+0x54>
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 f86e 	bl	800fb44 <_free_r>
 800fa68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fa6a:	b111      	cbz	r1, 800fa72 <_reclaim_reent+0x5e>
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	f000 f869 	bl	800fb44 <_free_r>
 800fa72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fa74:	b111      	cbz	r1, 800fa7c <_reclaim_reent+0x68>
 800fa76:	4620      	mov	r0, r4
 800fa78:	f000 f864 	bl	800fb44 <_free_r>
 800fa7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa7e:	b111      	cbz	r1, 800fa86 <_reclaim_reent+0x72>
 800fa80:	4620      	mov	r0, r4
 800fa82:	f000 f85f 	bl	800fb44 <_free_r>
 800fa86:	69a3      	ldr	r3, [r4, #24]
 800fa88:	b1e3      	cbz	r3, 800fac4 <_reclaim_reent+0xb0>
 800fa8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4798      	blx	r3
 800fa90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fa92:	b1b9      	cbz	r1, 800fac4 <_reclaim_reent+0xb0>
 800fa94:	4620      	mov	r0, r4
 800fa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa9a:	f7ff bfad 	b.w	800f9f8 <cleanup_glue>
 800fa9e:	5949      	ldr	r1, [r1, r5]
 800faa0:	b941      	cbnz	r1, 800fab4 <_reclaim_reent+0xa0>
 800faa2:	3504      	adds	r5, #4
 800faa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faa6:	2d80      	cmp	r5, #128	; 0x80
 800faa8:	68d9      	ldr	r1, [r3, #12]
 800faaa:	d1f8      	bne.n	800fa9e <_reclaim_reent+0x8a>
 800faac:	4620      	mov	r0, r4
 800faae:	f000 f849 	bl	800fb44 <_free_r>
 800fab2:	e7ba      	b.n	800fa2a <_reclaim_reent+0x16>
 800fab4:	680e      	ldr	r6, [r1, #0]
 800fab6:	4620      	mov	r0, r4
 800fab8:	f000 f844 	bl	800fb44 <_free_r>
 800fabc:	4631      	mov	r1, r6
 800fabe:	e7ef      	b.n	800faa0 <_reclaim_reent+0x8c>
 800fac0:	2500      	movs	r5, #0
 800fac2:	e7ef      	b.n	800faa4 <_reclaim_reent+0x90>
 800fac4:	bd70      	pop	{r4, r5, r6, pc}
 800fac6:	bf00      	nop
 800fac8:	2400023c 	.word	0x2400023c

0800facc <_sbrk_r>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	4d06      	ldr	r5, [pc, #24]	; (800fae8 <_sbrk_r+0x1c>)
 800fad0:	2300      	movs	r3, #0
 800fad2:	4604      	mov	r4, r0
 800fad4:	4608      	mov	r0, r1
 800fad6:	602b      	str	r3, [r5, #0]
 800fad8:	f7f1 fbac 	bl	8001234 <_sbrk>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_sbrk_r+0x1a>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_sbrk_r+0x1a>
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	24013ec0 	.word	0x24013ec0

0800faec <siprintf>:
 800faec:	b40e      	push	{r1, r2, r3}
 800faee:	b500      	push	{lr}
 800faf0:	b09c      	sub	sp, #112	; 0x70
 800faf2:	ab1d      	add	r3, sp, #116	; 0x74
 800faf4:	9002      	str	r0, [sp, #8]
 800faf6:	9006      	str	r0, [sp, #24]
 800faf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fafc:	4809      	ldr	r0, [pc, #36]	; (800fb24 <siprintf+0x38>)
 800fafe:	9107      	str	r1, [sp, #28]
 800fb00:	9104      	str	r1, [sp, #16]
 800fb02:	4909      	ldr	r1, [pc, #36]	; (800fb28 <siprintf+0x3c>)
 800fb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb08:	9105      	str	r1, [sp, #20]
 800fb0a:	6800      	ldr	r0, [r0, #0]
 800fb0c:	9301      	str	r3, [sp, #4]
 800fb0e:	a902      	add	r1, sp, #8
 800fb10:	f000 f8c4 	bl	800fc9c <_svfiprintf_r>
 800fb14:	9b02      	ldr	r3, [sp, #8]
 800fb16:	2200      	movs	r2, #0
 800fb18:	701a      	strb	r2, [r3, #0]
 800fb1a:	b01c      	add	sp, #112	; 0x70
 800fb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb20:	b003      	add	sp, #12
 800fb22:	4770      	bx	lr
 800fb24:	2400023c 	.word	0x2400023c
 800fb28:	ffff0208 	.word	0xffff0208

0800fb2c <__malloc_lock>:
 800fb2c:	4801      	ldr	r0, [pc, #4]	; (800fb34 <__malloc_lock+0x8>)
 800fb2e:	f7ff bef1 	b.w	800f914 <__retarget_lock_acquire_recursive>
 800fb32:	bf00      	nop
 800fb34:	24013eb8 	.word	0x24013eb8

0800fb38 <__malloc_unlock>:
 800fb38:	4801      	ldr	r0, [pc, #4]	; (800fb40 <__malloc_unlock+0x8>)
 800fb3a:	f7ff beec 	b.w	800f916 <__retarget_lock_release_recursive>
 800fb3e:	bf00      	nop
 800fb40:	24013eb8 	.word	0x24013eb8

0800fb44 <_free_r>:
 800fb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb46:	2900      	cmp	r1, #0
 800fb48:	d048      	beq.n	800fbdc <_free_r+0x98>
 800fb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb4e:	9001      	str	r0, [sp, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f1a1 0404 	sub.w	r4, r1, #4
 800fb56:	bfb8      	it	lt
 800fb58:	18e4      	addlt	r4, r4, r3
 800fb5a:	f7ff ffe7 	bl	800fb2c <__malloc_lock>
 800fb5e:	4a20      	ldr	r2, [pc, #128]	; (800fbe0 <_free_r+0x9c>)
 800fb60:	9801      	ldr	r0, [sp, #4]
 800fb62:	6813      	ldr	r3, [r2, #0]
 800fb64:	4615      	mov	r5, r2
 800fb66:	b933      	cbnz	r3, 800fb76 <_free_r+0x32>
 800fb68:	6063      	str	r3, [r4, #4]
 800fb6a:	6014      	str	r4, [r2, #0]
 800fb6c:	b003      	add	sp, #12
 800fb6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb72:	f7ff bfe1 	b.w	800fb38 <__malloc_unlock>
 800fb76:	42a3      	cmp	r3, r4
 800fb78:	d90b      	bls.n	800fb92 <_free_r+0x4e>
 800fb7a:	6821      	ldr	r1, [r4, #0]
 800fb7c:	1862      	adds	r2, r4, r1
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	bf04      	itt	eq
 800fb82:	681a      	ldreq	r2, [r3, #0]
 800fb84:	685b      	ldreq	r3, [r3, #4]
 800fb86:	6063      	str	r3, [r4, #4]
 800fb88:	bf04      	itt	eq
 800fb8a:	1852      	addeq	r2, r2, r1
 800fb8c:	6022      	streq	r2, [r4, #0]
 800fb8e:	602c      	str	r4, [r5, #0]
 800fb90:	e7ec      	b.n	800fb6c <_free_r+0x28>
 800fb92:	461a      	mov	r2, r3
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	b10b      	cbz	r3, 800fb9c <_free_r+0x58>
 800fb98:	42a3      	cmp	r3, r4
 800fb9a:	d9fa      	bls.n	800fb92 <_free_r+0x4e>
 800fb9c:	6811      	ldr	r1, [r2, #0]
 800fb9e:	1855      	adds	r5, r2, r1
 800fba0:	42a5      	cmp	r5, r4
 800fba2:	d10b      	bne.n	800fbbc <_free_r+0x78>
 800fba4:	6824      	ldr	r4, [r4, #0]
 800fba6:	4421      	add	r1, r4
 800fba8:	1854      	adds	r4, r2, r1
 800fbaa:	42a3      	cmp	r3, r4
 800fbac:	6011      	str	r1, [r2, #0]
 800fbae:	d1dd      	bne.n	800fb6c <_free_r+0x28>
 800fbb0:	681c      	ldr	r4, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	6053      	str	r3, [r2, #4]
 800fbb6:	4421      	add	r1, r4
 800fbb8:	6011      	str	r1, [r2, #0]
 800fbba:	e7d7      	b.n	800fb6c <_free_r+0x28>
 800fbbc:	d902      	bls.n	800fbc4 <_free_r+0x80>
 800fbbe:	230c      	movs	r3, #12
 800fbc0:	6003      	str	r3, [r0, #0]
 800fbc2:	e7d3      	b.n	800fb6c <_free_r+0x28>
 800fbc4:	6825      	ldr	r5, [r4, #0]
 800fbc6:	1961      	adds	r1, r4, r5
 800fbc8:	428b      	cmp	r3, r1
 800fbca:	bf04      	itt	eq
 800fbcc:	6819      	ldreq	r1, [r3, #0]
 800fbce:	685b      	ldreq	r3, [r3, #4]
 800fbd0:	6063      	str	r3, [r4, #4]
 800fbd2:	bf04      	itt	eq
 800fbd4:	1949      	addeq	r1, r1, r5
 800fbd6:	6021      	streq	r1, [r4, #0]
 800fbd8:	6054      	str	r4, [r2, #4]
 800fbda:	e7c7      	b.n	800fb6c <_free_r+0x28>
 800fbdc:	b003      	add	sp, #12
 800fbde:	bd30      	pop	{r4, r5, pc}
 800fbe0:	240135c4 	.word	0x240135c4

0800fbe4 <__ssputs_r>:
 800fbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe8:	688e      	ldr	r6, [r1, #8]
 800fbea:	429e      	cmp	r6, r3
 800fbec:	4682      	mov	sl, r0
 800fbee:	460c      	mov	r4, r1
 800fbf0:	4690      	mov	r8, r2
 800fbf2:	461f      	mov	r7, r3
 800fbf4:	d838      	bhi.n	800fc68 <__ssputs_r+0x84>
 800fbf6:	898a      	ldrh	r2, [r1, #12]
 800fbf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbfc:	d032      	beq.n	800fc64 <__ssputs_r+0x80>
 800fbfe:	6825      	ldr	r5, [r4, #0]
 800fc00:	6909      	ldr	r1, [r1, #16]
 800fc02:	eba5 0901 	sub.w	r9, r5, r1
 800fc06:	6965      	ldr	r5, [r4, #20]
 800fc08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc10:	3301      	adds	r3, #1
 800fc12:	444b      	add	r3, r9
 800fc14:	106d      	asrs	r5, r5, #1
 800fc16:	429d      	cmp	r5, r3
 800fc18:	bf38      	it	cc
 800fc1a:	461d      	movcc	r5, r3
 800fc1c:	0553      	lsls	r3, r2, #21
 800fc1e:	d531      	bpl.n	800fc84 <__ssputs_r+0xa0>
 800fc20:	4629      	mov	r1, r5
 800fc22:	f7ff fe8f 	bl	800f944 <_malloc_r>
 800fc26:	4606      	mov	r6, r0
 800fc28:	b950      	cbnz	r0, 800fc40 <__ssputs_r+0x5c>
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	f8ca 3000 	str.w	r3, [sl]
 800fc30:	89a3      	ldrh	r3, [r4, #12]
 800fc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc36:	81a3      	strh	r3, [r4, #12]
 800fc38:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc40:	6921      	ldr	r1, [r4, #16]
 800fc42:	464a      	mov	r2, r9
 800fc44:	f7ff fe68 	bl	800f918 <memcpy>
 800fc48:	89a3      	ldrh	r3, [r4, #12]
 800fc4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc52:	81a3      	strh	r3, [r4, #12]
 800fc54:	6126      	str	r6, [r4, #16]
 800fc56:	6165      	str	r5, [r4, #20]
 800fc58:	444e      	add	r6, r9
 800fc5a:	eba5 0509 	sub.w	r5, r5, r9
 800fc5e:	6026      	str	r6, [r4, #0]
 800fc60:	60a5      	str	r5, [r4, #8]
 800fc62:	463e      	mov	r6, r7
 800fc64:	42be      	cmp	r6, r7
 800fc66:	d900      	bls.n	800fc6a <__ssputs_r+0x86>
 800fc68:	463e      	mov	r6, r7
 800fc6a:	4632      	mov	r2, r6
 800fc6c:	6820      	ldr	r0, [r4, #0]
 800fc6e:	4641      	mov	r1, r8
 800fc70:	f000 faa8 	bl	80101c4 <memmove>
 800fc74:	68a3      	ldr	r3, [r4, #8]
 800fc76:	6822      	ldr	r2, [r4, #0]
 800fc78:	1b9b      	subs	r3, r3, r6
 800fc7a:	4432      	add	r2, r6
 800fc7c:	60a3      	str	r3, [r4, #8]
 800fc7e:	6022      	str	r2, [r4, #0]
 800fc80:	2000      	movs	r0, #0
 800fc82:	e7db      	b.n	800fc3c <__ssputs_r+0x58>
 800fc84:	462a      	mov	r2, r5
 800fc86:	f000 fab7 	bl	80101f8 <_realloc_r>
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d1e1      	bne.n	800fc54 <__ssputs_r+0x70>
 800fc90:	6921      	ldr	r1, [r4, #16]
 800fc92:	4650      	mov	r0, sl
 800fc94:	f7ff ff56 	bl	800fb44 <_free_r>
 800fc98:	e7c7      	b.n	800fc2a <__ssputs_r+0x46>
	...

0800fc9c <_svfiprintf_r>:
 800fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca0:	4698      	mov	r8, r3
 800fca2:	898b      	ldrh	r3, [r1, #12]
 800fca4:	061b      	lsls	r3, r3, #24
 800fca6:	b09d      	sub	sp, #116	; 0x74
 800fca8:	4607      	mov	r7, r0
 800fcaa:	460d      	mov	r5, r1
 800fcac:	4614      	mov	r4, r2
 800fcae:	d50e      	bpl.n	800fcce <_svfiprintf_r+0x32>
 800fcb0:	690b      	ldr	r3, [r1, #16]
 800fcb2:	b963      	cbnz	r3, 800fcce <_svfiprintf_r+0x32>
 800fcb4:	2140      	movs	r1, #64	; 0x40
 800fcb6:	f7ff fe45 	bl	800f944 <_malloc_r>
 800fcba:	6028      	str	r0, [r5, #0]
 800fcbc:	6128      	str	r0, [r5, #16]
 800fcbe:	b920      	cbnz	r0, 800fcca <_svfiprintf_r+0x2e>
 800fcc0:	230c      	movs	r3, #12
 800fcc2:	603b      	str	r3, [r7, #0]
 800fcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc8:	e0d1      	b.n	800fe6e <_svfiprintf_r+0x1d2>
 800fcca:	2340      	movs	r3, #64	; 0x40
 800fccc:	616b      	str	r3, [r5, #20]
 800fcce:	2300      	movs	r3, #0
 800fcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd2:	2320      	movs	r3, #32
 800fcd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcdc:	2330      	movs	r3, #48	; 0x30
 800fcde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe88 <_svfiprintf_r+0x1ec>
 800fce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fce6:	f04f 0901 	mov.w	r9, #1
 800fcea:	4623      	mov	r3, r4
 800fcec:	469a      	mov	sl, r3
 800fcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcf2:	b10a      	cbz	r2, 800fcf8 <_svfiprintf_r+0x5c>
 800fcf4:	2a25      	cmp	r2, #37	; 0x25
 800fcf6:	d1f9      	bne.n	800fcec <_svfiprintf_r+0x50>
 800fcf8:	ebba 0b04 	subs.w	fp, sl, r4
 800fcfc:	d00b      	beq.n	800fd16 <_svfiprintf_r+0x7a>
 800fcfe:	465b      	mov	r3, fp
 800fd00:	4622      	mov	r2, r4
 800fd02:	4629      	mov	r1, r5
 800fd04:	4638      	mov	r0, r7
 800fd06:	f7ff ff6d 	bl	800fbe4 <__ssputs_r>
 800fd0a:	3001      	adds	r0, #1
 800fd0c:	f000 80aa 	beq.w	800fe64 <_svfiprintf_r+0x1c8>
 800fd10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd12:	445a      	add	r2, fp
 800fd14:	9209      	str	r2, [sp, #36]	; 0x24
 800fd16:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 80a2 	beq.w	800fe64 <_svfiprintf_r+0x1c8>
 800fd20:	2300      	movs	r3, #0
 800fd22:	f04f 32ff 	mov.w	r2, #4294967295
 800fd26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd2a:	f10a 0a01 	add.w	sl, sl, #1
 800fd2e:	9304      	str	r3, [sp, #16]
 800fd30:	9307      	str	r3, [sp, #28]
 800fd32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd36:	931a      	str	r3, [sp, #104]	; 0x68
 800fd38:	4654      	mov	r4, sl
 800fd3a:	2205      	movs	r2, #5
 800fd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd40:	4851      	ldr	r0, [pc, #324]	; (800fe88 <_svfiprintf_r+0x1ec>)
 800fd42:	f7f0 faed 	bl	8000320 <memchr>
 800fd46:	9a04      	ldr	r2, [sp, #16]
 800fd48:	b9d8      	cbnz	r0, 800fd82 <_svfiprintf_r+0xe6>
 800fd4a:	06d0      	lsls	r0, r2, #27
 800fd4c:	bf44      	itt	mi
 800fd4e:	2320      	movmi	r3, #32
 800fd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd54:	0711      	lsls	r1, r2, #28
 800fd56:	bf44      	itt	mi
 800fd58:	232b      	movmi	r3, #43	; 0x2b
 800fd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd5e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd62:	2b2a      	cmp	r3, #42	; 0x2a
 800fd64:	d015      	beq.n	800fd92 <_svfiprintf_r+0xf6>
 800fd66:	9a07      	ldr	r2, [sp, #28]
 800fd68:	4654      	mov	r4, sl
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	f04f 0c0a 	mov.w	ip, #10
 800fd70:	4621      	mov	r1, r4
 800fd72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd76:	3b30      	subs	r3, #48	; 0x30
 800fd78:	2b09      	cmp	r3, #9
 800fd7a:	d94e      	bls.n	800fe1a <_svfiprintf_r+0x17e>
 800fd7c:	b1b0      	cbz	r0, 800fdac <_svfiprintf_r+0x110>
 800fd7e:	9207      	str	r2, [sp, #28]
 800fd80:	e014      	b.n	800fdac <_svfiprintf_r+0x110>
 800fd82:	eba0 0308 	sub.w	r3, r0, r8
 800fd86:	fa09 f303 	lsl.w	r3, r9, r3
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	46a2      	mov	sl, r4
 800fd90:	e7d2      	b.n	800fd38 <_svfiprintf_r+0x9c>
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	1d19      	adds	r1, r3, #4
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	9103      	str	r1, [sp, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	bfbb      	ittet	lt
 800fd9e:	425b      	neglt	r3, r3
 800fda0:	f042 0202 	orrlt.w	r2, r2, #2
 800fda4:	9307      	strge	r3, [sp, #28]
 800fda6:	9307      	strlt	r3, [sp, #28]
 800fda8:	bfb8      	it	lt
 800fdaa:	9204      	strlt	r2, [sp, #16]
 800fdac:	7823      	ldrb	r3, [r4, #0]
 800fdae:	2b2e      	cmp	r3, #46	; 0x2e
 800fdb0:	d10c      	bne.n	800fdcc <_svfiprintf_r+0x130>
 800fdb2:	7863      	ldrb	r3, [r4, #1]
 800fdb4:	2b2a      	cmp	r3, #42	; 0x2a
 800fdb6:	d135      	bne.n	800fe24 <_svfiprintf_r+0x188>
 800fdb8:	9b03      	ldr	r3, [sp, #12]
 800fdba:	1d1a      	adds	r2, r3, #4
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	9203      	str	r2, [sp, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	bfb8      	it	lt
 800fdc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdc8:	3402      	adds	r4, #2
 800fdca:	9305      	str	r3, [sp, #20]
 800fdcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe98 <_svfiprintf_r+0x1fc>
 800fdd0:	7821      	ldrb	r1, [r4, #0]
 800fdd2:	2203      	movs	r2, #3
 800fdd4:	4650      	mov	r0, sl
 800fdd6:	f7f0 faa3 	bl	8000320 <memchr>
 800fdda:	b140      	cbz	r0, 800fdee <_svfiprintf_r+0x152>
 800fddc:	2340      	movs	r3, #64	; 0x40
 800fdde:	eba0 000a 	sub.w	r0, r0, sl
 800fde2:	fa03 f000 	lsl.w	r0, r3, r0
 800fde6:	9b04      	ldr	r3, [sp, #16]
 800fde8:	4303      	orrs	r3, r0
 800fdea:	3401      	adds	r4, #1
 800fdec:	9304      	str	r3, [sp, #16]
 800fdee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdf2:	4826      	ldr	r0, [pc, #152]	; (800fe8c <_svfiprintf_r+0x1f0>)
 800fdf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdf8:	2206      	movs	r2, #6
 800fdfa:	f7f0 fa91 	bl	8000320 <memchr>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d038      	beq.n	800fe74 <_svfiprintf_r+0x1d8>
 800fe02:	4b23      	ldr	r3, [pc, #140]	; (800fe90 <_svfiprintf_r+0x1f4>)
 800fe04:	bb1b      	cbnz	r3, 800fe4e <_svfiprintf_r+0x1b2>
 800fe06:	9b03      	ldr	r3, [sp, #12]
 800fe08:	3307      	adds	r3, #7
 800fe0a:	f023 0307 	bic.w	r3, r3, #7
 800fe0e:	3308      	adds	r3, #8
 800fe10:	9303      	str	r3, [sp, #12]
 800fe12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe14:	4433      	add	r3, r6
 800fe16:	9309      	str	r3, [sp, #36]	; 0x24
 800fe18:	e767      	b.n	800fcea <_svfiprintf_r+0x4e>
 800fe1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe1e:	460c      	mov	r4, r1
 800fe20:	2001      	movs	r0, #1
 800fe22:	e7a5      	b.n	800fd70 <_svfiprintf_r+0xd4>
 800fe24:	2300      	movs	r3, #0
 800fe26:	3401      	adds	r4, #1
 800fe28:	9305      	str	r3, [sp, #20]
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	f04f 0c0a 	mov.w	ip, #10
 800fe30:	4620      	mov	r0, r4
 800fe32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe36:	3a30      	subs	r2, #48	; 0x30
 800fe38:	2a09      	cmp	r2, #9
 800fe3a:	d903      	bls.n	800fe44 <_svfiprintf_r+0x1a8>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d0c5      	beq.n	800fdcc <_svfiprintf_r+0x130>
 800fe40:	9105      	str	r1, [sp, #20]
 800fe42:	e7c3      	b.n	800fdcc <_svfiprintf_r+0x130>
 800fe44:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe48:	4604      	mov	r4, r0
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e7f0      	b.n	800fe30 <_svfiprintf_r+0x194>
 800fe4e:	ab03      	add	r3, sp, #12
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	462a      	mov	r2, r5
 800fe54:	4b0f      	ldr	r3, [pc, #60]	; (800fe94 <_svfiprintf_r+0x1f8>)
 800fe56:	a904      	add	r1, sp, #16
 800fe58:	4638      	mov	r0, r7
 800fe5a:	f3af 8000 	nop.w
 800fe5e:	1c42      	adds	r2, r0, #1
 800fe60:	4606      	mov	r6, r0
 800fe62:	d1d6      	bne.n	800fe12 <_svfiprintf_r+0x176>
 800fe64:	89ab      	ldrh	r3, [r5, #12]
 800fe66:	065b      	lsls	r3, r3, #25
 800fe68:	f53f af2c 	bmi.w	800fcc4 <_svfiprintf_r+0x28>
 800fe6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe6e:	b01d      	add	sp, #116	; 0x74
 800fe70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe74:	ab03      	add	r3, sp, #12
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	462a      	mov	r2, r5
 800fe7a:	4b06      	ldr	r3, [pc, #24]	; (800fe94 <_svfiprintf_r+0x1f8>)
 800fe7c:	a904      	add	r1, sp, #16
 800fe7e:	4638      	mov	r0, r7
 800fe80:	f000 f87a 	bl	800ff78 <_printf_i>
 800fe84:	e7eb      	b.n	800fe5e <_svfiprintf_r+0x1c2>
 800fe86:	bf00      	nop
 800fe88:	080104b8 	.word	0x080104b8
 800fe8c:	080104c2 	.word	0x080104c2
 800fe90:	00000000 	.word	0x00000000
 800fe94:	0800fbe5 	.word	0x0800fbe5
 800fe98:	080104be 	.word	0x080104be

0800fe9c <_printf_common>:
 800fe9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea0:	4616      	mov	r6, r2
 800fea2:	4699      	mov	r9, r3
 800fea4:	688a      	ldr	r2, [r1, #8]
 800fea6:	690b      	ldr	r3, [r1, #16]
 800fea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800feac:	4293      	cmp	r3, r2
 800feae:	bfb8      	it	lt
 800feb0:	4613      	movlt	r3, r2
 800feb2:	6033      	str	r3, [r6, #0]
 800feb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800feb8:	4607      	mov	r7, r0
 800feba:	460c      	mov	r4, r1
 800febc:	b10a      	cbz	r2, 800fec2 <_printf_common+0x26>
 800febe:	3301      	adds	r3, #1
 800fec0:	6033      	str	r3, [r6, #0]
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	0699      	lsls	r1, r3, #26
 800fec6:	bf42      	ittt	mi
 800fec8:	6833      	ldrmi	r3, [r6, #0]
 800feca:	3302      	addmi	r3, #2
 800fecc:	6033      	strmi	r3, [r6, #0]
 800fece:	6825      	ldr	r5, [r4, #0]
 800fed0:	f015 0506 	ands.w	r5, r5, #6
 800fed4:	d106      	bne.n	800fee4 <_printf_common+0x48>
 800fed6:	f104 0a19 	add.w	sl, r4, #25
 800feda:	68e3      	ldr	r3, [r4, #12]
 800fedc:	6832      	ldr	r2, [r6, #0]
 800fede:	1a9b      	subs	r3, r3, r2
 800fee0:	42ab      	cmp	r3, r5
 800fee2:	dc26      	bgt.n	800ff32 <_printf_common+0x96>
 800fee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fee8:	1e13      	subs	r3, r2, #0
 800feea:	6822      	ldr	r2, [r4, #0]
 800feec:	bf18      	it	ne
 800feee:	2301      	movne	r3, #1
 800fef0:	0692      	lsls	r2, r2, #26
 800fef2:	d42b      	bmi.n	800ff4c <_printf_common+0xb0>
 800fef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fef8:	4649      	mov	r1, r9
 800fefa:	4638      	mov	r0, r7
 800fefc:	47c0      	blx	r8
 800fefe:	3001      	adds	r0, #1
 800ff00:	d01e      	beq.n	800ff40 <_printf_common+0xa4>
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	68e5      	ldr	r5, [r4, #12]
 800ff06:	6832      	ldr	r2, [r6, #0]
 800ff08:	f003 0306 	and.w	r3, r3, #6
 800ff0c:	2b04      	cmp	r3, #4
 800ff0e:	bf08      	it	eq
 800ff10:	1aad      	subeq	r5, r5, r2
 800ff12:	68a3      	ldr	r3, [r4, #8]
 800ff14:	6922      	ldr	r2, [r4, #16]
 800ff16:	bf0c      	ite	eq
 800ff18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff1c:	2500      	movne	r5, #0
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	bfc4      	itt	gt
 800ff22:	1a9b      	subgt	r3, r3, r2
 800ff24:	18ed      	addgt	r5, r5, r3
 800ff26:	2600      	movs	r6, #0
 800ff28:	341a      	adds	r4, #26
 800ff2a:	42b5      	cmp	r5, r6
 800ff2c:	d11a      	bne.n	800ff64 <_printf_common+0xc8>
 800ff2e:	2000      	movs	r0, #0
 800ff30:	e008      	b.n	800ff44 <_printf_common+0xa8>
 800ff32:	2301      	movs	r3, #1
 800ff34:	4652      	mov	r2, sl
 800ff36:	4649      	mov	r1, r9
 800ff38:	4638      	mov	r0, r7
 800ff3a:	47c0      	blx	r8
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	d103      	bne.n	800ff48 <_printf_common+0xac>
 800ff40:	f04f 30ff 	mov.w	r0, #4294967295
 800ff44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff48:	3501      	adds	r5, #1
 800ff4a:	e7c6      	b.n	800feda <_printf_common+0x3e>
 800ff4c:	18e1      	adds	r1, r4, r3
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	2030      	movs	r0, #48	; 0x30
 800ff52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff56:	4422      	add	r2, r4
 800ff58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff60:	3302      	adds	r3, #2
 800ff62:	e7c7      	b.n	800fef4 <_printf_common+0x58>
 800ff64:	2301      	movs	r3, #1
 800ff66:	4622      	mov	r2, r4
 800ff68:	4649      	mov	r1, r9
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	47c0      	blx	r8
 800ff6e:	3001      	adds	r0, #1
 800ff70:	d0e6      	beq.n	800ff40 <_printf_common+0xa4>
 800ff72:	3601      	adds	r6, #1
 800ff74:	e7d9      	b.n	800ff2a <_printf_common+0x8e>
	...

0800ff78 <_printf_i>:
 800ff78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff7c:	460c      	mov	r4, r1
 800ff7e:	4691      	mov	r9, r2
 800ff80:	7e27      	ldrb	r7, [r4, #24]
 800ff82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff84:	2f78      	cmp	r7, #120	; 0x78
 800ff86:	4680      	mov	r8, r0
 800ff88:	469a      	mov	sl, r3
 800ff8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff8e:	d807      	bhi.n	800ffa0 <_printf_i+0x28>
 800ff90:	2f62      	cmp	r7, #98	; 0x62
 800ff92:	d80a      	bhi.n	800ffaa <_printf_i+0x32>
 800ff94:	2f00      	cmp	r7, #0
 800ff96:	f000 80d8 	beq.w	801014a <_printf_i+0x1d2>
 800ff9a:	2f58      	cmp	r7, #88	; 0x58
 800ff9c:	f000 80a3 	beq.w	80100e6 <_printf_i+0x16e>
 800ffa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ffa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffa8:	e03a      	b.n	8010020 <_printf_i+0xa8>
 800ffaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffae:	2b15      	cmp	r3, #21
 800ffb0:	d8f6      	bhi.n	800ffa0 <_printf_i+0x28>
 800ffb2:	a001      	add	r0, pc, #4	; (adr r0, 800ffb8 <_printf_i+0x40>)
 800ffb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ffb8:	08010011 	.word	0x08010011
 800ffbc:	08010025 	.word	0x08010025
 800ffc0:	0800ffa1 	.word	0x0800ffa1
 800ffc4:	0800ffa1 	.word	0x0800ffa1
 800ffc8:	0800ffa1 	.word	0x0800ffa1
 800ffcc:	0800ffa1 	.word	0x0800ffa1
 800ffd0:	08010025 	.word	0x08010025
 800ffd4:	0800ffa1 	.word	0x0800ffa1
 800ffd8:	0800ffa1 	.word	0x0800ffa1
 800ffdc:	0800ffa1 	.word	0x0800ffa1
 800ffe0:	0800ffa1 	.word	0x0800ffa1
 800ffe4:	08010131 	.word	0x08010131
 800ffe8:	08010055 	.word	0x08010055
 800ffec:	08010113 	.word	0x08010113
 800fff0:	0800ffa1 	.word	0x0800ffa1
 800fff4:	0800ffa1 	.word	0x0800ffa1
 800fff8:	08010153 	.word	0x08010153
 800fffc:	0800ffa1 	.word	0x0800ffa1
 8010000:	08010055 	.word	0x08010055
 8010004:	0800ffa1 	.word	0x0800ffa1
 8010008:	0800ffa1 	.word	0x0800ffa1
 801000c:	0801011b 	.word	0x0801011b
 8010010:	680b      	ldr	r3, [r1, #0]
 8010012:	1d1a      	adds	r2, r3, #4
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	600a      	str	r2, [r1, #0]
 8010018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801001c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010020:	2301      	movs	r3, #1
 8010022:	e0a3      	b.n	801016c <_printf_i+0x1f4>
 8010024:	6825      	ldr	r5, [r4, #0]
 8010026:	6808      	ldr	r0, [r1, #0]
 8010028:	062e      	lsls	r6, r5, #24
 801002a:	f100 0304 	add.w	r3, r0, #4
 801002e:	d50a      	bpl.n	8010046 <_printf_i+0xce>
 8010030:	6805      	ldr	r5, [r0, #0]
 8010032:	600b      	str	r3, [r1, #0]
 8010034:	2d00      	cmp	r5, #0
 8010036:	da03      	bge.n	8010040 <_printf_i+0xc8>
 8010038:	232d      	movs	r3, #45	; 0x2d
 801003a:	426d      	negs	r5, r5
 801003c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010040:	485e      	ldr	r0, [pc, #376]	; (80101bc <_printf_i+0x244>)
 8010042:	230a      	movs	r3, #10
 8010044:	e019      	b.n	801007a <_printf_i+0x102>
 8010046:	f015 0f40 	tst.w	r5, #64	; 0x40
 801004a:	6805      	ldr	r5, [r0, #0]
 801004c:	600b      	str	r3, [r1, #0]
 801004e:	bf18      	it	ne
 8010050:	b22d      	sxthne	r5, r5
 8010052:	e7ef      	b.n	8010034 <_printf_i+0xbc>
 8010054:	680b      	ldr	r3, [r1, #0]
 8010056:	6825      	ldr	r5, [r4, #0]
 8010058:	1d18      	adds	r0, r3, #4
 801005a:	6008      	str	r0, [r1, #0]
 801005c:	0628      	lsls	r0, r5, #24
 801005e:	d501      	bpl.n	8010064 <_printf_i+0xec>
 8010060:	681d      	ldr	r5, [r3, #0]
 8010062:	e002      	b.n	801006a <_printf_i+0xf2>
 8010064:	0669      	lsls	r1, r5, #25
 8010066:	d5fb      	bpl.n	8010060 <_printf_i+0xe8>
 8010068:	881d      	ldrh	r5, [r3, #0]
 801006a:	4854      	ldr	r0, [pc, #336]	; (80101bc <_printf_i+0x244>)
 801006c:	2f6f      	cmp	r7, #111	; 0x6f
 801006e:	bf0c      	ite	eq
 8010070:	2308      	moveq	r3, #8
 8010072:	230a      	movne	r3, #10
 8010074:	2100      	movs	r1, #0
 8010076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801007a:	6866      	ldr	r6, [r4, #4]
 801007c:	60a6      	str	r6, [r4, #8]
 801007e:	2e00      	cmp	r6, #0
 8010080:	bfa2      	ittt	ge
 8010082:	6821      	ldrge	r1, [r4, #0]
 8010084:	f021 0104 	bicge.w	r1, r1, #4
 8010088:	6021      	strge	r1, [r4, #0]
 801008a:	b90d      	cbnz	r5, 8010090 <_printf_i+0x118>
 801008c:	2e00      	cmp	r6, #0
 801008e:	d04d      	beq.n	801012c <_printf_i+0x1b4>
 8010090:	4616      	mov	r6, r2
 8010092:	fbb5 f1f3 	udiv	r1, r5, r3
 8010096:	fb03 5711 	mls	r7, r3, r1, r5
 801009a:	5dc7      	ldrb	r7, [r0, r7]
 801009c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80100a0:	462f      	mov	r7, r5
 80100a2:	42bb      	cmp	r3, r7
 80100a4:	460d      	mov	r5, r1
 80100a6:	d9f4      	bls.n	8010092 <_printf_i+0x11a>
 80100a8:	2b08      	cmp	r3, #8
 80100aa:	d10b      	bne.n	80100c4 <_printf_i+0x14c>
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	07df      	lsls	r7, r3, #31
 80100b0:	d508      	bpl.n	80100c4 <_printf_i+0x14c>
 80100b2:	6923      	ldr	r3, [r4, #16]
 80100b4:	6861      	ldr	r1, [r4, #4]
 80100b6:	4299      	cmp	r1, r3
 80100b8:	bfde      	ittt	le
 80100ba:	2330      	movle	r3, #48	; 0x30
 80100bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100c4:	1b92      	subs	r2, r2, r6
 80100c6:	6122      	str	r2, [r4, #16]
 80100c8:	f8cd a000 	str.w	sl, [sp]
 80100cc:	464b      	mov	r3, r9
 80100ce:	aa03      	add	r2, sp, #12
 80100d0:	4621      	mov	r1, r4
 80100d2:	4640      	mov	r0, r8
 80100d4:	f7ff fee2 	bl	800fe9c <_printf_common>
 80100d8:	3001      	adds	r0, #1
 80100da:	d14c      	bne.n	8010176 <_printf_i+0x1fe>
 80100dc:	f04f 30ff 	mov.w	r0, #4294967295
 80100e0:	b004      	add	sp, #16
 80100e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e6:	4835      	ldr	r0, [pc, #212]	; (80101bc <_printf_i+0x244>)
 80100e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80100ec:	6823      	ldr	r3, [r4, #0]
 80100ee:	680e      	ldr	r6, [r1, #0]
 80100f0:	061f      	lsls	r7, r3, #24
 80100f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80100f6:	600e      	str	r6, [r1, #0]
 80100f8:	d514      	bpl.n	8010124 <_printf_i+0x1ac>
 80100fa:	07d9      	lsls	r1, r3, #31
 80100fc:	bf44      	itt	mi
 80100fe:	f043 0320 	orrmi.w	r3, r3, #32
 8010102:	6023      	strmi	r3, [r4, #0]
 8010104:	b91d      	cbnz	r5, 801010e <_printf_i+0x196>
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	f023 0320 	bic.w	r3, r3, #32
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	2310      	movs	r3, #16
 8010110:	e7b0      	b.n	8010074 <_printf_i+0xfc>
 8010112:	6823      	ldr	r3, [r4, #0]
 8010114:	f043 0320 	orr.w	r3, r3, #32
 8010118:	6023      	str	r3, [r4, #0]
 801011a:	2378      	movs	r3, #120	; 0x78
 801011c:	4828      	ldr	r0, [pc, #160]	; (80101c0 <_printf_i+0x248>)
 801011e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010122:	e7e3      	b.n	80100ec <_printf_i+0x174>
 8010124:	065e      	lsls	r6, r3, #25
 8010126:	bf48      	it	mi
 8010128:	b2ad      	uxthmi	r5, r5
 801012a:	e7e6      	b.n	80100fa <_printf_i+0x182>
 801012c:	4616      	mov	r6, r2
 801012e:	e7bb      	b.n	80100a8 <_printf_i+0x130>
 8010130:	680b      	ldr	r3, [r1, #0]
 8010132:	6826      	ldr	r6, [r4, #0]
 8010134:	6960      	ldr	r0, [r4, #20]
 8010136:	1d1d      	adds	r5, r3, #4
 8010138:	600d      	str	r5, [r1, #0]
 801013a:	0635      	lsls	r5, r6, #24
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	d501      	bpl.n	8010144 <_printf_i+0x1cc>
 8010140:	6018      	str	r0, [r3, #0]
 8010142:	e002      	b.n	801014a <_printf_i+0x1d2>
 8010144:	0671      	lsls	r1, r6, #25
 8010146:	d5fb      	bpl.n	8010140 <_printf_i+0x1c8>
 8010148:	8018      	strh	r0, [r3, #0]
 801014a:	2300      	movs	r3, #0
 801014c:	6123      	str	r3, [r4, #16]
 801014e:	4616      	mov	r6, r2
 8010150:	e7ba      	b.n	80100c8 <_printf_i+0x150>
 8010152:	680b      	ldr	r3, [r1, #0]
 8010154:	1d1a      	adds	r2, r3, #4
 8010156:	600a      	str	r2, [r1, #0]
 8010158:	681e      	ldr	r6, [r3, #0]
 801015a:	6862      	ldr	r2, [r4, #4]
 801015c:	2100      	movs	r1, #0
 801015e:	4630      	mov	r0, r6
 8010160:	f7f0 f8de 	bl	8000320 <memchr>
 8010164:	b108      	cbz	r0, 801016a <_printf_i+0x1f2>
 8010166:	1b80      	subs	r0, r0, r6
 8010168:	6060      	str	r0, [r4, #4]
 801016a:	6863      	ldr	r3, [r4, #4]
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	2300      	movs	r3, #0
 8010170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010174:	e7a8      	b.n	80100c8 <_printf_i+0x150>
 8010176:	6923      	ldr	r3, [r4, #16]
 8010178:	4632      	mov	r2, r6
 801017a:	4649      	mov	r1, r9
 801017c:	4640      	mov	r0, r8
 801017e:	47d0      	blx	sl
 8010180:	3001      	adds	r0, #1
 8010182:	d0ab      	beq.n	80100dc <_printf_i+0x164>
 8010184:	6823      	ldr	r3, [r4, #0]
 8010186:	079b      	lsls	r3, r3, #30
 8010188:	d413      	bmi.n	80101b2 <_printf_i+0x23a>
 801018a:	68e0      	ldr	r0, [r4, #12]
 801018c:	9b03      	ldr	r3, [sp, #12]
 801018e:	4298      	cmp	r0, r3
 8010190:	bfb8      	it	lt
 8010192:	4618      	movlt	r0, r3
 8010194:	e7a4      	b.n	80100e0 <_printf_i+0x168>
 8010196:	2301      	movs	r3, #1
 8010198:	4632      	mov	r2, r6
 801019a:	4649      	mov	r1, r9
 801019c:	4640      	mov	r0, r8
 801019e:	47d0      	blx	sl
 80101a0:	3001      	adds	r0, #1
 80101a2:	d09b      	beq.n	80100dc <_printf_i+0x164>
 80101a4:	3501      	adds	r5, #1
 80101a6:	68e3      	ldr	r3, [r4, #12]
 80101a8:	9903      	ldr	r1, [sp, #12]
 80101aa:	1a5b      	subs	r3, r3, r1
 80101ac:	42ab      	cmp	r3, r5
 80101ae:	dcf2      	bgt.n	8010196 <_printf_i+0x21e>
 80101b0:	e7eb      	b.n	801018a <_printf_i+0x212>
 80101b2:	2500      	movs	r5, #0
 80101b4:	f104 0619 	add.w	r6, r4, #25
 80101b8:	e7f5      	b.n	80101a6 <_printf_i+0x22e>
 80101ba:	bf00      	nop
 80101bc:	080104c9 	.word	0x080104c9
 80101c0:	080104da 	.word	0x080104da

080101c4 <memmove>:
 80101c4:	4288      	cmp	r0, r1
 80101c6:	b510      	push	{r4, lr}
 80101c8:	eb01 0402 	add.w	r4, r1, r2
 80101cc:	d902      	bls.n	80101d4 <memmove+0x10>
 80101ce:	4284      	cmp	r4, r0
 80101d0:	4623      	mov	r3, r4
 80101d2:	d807      	bhi.n	80101e4 <memmove+0x20>
 80101d4:	1e43      	subs	r3, r0, #1
 80101d6:	42a1      	cmp	r1, r4
 80101d8:	d008      	beq.n	80101ec <memmove+0x28>
 80101da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101e2:	e7f8      	b.n	80101d6 <memmove+0x12>
 80101e4:	4402      	add	r2, r0
 80101e6:	4601      	mov	r1, r0
 80101e8:	428a      	cmp	r2, r1
 80101ea:	d100      	bne.n	80101ee <memmove+0x2a>
 80101ec:	bd10      	pop	{r4, pc}
 80101ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101f6:	e7f7      	b.n	80101e8 <memmove+0x24>

080101f8 <_realloc_r>:
 80101f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fa:	4607      	mov	r7, r0
 80101fc:	4614      	mov	r4, r2
 80101fe:	460e      	mov	r6, r1
 8010200:	b921      	cbnz	r1, 801020c <_realloc_r+0x14>
 8010202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010206:	4611      	mov	r1, r2
 8010208:	f7ff bb9c 	b.w	800f944 <_malloc_r>
 801020c:	b922      	cbnz	r2, 8010218 <_realloc_r+0x20>
 801020e:	f7ff fc99 	bl	800fb44 <_free_r>
 8010212:	4625      	mov	r5, r4
 8010214:	4628      	mov	r0, r5
 8010216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010218:	f000 f814 	bl	8010244 <_malloc_usable_size_r>
 801021c:	42a0      	cmp	r0, r4
 801021e:	d20f      	bcs.n	8010240 <_realloc_r+0x48>
 8010220:	4621      	mov	r1, r4
 8010222:	4638      	mov	r0, r7
 8010224:	f7ff fb8e 	bl	800f944 <_malloc_r>
 8010228:	4605      	mov	r5, r0
 801022a:	2800      	cmp	r0, #0
 801022c:	d0f2      	beq.n	8010214 <_realloc_r+0x1c>
 801022e:	4631      	mov	r1, r6
 8010230:	4622      	mov	r2, r4
 8010232:	f7ff fb71 	bl	800f918 <memcpy>
 8010236:	4631      	mov	r1, r6
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff fc83 	bl	800fb44 <_free_r>
 801023e:	e7e9      	b.n	8010214 <_realloc_r+0x1c>
 8010240:	4635      	mov	r5, r6
 8010242:	e7e7      	b.n	8010214 <_realloc_r+0x1c>

08010244 <_malloc_usable_size_r>:
 8010244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010248:	1f18      	subs	r0, r3, #4
 801024a:	2b00      	cmp	r3, #0
 801024c:	bfbc      	itt	lt
 801024e:	580b      	ldrlt	r3, [r1, r0]
 8010250:	18c0      	addlt	r0, r0, r3
 8010252:	4770      	bx	lr

08010254 <_init>:
 8010254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010256:	bf00      	nop
 8010258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801025a:	bc08      	pop	{r3}
 801025c:	469e      	mov	lr, r3
 801025e:	4770      	bx	lr

08010260 <_fini>:
 8010260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010262:	bf00      	nop
 8010264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010266:	bc08      	pop	{r3}
 8010268:	469e      	mov	lr, r3
 801026a:	4770      	bx	lr
