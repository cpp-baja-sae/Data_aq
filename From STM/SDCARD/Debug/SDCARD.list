
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800cdb0  0800cdb0  0001cdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800cf50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0800cfec  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0800d04c  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003f120  2400015c  0800d0ac  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2403f27c  0800d0ac  0002f27c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d463  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000455d  00000000  00000000  0004d5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00051b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00052f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000358b6  00000000  00000000  000541a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c249  00000000  00000000  00089a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014f4b0  00000000  00000000  000a5ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f5157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  001f51ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400015c 	.word	0x2400015c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cd98 	.word	0x0800cd98

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000160 	.word	0x24000160
 800030c:	0800cd98 	.word	0x0800cd98

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e024      	b.n	8000714 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e01a      	b.n	8000706 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	dd0a      	ble.n	80006ec <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	025a      	lsls	r2, r3, #9
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e009      	b.n	8000700 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	025a      	lsls	r2, r3, #9
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800070c:	dbe0      	blt.n	80006d0 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbd6      	blt.n	80006ca <HalfKBWrite+0x12>
			}

		}

	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09e      	sub	sp, #120	; 0x78
 8000730:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HalfKBWrite(wtext,chunk_mult);
 8000732:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000736:	48af      	ldr	r0, [pc, #700]	; (80009f4 <main+0x2c8>)
 8000738:	f7ff ffbe 	bl	80006b8 <HalfKBWrite>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800073c:	4bae      	ldr	r3, [pc, #696]	; (80009f8 <main+0x2cc>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d11b      	bne.n	8000780 <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000748:	f3bf 8f4f 	dsb	sy
}
 800074c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800074e:	f3bf 8f6f 	isb	sy
}
 8000752:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000754:	4ba8      	ldr	r3, [pc, #672]	; (80009f8 <main+0x2cc>)
 8000756:	2200      	movs	r2, #0
 8000758:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800075c:	f3bf 8f4f 	dsb	sy
}
 8000760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000762:	f3bf 8f6f 	isb	sy
}
 8000766:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000768:	4ba3      	ldr	r3, [pc, #652]	; (80009f8 <main+0x2cc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4aa2      	ldr	r2, [pc, #648]	; (80009f8 <main+0x2cc>)
 800076e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000772:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000774:	f3bf 8f4f 	dsb	sy
}
 8000778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800077a:	f3bf 8f6f 	isb	sy
}
 800077e:	e000      	b.n	8000782 <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000780:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000782:	4b9d      	ldr	r3, [pc, #628]	; (80009f8 <main+0x2cc>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d138      	bne.n	8000800 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800078e:	4b9a      	ldr	r3, [pc, #616]	; (80009f8 <main+0x2cc>)
 8000790:	2200      	movs	r2, #0
 8000792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000796:	f3bf 8f4f 	dsb	sy
}
 800079a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800079c:	4b96      	ldr	r3, [pc, #600]	; (80009f8 <main+0x2cc>)
 800079e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a6:	0b5b      	lsrs	r3, r3, #13
 80007a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ac:	65bb      	str	r3, [r7, #88]	; 0x58
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007b6:	657b      	str	r3, [r7, #84]	; 0x54
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007ba:	015a      	lsls	r2, r3, #5
 80007bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c6:	498c      	ldr	r1, [pc, #560]	; (80009f8 <main+0x2cc>)
 80007c8:	4313      	orrs	r3, r2
 80007ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	657a      	str	r2, [r7, #84]	; 0x54
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1ef      	bne.n	80007b8 <main+0x8c>
    } while(sets-- != 0U);
 80007d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1e5      	bne.n	80007ae <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 80007e2:	f3bf 8f4f 	dsb	sy
}
 80007e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007e8:	4b83      	ldr	r3, [pc, #524]	; (80009f8 <main+0x2cc>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a82      	ldr	r2, [pc, #520]	; (80009f8 <main+0x2cc>)
 80007ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
}
 80007f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fa:	f3bf 8f6f 	isb	sy
}
 80007fe:	e000      	b.n	8000802 <main+0xd6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000800:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fef1 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f90f 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 faa1 	bl	8000d50 <MX_GPIO_Init>
  MX_ETH_Init();
 800080e:	f000 f97b 	bl	8000b08 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000812:	f000 f9e5 	bl	8000be0 <MX_USART3_UART_Init>
  MX_MDMA_Init();
 8000816:	f000 fa37 	bl	8000c88 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 800081a:	f000 f9c1 	bl	8000ba0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800081e:	f008 feab 	bl	8009578 <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 8000822:	f000 fa29 	bl	8000c78 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2101      	movs	r1, #1
 800082a:	4874      	ldr	r0, [pc, #464]	; (80009fc <main+0x2d0>)
 800082c:	f001 fe8c 	bl	8002548 <HAL_GPIO_WritePin>
      if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8000830:	2200      	movs	r2, #0
 8000832:	4973      	ldr	r1, [pc, #460]	; (8000a00 <main+0x2d4>)
 8000834:	4873      	ldr	r0, [pc, #460]	; (8000a04 <main+0x2d8>)
 8000836:	f00a fda5 	bl	800b384 <f_mount>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <main+0x11a>
      {
          Error_Handler();
 8000840:	f000 fbc0 	bl	8000fc4 <Error_Handler>
 8000844:	e032      	b.n	80008ac <main+0x180>
      }
      else
      {
          if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4b6e      	ldr	r3, [pc, #440]	; (8000a08 <main+0x2dc>)
 800084e:	2200      	movs	r2, #0
 8000850:	2107      	movs	r1, #7
 8000852:	486b      	ldr	r0, [pc, #428]	; (8000a00 <main+0x2d4>)
 8000854:	f00b f9b8 	bl	800bbc8 <f_mkfs>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <main+0x138>
          {
              Error_Handler();
 800085e:	f000 fbb1 	bl	8000fc4 <Error_Handler>
 8000862:	e023      	b.n	80008ac <main+0x180>
          }
          else
          {
              //Open file for writing (Create)
              if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000864:	220a      	movs	r2, #10
 8000866:	4969      	ldr	r1, [pc, #420]	; (8000a0c <main+0x2e0>)
 8000868:	4869      	ldr	r0, [pc, #420]	; (8000a10 <main+0x2e4>)
 800086a:	f00a fdd1 	bl	800b410 <f_open>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <main+0x14e>
              {
                  Error_Handler();
 8000874:	f000 fba6 	bl	8000fc4 <Error_Handler>
 8000878:	e018      	b.n	80008ac <main+0x180>
              }
              else
              {
                  //Write to the text file
                  res = f_write(&SDFile, wtext, chunk_size, (void *)&byteswritten);
 800087a:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <main+0x2e8>)
 800087c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000880:	495c      	ldr	r1, [pc, #368]	; (80009f4 <main+0x2c8>)
 8000882:	4863      	ldr	r0, [pc, #396]	; (8000a10 <main+0x2e4>)
 8000884:	f00a ff82 	bl	800b78c <f_write>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	4b62      	ldr	r3, [pc, #392]	; (8000a18 <main+0x2ec>)
 800088e:	701a      	strb	r2, [r3, #0]
                  if((byteswritten == 0) || (res != FR_OK))
 8000890:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <main+0x2e8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <main+0x174>
 8000898:	4b5f      	ldr	r3, [pc, #380]	; (8000a18 <main+0x2ec>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <main+0x17a>
                  {
                      Error_Handler();
 80008a0:	f000 fb90 	bl	8000fc4 <Error_Handler>
 80008a4:	e002      	b.n	80008ac <main+0x180>
                  }
                  else
                  {
                      f_close(&SDFile);
 80008a6:	485a      	ldr	r0, [pc, #360]	; (8000a10 <main+0x2e4>)
 80008a8:	f00b f963 	bl	800bb72 <f_close>
                  }
              }
          }
      }

      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2101      	movs	r1, #1
 80008b0:	4852      	ldr	r0, [pc, #328]	; (80009fc <main+0x2d0>)
 80008b2:	f001 fe49 	bl	8002548 <HAL_GPIO_WritePin>
      WriteTime();
 80008b6:	f000 fb47 	bl	8000f48 <WriteTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80008ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008be:	484f      	ldr	r0, [pc, #316]	; (80009fc <main+0x2d0>)
 80008c0:	f001 fe5b 	bl	800257a <HAL_GPIO_TogglePin>


 int looper = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 char str[80]={0};
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	224c      	movs	r2, #76	; 0x4c
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00b fe29 	bl	800c52c <memset>
      while (1)
  {
    	  int timestart = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	667b      	str	r3, [r7, #100]	; 0x64
    	  int timestop = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	663b      	str	r3, [r7, #96]	; 0x60
    	  looper++;
 80008e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e4:	3301      	adds	r3, #1
 80008e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2102      	movs	r1, #2
 80008ec:	484b      	ldr	r0, [pc, #300]	; (8000a1c <main+0x2f0>)
 80008ee:	f001 fe2b 	bl	8002548 <HAL_GPIO_WritePin>

  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 80008f2:	2232      	movs	r2, #50	; 0x32
 80008f4:	4945      	ldr	r1, [pc, #276]	; (8000a0c <main+0x2e0>)
 80008f6:	4846      	ldr	r0, [pc, #280]	; (8000a10 <main+0x2e4>)
 80008f8:	f00a fd8a 	bl	800b410 <f_open>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <main+0x1da>
  			{
  			  Error_Handler();
 8000902:	f000 fb5f 	bl	8000fc4 <Error_Handler>
  			}

	for(int a = 0 ; a<100;a++){
 8000906:	2300      	movs	r3, #0
 8000908:	66bb      	str	r3, [r7, #104]	; 0x68
 800090a:	e01c      	b.n	8000946 <main+0x21a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 800090c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <main+0x2d0>)
 8000912:	f001 fe32 	bl	800257a <HAL_GPIO_TogglePin>
		//timestart = HAL_GetTick();

	  	//sprintf(wtext, "%d",a);
		res = f_write(&SDFile, wtext, chunk_size, (void *)&byteswritten);
 8000916:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <main+0x2e8>)
 8000918:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800091c:	4935      	ldr	r1, [pc, #212]	; (80009f4 <main+0x2c8>)
 800091e:	483c      	ldr	r0, [pc, #240]	; (8000a10 <main+0x2e4>)
 8000920:	f00a ff34 	bl	800b78c <f_write>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <main+0x2ec>)
 800092a:	701a      	strb	r2, [r3, #0]
		if((byteswritten == 0) || (res != FR_OK))
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <main+0x2e8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d003      	beq.n	800093c <main+0x210>
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <main+0x2ec>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <main+0x214>
		{
			Error_Handler();
 800093c:	f000 fb42 	bl	8000fc4 <Error_Handler>
	for(int a = 0 ; a<100;a++){
 8000940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000942:	3301      	adds	r3, #1
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
 8000946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000948:	2b63      	cmp	r3, #99	; 0x63
 800094a:	dddf      	ble.n	800090c <main+0x1e0>

		}
		//timestop = HAL_GetTick();
		//HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
	}
	f_close(&SDFile);
 800094c:	4830      	ldr	r0, [pc, #192]	; (8000a10 <main+0x2e4>)
 800094e:	f00b f910 	bl	800bb72 <f_close>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000956:	4829      	ldr	r0, [pc, #164]	; (80009fc <main+0x2d0>)
 8000958:	f001 fe0f 	bl	800257a <HAL_GPIO_TogglePin>
		  	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 800095c:	2232      	movs	r2, #50	; 0x32
 800095e:	492b      	ldr	r1, [pc, #172]	; (8000a0c <main+0x2e0>)
 8000960:	482b      	ldr	r0, [pc, #172]	; (8000a10 <main+0x2e4>)
 8000962:	f00a fd55 	bl	800b410 <f_open>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <main+0x244>
			{
			  Error_Handler();
 800096c:	f000 fb2a 	bl	8000fc4 <Error_Handler>
			}
		  	sprintf(text, "\n");
 8000970:	492b      	ldr	r1, [pc, #172]	; (8000a20 <main+0x2f4>)
 8000972:	482c      	ldr	r0, [pc, #176]	; (8000a24 <main+0x2f8>)
 8000974:	f00b fde2 	bl	800c53c <siprintf>
			res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0x2f8>)
 800097a:	f7ff fcc9 	bl	8000310 <strlen>
 800097e:	4602      	mov	r2, r0
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <main+0x2e8>)
 8000982:	4928      	ldr	r1, [pc, #160]	; (8000a24 <main+0x2f8>)
 8000984:	4822      	ldr	r0, [pc, #136]	; (8000a10 <main+0x2e4>)
 8000986:	f00a ff01 	bl	800b78c <f_write>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <main+0x2ec>)
 8000990:	701a      	strb	r2, [r3, #0]
			if((byteswritten == 0) || (res != FR_OK))
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <main+0x2e8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <main+0x276>
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <main+0x2ec>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <main+0x27c>
			{
				Error_Handler();
 80009a2:	f000 fb0f 	bl	8000fc4 <Error_Handler>
 80009a6:	e002      	b.n	80009ae <main+0x282>
			}
			else
			{
				f_close(&SDFile);
 80009a8:	4819      	ldr	r0, [pc, #100]	; (8000a10 <main+0x2e4>)
 80009aa:	f00b f8e2 	bl	800bb72 <f_close>
			}

	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <main+0x2f0>)
 80009b4:	f001 fdc8 	bl	8002548 <HAL_GPIO_WritePin>
	if(looper == 10){
 80009b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ba:	2b0a      	cmp	r3, #10
 80009bc:	d18d      	bne.n	80008da <main+0x1ae>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <main+0x2d0>)
 80009c4:	f001 fdd9 	bl	800257a <HAL_GPIO_TogglePin>
		WriteTime();
 80009c8:	f000 fabe 	bl	8000f48 <WriteTime>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <main+0x2d0>)
 80009d2:	f001 fdb9 	bl	8002548 <HAL_GPIO_WritePin>
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <main+0x2d8>)
 80009dc:	f00a fcd2 	bl	800b384 <f_mount>
		while(1){
			HAL_Delay(100);
 80009e0:	2064      	movs	r0, #100	; 0x64
 80009e2:	f000 fe93 	bl	800170c <HAL_Delay>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <main+0x2d0>)
 80009ec:	f001 fdc5 	bl	800257a <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80009f0:	e7f6      	b.n	80009e0 <main+0x2b4>
 80009f2:	bf00      	nop
 80009f4:	24000178 	.word	0x24000178
 80009f8:	e000ed00 	.word	0xe000ed00
 80009fc:	58020400 	.word	0x58020400
 8000a00:	2403ee08 	.word	0x2403ee08
 8000a04:	2403f03c 	.word	0x2403f03c
 8000a08:	2403ead4 	.word	0x2403ead4
 8000a0c:	0800cdb0 	.word	0x0800cdb0
 8000a10:	2403ee0c 	.word	0x2403ee0c
 8000a14:	2403ea50 	.word	0x2403ea50
 8000a18:	2403ecd4 	.word	0x2403ecd4
 8000a1c:	58021000 	.word	0x58021000
 8000a20:	0800cdbc 	.word	0x0800cdbc
 8000a24:	24000000 	.word	0x24000000

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	; 0x70
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	224c      	movs	r2, #76	; 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b fd78 	bl	800c52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00b fd72 	bl	800c52c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f002 f83d 	bl	8002ac8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a2b      	ldr	r2, [pc, #172]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6a:	bf00      	nop
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a78:	d1f8      	bne.n	8000a6c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a7a:	2321      	movs	r3, #33	; 0x21
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a7e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a94:	f240 1313 	movw	r3, #275	; 0x113
 8000a98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 f840 	bl	8002b3c <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ac2:	f000 fa7f 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	233f      	movs	r3, #63	; 0x3f
 8000ac8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2103      	movs	r1, #3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 fbd1 	bl	8003294 <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000af8:	f000 fa64 	bl	8000fc4 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3770      	adds	r7, #112	; 0x70
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	58024800 	.word	0x58024800

08000b08 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <MX_ETH_Init+0x84>)
 8000b10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b20:	22e1      	movs	r2, #225	; 0xe1
 8000b22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b38:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_ETH_Init+0x88>)
 8000b3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_ETH_Init+0x8c>)
 8000b46:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_ETH_Init+0x90>)
 8000b4c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b54:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_ETH_Init+0x80>)
 8000b58:	f000 ff20 	bl	800199c <HAL_ETH_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b62:	f000 fa2f 	bl	8000fc4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b66:	2234      	movs	r2, #52	; 0x34
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_ETH_Init+0x94>)
 8000b6c:	f00b fcde 	bl	800c52c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_ETH_Init+0x94>)
 8000b72:	2221      	movs	r2, #33	; 0x21
 8000b74:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_ETH_Init+0x94>)
 8000b78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b7c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_ETH_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2403ed44 	.word	0x2403ed44
 8000b8c:	40028000 	.word	0x40028000
 8000b90:	2403e978 	.word	0x2403e978
 8000b94:	240000fc 	.word	0x240000fc
 8000b98:	2400009c 	.word	0x2400009c
 8000b9c:	2403edcc 	.word	0x2403edcc

08000ba0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SDMMC1_SD_Init+0x38>)
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <MX_SDMMC1_SD_Init+0x3c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_SDMMC1_SD_Init+0x38>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SDMMC1_SD_Init+0x38>)
 8000bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb6:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SDMMC1_SD_Init+0x38>)
 8000bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bbe:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_SDMMC1_SD_Init+0x38>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <MX_SDMMC1_SD_Init+0x38>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2403ea54 	.word	0x2403ea54
 8000bdc:	52007000 	.word	0x52007000

08000be0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_USART3_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c2a:	f006 fd75 	bl	8007718 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f9c6 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f007 fe08 	bl	8008850 <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f9bd 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c4e:	f007 fe3d 	bl	80088cc <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f9b4 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f007 fdbe 	bl	80087de <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f9ac 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2403e9c0 	.word	0x2403e9c0
 8000c74:	40004800 	.word	0x40004800

08000c78 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_MDMA_Init+0xbc>)
 8000c90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c94:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <MX_MDMA_Init+0xbc>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_MDMA_Init+0xbc>)
 8000ca0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cae:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <MX_MDMA_Init+0xc4>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cb4:	221d      	movs	r2, #29
 8000cb6:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000d0a:	f001 fc50 	bl	80025ae <HAL_MDMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000d14:	f000 f956 	bl	8000fc4 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <MX_MDMA_Init+0xc0>)
 8000d1e:	f001 fc92 	bl	8002646 <HAL_MDMA_ConfigPostRequestMask>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000d28:	f000 f94c 	bl	8000fc4 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	207a      	movs	r0, #122	; 0x7a
 8000d32:	f000 fdfe 	bl	8001932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d36:	207a      	movs	r0, #122	; 0x7a
 8000d38:	f000 fe15 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	58024400 	.word	0x58024400
 8000d48:	2403ecd8 	.word	0x2403ecd8
 8000d4c:	52000040 	.word	0x52000040

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b71      	ldr	r3, [pc, #452]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a6f      	ldr	r2, [pc, #444]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b6d      	ldr	r3, [pc, #436]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d84:	4b69      	ldr	r3, [pc, #420]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a68      	ldr	r2, [pc, #416]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b62      	ldr	r3, [pc, #392]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a60      	ldr	r2, [pc, #384]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b5e      	ldr	r3, [pc, #376]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a59      	ldr	r2, [pc, #356]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a4a      	ldr	r2, [pc, #296]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a42      	ldr	r2, [pc, #264]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b40      	ldr	r3, [pc, #256]	; (8000f2c <MX_GPIO_Init+0x1dc>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e3e:	483c      	ldr	r0, [pc, #240]	; (8000f30 <MX_GPIO_Init+0x1e0>)
 8000e40:	f001 fb82 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	483a      	ldr	r0, [pc, #232]	; (8000f34 <MX_GPIO_Init+0x1e4>)
 8000e4c:	f001 fb7c 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	4838      	ldr	r0, [pc, #224]	; (8000f38 <MX_GPIO_Init+0x1e8>)
 8000e56:	f001 fb77 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4833      	ldr	r0, [pc, #204]	; (8000f3c <MX_GPIO_Init+0x1ec>)
 8000e70:	f001 f9aa 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e74:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4828      	ldr	r0, [pc, #160]	; (8000f30 <MX_GPIO_Init+0x1e0>)
 8000e8e:	f001 f99b 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4822      	ldr	r0, [pc, #136]	; (8000f34 <MX_GPIO_Init+0x1e4>)
 8000eac:	f001 f98c 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <MX_GPIO_Init+0x1f0>)
 8000ec6:	f001 f97f 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4819      	ldr	r0, [pc, #100]	; (8000f44 <MX_GPIO_Init+0x1f4>)
 8000ee0:	f001 f972 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <MX_GPIO_Init+0x1f4>)
 8000f02:	f001 f961 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_GPIO_Init+0x1e8>)
 8000f1e:	f001 f953 	bl	80021c8 <HAL_GPIO_Init>

}
 8000f22:	bf00      	nop
 8000f24:	3730      	adds	r7, #48	; 0x30
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020400 	.word	0x58020400
 8000f34:	58020c00 	.word	0x58020c00
 8000f38:	58021000 	.word	0x58021000
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58021800 	.word	0x58021800
 8000f44:	58020000 	.word	0x58020000

08000f48 <WriteTime>:

/* USER CODE BEGIN 4 */
void WriteTime()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 8000f4c:	2232      	movs	r2, #50	; 0x32
 8000f4e:	4917      	ldr	r1, [pc, #92]	; (8000fac <WriteTime+0x64>)
 8000f50:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <WriteTime+0x68>)
 8000f52:	f00a fa5d 	bl	800b410 <f_open>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <WriteTime+0x18>
	{
		Error_Handler();
 8000f5c:	f000 f832 	bl	8000fc4 <Error_Handler>
	}
		sprintf(text, "\n#######################%u\n",HAL_GetTick());
 8000f60:	f000 fbc8 	bl	80016f4 <HAL_GetTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <WriteTime+0x6c>)
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <WriteTime+0x70>)
 8000f6c:	f00b fae6 	bl	800c53c <siprintf>
		res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <WriteTime+0x70>)
 8000f72:	f7ff f9cd 	bl	8000310 <strlen>
 8000f76:	4602      	mov	r2, r0
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <WriteTime+0x74>)
 8000f7a:	490f      	ldr	r1, [pc, #60]	; (8000fb8 <WriteTime+0x70>)
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <WriteTime+0x68>)
 8000f7e:	f00a fc05 	bl	800b78c <f_write>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <WriteTime+0x78>)
 8000f88:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <WriteTime+0x74>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <WriteTime+0x52>
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <WriteTime+0x78>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <WriteTime+0x58>
	{
		Error_Handler();
 8000f9a:	f000 f813 	bl	8000fc4 <Error_Handler>
 8000f9e:	e003      	b.n	8000fa8 <WriteTime+0x60>
	}
	else
	{
		f_close(&SDFile);
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <WriteTime+0x68>)
 8000fa2:	f00a fde6 	bl	800bb72 <f_close>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800cdb0 	.word	0x0800cdb0
 8000fb0:	2403ee0c 	.word	0x2403ee0c
 8000fb4:	0800cdc0 	.word	0x0800cdc0
 8000fb8:	24000000 	.word	0x24000000
 8000fbc:	2403ea50 	.word	0x2403ea50
 8000fc0:	2403ecd4 	.word	0x2403ecd4

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <Error_Handler+0x2c>)
 8000fce:	f001 fabb 	bl	8002548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <Error_Handler+0x30>)
 8000fd8:	f001 fab6 	bl	8002548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <Error_Handler+0x2c>)
 8000fe4:	f001 fab0 	bl	8002548 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x28>
 8000fee:	bf00      	nop
 8000ff0:	58020400 	.word	0x58020400
 8000ff4:	58021000 	.word	0x58021000

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MspInit+0x30>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x30>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x30>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	58024400 	.word	0x58024400

0800102c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a59      	ldr	r2, [pc, #356]	; (80011b0 <HAL_ETH_MspInit+0x184>)
 800104a:	4293      	cmp	r3, r2
 800104c:	f040 80ab 	bne.w	80011a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001052:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001056:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 800108e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 800109e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ce:	4a39      	ldr	r2, [pc, #228]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 800110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001122:	2332      	movs	r3, #50	; 0x32
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001132:	230b      	movs	r3, #11
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	481e      	ldr	r0, [pc, #120]	; (80011b8 <HAL_ETH_MspInit+0x18c>)
 800113e:	f001 f843 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001142:	2386      	movs	r3, #134	; 0x86
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001152:	230b      	movs	r3, #11
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4817      	ldr	r0, [pc, #92]	; (80011bc <HAL_ETH_MspInit+0x190>)
 800115e:	f001 f833 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001174:	230b      	movs	r3, #11
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <HAL_ETH_MspInit+0x194>)
 8001180:	f001 f822 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001184:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001196:	230b      	movs	r3, #11
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <HAL_ETH_MspInit+0x198>)
 80011a2:	f001 f811 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3738      	adds	r7, #56	; 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40028000 	.word	0x40028000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020800 	.word	0x58020800
 80011bc:	58020000 	.word	0x58020000
 80011c0:	58020400 	.word	0x58020400
 80011c4:	58021800 	.word	0x58021800

080011c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0b8      	sub	sp, #224	; 0xe0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	22b4      	movs	r2, #180	; 0xb4
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00b f99f 	bl	800c52c <memset>
  if(hsd->Instance==SDMMC1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a3b      	ldr	r2, [pc, #236]	; (80012e0 <HAL_SD_MspInit+0x118>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d16e      	bne.n	80012d6 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011fe:	2300      	movs	r3, #0
 8001200:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fbd0 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001212:	f7ff fed7 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001216:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 8001218:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800121c:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 8001228:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_SD_MspInit+0x11c>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001270:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800128a:	230c      	movs	r3, #12
 800128c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001294:	4619      	mov	r1, r3
 8001296:	4814      	ldr	r0, [pc, #80]	; (80012e8 <HAL_SD_MspInit+0x120>)
 8001298:	f000 ff96 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129c:	2304      	movs	r3, #4
 800129e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012b4:	230c      	movs	r3, #12
 80012b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012be:	4619      	mov	r1, r3
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <HAL_SD_MspInit+0x124>)
 80012c2:	f000 ff81 	bl	80021c8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2031      	movs	r0, #49	; 0x31
 80012cc:	f000 fb31 	bl	8001932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012d0:	2031      	movs	r0, #49	; 0x31
 80012d2:	f000 fb48 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	37e0      	adds	r7, #224	; 0xe0
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	52007000 	.word	0x52007000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020800 	.word	0x58020800
 80012ec:	58020c00 	.word	0x58020c00

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b6      	sub	sp, #216	; 0xd8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22b4      	movs	r2, #180	; 0xb4
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00b f90b 	bl	800c52c <memset>
  if(huart->Instance==USART3)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d142      	bne.n	80013a6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fb3c 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800133a:	f7ff fe43 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800137a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0xc8>)
 80013a2:	f000 ff11 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	37d8      	adds	r7, #216	; 0xd8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004800 	.word	0x40004800
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020c00 	.word	0x58020c00

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f960 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <SDMMC1_IRQHandler+0x10>)
 8001416:	f004 ff8d 	bl	8006334 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2403ea54 	.word	0x2403ea54

08001424 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <MDMA_IRQHandler+0x10>)
 800142a:	f001 f95f 	bl	80026ec <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2403ecd8 	.word	0x2403ecd8

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f00b f836 	bl	800c4d8 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	24050000 	.word	0x24050000
 8001498:	00000800 	.word	0x00000800
 800149c:	2403e980 	.word	0x2403e980
 80014a0:	2403f280 	.word	0x2403f280

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <SystemInit+0xd0>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a31      	ldr	r2, [pc, #196]	; (8001574 <SystemInit+0xd0>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <SystemInit+0xd4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	d807      	bhi.n	80014d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <SystemInit+0xd4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 030f 	bic.w	r3, r3, #15
 80014cc:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <SystemInit+0xd4>)
 80014ce:	f043 0307 	orr.w	r3, r3, #7
 80014d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <SystemInit+0xd8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a28      	ldr	r2, [pc, #160]	; (800157c <SystemInit+0xd8>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <SystemInit+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <SystemInit+0xd8>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4924      	ldr	r1, [pc, #144]	; (800157c <SystemInit+0xd8>)
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <SystemInit+0xdc>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <SystemInit+0xd4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <SystemInit+0xd4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 030f 	bic.w	r3, r3, #15
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <SystemInit+0xd4>)
 8001508:	f043 0307 	orr.w	r3, r3, #7
 800150c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <SystemInit+0xd8>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <SystemInit+0xd8>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <SystemInit+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <SystemInit+0xd8>)
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <SystemInit+0xe0>)
 8001524:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <SystemInit+0xd8>)
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <SystemInit+0xe4>)
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <SystemInit+0xd8>)
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <SystemInit+0xe8>)
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <SystemInit+0xd8>)
 8001534:	2200      	movs	r2, #0
 8001536:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <SystemInit+0xd8>)
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <SystemInit+0xe8>)
 800153c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <SystemInit+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <SystemInit+0xd8>)
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <SystemInit+0xe8>)
 8001548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <SystemInit+0xd8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a09      	ldr	r2, [pc, #36]	; (800157c <SystemInit+0xd8>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <SystemInit+0xd8>)
 800155e:	2200      	movs	r2, #0
 8001560:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <SystemInit+0xec>)
 8001564:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001568:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	52002000 	.word	0x52002000
 800157c:	58024400 	.word	0x58024400
 8001580:	eaf6ed7f 	.word	0xeaf6ed7f
 8001584:	02020200 	.word	0x02020200
 8001588:	01ff0000 	.word	0x01ff0000
 800158c:	01010280 	.word	0x01010280
 8001590:	52004000 	.word	0x52004000

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001598:	f7ff ff84 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	; (80015e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f00a ff8f 	bl	800c4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff f8b1 	bl	800072c <main>
  bx  lr
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015d4:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80015d8:	0800cf50 	.word	0x0800cf50
  ldr r2, =_sbss
 80015dc:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 80015e0:	2403f27c 	.word	0x2403f27c

080015e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC3_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ee:	2003      	movs	r0, #3
 80015f0:	f000 f994 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015f4:	f002 f804 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_Init+0x68>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	4913      	ldr	r1, [pc, #76]	; (8001654 <HAL_Init+0x6c>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_Init+0x68>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_Init+0x6c>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_Init+0x70>)
 800162a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_Init+0x74>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f814 	bl	8001660 <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e002      	b.n	8001648 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001642:	f7ff fcd9 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58024400 	.word	0x58024400
 8001654:	0800ce20 	.word	0x0800ce20
 8001658:	2400002c 	.word	0x2400002c
 800165c:	24000028 	.word	0x24000028

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_InitTick+0x60>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e021      	b.n	80016b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_InitTick+0x64>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_InitTick+0x60>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f979 	bl	8001982 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f000 f943 	bl	8001932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x68>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000034 	.word	0x24000034
 80016c4:	24000028 	.word	0x24000028
 80016c8:	24000030 	.word	0x24000030

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	24000034 	.word	0x24000034
 80016f0:	2403ee00 	.word	0x2403ee00

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2403ee00 	.word	0x2403ee00

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24000034 	.word	0x24000034

08001754 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	58000400 	.word	0x58000400

0800177c <__NVIC_SetPriorityGrouping>:
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	05fa0000 	.word	0x05fa0000

080017c4 <__NVIC_GetPriorityGrouping>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff29 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff40 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff33 	bl	80017e0 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa4 	bl	80018d8 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0c6      	b.n	8001b3c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fb38 	bl	800102c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2223      	movs	r2, #35	; 0x23
 80019c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b60      	ldr	r3, [pc, #384]	; (8001b44 <HAL_ETH_Init+0x1a8>)
 80019c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c8:	4a5e      	ldr	r2, [pc, #376]	; (8001b44 <HAL_ETH_Init+0x1a8>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <HAL_ETH_Init+0x1a8>)
 80019d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7a1b      	ldrb	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d103      	bne.n	80019f0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff feb3 	bl	8001754 <HAL_SYSCFG_ETHInterfaceSelect>
 80019ee:	e003      	b.n	80019f8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80019f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019f4:	f7ff feae 	bl	8001754 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff fe70 	bl	80016f4 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a16:	e00f      	b.n	8001a38 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a18:	f7ff fe6c 	bl	80016f4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a26:	d907      	bls.n	8001a38 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	22e0      	movs	r2, #224	; 0xe0
 8001a32:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e081      	b.n	8001b3c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e6      	bne.n	8001a18 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fac0 	bl	8001fd0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a50:	f001 ff50 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <HAL_ETH_Init+0x1ac>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9a      	lsrs	r2, r3, #18
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3a01      	subs	r2, #1
 8001a64:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fa13 	bl	8001e94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a84:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a88:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	22e0      	movs	r2, #224	; 0xe0
 8001aa0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e04a      	b.n	8001b3c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aae:	4413      	add	r3, r2
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_ETH_Init+0x1b0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6952      	ldr	r2, [r2, #20]
 8001aba:	0052      	lsls	r2, r2, #1
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ac6:	440b      	add	r3, r1
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fad8 	bl	8002080 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fb1c 	bl	800210e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	3305      	adds	r3, #5
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021a      	lsls	r2, r3, #8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	3303      	adds	r3, #3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	061a      	lsls	r2, r3, #24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	3302      	adds	r3, #2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b22:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2210      	movs	r2, #16
 8001b32:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2210      	movs	r2, #16
 8001b38:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58024400 	.word	0x58024400
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	ffff8001 	.word	0xffff8001

08001b50 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b62:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	791b      	ldrb	r3, [r3, #4]
 8001b68:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b6a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	7b1b      	ldrb	r3, [r3, #12]
 8001b70:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b72:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	7b5b      	ldrb	r3, [r3, #13]
 8001b78:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b7a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	7b9b      	ldrb	r3, [r3, #14]
 8001b80:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	7bdb      	ldrb	r3, [r3, #15]
 8001b88:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b8a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	7c12      	ldrb	r2, [r2, #16]
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d102      	bne.n	8001b9a <ETH_SetMACConfig+0x4a>
 8001b94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b98:	e000      	b.n	8001b9c <ETH_SetMACConfig+0x4c>
 8001b9a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b9c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	7c52      	ldrb	r2, [r2, #17]
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d102      	bne.n	8001bac <ETH_SetMACConfig+0x5c>
 8001ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001baa:	e000      	b.n	8001bae <ETH_SetMACConfig+0x5e>
 8001bac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7c9b      	ldrb	r3, [r3, #18]
 8001bb4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bb6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bbc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001bc2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7f1b      	ldrb	r3, [r3, #28]
 8001bc8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001bca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7f5b      	ldrb	r3, [r3, #29]
 8001bd0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bd2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	7f92      	ldrb	r2, [r2, #30]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0x92>
 8001bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0x94>
 8001be2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001be4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	7fdb      	ldrb	r3, [r3, #31]
 8001bea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d102      	bne.n	8001bfe <ETH_SetMACConfig+0xae>
 8001bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfc:	e000      	b.n	8001c00 <ETH_SetMACConfig+0xb0>
 8001bfe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c00:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c06:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c0e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c10:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <ETH_SetMACConfig+0x22c>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c4e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c50:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	d102      	bne.n	8001c62 <ETH_SetMACConfig+0x112>
 8001c5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c60:	e000      	b.n	8001c64 <ETH_SetMACConfig+0x114>
 8001c62:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c64:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <ETH_SetMACConfig+0x230>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <ETH_SetMACConfig+0x234>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cb2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d101      	bne.n	8001cc2 <ETH_SetMACConfig+0x172>
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	e000      	b.n	8001cc4 <ETH_SetMACConfig+0x174>
 8001cc2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001cc4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cd6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001cec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001cf4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	f023 0103 	bic.w	r1, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d36:	2a00      	cmp	r2, #0
 8001d38:	d101      	bne.n	8001d3e <ETH_SetMACConfig+0x1ee>
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	e000      	b.n	8001d40 <ETH_SetMACConfig+0x1f0>
 8001d3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d40:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d4a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	00048083 	.word	0x00048083
 8001d80:	c0f88000 	.word	0xc0f88000
 8001d84:	fffffef0 	.word	0xfffffef0

08001d88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <ETH_SetDMAConfig+0xf8>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	6809      	ldr	r1, [r1, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001dae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	7b1b      	ldrb	r3, [r3, #12]
 8001dc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dce:	4413      	add	r3, r2
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <ETH_SetDMAConfig+0xfc>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6811      	ldr	r1, [r2, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	f241 0304 	movw	r3, #4100	; 0x1004
 8001de2:	440b      	add	r3, r1
 8001de4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7b5b      	ldrb	r3, [r3, #13]
 8001dea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <ETH_SetDMAConfig+0x100>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6811      	ldr	r1, [r2, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e0e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	7d1b      	ldrb	r3, [r3, #20]
 8001e18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e1a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7f5b      	ldrb	r3, [r3, #29]
 8001e20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e2e:	4413      	add	r3, r2
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <ETH_SetDMAConfig+0x104>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e42:	440b      	add	r3, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7f1b      	ldrb	r3, [r3, #28]
 8001e4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <ETH_SetDMAConfig+0x108>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6811      	ldr	r1, [r2, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e70:	440b      	add	r3, r1
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	ffff87fd 	.word	0xffff87fd
 8001e84:	ffff2ffe 	.word	0xffff2ffe
 8001e88:	fffec000 	.word	0xfffec000
 8001e8c:	ffc0efef 	.word	0xffc0efef
 8001e90:	7fc0ffff 	.word	0x7fc0ffff

08001e94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0a4      	sub	sp, #144	; 0x90
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001eec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001ef0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f16:	2300      	movs	r3, #0
 8001f18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fde6 	bl	8001b50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fa2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001fb4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fee1 	bl	8001d88 <ETH_SetDMAConfig>
}
 8001fc6:	bf00      	nop
 8001fc8:	3790      	adds	r7, #144	; 0x90
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fea:	f001 fc83 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8001fee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d908      	bls.n	800200a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d804      	bhi.n	800200a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e027      	b.n	800205a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d908      	bls.n	8002024 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d204      	bcs.n	8002024 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e01a      	b.n	800205a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d303      	bcc.n	8002034 <ETH_MAC_MDIO_ClkConfig+0x64>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d911      	bls.n	8002058 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d908      	bls.n	800204e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d804      	bhi.n	800204e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e005      	b.n	800205a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e000      	b.n	800205a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002058:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	01312cff 	.word	0x01312cff
 8002070:	02160ebf 	.word	0x02160ebf
 8002074:	03938700 	.word	0x03938700
 8002078:	05f5e0ff 	.word	0x05f5e0ff
 800207c:	08f0d17f 	.word	0x08f0d17f

08002080 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e01d      	b.n	80020ca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	3206      	adds	r2, #6
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d9de      	bls.n	800208e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f241 132c 	movw	r3, #4396	; 0x112c
 80020de:	4413      	add	r3, r2
 80020e0:	2203      	movs	r2, #3
 80020e2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d9      	ldr	r1, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f241 1314 	movw	r3, #4372	; 0x1114
 80020f0:	4413      	add	r3, r2
 80020f2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e024      	b.n	8002166 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3310      	adds	r3, #16
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d9d7      	bls.n	800211c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002192:	4413      	add	r3, r2
 8002194:	2203      	movs	r2, #3
 8002196:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6919      	ldr	r1, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80021a4:	4413      	add	r3, r2
 80021a6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f241 1328 	movw	r3, #4392	; 0x1128
 80021b8:	4413      	add	r3, r2
 80021ba:	6019      	str	r1, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021d6:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <HAL_GPIO_Init+0x228>)
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021da:	e18c      	b.n	80024f6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 817e 	beq.w	80024f0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x44>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80d8 	beq.w	80024f0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_GPIO_Init+0x22c>)
 8002342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002346:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_GPIO_Init+0x22c>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_GPIO_Init+0x22c>)
 8002352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <HAL_GPIO_Init+0x230>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_GPIO_Init+0x234>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d04a      	beq.n	8002420 <HAL_GPIO_Init+0x258>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_GPIO_Init+0x238>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x222>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_GPIO_Init+0x23c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x21e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_GPIO_Init+0x240>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x21a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_GPIO_Init+0x244>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x216>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_GPIO_Init+0x248>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x212>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x24c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x20e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_GPIO_Init+0x250>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x20a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <HAL_GPIO_Init+0x254>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x206>
 80023ca:	2309      	movs	r3, #9
 80023cc:	e029      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023ce:	230a      	movs	r3, #10
 80023d0:	e027      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023d2:	2307      	movs	r3, #7
 80023d4:	e025      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023d6:	2306      	movs	r3, #6
 80023d8:	e023      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023da:	2305      	movs	r3, #5
 80023dc:	e021      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023de:	2304      	movs	r3, #4
 80023e0:	e01f      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e01d      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e01b      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e019      	b.n	8002422 <HAL_GPIO_Init+0x25a>
 80023ee:	bf00      	nop
 80023f0:	58000080 	.word	0x58000080
 80023f4:	58024400 	.word	0x58024400
 80023f8:	58000400 	.word	0x58000400
 80023fc:	58020000 	.word	0x58020000
 8002400:	58020400 	.word	0x58020400
 8002404:	58020800 	.word	0x58020800
 8002408:	58020c00 	.word	0x58020c00
 800240c:	58021000 	.word	0x58021000
 8002410:	58021400 	.word	0x58021400
 8002414:	58021800 	.word	0x58021800
 8002418:	58021c00 	.word	0x58021c00
 800241c:	58022400 	.word	0x58022400
 8002420:	2300      	movs	r3, #0
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	f002 0203 	and.w	r2, r2, #3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4093      	lsls	r3, r2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002432:	4938      	ldr	r1, [pc, #224]	; (8002514 <HAL_GPIO_Init+0x34c>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	3301      	adds	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	f47f ae6b 	bne.w	80021dc <HAL_GPIO_Init+0x14>
  }
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	3724      	adds	r7, #36	; 0x24
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	58000400 	.word	0x58000400

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800258c:	887a      	ldrh	r2, [r7, #2]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	041a      	lsls	r2, r3, #16
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43d9      	mvns	r1, r3
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	400b      	ands	r3, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b6:	f7ff f89d 	bl	80016f4 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e03b      	b.n	800263e <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80025e6:	e00f      	b.n	8002608 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80025e8:	f7ff f884 	bl	80016f4 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d908      	bls.n	8002608 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2240      	movs	r2, #64	; 0x40
 80025fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2203      	movs	r2, #3
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e01a      	b.n	800263e <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e8      	bne.n	80025e8 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f9be 	bl	8002998 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e03e      	b.n	80026de <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_MDMA_ConfigPostRequestMask+0x28>
 800266a:	2302      	movs	r3, #2
 800266c:	e037      	b.n	80026de <HAL_MDMA_ConfigPostRequestMask+0x98>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d126      	bne.n	80026d0 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11c      	bne.n	80026ca <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d108      	bne.n	80026b8 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	e00d      	b.n	80026d4 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026c6:	611a      	str	r2, [r3, #16]
 80026c8:	e004      	b.n	80026d4 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
 80026ce:	e001      	b.n	80026d4 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f8:	4b9a      	ldr	r3, [pc, #616]	; (8002964 <HAL_MDMA_IRQHandler+0x278>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a9a      	ldr	r2, [pc, #616]	; (8002968 <HAL_MDMA_IRQHandler+0x27c>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a9b      	lsrs	r3, r3, #10
 8002704:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4b97      	ldr	r3, [pc, #604]	; (800296c <HAL_MDMA_IRQHandler+0x280>)
 800270e:	4413      	add	r3, r2
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2201      	movs	r2, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800271e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 812e 	beq.w	800298a <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d054      	beq.n	80027e6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d04d      	beq.n	80027e6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0202 	bic.w	r2, r2, #2
 8002758:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	2b00      	cmp	r3, #0
 800276a:	d106      	bne.n	800277a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	669a      	str	r2, [r3, #104]	; 0x68
 8002778:	e005      	b.n	8002786 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002794:	f043 0204 	orr.w	r2, r3, #4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027aa:	f043 0208 	orr.w	r2, r3, #8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c0:	f043 0210 	orr.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2210      	movs	r2, #16
 8002808:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2208      	movs	r2, #8
 800283c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d039      	beq.n	8002904 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d032      	beq.n	8002904 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80028ac:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d110      	bne.n	80028dc <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d05d      	beq.n	800298e <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
        }
        return;
 80028da:	e058      	b.n	800298e <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2202      	movs	r2, #2
 80028e2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002908:	2b00      	cmp	r3, #0
 800290a:	d041      	beq.n	8002990 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3301      	adds	r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	d307      	bcc.n	8002940 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f2      	bne.n	8002924 <HAL_MDMA_IRQHandler+0x238>
 800293e:	e000      	b.n	8002942 <HAL_MDMA_IRQHandler+0x256>
        break;
 8002940:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2203      	movs	r2, #3
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002960:	e00a      	b.n	8002978 <HAL_MDMA_IRQHandler+0x28c>
 8002962:	bf00      	nop
 8002964:	24000028 	.word	0x24000028
 8002968:	1b4e81b5 	.word	0x1b4e81b5
 800296c:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
 8002988:	e002      	b.n	8002990 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 800298e:	bf00      	nop
    }
  }
}
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029be:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80029ca:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80029d6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80029e0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80029ec:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80029ee:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d107      	bne.n	8002a0a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002a08:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da11      	bge.n	8002a3e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a28:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	425b      	negs	r3, r3
 8002a30:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	621a      	str	r2, [r3, #32]
 8002a3c:	e006      	b.n	8002a4c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da15      	bge.n	8002a80 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002a62:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	425b      	negs	r3, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a19      	ldr	r1, [r3, #32]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	621a      	str	r2, [r3, #32]
 8002a7e:	e009      	b.n	8002a94 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6a19      	ldr	r1, [r3, #32]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d006      	beq.n	8002aac <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
 8002aaa:	e003      	b.n	8002ab4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_PWREx_ConfigSupply+0x70>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00a      	beq.n	8002af2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_PWREx_ConfigSupply+0x70>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01f      	b.n	8002b2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e01d      	b.n	8002b2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_PWREx_ConfigSupply+0x70>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	490f      	ldr	r1, [pc, #60]	; (8002b38 <HAL_PWREx_ConfigSupply+0x70>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b02:	f7fe fdf7 	bl	80016f4 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b08:	e009      	b.n	8002b1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b0a:	f7fe fdf3 	bl	80016f4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b18:	d901      	bls.n	8002b1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_PWREx_ConfigSupply+0x70>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d1ee      	bne.n	8002b0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	58024800 	.word	0x58024800

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e397      	b.n	800327e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8087 	beq.w	8002c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5c:	4b9e      	ldr	r3, [pc, #632]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b66:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d007      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46>
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	2b18      	cmp	r3, #24
 8002b76:	d110      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b82:	4b95      	ldr	r3, [pc, #596]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x12c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d168      	bne.n	8002c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e371      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x76>
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a8b      	ldr	r2, [pc, #556]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e02e      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a86      	ldr	r2, [pc, #536]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b84      	ldr	r3, [pc, #528]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a83      	ldr	r2, [pc, #524]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xbc>
 8002bde:	4b7e      	ldr	r3, [pc, #504]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7d      	ldr	r2, [pc, #500]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7a      	ldr	r2, [pc, #488]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bf8:	4b77      	ldr	r3, [pc, #476]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a76      	ldr	r2, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b74      	ldr	r3, [pc, #464]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a73      	ldr	r2, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fd6c 	bl	80016f4 <HAL_GetTick>
 8002c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fd68 	bl	80016f4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e325      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c32:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe4>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fd58 	bl	80016f4 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe fd54 	bl	80016f4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e311      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5a:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x10c>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 808a 	beq.w	8002d8c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c78:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_RCC_OscConfig+0x162>
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2b18      	cmp	r3, #24
 8002c92:	d137      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1c8>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d132      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x17a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e2e3      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cb6:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0219 	bic.w	r2, r3, #25
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4945      	ldr	r1, [pc, #276]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc8:	f7fe fd14 	bl	80016f4 <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fd10 	bl	80016f4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e2cd      	b.n	800327e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	4936      	ldr	r1, [pc, #216]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d02:	e043      	b.n	8002d8c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d026      	beq.n	8002d5a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 0219 	bic.w	r2, r3, #25
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	492f      	ldr	r1, [pc, #188]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fce9 	bl	80016f4 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fce5 	bl	80016f4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e2a2      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	4921      	ldr	r1, [pc, #132]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fcc5 	bl	80016f4 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fcc1 	bl	80016f4 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e27e      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d06d      	beq.n	8002e74 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d007      	beq.n	8002dbe <HAL_RCC_OscConfig+0x282>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b18      	cmp	r3, #24
 8002db2:	d11e      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2b6>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d119      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2a0>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	d004      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e253      	b.n	800327e <HAL_RCC_OscConfig+0x742>
 8002dd6:	bf00      	nop
 8002dd8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ddc:	4ba3      	ldr	r3, [pc, #652]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	49a0      	ldr	r1, [pc, #640]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002df0:	e040      	b.n	8002e74 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d023      	beq.n	8002e42 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dfa:	4b9c      	ldr	r3, [pc, #624]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a9b      	ldr	r2, [pc, #620]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe fc75 	bl	80016f4 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fc71 	bl	80016f4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e22e      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	498c      	ldr	r1, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
 8002e40:	e018      	b.n	8002e74 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e42:	4b8a      	ldr	r3, [pc, #552]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a89      	ldr	r2, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fc51 	bl	80016f4 <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e56:	f7fe fc4d 	bl	80016f4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e20a      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d036      	beq.n	8002eee <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d019      	beq.n	8002ebc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e88:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8c:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fc2e 	bl	80016f4 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fc2a 	bl	80016f4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1e7      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x360>
 8002eba:	e018      	b.n	8002eee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fc14 	bl	80016f4 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fc10 	bl	80016f4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1cd      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f02:	4b5a      	ldr	r3, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a59      	ldr	r2, [pc, #356]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fbf1 	bl	80016f4 <HAL_GetTick>
 8002f12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f16:	f7fe fbed 	bl	80016f4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1aa      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3da>
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f36:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a4c      	ldr	r2, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f42:	f7fe fbd7 	bl	80016f4 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f4a:	f7fe fbd3 	bl	80016f4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e190      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8085 	beq.w	8003080 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x534>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <HAL_RCC_OscConfig+0x534>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f82:	f7fe fbb7 	bl	80016f4 <HAL_GetTick>
 8002f86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe fbb3 	bl	80016f4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e170      	b.n	800327e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9c:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x534>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x482>
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a2d      	ldr	r2, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e02d      	b.n	800301a <HAL_RCC_OscConfig+0x4de>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4a4>
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a28      	ldr	r2, [pc, #160]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	e01c      	b.n	800301a <HAL_RCC_OscConfig+0x4de>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x4c6>
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x4de>
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a19      	ldr	r2, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d015      	beq.n	800304e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fb67 	bl	80016f4 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fb63 	bl	80016f4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e11e      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_RCC_OscConfig+0x530>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCC_OscConfig+0x4ee>
 800304c:	e018      	b.n	8003080 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe fb51 	bl	80016f4 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003054:	e00e      	b.n	8003074 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe fb4d 	bl	80016f4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d905      	bls.n	8003074 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e108      	b.n	800327e <HAL_RCC_OscConfig+0x742>
 800306c:	58024400 	.word	0x58024400
 8003070:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003074:	4b84      	ldr	r3, [pc, #528]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80f9 	beq.w	800327c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800308a:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003092:	2b18      	cmp	r3, #24
 8003094:	f000 80b4 	beq.w	8003200 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b02      	cmp	r3, #2
 800309e:	f040 8095 	bne.w	80031cc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a78      	ldr	r2, [pc, #480]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80030a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe fb21 	bl	80016f4 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fb1d 	bl	80016f4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0da      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d4:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80030d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d8:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x750>)
 80030da:	4013      	ands	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	430a      	orrs	r2, r1
 80030e8:	4967      	ldr	r1, [pc, #412]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	628b      	str	r3, [r1, #40]	; 0x28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	3b01      	subs	r3, #1
 80030fe:	025b      	lsls	r3, r3, #9
 8003100:	b29b      	uxth	r3, r3
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	3b01      	subs	r3, #1
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	3b01      	subs	r3, #1
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800311e:	495a      	ldr	r1, [pc, #360]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003120:	4313      	orrs	r3, r2
 8003122:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a57      	ldr	r2, [pc, #348]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003130:	4b55      	ldr	r3, [pc, #340]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003134:	4b56      	ldr	r3, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x754>)
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800313c:	00d2      	lsls	r2, r2, #3
 800313e:	4952      	ldr	r1, [pc, #328]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	f023 020c 	bic.w	r2, r3, #12
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	494d      	ldr	r1, [pc, #308]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003156:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	f023 0202 	bic.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	4949      	ldr	r1, [pc, #292]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003164:	4313      	orrs	r3, r2
 8003166:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003168:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4a46      	ldr	r2, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003174:	4b44      	ldr	r3, [pc, #272]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4a43      	ldr	r2, [pc, #268]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a3d      	ldr	r2, [pc, #244]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe faa6 	bl	80016f4 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe faa2 	bl	80016f4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e05f      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031be:	4b32      	ldr	r3, [pc, #200]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x670>
 80031ca:	e057      	b.n	800327c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2d      	ldr	r2, [pc, #180]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80031d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe fa8c 	bl	80016f4 <HAL_GetTick>
 80031dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe fa88 	bl	80016f4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e045      	b.n	800327e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a4>
 80031fe:	e03d      	b.n	800327c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_OscConfig+0x74c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b01      	cmp	r3, #1
 8003212:	d031      	beq.n	8003278 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0203 	and.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d12a      	bne.n	8003278 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d122      	bne.n	8003278 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d11a      	bne.n	8003278 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	0a5b      	lsrs	r3, r3, #9
 8003246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d111      	bne.n	8003278 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0e1b      	lsrs	r3, r3, #24
 800326a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3730      	adds	r7, #48	; 0x30
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	58024400 	.word	0x58024400
 800328c:	fffffc0c 	.word	0xfffffc0c
 8003290:	ffff0007 	.word	0xffff0007

08003294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e19c      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b8a      	ldr	r3, [pc, #552]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d910      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b87      	ldr	r3, [pc, #540]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 020f 	bic.w	r2, r3, #15
 80032be:	4985      	ldr	r1, [pc, #532]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b83      	ldr	r3, [pc, #524]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e184      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	4b7b      	ldr	r3, [pc, #492]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	4975      	ldr	r1, [pc, #468]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003302:	4313      	orrs	r3, r2
 8003304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	4b70      	ldr	r3, [pc, #448]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331e:	429a      	cmp	r2, r3
 8003320:	d908      	bls.n	8003334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003322:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	496a      	ldr	r1, [pc, #424]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003330:	4313      	orrs	r3, r2
 8003332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800334c:	429a      	cmp	r2, r3
 800334e:	d908      	bls.n	8003362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003350:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	495e      	ldr	r1, [pc, #376]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 800335e:	4313      	orrs	r3, r2
 8003360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d010      	beq.n	8003390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800337a:	429a      	cmp	r2, r3
 800337c:	d908      	bls.n	8003390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800337e:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4953      	ldr	r1, [pc, #332]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 800338c:	4313      	orrs	r3, r2
 800338e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d908      	bls.n	80033be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f023 020f 	bic.w	r2, r3, #15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4947      	ldr	r1, [pc, #284]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d055      	beq.n	8003476 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4940      	ldr	r1, [pc, #256]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033e4:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d121      	bne.n	8003434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0f6      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d107      	bne.n	800340c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d115      	bne.n	8003434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0ea      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003414:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0de      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d6      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f023 0207 	bic.w	r2, r3, #7
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4925      	ldr	r1, [pc, #148]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003442:	4313      	orrs	r3, r2
 8003444:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe f955 	bl	80016f4 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344c:	e00a      	b.n	8003464 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344e:	f7fe f951 	bl	80016f4 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0be      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	429a      	cmp	r2, r3
 8003474:	d1eb      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	429a      	cmp	r2, r3
 8003490:	d208      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f023 020f 	bic.w	r2, r3, #15
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_RCC_ClockConfig+0x244>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d214      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 020f 	bic.w	r2, r3, #15
 80034ba:	4906      	ldr	r1, [pc, #24]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_RCC_ClockConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e086      	b.n	80035e2 <HAL_RCC_ClockConfig+0x34e>
 80034d4:	52002000 	.word	0x52002000
 80034d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	4b3f      	ldr	r3, [pc, #252]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d208      	bcs.n	800350a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034f8:	4b3c      	ldr	r3, [pc, #240]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	4939      	ldr	r1, [pc, #228]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003506:	4313      	orrs	r3, r2
 8003508:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003522:	429a      	cmp	r2, r3
 8003524:	d208      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	492e      	ldr	r1, [pc, #184]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003534:	4313      	orrs	r3, r2
 8003536:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003550:	429a      	cmp	r2, r3
 8003552:	d208      	bcs.n	8003566 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4922      	ldr	r1, [pc, #136]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003562:	4313      	orrs	r3, r2
 8003564:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800357e:	429a      	cmp	r2, r3
 8003580:	d208      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4917      	ldr	r1, [pc, #92]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 8003590:	4313      	orrs	r3, r2
 8003592:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003594:	f000 f834 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	4912      	ldr	r1, [pc, #72]	; (80035f0 <HAL_RCC_ClockConfig+0x35c>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_RCC_ClockConfig+0x358>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_RCC_ClockConfig+0x35c>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_RCC_ClockConfig+0x360>)
 80035ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035cc:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x364>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x368>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f842 	bl	8001660 <HAL_InitTick>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	58024400 	.word	0x58024400
 80035f0:	0800ce20 	.word	0x0800ce20
 80035f4:	2400002c 	.word	0x2400002c
 80035f8:	24000028 	.word	0x24000028
 80035fc:	24000030 	.word	0x24000030

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003606:	4bb3      	ldr	r3, [pc, #716]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800360e:	2b18      	cmp	r3, #24
 8003610:	f200 8155 	bhi.w	80038be <HAL_RCC_GetSysClockFreq+0x2be>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	08003681 	.word	0x08003681
 8003620:	080038bf 	.word	0x080038bf
 8003624:	080038bf 	.word	0x080038bf
 8003628:	080038bf 	.word	0x080038bf
 800362c:	080038bf 	.word	0x080038bf
 8003630:	080038bf 	.word	0x080038bf
 8003634:	080038bf 	.word	0x080038bf
 8003638:	080038bf 	.word	0x080038bf
 800363c:	080036a7 	.word	0x080036a7
 8003640:	080038bf 	.word	0x080038bf
 8003644:	080038bf 	.word	0x080038bf
 8003648:	080038bf 	.word	0x080038bf
 800364c:	080038bf 	.word	0x080038bf
 8003650:	080038bf 	.word	0x080038bf
 8003654:	080038bf 	.word	0x080038bf
 8003658:	080038bf 	.word	0x080038bf
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080038bf 	.word	0x080038bf
 8003664:	080038bf 	.word	0x080038bf
 8003668:	080038bf 	.word	0x080038bf
 800366c:	080038bf 	.word	0x080038bf
 8003670:	080038bf 	.word	0x080038bf
 8003674:	080038bf 	.word	0x080038bf
 8003678:	080038bf 	.word	0x080038bf
 800367c:	080036b3 	.word	0x080036b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003680:	4b94      	ldr	r3, [pc, #592]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800368c:	4b91      	ldr	r3, [pc, #580]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	08db      	lsrs	r3, r3, #3
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	4a90      	ldr	r2, [pc, #576]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800369e:	e111      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036a0:	4b8d      	ldr	r3, [pc, #564]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036a2:	61bb      	str	r3, [r7, #24]
    break;
 80036a4:	e10e      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036a6:	4b8d      	ldr	r3, [pc, #564]	; (80038dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036a8:	61bb      	str	r3, [r7, #24]
    break;
 80036aa:	e10b      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80036ac:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ae:	61bb      	str	r3, [r7, #24]
    break;
 80036b0:	e108      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036bc:	4b85      	ldr	r3, [pc, #532]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036c8:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036d2:	4b80      	ldr	r3, [pc, #512]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	08db      	lsrs	r3, r3, #3
 80036d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80e1 	beq.w	80038b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f000 8083 	beq.w	8003804 <HAL_RCC_GetSysClockFreq+0x204>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b02      	cmp	r3, #2
 8003702:	f200 80a1 	bhi.w	8003848 <HAL_RCC_GetSysClockFreq+0x248>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x114>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d056      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003712:	e099      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003714:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02d      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003720:	4b6c      	ldr	r3, [pc, #432]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	4a6b      	ldr	r2, [pc, #428]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
 8003730:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b62      	ldr	r3, [pc, #392]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375a:	ed97 6a02 	vldr	s12, [r7, #8]
 800375e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800377a:	e087      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	ed97 6a02 	vldr	s12, [r7, #8]
 80037a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037be:	e065      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003802:	e043      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a02 	vldr	s12, [r7, #8]
 800382a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003846:	e021      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a02 	vldr	s12, [r7, #8]
 800386e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800388a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	0a5b      	lsrs	r3, r3, #9
 8003892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003896:	3301      	adds	r3, #1
 8003898:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b0:	ee17 3a90 	vmov	r3, s15
 80038b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80038b6:	e005      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    break;
 80038bc:	e002      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038c0:	61bb      	str	r3, [r7, #24]
    break;
 80038c2:	bf00      	nop
  }

  return sysclockfreq;
 80038c4:	69bb      	ldr	r3, [r7, #24]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
 80038d8:	03d09000 	.word	0x03d09000
 80038dc:	003d0900 	.word	0x003d0900
 80038e0:	007a1200 	.word	0x007a1200
 80038e4:	46000000 	.word	0x46000000
 80038e8:	4c742400 	.word	0x4c742400
 80038ec:	4a742400 	.word	0x4a742400
 80038f0:	4af42400 	.word	0x4af42400

080038f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038fa:	f7ff fe81 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_RCC_GetHCLKFreq+0x50>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490f      	ldr	r1, [pc, #60]	; (8003948 <HAL_RCC_GetHCLKFreq+0x54>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_RCC_GetHCLKFreq+0x50>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_GetHCLKFreq+0x54>)
 8003922:	5cd3      	ldrb	r3, [r2, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a07      	ldr	r2, [pc, #28]	; (800394c <HAL_RCC_GetHCLKFreq+0x58>)
 8003930:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <HAL_RCC_GetHCLKFreq+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	58024400 	.word	0x58024400
 8003948:	0800ce20 	.word	0x0800ce20
 800394c:	2400002c 	.word	0x2400002c
 8003950:	24000028 	.word	0x24000028

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003958:	f7ff ffcc 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4904      	ldr	r1, [pc, #16]	; (800397c <HAL_RCC_GetPCLK1Freq+0x28>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	58024400 	.word	0x58024400
 800397c:	0800ce20 	.word	0x0800ce20

08003980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003984:	f7ff ffb6 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4904      	ldr	r1, [pc, #16]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	58024400 	.word	0x58024400
 80039a8:	0800ce20 	.word	0x0800ce20

080039ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039b8:	2300      	movs	r3, #0
 80039ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03f      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039d0:	d02a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039d6:	d824      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039dc:	d018      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039e2:	d81e      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ec:	d007      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039ee:	e018      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4bab      	ldr	r3, [pc, #684]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4aaa      	ldr	r2, [pc, #680]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039fc:	e015      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2102      	movs	r1, #2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 feff 	bl	8005808 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a0e:	e00c      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3324      	adds	r3, #36	; 0x24
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 ffa8 	bl	800596c <RCCEx_PLL3_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a20:	e003      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
      break;
 8003a26:	e000      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a30:	4b9b      	ldr	r3, [pc, #620]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	4998      	ldr	r1, [pc, #608]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	650b      	str	r3, [r1, #80]	; 0x50
 8003a42:	e001      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d03d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d826      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a79 	.word	0x08003a79
 8003a68:	08003a87 	.word	0x08003a87
 8003a6c:	08003a99 	.word	0x08003a99
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003ab1 	.word	0x08003ab1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a78:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4a88      	ldr	r2, [pc, #544]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a84:	e015      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 febb 	bl	8005808 <RCCEx_PLL2_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a96:	e00c      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 ff64 	bl	800596c <RCCEx_PLL3_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	75fb      	strb	r3, [r7, #23]
      break;
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab8:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	f023 0207 	bic.w	r2, r3, #7
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	4976      	ldr	r1, [pc, #472]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	650b      	str	r3, [r1, #80]	; 0x50
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d051      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ae2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003ae6:	d036      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ae8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003aec:	d830      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af2:	d032      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af8:	d82a      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003afa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003afe:	d02e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003b00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b04:	d824      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0a:	d018      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b10:	d81e      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1a:	d007      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b1c:	e018      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1e:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4a5f      	ldr	r2, [pc, #380]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b2a:	e019      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fe68 	bl	8005808 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b3c:	e010      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3324      	adds	r3, #36	; 0x24
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 ff11 	bl	800596c <RCCEx_PLL3_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b4e:	e007      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
      break;
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b66:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b74:	494a      	ldr	r1, [pc, #296]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	658b      	str	r3, [r1, #88]	; 0x58
 8003b7a:	e001      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d051      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b96:	d036      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003b98:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b9c:	d830      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba2:	d032      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba8:	d82a      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003baa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bae:	d02e      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003bb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bb4:	d824      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bba:	d018      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003bbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bc0:	d81e      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003bc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bca:	d007      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003bcc:	e018      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bda:	e019      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fe10 	bl	8005808 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bec:	e010      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3324      	adds	r3, #36	; 0x24
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 feb9 	bl	800596c <RCCEx_PLL3_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bfe:	e007      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
      break;
 8003c04:	e004      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c24:	491e      	ldr	r1, [pc, #120]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	658b      	str	r3, [r1, #88]	; 0x58
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d035      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	2b30      	cmp	r3, #48	; 0x30
 8003c42:	d01c      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c44:	2b30      	cmp	r3, #48	; 0x30
 8003c46:	d817      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d813      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d10f      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c64:	e00e      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fdcb 	bl	8005808 <RCCEx_PLL2_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c76:	e005      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	4902      	ldr	r1, [pc, #8]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c9e:	bf00      	nop
 8003ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d047      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cbc:	d030      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc2:	d82a      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cc8:	d02c      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003cca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cce:	d824      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd4:	d018      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cda:	d81e      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d007      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ce6:	e018      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce8:	4bac      	ldr	r3, [pc, #688]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	4aab      	ldr	r2, [pc, #684]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e017      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fd83 	bl	8005808 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d06:	e00e      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fe2c 	bl	800596c <RCCEx_PLL3_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d18:	e005      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d20:	bf00      	nop
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d2c:	4b9b      	ldr	r3, [pc, #620]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	4998      	ldr	r1, [pc, #608]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d3e:	e001      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d049      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d02e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d5e:	d828      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d64:	d02a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d6a:	d822      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d70:	d026      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d76:	d81c      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d7c:	d010      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d82:	d816      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01d      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d111      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3304      	adds	r3, #4
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 fd37 	bl	8005808 <RCCEx_PLL2_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d9e:	e012      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3324      	adds	r3, #36	; 0x24
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fde0 	bl	800596c <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003db0:	e009      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
      break;
 8003db6:	e006      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003db8:	bf00      	nop
 8003dba:	e004      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e002      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dcc:	4b73      	ldr	r3, [pc, #460]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	4970      	ldr	r1, [pc, #448]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8003dde:	e001      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d04b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dfa:	d02e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e00:	d828      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d02a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d822      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e12:	d026      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e18:	d81c      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e24:	d816      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01d      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fce6 	bl	8005808 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e40:	e012      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fd8f 	bl	800596c <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e52:	e009      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e004      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e6e:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e7c:	4947      	ldr	r1, [pc, #284]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	658b      	str	r3, [r1, #88]	; 0x58
 8003e82:	e001      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9c:	d00e      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d814      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eac:	d10f      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 fca0 	bl	8005808 <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003edc:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee8:	492c      	ldr	r1, [pc, #176]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	650b      	str	r3, [r1, #80]	; 0x50
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d032      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d81b      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f21 	.word	0x08003f21
 8003f18:	08003f2f 	.word	0x08003f2f
 8003f1c:	08003f47 	.word	0x08003f47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f2c:	e00c      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fc67 	bl	8005808 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f3e:	e003      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4910      	ldr	r1, [pc, #64]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f60:	e001      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 808a 	beq.w	8004088 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f80:	f7fd fbb8 	bl	80016f4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f86:	e00d      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fd fbb4 	bl	80016f4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d906      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	75fb      	strb	r3, [r7, #23]
        break;
 8003f9a:	e009      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa4:	4bb9      	ldr	r3, [pc, #740]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0eb      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d166      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fb6:	4bb6      	ldr	r3, [pc, #728]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fc0:	4053      	eors	r3, r2
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d013      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fca:	4bb1      	ldr	r3, [pc, #708]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd4:	4bae      	ldr	r3, [pc, #696]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4aad      	ldr	r2, [pc, #692]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe0:	4bab      	ldr	r3, [pc, #684]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4aaa      	ldr	r2, [pc, #680]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fec:	4aa8      	ldr	r2, [pc, #672]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffc:	d115      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fb79 	bl	80016f4 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004004:	e00b      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fd fb75 	bl	80016f4 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d902      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	75fb      	strb	r3, [r7, #23]
            break;
 800401c:	e005      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800401e:	4b9c      	ldr	r3, [pc, #624]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ed      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d126      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403e:	d10d      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004040:	4b93      	ldr	r3, [pc, #588]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800404e:	0919      	lsrs	r1, r3, #4
 8004050:	4b90      	ldr	r3, [pc, #576]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004052:	400b      	ands	r3, r1
 8004054:	498e      	ldr	r1, [pc, #568]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	610b      	str	r3, [r1, #16]
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800405c:	4b8c      	ldr	r3, [pc, #560]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4a8b      	ldr	r2, [pc, #556]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004062:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004066:	6113      	str	r3, [r2, #16]
 8004068:	4b89      	ldr	r3, [pc, #548]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800406a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004076:	4986      	ldr	r1, [pc, #536]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	670b      	str	r3, [r1, #112]	; 0x70
 800407c:	e004      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	75bb      	strb	r3, [r7, #22]
 8004082:	e001      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d07e      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	2b28      	cmp	r3, #40	; 0x28
 800409a:	d867      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	08004173 	.word	0x08004173
 80040a8:	0800416d 	.word	0x0800416d
 80040ac:	0800416d 	.word	0x0800416d
 80040b0:	0800416d 	.word	0x0800416d
 80040b4:	0800416d 	.word	0x0800416d
 80040b8:	0800416d 	.word	0x0800416d
 80040bc:	0800416d 	.word	0x0800416d
 80040c0:	0800416d 	.word	0x0800416d
 80040c4:	08004149 	.word	0x08004149
 80040c8:	0800416d 	.word	0x0800416d
 80040cc:	0800416d 	.word	0x0800416d
 80040d0:	0800416d 	.word	0x0800416d
 80040d4:	0800416d 	.word	0x0800416d
 80040d8:	0800416d 	.word	0x0800416d
 80040dc:	0800416d 	.word	0x0800416d
 80040e0:	0800416d 	.word	0x0800416d
 80040e4:	0800415b 	.word	0x0800415b
 80040e8:	0800416d 	.word	0x0800416d
 80040ec:	0800416d 	.word	0x0800416d
 80040f0:	0800416d 	.word	0x0800416d
 80040f4:	0800416d 	.word	0x0800416d
 80040f8:	0800416d 	.word	0x0800416d
 80040fc:	0800416d 	.word	0x0800416d
 8004100:	0800416d 	.word	0x0800416d
 8004104:	08004173 	.word	0x08004173
 8004108:	0800416d 	.word	0x0800416d
 800410c:	0800416d 	.word	0x0800416d
 8004110:	0800416d 	.word	0x0800416d
 8004114:	0800416d 	.word	0x0800416d
 8004118:	0800416d 	.word	0x0800416d
 800411c:	0800416d 	.word	0x0800416d
 8004120:	0800416d 	.word	0x0800416d
 8004124:	08004173 	.word	0x08004173
 8004128:	0800416d 	.word	0x0800416d
 800412c:	0800416d 	.word	0x0800416d
 8004130:	0800416d 	.word	0x0800416d
 8004134:	0800416d 	.word	0x0800416d
 8004138:	0800416d 	.word	0x0800416d
 800413c:	0800416d 	.word	0x0800416d
 8004140:	0800416d 	.word	0x0800416d
 8004144:	08004173 	.word	0x08004173
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fb5a 	bl	8005808 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004158:	e00c      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3324      	adds	r3, #36	; 0x24
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fc03 	bl	800596c <RCCEx_PLL3_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800417a:	4b45      	ldr	r3, [pc, #276]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	4942      	ldr	r1, [pc, #264]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	654b      	str	r3, [r1, #84]	; 0x54
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d037      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d820      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041ef 	.word	0x080041ef
 80041b0:	080041c5 	.word	0x080041c5
 80041b4:	080041d7 	.word	0x080041d7
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041ef 	.word	0x080041ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 fb1c 	bl	8005808 <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041d4:	e00c      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fbc5 	bl	800596c <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80041ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f023 0207 	bic.w	r2, r3, #7
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4923      	ldr	r1, [pc, #140]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	654b      	str	r3, [r1, #84]	; 0x54
 8004208:	e001      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d040      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004220:	2b05      	cmp	r3, #5
 8004222:	d821      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	0800426f 	.word	0x0800426f
 8004230:	08004245 	.word	0x08004245
 8004234:	08004257 	.word	0x08004257
 8004238:	0800426f 	.word	0x0800426f
 800423c:	0800426f 	.word	0x0800426f
 8004240:	0800426f 	.word	0x0800426f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fadc 	bl	8005808 <RCCEx_PLL2_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004254:	e00c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3324      	adds	r3, #36	; 0x24
 800425a:	2101      	movs	r1, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f001 fb85 	bl	800596c <RCCEx_PLL3_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
      break;
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800426e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d110      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f023 0207 	bic.w	r2, r3, #7
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	4902      	ldr	r1, [pc, #8]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	658b      	str	r3, [r1, #88]	; 0x58
 800428a:	e007      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800428c:	58024800 	.word	0x58024800
 8004290:	58024400 	.word	0x58024400
 8004294:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d04b      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b2:	d02e      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80042b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b8:	d828      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d02a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c4:	d822      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042ca:	d026      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80042cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042d0:	d81c      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d6:	d010      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042dc:	d816      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01d      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e6:	d111      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fa8a 	bl	8005808 <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042f8:	e012      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3324      	adds	r3, #36	; 0x24
 80042fe:	2102      	movs	r1, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fb33 	bl	800596c <RCCEx_PLL3_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800430a:	e009      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
      break;
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004312:	bf00      	nop
 8004314:	e004      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004316:	bf00      	nop
 8004318:	e002      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004326:	4bb2      	ldr	r3, [pc, #712]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	49ae      	ldr	r1, [pc, #696]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004336:	4313      	orrs	r3, r2
 8004338:	654b      	str	r3, [r1, #84]	; 0x54
 800433a:	e001      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d04b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004356:	d02e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004358:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800435c:	d828      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004362:	d02a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d822      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800436a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436e:	d026      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004374:	d81c      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437a:	d010      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004380:	d816      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01d      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438a:	d111      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 fa38 	bl	8005808 <RCCEx_PLL2_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800439c:	e012      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3324      	adds	r3, #36	; 0x24
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fae1 	bl	800596c <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043ae:	e009      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	e006      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043b6:	bf00      	nop
 80043b8:	e004      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043ba:	bf00      	nop
 80043bc:	e002      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043be:	bf00      	nop
 80043c0:	e000      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ca:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	4985      	ldr	r1, [pc, #532]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	658b      	str	r3, [r1, #88]	; 0x58
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d04b      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043fa:	d02e      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80043fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004400:	d828      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004406:	d02a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440c:	d822      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800440e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004412:	d026      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004414:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004418:	d81c      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800441a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441e:	d010      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004424:	d816      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01d      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442e:	d111      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f9e6 	bl	8005808 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004440:	e012      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	2102      	movs	r1, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f001 fa8f 	bl	800596c <RCCEx_PLL3_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004452:	e009      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	75fb      	strb	r3, [r7, #23]
      break;
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800445a:	bf00      	nop
 800445c:	e004      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800446e:	4b60      	ldr	r3, [pc, #384]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447c:	495c      	ldr	r1, [pc, #368]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800447e:	4313      	orrs	r3, r2
 8004480:	658b      	str	r3, [r1, #88]	; 0x58
 8004482:	e001      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
 8004486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d10a      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3324      	adds	r3, #36	; 0x24
 80044a2:	2102      	movs	r1, #2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 fa61 	bl	800596c <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80044b4:	4b4e      	ldr	r3, [pc, #312]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c0:	494b      	ldr	r1, [pc, #300]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044dc:	d10a      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3324      	adds	r3, #36	; 0x24
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 fa41 	bl	800596c <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044f4:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	493b      	ldr	r1, [pc, #236]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004504:	4313      	orrs	r3, r2
 8004506:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d034      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800451a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800451e:	d01d      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004524:	d817      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004530:	e011      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f965 	bl	8005808 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004542:	e00c      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3324      	adds	r3, #36	; 0x24
 8004548:	2102      	movs	r1, #2
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fa0e 	bl	800596c <RCCEx_PLL3_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
      break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800455c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004564:	4b22      	ldr	r3, [pc, #136]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004572:	491f      	ldr	r1, [pc, #124]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004574:	4313      	orrs	r3, r2
 8004576:	658b      	str	r3, [r1, #88]	; 0x58
 8004578:	e001      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d036      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004590:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004594:	d01c      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800459a:	d816      	bhi.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800459c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a0:	d003      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80045a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a6:	d007      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80045a8:	e00f      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045b6:	e00c      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	2101      	movs	r1, #1
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f9d4 	bl	800596c <RCCEx_PLL3_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
      break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80045d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e6:	4902      	ldr	r1, [pc, #8]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	654b      	str	r3, [r1, #84]	; 0x54
 80045ec:	e004      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80045ee:	bf00      	nop
 80045f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d029      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d007      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004612:	e00f      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004614:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4a60      	ldr	r2, [pc, #384]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800461a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004620:	e00b      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	2102      	movs	r1, #2
 8004628:	4618      	mov	r0, r3
 800462a:	f001 f8ed 	bl	8005808 <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004632:	e002      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
      break;
 8004638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004640:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	4953      	ldr	r1, [pc, #332]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004652:	e001      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3324      	adds	r3, #36	; 0x24
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f001 f97e 	bl	800596c <RCCEx_PLL3_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d030      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468e:	d017      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004694:	d811      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469a:	d013      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d80b      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d106      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ac:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4a3a      	ldr	r2, [pc, #232]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046b8:	e007      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
      break;
 80046be:	e004      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046c0:	bf00      	nop
 80046c2:	e002      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80046c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046d0:	4b32      	ldr	r3, [pc, #200]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046dc:	492f      	ldr	r1, [pc, #188]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	654b      	str	r3, [r1, #84]	; 0x54
 80046e2:	e001      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004700:	4926      	ldr	r1, [pc, #152]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471e:	491f      	ldr	r1, [pc, #124]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004730:	4b1a      	ldr	r3, [pc, #104]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004736:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800473a:	6113      	str	r3, [r2, #16]
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004746:	4915      	ldr	r1, [pc, #84]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	da08      	bge.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004780:	4906      	ldr	r1, [pc, #24]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004782:	4313      	orrs	r3, r2
 8004784:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004786:	7dbb      	ldrb	r3, [r7, #22]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	58024400 	.word	0x58024400

080047a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b090      	sub	sp, #64	; 0x40
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ae:	f040 8089 	bne.w	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80047b2:	4b95      	ldr	r3, [pc, #596]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d87d      	bhi.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047dd 	.word	0x080047dd
 80047cc:	08004801 	.word	0x08004801
 80047d0:	08004825 	.word	0x08004825
 80047d4:	080048b9 	.word	0x080048b9
 80047d8:	08004849 	.word	0x08004849

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047dc:	4b8a      	ldr	r3, [pc, #552]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047e8:	d107      	bne.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 feb8 	bl	8005564 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047f8:	e3ed      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047fe:	e3ea      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004800:	4b81      	ldr	r3, [pc, #516]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480c:	d107      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800480e:	f107 0318 	add.w	r3, r7, #24
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fbfe 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800481c:	e3db      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004822:	e3d8      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004824:	4b78      	ldr	r3, [pc, #480]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004830:	d107      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004832:	f107 030c 	add.w	r3, r7, #12
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fd40 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004840:	e3c9      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004846:	e3c6      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004848:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004850:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004852:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d10c      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	4a67      	ldr	r2, [pc, #412]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004876:	e01e      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004878:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004884:	d106      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800488c:	d102      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800488e:	4b60      	ldr	r3, [pc, #384]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004892:	e010      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004894:	4b5c      	ldr	r3, [pc, #368]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a8:	d102      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048aa:	4b5a      	ldr	r3, [pc, #360]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80048ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ae:	e002      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048b4:	e38f      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80048b6:	e38e      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048b8:	4b57      	ldr	r3, [pc, #348]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048bc:	e38b      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048c2:	e388      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	f040 80a7 	bne.w	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80048ce:	4b4e      	ldr	r3, [pc, #312]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80048d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048de:	d054      	beq.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048e6:	f200 808b 	bhi.w	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048f0:	f000 8083 	beq.w	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048fa:	f200 8081 	bhi.w	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004904:	d02f      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490c:	d878      	bhi.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800491a:	d012      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800491c:	e070      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800491e:	4b3a      	ldr	r3, [pc, #232]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800492a:	d107      	bne.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800492c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fe17 	bl	8005564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800493a:	e34c      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004940:	e349      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800494a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800494e:	d107      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004950:	f107 0318 	add.w	r3, r7, #24
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fb5d 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800495e:	e33a      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004964:	e337      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004966:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004972:	d107      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fc9f 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004982:	e328      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004988:	e325      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800498a:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004992:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d10c      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049a6:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b8:	e01e      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ce:	d102      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d4:	e010      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e2:	d106      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ea:	d102      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049f6:	e2ee      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80049f8:	e2ed      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049fa:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049fe:	e2ea      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a04:	e2e7      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	03d09000 	.word	0x03d09000
 8004a10:	003d0900 	.word	0x003d0900
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	f040 809c 	bne.w	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a26:	4b9e      	ldr	r3, [pc, #632]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a36:	d054      	beq.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3e:	f200 808b 	bhi.w	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a48:	f000 8083 	beq.w	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a52:	f200 8081 	bhi.w	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a5c:	d02f      	beq.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a64:	d878      	bhi.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a72:	d012      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a74:	e070      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a76:	4b8a      	ldr	r3, [pc, #552]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a82:	d107      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fd6b 	bl	8005564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a92:	e2a0      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a98:	e29d      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a9a:	4b81      	ldr	r3, [pc, #516]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa8:	f107 0318 	add.w	r3, r7, #24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fab1 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004ab6:	e28e      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004abc:	e28b      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004abe:	4b78      	ldr	r3, [pc, #480]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aca:	d107      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004acc:	f107 030c 	add.w	r3, r7, #12
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fbf3 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ada:	e27c      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae0:	e279      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ae2:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004aec:	4b6c      	ldr	r3, [pc, #432]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d10c      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004afe:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	4a66      	ldr	r2, [pc, #408]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b10:	e01e      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b26:	d102      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b28:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2c:	e010      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b42:	d102      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b44:	4b59      	ldr	r3, [pc, #356]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b4e:	e242      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004b50:	e241      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b52:	4b57      	ldr	r3, [pc, #348]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b56:	e23e      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b5c:	e23b      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	f040 80a6 	bne.w	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b68:	4b4d      	ldr	r3, [pc, #308]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b78:	d054      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b80:	f200 808b 	bhi.w	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b8a:	f000 8083 	beq.w	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b94:	f200 8081 	bhi.w	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	d02f      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba6:	d878      	bhi.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d012      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004bb6:	e070      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fcca 	bl	8005564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bd4:	e1ff      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bda:	e1fc      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bdc:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be8:	d107      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bea:	f107 0318 	add.w	r3, r7, #24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fa10 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bf8:	e1ed      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bfe:	e1ea      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fb52 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c1c:	e1db      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c22:	e1d8      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	08db      	lsrs	r3, r3, #3
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c52:	e01e      	b.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d106      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c68:	d102      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6e:	e010      	b.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c84:	d102      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8a:	e002      	b.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c90:	e1a1      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004c92:	e1a0      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c98:	e19d      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c9e:	e19a      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	03d09000 	.word	0x03d09000
 8004ca8:	003d0900 	.word	0x003d0900
 8004cac:	007a1200 	.word	0x007a1200
 8004cb0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cba:	d173      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004cbc:	4b9a      	ldr	r3, [pc, #616]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ccc:	d02f      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd4:	d863      	bhi.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d012      	beq.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004ce4:	e05b      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ce6:	4b90      	ldr	r3, [pc, #576]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cf4:	f107 0318 	add.w	r3, r7, #24
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f98b 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d02:	e168      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d08:	e165      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d0a:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d16:	d107      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d18:	f107 030c 	add.w	r3, r7, #12
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 facd 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d26:	e156      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d2c:	e153      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d2e:	4b7e      	ldr	r3, [pc, #504]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d38:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d10c      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d4a:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	4a75      	ldr	r2, [pc, #468]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5c:	e01e      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d5e:	4b72      	ldr	r3, [pc, #456]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d72:	d102      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d74:	4b6e      	ldr	r3, [pc, #440]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	e010      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d7a:	4b6b      	ldr	r3, [pc, #428]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d86:	d106      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d90:	4b68      	ldr	r3, [pc, #416]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d94:	e002      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d9a:	e11c      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d9c:	e11b      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da2:	e118      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004daa:	d133      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004dac:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d012      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004dc4:	e023      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dc6:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fbc3 	bl	8005564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004de2:	e0f8      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de8:	e0f5      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dea:	4b4f      	ldr	r3, [pc, #316]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df6:	d107      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004df8:	f107 0318 	add.w	r3, r7, #24
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f909 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e06:	e0e6      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e0c:	e0e3      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e12:	e0e0      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1a:	f040 808d 	bne.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e1e:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e2e:	d06b      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e36:	d874      	bhi.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d056      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d86c      	bhi.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e56:	d864      	bhi.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5e:	d021      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e66:	d85c      	bhi.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d004      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e74:	d004      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004e76:	e054      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e78:	f000 f8b6 	bl	8004fe8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e7c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e7e:	e0aa      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e8e:	f107 0318 	add.w	r3, r7, #24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f8be 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e9c:	e09b      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea2:	e098      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fa00 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ec0:	e089      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec6:	e086      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ee6:	e076      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eec:	e073      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d102      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f00:	e069      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f06:	e066      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f14:	d102      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f1a:	e05c      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f20:	e059      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f26:	e056      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	03d09000 	.word	0x03d09000
 8004f30:	003d0900 	.word	0x003d0900
 8004f34:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3e:	d148      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f50:	d02a      	beq.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f58:	d838      	bhi.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f66:	d00d      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004f68:	e030      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f76:	d102      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f7c:	e02b      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f82:	e028      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fae4 	bl	8005564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fa0:	e019      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa6:	e016      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fb6:	f107 0318 	add.w	r3, r7, #24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f82a 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fc4:	e007      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fca:	e004      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd0:	e001      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3740      	adds	r7, #64	; 0x40
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	007a1200 	.word	0x007a1200

08004fe8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fec:	f7fe fc82 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4904      	ldr	r1, [pc, #16]	; (8005010 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	58024400 	.word	0x58024400
 8005010:	0800ce20 	.word	0x0800ce20

08005014 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800501c:	4ba1      	ldr	r3, [pc, #644]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005026:	4b9f      	ldr	r3, [pc, #636]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	0b1b      	lsrs	r3, r3, #12
 800502c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005030:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005032:	4b9c      	ldr	r3, [pc, #624]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800503e:	4b99      	ldr	r3, [pc, #612]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	08db      	lsrs	r3, r3, #3
 8005044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8111 	beq.w	8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b02      	cmp	r3, #2
 8005066:	f000 8083 	beq.w	8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b02      	cmp	r3, #2
 800506e:	f200 80a1 	bhi.w	80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d056      	beq.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800507e:	e099      	b.n	80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005080:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d02d      	beq.n	80050e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800508c:	4b85      	ldr	r3, [pc, #532]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	08db      	lsrs	r3, r3, #3
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	4a84      	ldr	r2, [pc, #528]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
 800509c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b6:	4b7b      	ldr	r3, [pc, #492]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050e6:	e087      	b.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fa:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	ed97 6a03 	vldr	s12, [r7, #12]
 800510e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800512a:	e065      	b.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800513a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513e:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005152:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800516e:	e043      	b.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005182:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a03 	vldr	s12, [r7, #12]
 8005196:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051b2:	e021      	b.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051f8:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	0a5b      	lsrs	r3, r3, #9
 80051fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800520e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005212:	edd7 6a07 	vldr	s13, [r7, #28]
 8005216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521e:	ee17 2a90 	vmov	r2, s15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005226:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800523c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005240:	edd7 6a07 	vldr	s13, [r7, #28]
 8005244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524c:	ee17 2a90 	vmov	r2, s15
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005254:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	0e1b      	lsrs	r3, r3, #24
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800526a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800526e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527a:	ee17 2a90 	vmov	r2, s15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
}
 8005296:	bf00      	nop
 8005298:	3724      	adds	r7, #36	; 0x24
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400
 80052a8:	03d09000 	.word	0x03d09000
 80052ac:	46000000 	.word	0x46000000
 80052b0:	4c742400 	.word	0x4c742400
 80052b4:	4a742400 	.word	0x4a742400
 80052b8:	4af42400 	.word	0x4af42400

080052bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052c4:	4ba1      	ldr	r3, [pc, #644]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052ce:	4b9f      	ldr	r3, [pc, #636]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	0d1b      	lsrs	r3, r3, #20
 80052d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052da:	4b9c      	ldr	r3, [pc, #624]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052e6:	4b99      	ldr	r3, [pc, #612]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8111 	beq.w	800552c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b02      	cmp	r3, #2
 800530e:	f000 8083 	beq.w	8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b02      	cmp	r3, #2
 8005316:	f200 80a1 	bhi.w	800545c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d056      	beq.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005326:	e099      	b.n	800545c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005328:	4b88      	ldr	r3, [pc, #544]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02d      	beq.n	8005390 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005334:	4b85      	ldr	r3, [pc, #532]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	08db      	lsrs	r3, r3, #3
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	4a84      	ldr	r2, [pc, #528]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535e:	4b7b      	ldr	r3, [pc, #492]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005372:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800538e:	e087      	b.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800539e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a2:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053d2:	e065      	b.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800555c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e6:	4b59      	ldr	r3, [pc, #356]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800540a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005416:	e043      	b.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005422:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542a:	4b48      	ldr	r3, [pc, #288]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543a:	ed97 6a03 	vldr	s12, [r7, #12]
 800543e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800545a:	e021      	b.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800555c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800546a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546e:	4b37      	ldr	r3, [pc, #220]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005482:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800549e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054a0:	4b2a      	ldr	r3, [pc, #168]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	0a5b      	lsrs	r3, r3, #9
 80054a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80054be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c6:	ee17 2a90 	vmov	r2, s15
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054ce:	4b1f      	ldr	r3, [pc, #124]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f4:	ee17 2a90 	vmov	r2, s15
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054fc:	4b13      	ldr	r3, [pc, #76]	; (800554c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	0e1b      	lsrs	r3, r3, #24
 8005502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005516:	edd7 6a07 	vldr	s13, [r7, #28]
 800551a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005522:	ee17 2a90 	vmov	r2, s15
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800552a:	e008      	b.n	800553e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
}
 800553e:	bf00      	nop
 8005540:	3724      	adds	r7, #36	; 0x24
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
 8005550:	03d09000 	.word	0x03d09000
 8005554:	46000000 	.word	0x46000000
 8005558:	4c742400 	.word	0x4c742400
 800555c:	4a742400 	.word	0x4a742400
 8005560:	4af42400 	.word	0x4af42400

08005564 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800556c:	4ba0      	ldr	r3, [pc, #640]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005576:	4b9e      	ldr	r3, [pc, #632]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005580:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005582:	4b9b      	ldr	r3, [pc, #620]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800558c:	4b98      	ldr	r3, [pc, #608]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800558e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005590:	08db      	lsrs	r3, r3, #3
 8005592:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8111 	beq.w	80057d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	f000 8083 	beq.w	80056be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	f200 80a1 	bhi.w	8005702 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d056      	beq.n	800567a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055cc:	e099      	b.n	8005702 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ce:	4b88      	ldr	r3, [pc, #544]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02d      	beq.n	8005636 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055da:	4b85      	ldr	r3, [pc, #532]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	4a83      	ldr	r2, [pc, #524]	; (80057f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005604:	4b7a      	ldr	r3, [pc, #488]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005614:	ed97 6a03 	vldr	s12, [r7, #12]
 8005618:	eddf 5a77 	vldr	s11, [pc, #476]	; 80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800561c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800562c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005630:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005634:	e087      	b.n	8005746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	ee07 3a90 	vmov	s15, r3
 800563c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005640:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005648:	4b69      	ldr	r3, [pc, #420]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005658:	ed97 6a03 	vldr	s12, [r7, #12]
 800565c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800566c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005678:	e065      	b.n	8005746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568c:	4b58      	ldr	r3, [pc, #352]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569c:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056bc:	e043      	b.n	8005746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	ee07 3a90 	vmov	s15, r3
 80056c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d0:	4b47      	ldr	r3, [pc, #284]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005700:	e021      	b.n	8005746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	ee07 3a90 	vmov	s15, r3
 8005708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005714:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005724:	ed97 6a03 	vldr	s12, [r7, #12]
 8005728:	eddf 5a33 	vldr	s11, [pc, #204]	; 80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800572c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005740:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005744:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005746:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	0a5b      	lsrs	r3, r3, #9
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800575c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005760:	edd7 6a07 	vldr	s13, [r7, #28]
 8005764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576c:	ee17 2a90 	vmov	r2, s15
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005774:	4b1e      	ldr	r3, [pc, #120]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800578e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	ee17 2a90 	vmov	r2, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	0e1b      	lsrs	r3, r3, #24
 80057a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c8:	ee17 2a90 	vmov	r2, s15
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057d0:	e008      	b.n	80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	3724      	adds	r7, #36	; 0x24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	58024400 	.word	0x58024400
 80057f4:	03d09000 	.word	0x03d09000
 80057f8:	46000000 	.word	0x46000000
 80057fc:	4c742400 	.word	0x4c742400
 8005800:	4a742400 	.word	0x4a742400
 8005804:	4af42400 	.word	0x4af42400

08005808 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005816:	4b53      	ldr	r3, [pc, #332]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d101      	bne.n	8005826 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e099      	b.n	800595a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005826:	4b4f      	ldr	r3, [pc, #316]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a4e      	ldr	r2, [pc, #312]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800582c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005832:	f7fb ff5f 	bl	80016f4 <HAL_GetTick>
 8005836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005838:	e008      	b.n	800584c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800583a:	f7fb ff5b 	bl	80016f4 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e086      	b.n	800595a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800584c:	4b45      	ldr	r3, [pc, #276]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005858:	4b42      	ldr	r3, [pc, #264]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	031b      	lsls	r3, r3, #12
 8005866:	493f      	ldr	r1, [pc, #252]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	628b      	str	r3, [r1, #40]	; 0x28
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	3b01      	subs	r3, #1
 800587c:	025b      	lsls	r3, r3, #9
 800587e:	b29b      	uxth	r3, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	3b01      	subs	r3, #1
 8005896:	061b      	lsls	r3, r3, #24
 8005898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800589c:	4931      	ldr	r1, [pc, #196]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058a2:	4b30      	ldr	r3, [pc, #192]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	492d      	ldr	r1, [pc, #180]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f023 0220 	bic.w	r2, r3, #32
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	4928      	ldr	r1, [pc, #160]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	4a26      	ldr	r2, [pc, #152]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058cc:	f023 0310 	bic.w	r3, r3, #16
 80058d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058d2:	4b24      	ldr	r3, [pc, #144]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <RCCEx_PLL2_Config+0x160>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	69d2      	ldr	r2, [r2, #28]
 80058de:	00d2      	lsls	r2, r2, #3
 80058e0:	4920      	ldr	r1, [pc, #128]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058e6:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058ec:	f043 0310 	orr.w	r3, r3, #16
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a19      	ldr	r2, [pc, #100]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005904:	e00f      	b.n	8005926 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800590c:	4b15      	ldr	r3, [pc, #84]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005918:	e005      	b.n	8005926 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a11      	ldr	r2, [pc, #68]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800592c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fb fedf 	bl	80016f4 <HAL_GetTick>
 8005936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005938:	e008      	b.n	800594c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800593a:	f7fb fedb 	bl	80016f4 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e006      	b.n	800595a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <RCCEx_PLL2_Config+0x15c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
 8005968:	ffff0007 	.word	0xffff0007

0800596c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800597a:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d101      	bne.n	800598a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e099      	b.n	8005abe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800598a:	4b4f      	ldr	r3, [pc, #316]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4e      	ldr	r2, [pc, #312]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005996:	f7fb fead 	bl	80016f4 <HAL_GetTick>
 800599a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800599c:	e008      	b.n	80059b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800599e:	f7fb fea9 	bl	80016f4 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e086      	b.n	8005abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059b0:	4b45      	ldr	r3, [pc, #276]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059bc:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	051b      	lsls	r3, r3, #20
 80059ca:	493f      	ldr	r1, [pc, #252]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	628b      	str	r3, [r1, #40]	; 0x28
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	3b01      	subs	r3, #1
 80059e0:	025b      	lsls	r3, r3, #9
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	061b      	lsls	r3, r3, #24
 80059fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a00:	4931      	ldr	r1, [pc, #196]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a06:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	492d      	ldr	r1, [pc, #180]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a18:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	4928      	ldr	r1, [pc, #160]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a2a:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a36:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <RCCEx_PLL3_Config+0x160>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	69d2      	ldr	r2, [r2, #28]
 8005a42:	00d2      	lsls	r2, r2, #3
 8005a44:	4920      	ldr	r1, [pc, #128]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a68:	e00f      	b.n	8005a8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d106      	bne.n	8005a7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a70:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a7c:	e005      	b.n	8005a8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a96:	f7fb fe2d 	bl	80016f4 <HAL_GetTick>
 8005a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a9e:	f7fb fe29 	bl	80016f4 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e006      	b.n	8005abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <RCCEx_PLL3_Config+0x15c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	ffff0007 	.word	0xffff0007

08005ad0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e075      	b.n	8005bce <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d105      	bne.n	8005afa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fb fb67 	bl	80011c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2204      	movs	r2, #4
 8005afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f868 	bl	8005bd8 <HAL_SD_InitCard>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e05d      	b.n	8005bce <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ff6f 	bl	80069fc <HAL_SD_GetCardStatus>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e052      	b.n	8005bce <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b28:	7e3b      	ldrb	r3, [r7, #24]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b2e:	7e7b      	ldrb	r3, [r7, #25]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10a      	bne.n	8005b52 <HAL_SD_Init+0x82>
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_SD_Init+0x78>
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b50:	e00b      	b.n	8005b6a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d104      	bne.n	8005b64 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58
 8005b62:	e002      	b.n	8005b6a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 f82d 	bl	8006bd0 <HAL_SD_ConfigWideBusOperation>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e026      	b.n	8005bce <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b80:	f7fb fdb8 	bl	80016f4 <HAL_GetTick>
 8005b84:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b86:	e011      	b.n	8005bac <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b88:	f7fb fdb4 	bl	80016f4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d109      	bne.n	8005bac <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b9e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e010      	b.n	8005bce <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f921 	bl	8006df4 <HAL_SD_GetCardState>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d1e7      	bne.n	8005b88 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b08d      	sub	sp, #52	; 0x34
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005bf4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005bf8:	f7fe fdd2 	bl	80047a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bfc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e06a      	b.n	8005cee <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	4a36      	ldr	r2, [pc, #216]	; (8005cf8 <HAL_SD_InitCard+0x120>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	466a      	mov	r2, sp
 8005c2c:	f107 0318 	add.w	r3, r7, #24
 8005c30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c34:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f002 fed0 	bl	80089e4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f002 ff13 	bl	8008a74 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c5a:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <HAL_SD_InitCard+0x124>)
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c62:	3301      	adds	r3, #1
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fb fd51 	bl	800170c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 f9b0 	bl	8006fd0 <SD_PowerON>
 8005c70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e02e      	b.n	8005cee <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 f8cf 	bl	8006e34 <SD_InitCard>
 8005c96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e01b      	b.n	8005cee <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f002 ff6e 	bl	8008ba0 <SDMMC_CmdBlockLength>
 8005cc4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00f      	beq.n	8005cec <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <HAL_SD_InitCard+0x128>)
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	372c      	adds	r7, #44	; 0x2c
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	014f8b59 	.word	0x014f8b59
 8005cfc:	00012110 	.word	0x00012110
 8005d00:	1fe00fff 	.word	0x1fe00fff

08005d04 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b092      	sub	sp, #72	; 0x48
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d12:	f7fb fcef 	bl	80016f4 <HAL_GetTick>
 8005d16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e167      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	f040 815a 	bne.w	8005ff8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	441a      	add	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d907      	bls.n	8005d68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e14e      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2200      	movs	r2, #0
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d002      	beq.n	8005d86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	025b      	lsls	r3, r3, #9
 8005d84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	025b      	lsls	r3, r3, #9
 8005d90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d92:	2390      	movs	r3, #144	; 0x90
 8005d94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d96:	2302      	movs	r3, #2
 8005d98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f107 0214 	add.w	r2, r7, #20
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f002 fecb 	bl	8008b48 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dc0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d90a      	bls.n	8005dde <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f002 ff29 	bl	8008c2c <SDMMC_CmdReadMultiBlock>
 8005dda:	6478      	str	r0, [r7, #68]	; 0x44
 8005ddc:	e009      	b.n	8005df2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 fefb 	bl	8008be6 <SDMMC_CmdReadSingleBlock>
 8005df0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d012      	beq.n	8005e1e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a84      	ldr	r2, [pc, #528]	; (8006010 <HAL_SD_ReadBlocks+0x30c>)
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0f3      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e22:	e058      	b.n	8005ed6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d033      	beq.n	8005e9a <HAL_SD_ReadBlocks+0x196>
 8005e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e34:	2b1f      	cmp	r3, #31
 8005e36:	d930      	bls.n	8005e9a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3c:	e027      	b.n	8005e8e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f002 fdf8 	bl	8008a38 <SDMMC_ReadFIFO>
 8005e48:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	3301      	adds	r3, #1
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	3301      	adds	r3, #1
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	3301      	adds	r3, #1
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	0e1b      	lsrs	r3, r3, #24
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	3301      	adds	r3, #1
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	2b07      	cmp	r3, #7
 8005e92:	d9d4      	bls.n	8005e3e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	3b20      	subs	r3, #32
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005e9a:	f7fb fc2b 	bl	80016f4 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d902      	bls.n	8005eb0 <HAL_SD_ReadBlocks+0x1ac>
 8005eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d112      	bne.n	8005ed6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a56      	ldr	r2, [pc, #344]	; (8006010 <HAL_SD_ReadBlocks+0x30c>)
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e097      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d09f      	beq.n	8005e24 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d022      	beq.n	8005f48 <HAL_SD_ReadBlocks+0x244>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d91f      	bls.n	8005f48 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d01b      	beq.n	8005f48 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f002 fef3 	bl	8008d00 <SDMMC_CmdStopTransfer>
 8005f1a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d012      	beq.n	8005f48 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	; (8006010 <HAL_SD_ReadBlocks+0x30c>)
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e05e      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d012      	beq.n	8005f7c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	; (8006010 <HAL_SD_ReadBlocks+0x30c>)
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f62:	f043 0208 	orr.w	r2, r3, #8
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e044      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d012      	beq.n	8005fb0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a20      	ldr	r2, [pc, #128]	; (8006010 <HAL_SD_ReadBlocks+0x30c>)
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	f043 0202 	orr.w	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e02a      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a13      	ldr	r2, [pc, #76]	; (8006010 <HAL_SD_ReadBlocks+0x30c>)
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	f043 0220 	orr.w	r2, r3, #32
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e010      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <HAL_SD_ReadBlocks+0x310>)
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e006      	b.n	8006006 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3748      	adds	r7, #72	; 0x48
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	1fe00fff 	.word	0x1fe00fff
 8006014:	18000f3a 	.word	0x18000f3a

08006018 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b092      	sub	sp, #72	; 0x48
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006026:	f7fb fb65 	bl	80016f4 <HAL_GetTick>
 800602a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d107      	bne.n	800604a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e16b      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b01      	cmp	r3, #1
 8006054:	f040 815e 	bne.w	8006314 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800605e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	441a      	add	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006068:	429a      	cmp	r2, r3
 800606a:	d907      	bls.n	800607c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e152      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2203      	movs	r2, #3
 8006080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2200      	movs	r2, #0
 800608a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	2b01      	cmp	r3, #1
 8006092:	d002      	beq.n	800609a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	025b      	lsls	r3, r3, #9
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800609a:	f04f 33ff 	mov.w	r3, #4294967295
 800609e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	025b      	lsls	r3, r3, #9
 80060a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060a6:	2390      	movs	r3, #144	; 0x90
 80060a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060aa:	2300      	movs	r3, #0
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f107 0218 	add.w	r2, r7, #24
 80060be:	4611      	mov	r1, r2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 fd41 	bl	8008b48 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d90a      	bls.n	80060f2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 fde5 	bl	8008cb8 <SDMMC_CmdWriteMultiBlock>
 80060ee:	6478      	str	r0, [r7, #68]	; 0x44
 80060f0:	e009      	b.n	8006106 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2210      	movs	r2, #16
 80060f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 fdb7 	bl	8008c72 <SDMMC_CmdWriteSingleBlock>
 8006104:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006108:	2b00      	cmp	r3, #0
 800610a:	d012      	beq.n	8006132 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a86      	ldr	r2, [pc, #536]	; (800632c <HAL_SD_WriteBlocks+0x314>)
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611a:	431a      	orrs	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e0f7      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006136:	e05c      	b.n	80061f2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d037      	beq.n	80061b6 <HAL_SD_WriteBlocks+0x19e>
 8006146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006148:	2b1f      	cmp	r3, #31
 800614a:	d934      	bls.n	80061b6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800614c:	2300      	movs	r3, #0
 800614e:	643b      	str	r3, [r7, #64]	; 0x40
 8006150:	e02b      	b.n	80061aa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615a:	3301      	adds	r3, #1
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	3301      	adds	r3, #1
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	041a      	lsls	r2, r3, #16
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	3301      	adds	r3, #1
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	061a      	lsls	r2, r3, #24
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	3301      	adds	r3, #1
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f107 0214 	add.w	r2, r7, #20
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f002 fc57 	bl	8008a52 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80061a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a6:	3301      	adds	r3, #1
 80061a8:	643b      	str	r3, [r7, #64]	; 0x40
 80061aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ac:	2b07      	cmp	r3, #7
 80061ae:	d9d0      	bls.n	8006152 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80061b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b2:	3b20      	subs	r3, #32
 80061b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061b6:	f7fb fa9d 	bl	80016f4 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d902      	bls.n	80061cc <HAL_SD_WriteBlocks+0x1b4>
 80061c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d112      	bne.n	80061f2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a56      	ldr	r2, [pc, #344]	; (800632c <HAL_SD_WriteBlocks+0x314>)
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061da:	431a      	orrs	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e097      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d09b      	beq.n	8006138 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d022      	beq.n	8006264 <HAL_SD_WriteBlocks+0x24c>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d91f      	bls.n	8006264 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	2b03      	cmp	r3, #3
 800622a:	d01b      	beq.n	8006264 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f002 fd65 	bl	8008d00 <SDMMC_CmdStopTransfer>
 8006236:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623a:	2b00      	cmp	r3, #0
 800623c:	d012      	beq.n	8006264 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_SD_WriteBlocks+0x314>)
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624c:	431a      	orrs	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e05e      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d012      	beq.n	8006298 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2d      	ldr	r2, [pc, #180]	; (800632c <HAL_SD_WriteBlocks+0x314>)
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	f043 0208 	orr.w	r2, r3, #8
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e044      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a20      	ldr	r2, [pc, #128]	; (800632c <HAL_SD_WriteBlocks+0x314>)
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	f043 0202 	orr.w	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e02a      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d012      	beq.n	8006300 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a13      	ldr	r2, [pc, #76]	; (800632c <HAL_SD_WriteBlocks+0x314>)
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	f043 0210 	orr.w	r2, r3, #16
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e010      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <HAL_SD_WriteBlocks+0x318>)
 8006306:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e006      	b.n	8006322 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006318:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3748      	adds	r7, #72	; 0x48
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	1fe00fff 	.word	0x1fe00fff
 8006330:	18000f3a 	.word	0x18000f3a

08006334 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_SD_IRQHandler+0x2e>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 f924 	bl	80075a8 <SD_Read_IT>
 8006360:	e19a      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80ac 	beq.w	80064ca <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b9d      	ldr	r3, [pc, #628]	; (80065fc <HAL_SD_IRQHandler+0x2c8>)
 8006388:	400b      	ands	r3, r1
 800638a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800639a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063aa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d038      	beq.n	8006428 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <HAL_SD_IRQHandler+0x96>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f002 fc96 	bl	8008d00 <SDMMC_CmdStopTransfer>
 80063d4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f959 	bl	80066a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a83      	ldr	r2, [pc, #524]	; (8006600 <HAL_SD_IRQHandler+0x2cc>)
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <HAL_SD_IRQHandler+0xe4>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f003 f951 	bl	80096c0 <HAL_SD_RxCpltCallback>
 800641e:	e13b      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f003 f943 	bl	80096ac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006426:	e137      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8132 	beq.w	8006698 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2200      	movs	r2, #0
 800644a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <HAL_SD_IRQHandler+0x12c>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d011      	beq.n	8006484 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f002 fc4b 	bl	8008d00 <SDMMC_CmdStopTransfer>
 800646a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f90e 	bl	80066a0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_SD_IRQHandler+0x172>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f003 f900 	bl	80096ac <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <HAL_SD_IRQHandler+0x18e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80eb 	beq.w	8006698 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f003 f8fc 	bl	80096c0 <HAL_SD_RxCpltCallback>
}
 80064c8:	e0e6      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_SD_IRQHandler+0x1b6>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f8a6 	bl	8007634 <SD_Write_IT>
 80064e8:	e0d6      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a2 	beq.w	800663e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	f043 0202 	orr.w	r2, r3, #2
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	f043 0208 	orr.w	r2, r3, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	f043 0210 	orr.w	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a26      	ldr	r2, [pc, #152]	; (8006600 <HAL_SD_IRQHandler+0x2cc>)
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006578:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006588:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065a8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f002 fba6 	bl	8008d00 <SDMMC_CmdStopTransfer>
 80065b4:	4602      	mov	r2, r0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ce:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00f      	beq.n	8006604 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f854 	bl	80066a0 <HAL_SD_ErrorCallback>
}
 80065f8:	e04e      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
 80065fa:	bf00      	nop
 80065fc:	ffff3ec5 	.word	0xffff3ec5
 8006600:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d044      	beq.n	8006698 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d040      	beq.n	8006698 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006624:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f832 	bl	80066a0 <HAL_SD_ErrorCallback>
}
 800663c:	e02c      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d025      	beq.n	8006698 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10c      	bne.n	800667e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 f848 	bl	8007704 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006674:	e010      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 f830 	bl	80076dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800667c:	e00c      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f831 	bl	80076f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800668e:	e003      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f819 	bl	80076c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006696:	e7ff      	b.n	8006698 <HAL_SD_IRQHandler+0x364>
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c2:	0f9b      	lsrs	r3, r3, #30
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ce:	0e9b      	lsrs	r3, r3, #26
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	0e1b      	lsrs	r3, r3, #24
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	0c1b      	lsrs	r3, r3, #16
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670a:	b2da      	uxtb	r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006714:	0d1b      	lsrs	r3, r3, #20
 8006716:	b29a      	uxth	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	b2da      	uxtb	r2, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	0bdb      	lsrs	r3, r3, #15
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	0b9b      	lsrs	r3, r3, #14
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	b2da      	uxtb	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	0b5b      	lsrs	r3, r3, #13
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	0b1b      	lsrs	r3, r3, #12
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	b2da      	uxtb	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2200      	movs	r2, #0
 800677a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d163      	bne.n	800684c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	009a      	lsls	r2, r3, #2
 800678a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800678e:	4013      	ands	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006794:	0f92      	lsrs	r2, r2, #30
 8006796:	431a      	orrs	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a0:	0edb      	lsrs	r3, r3, #27
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c4:	0d5b      	lsrs	r3, r3, #21
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d6:	0c9b      	lsrs	r3, r3, #18
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e8:	0bdb      	lsrs	r3, r3, #15
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	7e1b      	ldrb	r3, [r3, #24]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	3302      	adds	r3, #2
 800680c:	2201      	movs	r2, #1
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006816:	fb02 f203 	mul.w	r2, r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	7a1b      	ldrb	r3, [r3, #8]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	2201      	movs	r2, #1
 800682a:	409a      	lsls	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006838:	0a52      	lsrs	r2, r2, #9
 800683a:	fb02 f203 	mul.w	r2, r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
 800684a:	e031      	b.n	80068b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	2b01      	cmp	r3, #1
 8006852:	d11d      	bne.n	8006890 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006862:	0c1b      	lsrs	r3, r3, #16
 8006864:	431a      	orrs	r2, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	3301      	adds	r3, #1
 8006870:	029a      	lsls	r2, r3, #10
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006884:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
 800688e:	e00f      	b.n	80068b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a58      	ldr	r2, [pc, #352]	; (80069f8 <HAL_SD_GetCardCSD+0x344>)
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e09d      	b.n	80069ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b4:	0b9b      	lsrs	r3, r3, #14
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c6:	09db      	lsrs	r3, r3, #7
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e8:	0fdb      	lsrs	r3, r3, #31
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f4:	0f5b      	lsrs	r3, r3, #29
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006906:	0e9b      	lsrs	r3, r3, #26
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006918:	0d9b      	lsrs	r3, r3, #22
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	b2da      	uxtb	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692a:	0d5b      	lsrs	r3, r3, #21
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695a:	0bdb      	lsrs	r3, r3, #15
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800696e:	0b9b      	lsrs	r3, r3, #14
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006982:	0b5b      	lsrs	r3, r3, #13
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006996:	0b1b      	lsrs	r3, r3, #12
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069aa:	0a9b      	lsrs	r3, r3, #10
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069be:	0a1b      	lsrs	r3, r3, #8
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	1fe00fff 	.word	0x1fe00fff

080069fc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b094      	sub	sp, #80	; 0x50
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d101      	bne.n	8006a1c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0a7      	b.n	8006b6c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fb62 	bl	80070ec <SD_SendSDStatus>
 8006a28:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d011      	beq.n	8006a54 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a4f      	ldr	r2, [pc, #316]	; (8006b74 <HAL_SD_GetCardStatus+0x178>)
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a52:	e070      	b.n	8006b36 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	0e1b      	lsrs	r3, r3, #24
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	061a      	lsls	r2, r3, #24
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	0a1b      	lsrs	r3, r3, #8
 8006aa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aa4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	0e1b      	lsrs	r3, r3, #24
 8006aaa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	0d1b      	lsrs	r3, r3, #20
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	0a9b      	lsrs	r3, r3, #10
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	0a1b      	lsrs	r3, r3, #8
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	0e1b      	lsrs	r3, r3, #24
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 f82e 	bl	8008ba0 <SDMMC_CmdBlockLength>
 8006b44:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00d      	beq.n	8006b68 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a08      	ldr	r2, [pc, #32]	; (8006b74 <HAL_SD_GetCardStatus+0x178>)
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b58:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3750      	adds	r7, #80	; 0x50
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	1fe00fff 	.word	0x1fe00fff

08006b78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b08d      	sub	sp, #52	; 0x34
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2203      	movs	r2, #3
 8006be8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d02e      	beq.n	8006c52 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfa:	d106      	bne.n	8006c0a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	635a      	str	r2, [r3, #52]	; 0x34
 8006c08:	e029      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c10:	d10a      	bne.n	8006c28 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fb62 	bl	80072dc <SD_WideBus_Enable>
 8006c18:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34
 8006c26:	e01a      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb9f 	bl	8007372 <SD_WideBus_Disable>
 8006c34:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	635a      	str	r2, [r3, #52]	; 0x34
 8006c42:	e00c      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8006c50:	e005      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a5e      	ldr	r2, [pc, #376]	; (8006de4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c74:	e094      	b.n	8006da0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c7a:	f7fd fd91 	bl	80047a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c7e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8083 	beq.w	8006d8e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	4950      	ldr	r1, [pc, #320]	; (8006de8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8006caa:	0e1b      	lsrs	r3, r3, #24
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d303      	bcc.n	8006cb8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e05a      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d103      	bne.n	8006cca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	e051      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd2:	d126      	bne.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10e      	bne.n	8006cfa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	4a43      	ldr	r2, [pc, #268]	; (8006dec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d906      	bls.n	8006cf2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	0e5b      	lsrs	r3, r3, #25
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	e03d      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e039      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	6a3a      	ldr	r2, [r7, #32]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	4a39      	ldr	r2, [pc, #228]	; (8006dec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d906      	bls.n	8006d1a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	4a36      	ldr	r2, [pc, #216]	; (8006de8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	0e5b      	lsrs	r3, r3, #25
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e029      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e025      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	4a30      	ldr	r2, [pc, #192]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d906      	bls.n	8006d40 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0e1b      	lsrs	r3, r3, #24
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	e016      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	e012      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	6a3a      	ldr	r2, [r7, #32]
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	4a26      	ldr	r2, [pc, #152]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d906      	bls.n	8006d68 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	4a22      	ldr	r2, [pc, #136]	; (8006de8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0e1b      	lsrs	r3, r3, #24
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e002      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681c      	ldr	r4, [r3, #0]
 8006d72:	466a      	mov	r2, sp
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d86:	4620      	mov	r0, r4
 8006d88:	f001 fe2c 	bl	80089e4 <SDMMC_Init>
 8006d8c:	e008      	b.n	8006da0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fef9 	bl	8008ba0 <SDMMC_CmdBlockLength>
 8006dae:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00c      	beq.n	8006dd0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	372c      	adds	r7, #44	; 0x2c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd90      	pop	{r4, r7, pc}
 8006de4:	1fe00fff 	.word	0x1fe00fff
 8006de8:	55e63b89 	.word	0x55e63b89
 8006dec:	02faf080 	.word	0x02faf080
 8006df0:	017d7840 	.word	0x017d7840

08006df4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa40 	bl	800728c <SD_SendStatus>
 8006e0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	0a5b      	lsrs	r3, r3, #9
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e2a:	693b      	ldr	r3, [r7, #16]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b090      	sub	sp, #64	; 0x40
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e40:	f7fa fc58 	bl	80016f4 <HAL_GetTick>
 8006e44:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 fe23 	bl	8008a96 <SDMMC_GetPowerState>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e5a:	e0b5      	b.n	8006fc8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d02e      	beq.n	8006ec2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f002 f86e 	bl	8008f4a <SDMMC_CmdSendCID>
 8006e6e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <SD_InitCard+0x46>
    {
      return errorstate;
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	e0a6      	b.n	8006fc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fe4e 	bl	8008b22 <SDMMC_GetResponse>
 8006e86:	4602      	mov	r2, r0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2104      	movs	r1, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fe45 	bl	8008b22 <SDMMC_GetResponse>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2108      	movs	r1, #8
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fe3c 	bl	8008b22 <SDMMC_GetResponse>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	210c      	movs	r1, #12
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fe33 	bl	8008b22 <SDMMC_GetResponse>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d01d      	beq.n	8006f06 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006eca:	e019      	b.n	8006f00 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f107 020a 	add.w	r2, r7, #10
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f002 f876 	bl	8008fc8 <SDMMC_CmdSetRelAdd>
 8006edc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	e06f      	b.n	8006fc8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006ee8:	f7fa fc04 	bl	80016f4 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3287 	movw	r2, #4999	; 0x1387
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d902      	bls.n	8006f00 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006efa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006efe:	e063      	b.n	8006fc8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006f00:	897b      	ldrh	r3, [r7, #10]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0e2      	beq.n	8006ecc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d036      	beq.n	8006f7c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f0e:	897b      	ldrh	r3, [r7, #10]
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f002 f830 	bl	8008f88 <SDMMC_CmdSendCSD>
 8006f28:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	e049      	b.n	8006fc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fdf1 	bl	8008b22 <SDMMC_GetResponse>
 8006f40:	4602      	mov	r2, r0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fde8 	bl	8008b22 <SDMMC_GetResponse>
 8006f52:	4602      	mov	r2, r0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2108      	movs	r1, #8
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fddf 	bl	8008b22 <SDMMC_GetResponse>
 8006f64:	4602      	mov	r2, r0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	210c      	movs	r1, #12
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 fdd6 	bl	8008b22 <SDMMC_GetResponse>
 8006f76:	4602      	mov	r2, r0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2104      	movs	r1, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fdcd 	bl	8008b22 <SDMMC_GetResponse>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	0d1a      	lsrs	r2, r3, #20
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fb8c 	bl	80066b4 <HAL_SD_GetCardCSD>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fa6:	e00f      	b.n	8006fc8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f001 fedf 	bl	8008d78 <SDMMC_CmdSelDesel>
 8006fba:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <SD_InitCard+0x192>
  {
    return errorstate;
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	e000      	b.n	8006fc8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3740      	adds	r7, #64	; 0x40
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fee8 	bl	8008dbe <SDMMC_CmdGoIdleState>
 8006fee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <SD_PowerON+0x2a>
  {
    return errorstate;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	e072      	b.n	80070e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fefb 	bl	8008dfa <SDMMC_CmdOperCond>
 8007004:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700c:	d10d      	bne.n	800702a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fed0 	bl	8008dbe <SDMMC_CmdGoIdleState>
 800701e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <SD_PowerON+0x60>
    {
      return errorstate;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	e05a      	b.n	80070e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d137      	bne.n	80070a8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f001 fefb 	bl	8008e3a <SDMMC_CmdAppCommand>
 8007044:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02d      	beq.n	80070a8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800704c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007050:	e046      	b.n	80070e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f001 feee 	bl	8008e3a <SDMMC_CmdAppCommand>
 800705e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	e03a      	b.n	80070e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	491e      	ldr	r1, [pc, #120]	; (80070e8 <SD_PowerON+0x118>)
 8007070:	4618      	mov	r0, r3
 8007072:	f001 ff05 	bl	8008e80 <SDMMC_CmdAppOperCommand>
 8007076:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800707e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007082:	e02d      	b.n	80070e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f001 fd49 	bl	8008b22 <SDMMC_GetResponse>
 8007090:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	0fdb      	lsrs	r3, r3, #31
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <SD_PowerON+0xce>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <SD_PowerON+0xd0>
 800709e:	2300      	movs	r3, #0
 80070a0:	613b      	str	r3, [r7, #16]

    count++;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	3301      	adds	r3, #1
 80070a6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d802      	bhi.n	80070b8 <SD_PowerON+0xe8>
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0cc      	beq.n	8007052 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070be:	4293      	cmp	r3, r2
 80070c0:	d902      	bls.n	80070c8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070c6:	e00b      	b.n	80070e0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	c1100000 	.word	0xc1100000

080070ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08c      	sub	sp, #48	; 0x30
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070f6:	f7fa fafd 	bl	80016f4 <HAL_GetTick>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fd0b 	bl	8008b22 <SDMMC_GetResponse>
 800710c:	4603      	mov	r3, r0
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007116:	d102      	bne.n	800711e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800711c:	e0b0      	b.n	8007280 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2140      	movs	r1, #64	; 0x40
 8007124:	4618      	mov	r0, r3
 8007126:	f001 fd3b 	bl	8008ba0 <SDMMC_CmdBlockLength>
 800712a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	e0a0      	b.n	8007280 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f001 fe75 	bl	8008e3a <SDMMC_CmdAppCommand>
 8007150:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	e08d      	b.n	8007280 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007164:	f04f 33ff 	mov.w	r3, #4294967295
 8007168:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800716e:	2360      	movs	r3, #96	; 0x60
 8007170:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007172:	2302      	movs	r3, #2
 8007174:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800717a:	2301      	movs	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f107 0208 	add.w	r2, r7, #8
 8007186:	4611      	mov	r1, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fcdd 	bl	8008b48 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f001 ff5d 	bl	8009052 <SDMMC_CmdStatusRegister>
 8007198:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d02b      	beq.n	80071f8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	e069      	b.n	8007280 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d013      	beq.n	80071e2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071be:	e00d      	b.n	80071dc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fc37 	bl	8008a38 <SDMMC_ReadFIFO>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	601a      	str	r2, [r3, #0]
        pData++;
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	3304      	adds	r3, #4
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	3301      	adds	r3, #1
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	2b07      	cmp	r3, #7
 80071e0:	d9ee      	bls.n	80071c0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071e2:	f7fa fa87 	bl	80016f4 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f0:	d102      	bne.n	80071f8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071f6:	e043      	b.n	8007280 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0d2      	beq.n	80071ac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007214:	2308      	movs	r3, #8
 8007216:	e033      	b.n	8007280 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007226:	2302      	movs	r3, #2
 8007228:	e02a      	b.n	8007280 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007238:	2320      	movs	r3, #32
 800723a:	e021      	b.n	8007280 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fbf9 	bl	8008a38 <SDMMC_ReadFIFO>
 8007246:	4602      	mov	r2, r0
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	601a      	str	r2, [r3, #0]
    pData++;
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	3304      	adds	r3, #4
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007252:	f7fa fa4f 	bl	80016f4 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d102      	bne.n	8007268 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007262:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007266:	e00b      	b.n	8007280 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e2      	bne.n	800723c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a03      	ldr	r2, [pc, #12]	; (8007288 <SD_SendSDStatus+0x19c>)
 800727c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3730      	adds	r7, #48	; 0x30
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	18000f3a 	.word	0x18000f3a

0800728c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800729c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072a0:	e018      	b.n	80072d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f001 feac 	bl	800900c <SDMMC_CmdSendStatus>
 80072b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	e009      	b.n	80072d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fc2b 	bl	8008b22 <SDMMC_GetResponse>
 80072cc:	4602      	mov	r2, r0
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fc15 	bl	8008b22 <SDMMC_GetResponse>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007302:	d102      	bne.n	800730a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007308:	e02f      	b.n	800736a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800730a:	f107 030c 	add.w	r3, r7, #12
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f879 	bl	8007408 <SD_FindSCR>
 8007316:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	e023      	b.n	800736a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01c      	beq.n	8007366 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007334:	041b      	lsls	r3, r3, #16
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f001 fd7e 	bl	8008e3a <SDMMC_CmdAppCommand>
 800733e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	e00f      	b.n	800736a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2102      	movs	r1, #2
 8007350:	4618      	mov	r0, r3
 8007352:	f001 fdb5 	bl	8008ec0 <SDMMC_CmdBusWidth>
 8007356:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	e003      	b.n	800736a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007362:	2300      	movs	r3, #0
 8007364:	e001      	b.n	800736a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007366:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fbca 	bl	8008b22 <SDMMC_GetResponse>
 800738e:	4603      	mov	r3, r0
 8007390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007398:	d102      	bne.n	80073a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800739a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800739e:	e02f      	b.n	8007400 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f82e 	bl	8007408 <SD_FindSCR>
 80073ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	e023      	b.n	8007400 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01c      	beq.n	80073fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f001 fd33 	bl	8008e3a <SDMMC_CmdAppCommand>
 80073d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	e00f      	b.n	8007400 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fd6a 	bl	8008ec0 <SDMMC_CmdBusWidth>
 80073ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e003      	b.n	8007400 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	e001      	b.n	8007400 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08e      	sub	sp, #56	; 0x38
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007412:	f7fa f96f 	bl	80016f4 <HAL_GetTick>
 8007416:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800741c:	2300      	movs	r3, #0
 800741e:	60bb      	str	r3, [r7, #8]
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2108      	movs	r1, #8
 800742e:	4618      	mov	r0, r3
 8007430:	f001 fbb6 	bl	8008ba0 <SDMMC_CmdBlockLength>
 8007434:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <SD_FindSCR+0x38>
  {
    return errorstate;
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	e0ad      	b.n	800759c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f001 fcf4 	bl	8008e3a <SDMMC_CmdAppCommand>
 8007452:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <SD_FindSCR+0x56>
  {
    return errorstate;
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	e09e      	b.n	800759c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007464:	2308      	movs	r3, #8
 8007466:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007468:	2330      	movs	r3, #48	; 0x30
 800746a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800746c:	2302      	movs	r3, #2
 800746e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007470:	2300      	movs	r3, #0
 8007472:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007474:	2301      	movs	r3, #1
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f107 0210 	add.w	r2, r7, #16
 8007480:	4611      	mov	r1, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f001 fb60 	bl	8008b48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f001 fd3a 	bl	8008f06 <SDMMC_CmdSendSCR>
 8007492:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d027      	beq.n	80074ea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	e07e      	b.n	800759c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d113      	bne.n	80074d4 <SD_FindSCR+0xcc>
 80074ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d110      	bne.n	80074d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f001 fabe 	bl	8008a38 <SDMMC_ReadFIFO>
 80074bc:	4603      	mov	r3, r0
 80074be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fab7 	bl	8008a38 <SDMMC_ReadFIFO>
 80074ca:	4603      	mov	r3, r0
 80074cc:	60fb      	str	r3, [r7, #12]
      index++;
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	3301      	adds	r3, #1
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074d4:	f7fa f90e 	bl	80016f4 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d102      	bne.n	80074ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074e8:	e058      	b.n	800759c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f0:	f240 532a 	movw	r3, #1322	; 0x52a
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0d1      	beq.n	800749e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2208      	movs	r2, #8
 800750e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007510:	2308      	movs	r3, #8
 8007512:	e043      	b.n	800759c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2202      	movs	r2, #2
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	e036      	b.n	800759c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2220      	movs	r2, #32
 8007542:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007544:	2320      	movs	r3, #32
 8007546:	e029      	b.n	800759c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <SD_FindSCR+0x19c>)
 800754e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	061a      	lsls	r2, r3, #24
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800755c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007566:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	0e1b      	lsrs	r3, r3, #24
 800756c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	601a      	str	r2, [r3, #0]
    scr++;
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	3304      	adds	r3, #4
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	061a      	lsls	r2, r3, #24
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007584:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	0a1b      	lsrs	r3, r3, #8
 800758a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800758e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	0e1b      	lsrs	r3, r3, #24
 8007594:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3738      	adds	r7, #56	; 0x38
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	18000f3a 	.word	0x18000f3a

080075a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	2b1f      	cmp	r3, #31
 80075bc:	d936      	bls.n	800762c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	e027      	b.n	8007614 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fa35 	bl	8008a38 <SDMMC_ReadFIFO>
 80075ce:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3301      	adds	r3, #1
 80075dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3301      	adds	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	0e1b      	lsrs	r3, r3, #24
 8007602:	b2da      	uxtb	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	3301      	adds	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b07      	cmp	r3, #7
 8007618:	d9d4      	bls.n	80075c4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f1a3 0220 	sub.w	r2, r3, #32
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800762c:	bf00      	nop
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	2b1f      	cmp	r3, #31
 8007648:	d93a      	bls.n	80076c0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e02b      	b.n	80076a8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3301      	adds	r3, #1
 800765a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	021a      	lsls	r2, r3, #8
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3301      	adds	r3, #1
 800766c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	041a      	lsls	r2, r3, #16
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
      tmp++;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3301      	adds	r3, #1
 800767e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	061a      	lsls	r2, r3, #24
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3301      	adds	r3, #1
 8007690:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f107 020c 	add.w	r2, r7, #12
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f9d8 	bl	8008a52 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	3301      	adds	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	d9d0      	bls.n	8007650 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f1a3 0220 	sub.w	r2, r3, #32
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	621a      	str	r2, [r3, #32]
  }
}
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e042      	b.n	80077b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7f9 fdd7 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2224      	movs	r2, #36	; 0x24
 8007746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f82c 	bl	80077b8 <UART_SetConfig>
 8007760:	4603      	mov	r3, r0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e022      	b.n	80077b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fe7e 	bl	8008474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 ff05 	bl	80085b8 <UART_CheckIdleState>
 80077ae:	4603      	mov	r3, r0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077b8:	b5b0      	push	{r4, r5, r7, lr}
 80077ba:	b08e      	sub	sp, #56	; 0x38
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	4313      	orrs	r3, r2
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4bbf      	ldr	r3, [pc, #764]	; (8007ae4 <UART_SetConfig+0x32c>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4ab5      	ldr	r2, [pc, #724]	; (8007ae8 <UART_SetConfig+0x330>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800781e:	4313      	orrs	r3, r2
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	4bb0      	ldr	r3, [pc, #704]	; (8007aec <UART_SetConfig+0x334>)
 800782a:	4013      	ands	r3, r2
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007832:	430b      	orrs	r3, r1
 8007834:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	f023 010f 	bic.w	r1, r3, #15
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4aa7      	ldr	r2, [pc, #668]	; (8007af0 <UART_SetConfig+0x338>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d176      	bne.n	8007944 <UART_SetConfig+0x18c>
 8007856:	4ba7      	ldr	r3, [pc, #668]	; (8007af4 <UART_SetConfig+0x33c>)
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800785e:	2b28      	cmp	r3, #40	; 0x28
 8007860:	d86c      	bhi.n	800793c <UART_SetConfig+0x184>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <UART_SetConfig+0xb0>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	0800790d 	.word	0x0800790d
 800786c:	0800793d 	.word	0x0800793d
 8007870:	0800793d 	.word	0x0800793d
 8007874:	0800793d 	.word	0x0800793d
 8007878:	0800793d 	.word	0x0800793d
 800787c:	0800793d 	.word	0x0800793d
 8007880:	0800793d 	.word	0x0800793d
 8007884:	0800793d 	.word	0x0800793d
 8007888:	08007915 	.word	0x08007915
 800788c:	0800793d 	.word	0x0800793d
 8007890:	0800793d 	.word	0x0800793d
 8007894:	0800793d 	.word	0x0800793d
 8007898:	0800793d 	.word	0x0800793d
 800789c:	0800793d 	.word	0x0800793d
 80078a0:	0800793d 	.word	0x0800793d
 80078a4:	0800793d 	.word	0x0800793d
 80078a8:	0800791d 	.word	0x0800791d
 80078ac:	0800793d 	.word	0x0800793d
 80078b0:	0800793d 	.word	0x0800793d
 80078b4:	0800793d 	.word	0x0800793d
 80078b8:	0800793d 	.word	0x0800793d
 80078bc:	0800793d 	.word	0x0800793d
 80078c0:	0800793d 	.word	0x0800793d
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	08007925 	.word	0x08007925
 80078cc:	0800793d 	.word	0x0800793d
 80078d0:	0800793d 	.word	0x0800793d
 80078d4:	0800793d 	.word	0x0800793d
 80078d8:	0800793d 	.word	0x0800793d
 80078dc:	0800793d 	.word	0x0800793d
 80078e0:	0800793d 	.word	0x0800793d
 80078e4:	0800793d 	.word	0x0800793d
 80078e8:	0800792d 	.word	0x0800792d
 80078ec:	0800793d 	.word	0x0800793d
 80078f0:	0800793d 	.word	0x0800793d
 80078f4:	0800793d 	.word	0x0800793d
 80078f8:	0800793d 	.word	0x0800793d
 80078fc:	0800793d 	.word	0x0800793d
 8007900:	0800793d 	.word	0x0800793d
 8007904:	0800793d 	.word	0x0800793d
 8007908:	08007935 	.word	0x08007935
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007912:	e326      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007914:	2304      	movs	r3, #4
 8007916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791a:	e322      	b.n	8007f62 <UART_SetConfig+0x7aa>
 800791c:	2308      	movs	r3, #8
 800791e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007922:	e31e      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007924:	2310      	movs	r3, #16
 8007926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792a:	e31a      	b.n	8007f62 <UART_SetConfig+0x7aa>
 800792c:	2320      	movs	r3, #32
 800792e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007932:	e316      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007934:	2340      	movs	r3, #64	; 0x40
 8007936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793a:	e312      	b.n	8007f62 <UART_SetConfig+0x7aa>
 800793c:	2380      	movs	r3, #128	; 0x80
 800793e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007942:	e30e      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a6b      	ldr	r2, [pc, #428]	; (8007af8 <UART_SetConfig+0x340>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d130      	bne.n	80079b0 <UART_SetConfig+0x1f8>
 800794e:	4b69      	ldr	r3, [pc, #420]	; (8007af4 <UART_SetConfig+0x33c>)
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b05      	cmp	r3, #5
 8007958:	d826      	bhi.n	80079a8 <UART_SetConfig+0x1f0>
 800795a:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <UART_SetConfig+0x1a8>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	08007979 	.word	0x08007979
 8007964:	08007981 	.word	0x08007981
 8007968:	08007989 	.word	0x08007989
 800796c:	08007991 	.word	0x08007991
 8007970:	08007999 	.word	0x08007999
 8007974:	080079a1 	.word	0x080079a1
 8007978:	2300      	movs	r3, #0
 800797a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800797e:	e2f0      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007980:	2304      	movs	r3, #4
 8007982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007986:	e2ec      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007988:	2308      	movs	r3, #8
 800798a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800798e:	e2e8      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007990:	2310      	movs	r3, #16
 8007992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007996:	e2e4      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007998:	2320      	movs	r3, #32
 800799a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800799e:	e2e0      	b.n	8007f62 <UART_SetConfig+0x7aa>
 80079a0:	2340      	movs	r3, #64	; 0x40
 80079a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079a6:	e2dc      	b.n	8007f62 <UART_SetConfig+0x7aa>
 80079a8:	2380      	movs	r3, #128	; 0x80
 80079aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ae:	e2d8      	b.n	8007f62 <UART_SetConfig+0x7aa>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a51      	ldr	r2, [pc, #324]	; (8007afc <UART_SetConfig+0x344>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d130      	bne.n	8007a1c <UART_SetConfig+0x264>
 80079ba:	4b4e      	ldr	r3, [pc, #312]	; (8007af4 <UART_SetConfig+0x33c>)
 80079bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d826      	bhi.n	8007a14 <UART_SetConfig+0x25c>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <UART_SetConfig+0x214>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079e5 	.word	0x080079e5
 80079d0:	080079ed 	.word	0x080079ed
 80079d4:	080079f5 	.word	0x080079f5
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	08007a05 	.word	0x08007a05
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ea:	e2ba      	b.n	8007f62 <UART_SetConfig+0x7aa>
 80079ec:	2304      	movs	r3, #4
 80079ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f2:	e2b6      	b.n	8007f62 <UART_SetConfig+0x7aa>
 80079f4:	2308      	movs	r3, #8
 80079f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fa:	e2b2      	b.n	8007f62 <UART_SetConfig+0x7aa>
 80079fc:	2310      	movs	r3, #16
 80079fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a02:	e2ae      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a04:	2320      	movs	r3, #32
 8007a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0a:	e2aa      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a12:	e2a6      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1a:	e2a2      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a37      	ldr	r2, [pc, #220]	; (8007b00 <UART_SetConfig+0x348>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d130      	bne.n	8007a88 <UART_SetConfig+0x2d0>
 8007a26:	4b33      	ldr	r3, [pc, #204]	; (8007af4 <UART_SetConfig+0x33c>)
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	d826      	bhi.n	8007a80 <UART_SetConfig+0x2c8>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x280>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a51 	.word	0x08007a51
 8007a3c:	08007a59 	.word	0x08007a59
 8007a40:	08007a61 	.word	0x08007a61
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a71 	.word	0x08007a71
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a56:	e284      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5e:	e280      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a66:	e27c      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6e:	e278      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a70:	2320      	movs	r3, #32
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a76:	e274      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e270      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e26c      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <UART_SetConfig+0x34c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d142      	bne.n	8007b18 <UART_SetConfig+0x360>
 8007a92:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <UART_SetConfig+0x33c>)
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b05      	cmp	r3, #5
 8007a9c:	d838      	bhi.n	8007b10 <UART_SetConfig+0x358>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x2ec>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007abd 	.word	0x08007abd
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	08007acd 	.word	0x08007acd
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007add 	.word	0x08007add
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac2:	e24e      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aca:	e24a      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad2:	e246      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ada:	e242      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007adc:	2320      	movs	r3, #32
 8007ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae2:	e23e      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ae4:	cfff69f3 	.word	0xcfff69f3
 8007ae8:	58000c00 	.word	0x58000c00
 8007aec:	11fff4ff 	.word	0x11fff4ff
 8007af0:	40011000 	.word	0x40011000
 8007af4:	58024400 	.word	0x58024400
 8007af8:	40004400 	.word	0x40004400
 8007afc:	40004800 	.word	0x40004800
 8007b00:	40004c00 	.word	0x40004c00
 8007b04:	40005000 	.word	0x40005000
 8007b08:	2340      	movs	r3, #64	; 0x40
 8007b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0e:	e228      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007b10:	2380      	movs	r3, #128	; 0x80
 8007b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b16:	e224      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4ab1      	ldr	r2, [pc, #708]	; (8007de4 <UART_SetConfig+0x62c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d176      	bne.n	8007c10 <UART_SetConfig+0x458>
 8007b22:	4bb1      	ldr	r3, [pc, #708]	; (8007de8 <UART_SetConfig+0x630>)
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b2a:	2b28      	cmp	r3, #40	; 0x28
 8007b2c:	d86c      	bhi.n	8007c08 <UART_SetConfig+0x450>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <UART_SetConfig+0x37c>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007bd9 	.word	0x08007bd9
 8007b38:	08007c09 	.word	0x08007c09
 8007b3c:	08007c09 	.word	0x08007c09
 8007b40:	08007c09 	.word	0x08007c09
 8007b44:	08007c09 	.word	0x08007c09
 8007b48:	08007c09 	.word	0x08007c09
 8007b4c:	08007c09 	.word	0x08007c09
 8007b50:	08007c09 	.word	0x08007c09
 8007b54:	08007be1 	.word	0x08007be1
 8007b58:	08007c09 	.word	0x08007c09
 8007b5c:	08007c09 	.word	0x08007c09
 8007b60:	08007c09 	.word	0x08007c09
 8007b64:	08007c09 	.word	0x08007c09
 8007b68:	08007c09 	.word	0x08007c09
 8007b6c:	08007c09 	.word	0x08007c09
 8007b70:	08007c09 	.word	0x08007c09
 8007b74:	08007be9 	.word	0x08007be9
 8007b78:	08007c09 	.word	0x08007c09
 8007b7c:	08007c09 	.word	0x08007c09
 8007b80:	08007c09 	.word	0x08007c09
 8007b84:	08007c09 	.word	0x08007c09
 8007b88:	08007c09 	.word	0x08007c09
 8007b8c:	08007c09 	.word	0x08007c09
 8007b90:	08007c09 	.word	0x08007c09
 8007b94:	08007bf1 	.word	0x08007bf1
 8007b98:	08007c09 	.word	0x08007c09
 8007b9c:	08007c09 	.word	0x08007c09
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007c09 	.word	0x08007c09
 8007ba8:	08007c09 	.word	0x08007c09
 8007bac:	08007c09 	.word	0x08007c09
 8007bb0:	08007c09 	.word	0x08007c09
 8007bb4:	08007bf9 	.word	0x08007bf9
 8007bb8:	08007c09 	.word	0x08007c09
 8007bbc:	08007c09 	.word	0x08007c09
 8007bc0:	08007c09 	.word	0x08007c09
 8007bc4:	08007c09 	.word	0x08007c09
 8007bc8:	08007c09 	.word	0x08007c09
 8007bcc:	08007c09 	.word	0x08007c09
 8007bd0:	08007c09 	.word	0x08007c09
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bde:	e1c0      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be6:	e1bc      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bee:	e1b8      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf6:	e1b4      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007bf8:	2320      	movs	r3, #32
 8007bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfe:	e1b0      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c06:	e1ac      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c08:	2380      	movs	r3, #128	; 0x80
 8007c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0e:	e1a8      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a75      	ldr	r2, [pc, #468]	; (8007dec <UART_SetConfig+0x634>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d130      	bne.n	8007c7c <UART_SetConfig+0x4c4>
 8007c1a:	4b73      	ldr	r3, [pc, #460]	; (8007de8 <UART_SetConfig+0x630>)
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d826      	bhi.n	8007c74 <UART_SetConfig+0x4bc>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x474>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c45 	.word	0x08007c45
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c55 	.word	0x08007c55
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c4a:	e18a      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c52:	e186      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5a:	e182      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c62:	e17e      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6a:	e17a      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c72:	e176      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7a:	e172      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a5b      	ldr	r2, [pc, #364]	; (8007df0 <UART_SetConfig+0x638>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d130      	bne.n	8007ce8 <UART_SetConfig+0x530>
 8007c86:	4b58      	ldr	r3, [pc, #352]	; (8007de8 <UART_SetConfig+0x630>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d826      	bhi.n	8007ce0 <UART_SetConfig+0x528>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x4e0>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb1 	.word	0x08007cb1
 8007c9c:	08007cb9 	.word	0x08007cb9
 8007ca0:	08007cc1 	.word	0x08007cc1
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cd1 	.word	0x08007cd1
 8007cac:	08007cd9 	.word	0x08007cd9
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cb6:	e154      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cbe:	e150      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc6:	e14c      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cce:	e148      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd6:	e144      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cde:	e140      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ce0:	2380      	movs	r3, #128	; 0x80
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce6:	e13c      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a41      	ldr	r2, [pc, #260]	; (8007df4 <UART_SetConfig+0x63c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	f040 8082 	bne.w	8007df8 <UART_SetConfig+0x640>
 8007cf4:	4b3c      	ldr	r3, [pc, #240]	; (8007de8 <UART_SetConfig+0x630>)
 8007cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cfc:	2b28      	cmp	r3, #40	; 0x28
 8007cfe:	d86d      	bhi.n	8007ddc <UART_SetConfig+0x624>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0x550>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007dad 	.word	0x08007dad
 8007d0c:	08007ddd 	.word	0x08007ddd
 8007d10:	08007ddd 	.word	0x08007ddd
 8007d14:	08007ddd 	.word	0x08007ddd
 8007d18:	08007ddd 	.word	0x08007ddd
 8007d1c:	08007ddd 	.word	0x08007ddd
 8007d20:	08007ddd 	.word	0x08007ddd
 8007d24:	08007ddd 	.word	0x08007ddd
 8007d28:	08007db5 	.word	0x08007db5
 8007d2c:	08007ddd 	.word	0x08007ddd
 8007d30:	08007ddd 	.word	0x08007ddd
 8007d34:	08007ddd 	.word	0x08007ddd
 8007d38:	08007ddd 	.word	0x08007ddd
 8007d3c:	08007ddd 	.word	0x08007ddd
 8007d40:	08007ddd 	.word	0x08007ddd
 8007d44:	08007ddd 	.word	0x08007ddd
 8007d48:	08007dbd 	.word	0x08007dbd
 8007d4c:	08007ddd 	.word	0x08007ddd
 8007d50:	08007ddd 	.word	0x08007ddd
 8007d54:	08007ddd 	.word	0x08007ddd
 8007d58:	08007ddd 	.word	0x08007ddd
 8007d5c:	08007ddd 	.word	0x08007ddd
 8007d60:	08007ddd 	.word	0x08007ddd
 8007d64:	08007ddd 	.word	0x08007ddd
 8007d68:	08007dc5 	.word	0x08007dc5
 8007d6c:	08007ddd 	.word	0x08007ddd
 8007d70:	08007ddd 	.word	0x08007ddd
 8007d74:	08007ddd 	.word	0x08007ddd
 8007d78:	08007ddd 	.word	0x08007ddd
 8007d7c:	08007ddd 	.word	0x08007ddd
 8007d80:	08007ddd 	.word	0x08007ddd
 8007d84:	08007ddd 	.word	0x08007ddd
 8007d88:	08007dcd 	.word	0x08007dcd
 8007d8c:	08007ddd 	.word	0x08007ddd
 8007d90:	08007ddd 	.word	0x08007ddd
 8007d94:	08007ddd 	.word	0x08007ddd
 8007d98:	08007ddd 	.word	0x08007ddd
 8007d9c:	08007ddd 	.word	0x08007ddd
 8007da0:	08007ddd 	.word	0x08007ddd
 8007da4:	08007ddd 	.word	0x08007ddd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db2:	e0d6      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007db4:	2304      	movs	r3, #4
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dba:	e0d2      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc2:	e0ce      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e0ca      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007dcc:	2320      	movs	r3, #32
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e0c6      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e0c2      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ddc:	2380      	movs	r3, #128	; 0x80
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e0be      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007de4:	40011400 	.word	0x40011400
 8007de8:	58024400 	.word	0x58024400
 8007dec:	40007800 	.word	0x40007800
 8007df0:	40007c00 	.word	0x40007c00
 8007df4:	40011800 	.word	0x40011800
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4aad      	ldr	r2, [pc, #692]	; (80080b4 <UART_SetConfig+0x8fc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d176      	bne.n	8007ef0 <UART_SetConfig+0x738>
 8007e02:	4bad      	ldr	r3, [pc, #692]	; (80080b8 <UART_SetConfig+0x900>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e0a:	2b28      	cmp	r3, #40	; 0x28
 8007e0c:	d86c      	bhi.n	8007ee8 <UART_SetConfig+0x730>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x65c>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007eb9 	.word	0x08007eb9
 8007e18:	08007ee9 	.word	0x08007ee9
 8007e1c:	08007ee9 	.word	0x08007ee9
 8007e20:	08007ee9 	.word	0x08007ee9
 8007e24:	08007ee9 	.word	0x08007ee9
 8007e28:	08007ee9 	.word	0x08007ee9
 8007e2c:	08007ee9 	.word	0x08007ee9
 8007e30:	08007ee9 	.word	0x08007ee9
 8007e34:	08007ec1 	.word	0x08007ec1
 8007e38:	08007ee9 	.word	0x08007ee9
 8007e3c:	08007ee9 	.word	0x08007ee9
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007ee9 	.word	0x08007ee9
 8007e48:	08007ee9 	.word	0x08007ee9
 8007e4c:	08007ee9 	.word	0x08007ee9
 8007e50:	08007ee9 	.word	0x08007ee9
 8007e54:	08007ec9 	.word	0x08007ec9
 8007e58:	08007ee9 	.word	0x08007ee9
 8007e5c:	08007ee9 	.word	0x08007ee9
 8007e60:	08007ee9 	.word	0x08007ee9
 8007e64:	08007ee9 	.word	0x08007ee9
 8007e68:	08007ee9 	.word	0x08007ee9
 8007e6c:	08007ee9 	.word	0x08007ee9
 8007e70:	08007ee9 	.word	0x08007ee9
 8007e74:	08007ed1 	.word	0x08007ed1
 8007e78:	08007ee9 	.word	0x08007ee9
 8007e7c:	08007ee9 	.word	0x08007ee9
 8007e80:	08007ee9 	.word	0x08007ee9
 8007e84:	08007ee9 	.word	0x08007ee9
 8007e88:	08007ee9 	.word	0x08007ee9
 8007e8c:	08007ee9 	.word	0x08007ee9
 8007e90:	08007ee9 	.word	0x08007ee9
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ee9 	.word	0x08007ee9
 8007e9c:	08007ee9 	.word	0x08007ee9
 8007ea0:	08007ee9 	.word	0x08007ee9
 8007ea4:	08007ee9 	.word	0x08007ee9
 8007ea8:	08007ee9 	.word	0x08007ee9
 8007eac:	08007ee9 	.word	0x08007ee9
 8007eb0:	08007ee9 	.word	0x08007ee9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	e050      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec6:	e04c      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ece:	e048      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed6:	e044      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ed8:	2320      	movs	r3, #32
 8007eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ede:	e040      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ee0:	2340      	movs	r3, #64	; 0x40
 8007ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee6:	e03c      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eee:	e038      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a71      	ldr	r2, [pc, #452]	; (80080bc <UART_SetConfig+0x904>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d130      	bne.n	8007f5c <UART_SetConfig+0x7a4>
 8007efa:	4b6f      	ldr	r3, [pc, #444]	; (80080b8 <UART_SetConfig+0x900>)
 8007efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d826      	bhi.n	8007f54 <UART_SetConfig+0x79c>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <UART_SetConfig+0x754>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f25 	.word	0x08007f25
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f35 	.word	0x08007f35
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	2302      	movs	r3, #2
 8007f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2a:	e01a      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f32:	e016      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3a:	e012      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f42:	e00e      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f44:	2320      	movs	r3, #32
 8007f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f4a:	e00a      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f4c:	2340      	movs	r3, #64	; 0x40
 8007f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f52:	e006      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5a:	e002      	b.n	8007f62 <UART_SetConfig+0x7aa>
 8007f5c:	2380      	movs	r3, #128	; 0x80
 8007f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a55      	ldr	r2, [pc, #340]	; (80080bc <UART_SetConfig+0x904>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	f040 80f0 	bne.w	800814e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	dc46      	bgt.n	8008004 <UART_SetConfig+0x84c>
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	db75      	blt.n	8008066 <UART_SetConfig+0x8ae>
 8007f7a:	3b02      	subs	r3, #2
 8007f7c:	2b1e      	cmp	r3, #30
 8007f7e:	d872      	bhi.n	8008066 <UART_SetConfig+0x8ae>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x7d0>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	0800800b 	.word	0x0800800b
 8007f8c:	08008067 	.word	0x08008067
 8007f90:	08008013 	.word	0x08008013
 8007f94:	08008067 	.word	0x08008067
 8007f98:	08008067 	.word	0x08008067
 8007f9c:	08008067 	.word	0x08008067
 8007fa0:	08008023 	.word	0x08008023
 8007fa4:	08008067 	.word	0x08008067
 8007fa8:	08008067 	.word	0x08008067
 8007fac:	08008067 	.word	0x08008067
 8007fb0:	08008067 	.word	0x08008067
 8007fb4:	08008067 	.word	0x08008067
 8007fb8:	08008067 	.word	0x08008067
 8007fbc:	08008067 	.word	0x08008067
 8007fc0:	08008033 	.word	0x08008033
 8007fc4:	08008067 	.word	0x08008067
 8007fc8:	08008067 	.word	0x08008067
 8007fcc:	08008067 	.word	0x08008067
 8007fd0:	08008067 	.word	0x08008067
 8007fd4:	08008067 	.word	0x08008067
 8007fd8:	08008067 	.word	0x08008067
 8007fdc:	08008067 	.word	0x08008067
 8007fe0:	08008067 	.word	0x08008067
 8007fe4:	08008067 	.word	0x08008067
 8007fe8:	08008067 	.word	0x08008067
 8007fec:	08008067 	.word	0x08008067
 8007ff0:	08008067 	.word	0x08008067
 8007ff4:	08008067 	.word	0x08008067
 8007ff8:	08008067 	.word	0x08008067
 8007ffc:	08008067 	.word	0x08008067
 8008000:	08008059 	.word	0x08008059
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d02a      	beq.n	800805e <UART_SetConfig+0x8a6>
 8008008:	e02d      	b.n	8008066 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800800a:	f7fc ffed 	bl	8004fe8 <HAL_RCCEx_GetD3PCLK1Freq>
 800800e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008010:	e02f      	b.n	8008072 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	4618      	mov	r0, r3
 8008018:	f7fc fffc 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008020:	e027      	b.n	8008072 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008022:	f107 0308 	add.w	r3, r7, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f7fd f948 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008030:	e01f      	b.n	8008072 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008032:	4b21      	ldr	r3, [pc, #132]	; (80080b8 <UART_SetConfig+0x900>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800803e:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <UART_SetConfig+0x900>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	08db      	lsrs	r3, r3, #3
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <UART_SetConfig+0x908>)
 800804a:	fa22 f303 	lsr.w	r3, r2, r3
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008050:	e00f      	b.n	8008072 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008052:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <UART_SetConfig+0x908>)
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008056:	e00c      	b.n	8008072 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <UART_SetConfig+0x90c>)
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800805c:	e009      	b.n	8008072 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008064:	e005      	b.n	8008072 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 81e6 	beq.w	8008446 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <UART_SetConfig+0x910>)
 8008080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008084:	461a      	mov	r2, r3
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	fbb3 f3f2 	udiv	r3, r3, r2
 800808c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	4413      	add	r3, r2
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	429a      	cmp	r2, r3
 800809c:	d305      	bcc.n	80080aa <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d910      	bls.n	80080cc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080b0:	e1c9      	b.n	8008446 <UART_SetConfig+0xc8e>
 80080b2:	bf00      	nop
 80080b4:	40011c00 	.word	0x40011c00
 80080b8:	58024400 	.word	0x58024400
 80080bc:	58000c00 	.word	0x58000c00
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	0800ce30 	.word	0x0800ce30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	4618      	mov	r0, r3
 80080d0:	f04f 0100 	mov.w	r1, #0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	4ac1      	ldr	r2, [pc, #772]	; (80083e0 <UART_SetConfig+0xc28>)
 80080da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	f7f8 f96c 	bl	80003c0 <__aeabi_uldivmod>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4610      	mov	r0, r2
 80080ee:	4619      	mov	r1, r3
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	020b      	lsls	r3, r1, #8
 80080fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080fe:	0202      	lsls	r2, r0, #8
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	6849      	ldr	r1, [r1, #4]
 8008104:	0849      	lsrs	r1, r1, #1
 8008106:	4608      	mov	r0, r1
 8008108:	f04f 0100 	mov.w	r1, #0
 800810c:	1814      	adds	r4, r2, r0
 800810e:	eb43 0501 	adc.w	r5, r3, r1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	461a      	mov	r2, r3
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 f94e 	bl	80003c0 <__aeabi_uldivmod>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4613      	mov	r3, r2
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008132:	d308      	bcc.n	8008146 <UART_SetConfig+0x98e>
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800813a:	d204      	bcs.n	8008146 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	e17f      	b.n	8008446 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800814c:	e17b      	b.n	8008446 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008156:	f040 80bd 	bne.w	80082d4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800815a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800815e:	2b20      	cmp	r3, #32
 8008160:	dc48      	bgt.n	80081f4 <UART_SetConfig+0xa3c>
 8008162:	2b00      	cmp	r3, #0
 8008164:	db7b      	blt.n	800825e <UART_SetConfig+0xaa6>
 8008166:	2b20      	cmp	r3, #32
 8008168:	d879      	bhi.n	800825e <UART_SetConfig+0xaa6>
 800816a:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <UART_SetConfig+0x9b8>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	080081fb 	.word	0x080081fb
 8008174:	08008203 	.word	0x08008203
 8008178:	0800825f 	.word	0x0800825f
 800817c:	0800825f 	.word	0x0800825f
 8008180:	0800820b 	.word	0x0800820b
 8008184:	0800825f 	.word	0x0800825f
 8008188:	0800825f 	.word	0x0800825f
 800818c:	0800825f 	.word	0x0800825f
 8008190:	0800821b 	.word	0x0800821b
 8008194:	0800825f 	.word	0x0800825f
 8008198:	0800825f 	.word	0x0800825f
 800819c:	0800825f 	.word	0x0800825f
 80081a0:	0800825f 	.word	0x0800825f
 80081a4:	0800825f 	.word	0x0800825f
 80081a8:	0800825f 	.word	0x0800825f
 80081ac:	0800825f 	.word	0x0800825f
 80081b0:	0800822b 	.word	0x0800822b
 80081b4:	0800825f 	.word	0x0800825f
 80081b8:	0800825f 	.word	0x0800825f
 80081bc:	0800825f 	.word	0x0800825f
 80081c0:	0800825f 	.word	0x0800825f
 80081c4:	0800825f 	.word	0x0800825f
 80081c8:	0800825f 	.word	0x0800825f
 80081cc:	0800825f 	.word	0x0800825f
 80081d0:	0800825f 	.word	0x0800825f
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	0800825f 	.word	0x0800825f
 80081dc:	0800825f 	.word	0x0800825f
 80081e0:	0800825f 	.word	0x0800825f
 80081e4:	0800825f 	.word	0x0800825f
 80081e8:	0800825f 	.word	0x0800825f
 80081ec:	0800825f 	.word	0x0800825f
 80081f0:	08008251 	.word	0x08008251
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d02e      	beq.n	8008256 <UART_SetConfig+0xa9e>
 80081f8:	e031      	b.n	800825e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081fa:	f7fb fbab 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 80081fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008200:	e033      	b.n	800826a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008202:	f7fb fbbd 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 8008206:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008208:	e02f      	b.n	800826a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820a:	f107 0314 	add.w	r3, r7, #20
 800820e:	4618      	mov	r0, r3
 8008210:	f7fc ff00 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008218:	e027      	b.n	800826a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800821a:	f107 0308 	add.w	r3, r7, #8
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd f84c 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008228:	e01f      	b.n	800826a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822a:	4b6e      	ldr	r3, [pc, #440]	; (80083e4 <UART_SetConfig+0xc2c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008236:	4b6b      	ldr	r3, [pc, #428]	; (80083e4 <UART_SetConfig+0xc2c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	4a69      	ldr	r2, [pc, #420]	; (80083e8 <UART_SetConfig+0xc30>)
 8008242:	fa22 f303 	lsr.w	r3, r2, r3
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008248:	e00f      	b.n	800826a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800824a:	4b67      	ldr	r3, [pc, #412]	; (80083e8 <UART_SetConfig+0xc30>)
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800824e:	e00c      	b.n	800826a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008250:	4b66      	ldr	r3, [pc, #408]	; (80083ec <UART_SetConfig+0xc34>)
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008254:	e009      	b.n	800826a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800825c:	e005      	b.n	800826a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 80ea 	beq.w	8008446 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	4a5a      	ldr	r2, [pc, #360]	; (80083e0 <UART_SetConfig+0xc28>)
 8008278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800827c:	461a      	mov	r2, r3
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	fbb3 f3f2 	udiv	r3, r3, r2
 8008284:	005a      	lsls	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	441a      	add	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d916      	bls.n	80082cc <UART_SetConfig+0xb14>
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a4:	d212      	bcs.n	80082cc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f023 030f 	bic.w	r3, r3, #15
 80082ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082be:	4313      	orrs	r3, r2
 80082c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	e0bc      	b.n	8008446 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082d2:	e0b8      	b.n	8008446 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082d8:	2b20      	cmp	r3, #32
 80082da:	dc4b      	bgt.n	8008374 <UART_SetConfig+0xbbc>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f2c0 8087 	blt.w	80083f0 <UART_SetConfig+0xc38>
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	f200 8084 	bhi.w	80083f0 <UART_SetConfig+0xc38>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0xb38>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	0800837b 	.word	0x0800837b
 80082f4:	08008383 	.word	0x08008383
 80082f8:	080083f1 	.word	0x080083f1
 80082fc:	080083f1 	.word	0x080083f1
 8008300:	0800838b 	.word	0x0800838b
 8008304:	080083f1 	.word	0x080083f1
 8008308:	080083f1 	.word	0x080083f1
 800830c:	080083f1 	.word	0x080083f1
 8008310:	0800839b 	.word	0x0800839b
 8008314:	080083f1 	.word	0x080083f1
 8008318:	080083f1 	.word	0x080083f1
 800831c:	080083f1 	.word	0x080083f1
 8008320:	080083f1 	.word	0x080083f1
 8008324:	080083f1 	.word	0x080083f1
 8008328:	080083f1 	.word	0x080083f1
 800832c:	080083f1 	.word	0x080083f1
 8008330:	080083ab 	.word	0x080083ab
 8008334:	080083f1 	.word	0x080083f1
 8008338:	080083f1 	.word	0x080083f1
 800833c:	080083f1 	.word	0x080083f1
 8008340:	080083f1 	.word	0x080083f1
 8008344:	080083f1 	.word	0x080083f1
 8008348:	080083f1 	.word	0x080083f1
 800834c:	080083f1 	.word	0x080083f1
 8008350:	080083f1 	.word	0x080083f1
 8008354:	080083f1 	.word	0x080083f1
 8008358:	080083f1 	.word	0x080083f1
 800835c:	080083f1 	.word	0x080083f1
 8008360:	080083f1 	.word	0x080083f1
 8008364:	080083f1 	.word	0x080083f1
 8008368:	080083f1 	.word	0x080083f1
 800836c:	080083f1 	.word	0x080083f1
 8008370:	080083d1 	.word	0x080083d1
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	d02e      	beq.n	80083d6 <UART_SetConfig+0xc1e>
 8008378:	e03a      	b.n	80083f0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800837a:	f7fb faeb 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 800837e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008380:	e03c      	b.n	80083fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008382:	f7fb fafd 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 8008386:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008388:	e038      	b.n	80083fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838a:	f107 0314 	add.w	r3, r7, #20
 800838e:	4618      	mov	r0, r3
 8008390:	f7fc fe40 	bl	8005014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008398:	e030      	b.n	80083fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fc ff8c 	bl	80052bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083a8:	e028      	b.n	80083fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083aa:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <UART_SetConfig+0xc2c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083b6:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <UART_SetConfig+0xc2c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	08db      	lsrs	r3, r3, #3
 80083bc:	f003 0303 	and.w	r3, r3, #3
 80083c0:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <UART_SetConfig+0xc30>)
 80083c2:	fa22 f303 	lsr.w	r3, r2, r3
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083c8:	e018      	b.n	80083fc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <UART_SetConfig+0xc30>)
 80083cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083ce:	e015      	b.n	80083fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <UART_SetConfig+0xc34>)
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083d4:	e012      	b.n	80083fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083dc:	e00e      	b.n	80083fc <UART_SetConfig+0xc44>
 80083de:	bf00      	nop
 80083e0:	0800ce30 	.word	0x0800ce30
 80083e4:	58024400 	.word	0x58024400
 80083e8:	03d09000 	.word	0x03d09000
 80083ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083fa:	bf00      	nop
    }

    if (pclk != 0U)
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d021      	beq.n	8008446 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <UART_SetConfig+0xcb8>)
 8008408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800840c:	461a      	mov	r2, r3
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008410:	fbb3 f2f2 	udiv	r2, r3, r2
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	441a      	add	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	fbb2 f3f3 	udiv	r3, r2, r3
 8008424:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	2b0f      	cmp	r3, #15
 800842a:	d909      	bls.n	8008440 <UART_SetConfig+0xc88>
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008432:	d205      	bcs.n	8008440 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	e002      	b.n	8008446 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008462:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008466:	4618      	mov	r0, r3
 8008468:	3738      	adds	r7, #56	; 0x38
 800846a:	46bd      	mov	sp, r7
 800846c:	bdb0      	pop	{r4, r5, r7, pc}
 800846e:	bf00      	nop
 8008470:	0800ce30 	.word	0x0800ce30

08008474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01a      	beq.n	800858a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008572:	d10a      	bne.n	800858a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	605a      	str	r2, [r3, #4]
  }
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085c8:	f7f9 f894 	bl	80016f4 <HAL_GetTick>
 80085cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d10e      	bne.n	80085fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f82f 	bl	800864e <UART_WaitOnFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e025      	b.n	8008646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b04      	cmp	r3, #4
 8008606:	d10e      	bne.n	8008626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f819 	bl	800864e <UART_WaitOnFlagUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e00f      	b.n	8008646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b09c      	sub	sp, #112	; 0x70
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	603b      	str	r3, [r7, #0]
 800865a:	4613      	mov	r3, r2
 800865c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800865e:	e0a9      	b.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	f000 80a5 	beq.w	80087b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866a:	f7f9 f843 	bl	80016f4 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008676:	429a      	cmp	r2, r3
 8008678:	d302      	bcc.n	8008680 <UART_WaitOnFlagUntilTimeout+0x32>
 800867a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800867c:	2b00      	cmp	r3, #0
 800867e:	d140      	bne.n	8008702 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800868e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008694:	667b      	str	r3, [r7, #100]	; 0x64
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800869e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e6      	bne.n	8008680 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3308      	adds	r3, #8
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	f023 0301 	bic.w	r3, r3, #1
 80086c8:	663b      	str	r3, [r7, #96]	; 0x60
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80086d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e5      	bne.n	80086b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e069      	b.n	80087d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d051      	beq.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800871a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871e:	d149      	bne.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008728:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800873e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
 800874a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800874e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3308      	adds	r3, #8
 8008762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	613b      	str	r3, [r7, #16]
   return(result);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	66bb      	str	r3, [r7, #104]	; 0x68
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800877c:	623a      	str	r2, [r7, #32]
 800877e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	69f9      	ldr	r1, [r7, #28]
 8008782:	6a3a      	ldr	r2, [r7, #32]
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	61bb      	str	r3, [r7, #24]
   return(result);
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e5      	bne.n	800875c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e010      	b.n	80087d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69da      	ldr	r2, [r3, #28]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4013      	ands	r3, r2
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	bf0c      	ite	eq
 80087c4:	2301      	moveq	r3, #1
 80087c6:	2300      	movne	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	f43f af46 	beq.w	8008660 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3770      	adds	r7, #112	; 0x70
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e027      	b.n	8008844 <HAL_UARTEx_DisableFifoMode+0x66>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2224      	movs	r2, #36	; 0x24
 8008800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0201 	bic.w	r2, r2, #1
 800881a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008864:	2302      	movs	r3, #2
 8008866:	e02d      	b.n	80088c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2224      	movs	r2, #36	; 0x24
 8008874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f84f 	bl	8008948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e02d      	b.n	8008940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2224      	movs	r2, #36	; 0x24
 80088f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0201 	bic.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	430a      	orrs	r2, r1
 800891e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f811 	bl	8008948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008954:	2b00      	cmp	r3, #0
 8008956:	d108      	bne.n	800896a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008968:	e031      	b.n	80089ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800896a:	2310      	movs	r3, #16
 800896c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800896e:	2310      	movs	r3, #16
 8008970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	0e5b      	lsrs	r3, r3, #25
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	0f5b      	lsrs	r3, r3, #29
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 0307 	and.w	r3, r3, #7
 8008990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	7b3a      	ldrb	r2, [r7, #12]
 8008996:	4911      	ldr	r1, [pc, #68]	; (80089dc <UARTEx_SetNbDataToProcess+0x94>)
 8008998:	5c8a      	ldrb	r2, [r1, r2]
 800899a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800899e:	7b3a      	ldrb	r2, [r7, #12]
 80089a0:	490f      	ldr	r1, [pc, #60]	; (80089e0 <UARTEx_SetNbDataToProcess+0x98>)
 80089a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	7b7a      	ldrb	r2, [r7, #13]
 80089b4:	4909      	ldr	r1, [pc, #36]	; (80089dc <UARTEx_SetNbDataToProcess+0x94>)
 80089b6:	5c8a      	ldrb	r2, [r1, r2]
 80089b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089bc:	7b7a      	ldrb	r2, [r7, #13]
 80089be:	4908      	ldr	r1, [pc, #32]	; (80089e0 <UARTEx_SetNbDataToProcess+0x98>)
 80089c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	0800ce48 	.word	0x0800ce48
 80089e0:	0800ce50 	.word	0x0800ce50

080089e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089e4:	b084      	sub	sp, #16
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	f107 001c 	add.w	r0, r7, #28
 80089f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80089fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80089fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80089fe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008a02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008a06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008a0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <SDMMC_Init+0x50>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	b004      	add	sp, #16
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	ffc02c00 	.word	0xffc02c00

08008a38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f043 0203 	orr.w	r2, r3, #3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ad2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008ad8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008ade:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <SDMMC_SendCommand+0x50>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	fffee0c0 	.word	0xfffee0c0

08008b08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	b2db      	uxtb	r3, r3
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3314      	adds	r3, #20
 8008b30:	461a      	mov	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b6e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008b74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008b7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0

}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008bae:	2310      	movs	r3, #16
 8008bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bc2:	f107 0308 	add.w	r3, r7, #8
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff ff73 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa5f 	bl	8009098 <SDMMC_GetCmdResp1>
 8008bda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3720      	adds	r7, #32
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b088      	sub	sp, #32
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008bf4:	2311      	movs	r3, #17
 8008bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c08:	f107 0308 	add.w	r3, r7, #8
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff ff50 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c18:	2111      	movs	r1, #17
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa3c 	bl	8009098 <SDMMC_GetCmdResp1>
 8008c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c22:	69fb      	ldr	r3, [r7, #28]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c3a:	2312      	movs	r3, #18
 8008c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ff2d 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5e:	2112      	movs	r1, #18
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fa19 	bl	8009098 <SDMMC_GetCmdResp1>
 8008c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c68:	69fb      	ldr	r3, [r7, #28]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b088      	sub	sp, #32
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c80:	2318      	movs	r3, #24
 8008c82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c94:	f107 0308 	add.w	r3, r7, #8
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff ff0a 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca4:	2118      	movs	r1, #24
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f9f6 	bl	8009098 <SDMMC_GetCmdResp1>
 8008cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cae:	69fb      	ldr	r3, [r7, #28]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008cc6:	2319      	movs	r3, #25
 8008cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fee7 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cea:	2119      	movs	r1, #25
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9d3 	bl	8009098 <SDMMC_GetCmdResp1>
 8008cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008d0c:	230c      	movs	r3, #12
 8008d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d1e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d38:	f107 0308 	add.w	r3, r7, #8
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff feb8 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008d44:	4a0b      	ldr	r2, [pc, #44]	; (8008d74 <SDMMC_CmdStopTransfer+0x74>)
 8008d46:	210c      	movs	r1, #12
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f9a5 	bl	8009098 <SDMMC_GetCmdResp1>
 8008d4e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d62:	d101      	bne.n	8008d68 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008d68:	69fb      	ldr	r3, [r7, #28]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	05f5e100 	.word	0x05f5e100

08008d78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d86:	2307      	movs	r3, #7
 8008d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d90:	2300      	movs	r3, #0
 8008d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d9a:	f107 0308 	add.w	r3, r7, #8
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fe87 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008daa:	2107      	movs	r1, #7
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f973 	bl	8009098 <SDMMC_GetCmdResp1>
 8008db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db4:	69fb      	ldr	r3, [r7, #28]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3720      	adds	r7, #32
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b088      	sub	sp, #32
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ddc:	f107 0308 	add.w	r3, r7, #8
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fe66 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb97 	bl	800951c <SDMMC_GetCmdError>
 8008dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df0:	69fb      	ldr	r3, [r7, #28]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3720      	adds	r7, #32
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008e02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008e08:	2308      	movs	r3, #8
 8008e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fe46 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb29 	bl	8009480 <SDMMC_GetCmdResp7>
 8008e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e30:	69fb      	ldr	r3, [r7, #28]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b088      	sub	sp, #32
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e48:	2337      	movs	r3, #55	; 0x37
 8008e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e5c:	f107 0308 	add.w	r3, r7, #8
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff fe26 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e6c:	2137      	movs	r1, #55	; 0x37
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f912 	bl	8009098 <SDMMC_GetCmdResp1>
 8008e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e76:	69fb      	ldr	r3, [r7, #28]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e8e:	2329      	movs	r3, #41	; 0x29
 8008e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea2:	f107 0308 	add.w	r3, r7, #8
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff fe03 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa2e 	bl	8009310 <SDMMC_GetCmdResp3>
 8008eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ece:	2306      	movs	r3, #6
 8008ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ee0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fde3 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef2:	2106      	movs	r1, #6
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f8cf 	bl	8009098 <SDMMC_GetCmdResp1>
 8008efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008efc:	69fb      	ldr	r3, [r7, #28]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b088      	sub	sp, #32
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008f12:	2333      	movs	r3, #51	; 0x33
 8008f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f26:	f107 0308 	add.w	r3, r7, #8
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff fdc1 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f36:	2133      	movs	r1, #51	; 0x33
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8ad 	bl	8009098 <SDMMC_GetCmdResp1>
 8008f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f40:	69fb      	ldr	r3, [r7, #28]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b088      	sub	sp, #32
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f56:	2302      	movs	r3, #2
 8008f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff fd9f 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f980 	bl	800927c <SDMMC_GetCmdResp2>
 8008f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3720      	adds	r7, #32
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f96:	2309      	movs	r3, #9
 8008f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008faa:	f107 0308 	add.w	r3, r7, #8
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fd7f 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f960 	bl	800927c <SDMMC_GetCmdResp2>
 8008fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3720      	adds	r7, #32
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff fd5f 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	2103      	movs	r1, #3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9c8 	bl	8009390 <SDMMC_GetCmdResp6>
 8009000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800901a:	230d      	movs	r3, #13
 800901c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fd3d 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800903a:	f241 3288 	movw	r2, #5000	; 0x1388
 800903e:	210d      	movs	r1, #13
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f829 	bl	8009098 <SDMMC_GetCmdResp1>
 8009046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009048:	69fb      	ldr	r3, [r7, #28]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b088      	sub	sp, #32
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800905e:	230d      	movs	r3, #13
 8009060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800906c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009072:	f107 0308 	add.w	r3, r7, #8
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff fd1b 	bl	8008ab4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800907e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009082:	210d      	movs	r1, #13
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f807 	bl	8009098 <SDMMC_GetCmdResp1>
 800908a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800908c:	69fb      	ldr	r3, [r7, #28]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	460b      	mov	r3, r1
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80090a6:	4b70      	ldr	r3, [pc, #448]	; (8009268 <SDMMC_GetCmdResp1+0x1d0>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a70      	ldr	r2, [pc, #448]	; (800926c <SDMMC_GetCmdResp1+0x1d4>)
 80090ac:	fba2 2303 	umull	r2, r3, r2, r3
 80090b0:	0a5a      	lsrs	r2, r3, #9
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	fb02 f303 	mul.w	r3, r2, r3
 80090b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	1e5a      	subs	r2, r3, #1
 80090be:	61fa      	str	r2, [r7, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090c8:	e0c9      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	4b67      	ldr	r3, [pc, #412]	; (8009270 <SDMMC_GetCmdResp1+0x1d8>)
 80090d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0ef      	beq.n	80090ba <SDMMC_GetCmdResp1+0x22>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ea      	bne.n	80090ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d004      	beq.n	80090fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2204      	movs	r2, #4
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090f6:	2304      	movs	r3, #4
 80090f8:	e0b1      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800910c:	2301      	movs	r3, #1
 800910e:	e0a6      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a58      	ldr	r2, [pc, #352]	; (8009274 <SDMMC_GetCmdResp1+0x1dc>)
 8009114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff fcf6 	bl	8008b08 <SDMMC_GetCommandResponse>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	4293      	cmp	r3, r2
 8009124:	d001      	beq.n	800912a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009126:	2301      	movs	r3, #1
 8009128:	e099      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800912a:	2100      	movs	r1, #0
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff fcf8 	bl	8008b22 <SDMMC_GetResponse>
 8009132:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4b50      	ldr	r3, [pc, #320]	; (8009278 <SDMMC_GetCmdResp1+0x1e0>)
 8009138:	4013      	ands	r3, r2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800913e:	2300      	movs	r3, #0
 8009140:	e08d      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	da02      	bge.n	800914e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800914c:	e087      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	e080      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009166:	2380      	movs	r3, #128	; 0x80
 8009168:	e079      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009178:	e071      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009188:	e069      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009198:	e061      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091a8:	e059      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b8:	e051      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091c8:	e049      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091d8:	e041      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e8:	e039      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80091f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091f8:	e031      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009208:	e029      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009218:	e021      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009228:	e019      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009238:	e011      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009248:	e009      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009254:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009258:	e001      	b.n	800925e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800925a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	24000028 	.word	0x24000028
 800926c:	10624dd3 	.word	0x10624dd3
 8009270:	00200045 	.word	0x00200045
 8009274:	002000c5 	.word	0x002000c5
 8009278:	fdffe008 	.word	0xfdffe008

0800927c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009284:	4b1f      	ldr	r3, [pc, #124]	; (8009304 <SDMMC_GetCmdResp2+0x88>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1f      	ldr	r2, [pc, #124]	; (8009308 <SDMMC_GetCmdResp2+0x8c>)
 800928a:	fba2 2303 	umull	r2, r3, r2, r3
 800928e:	0a5b      	lsrs	r3, r3, #9
 8009290:	f241 3288 	movw	r2, #5000	; 0x1388
 8009294:	fb02 f303 	mul.w	r3, r2, r3
 8009298:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	1e5a      	subs	r2, r3, #1
 800929e:	60fa      	str	r2, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a8:	e026      	b.n	80092f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0ef      	beq.n	800929a <SDMMC_GetCmdResp2+0x1e>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1ea      	bne.n	800929a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2204      	movs	r2, #4
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092d6:	2304      	movs	r3, #4
 80092d8:	e00e      	b.n	80092f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d004      	beq.n	80092f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e003      	b.n	80092f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a06      	ldr	r2, [pc, #24]	; (800930c <SDMMC_GetCmdResp2+0x90>)
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	24000028 	.word	0x24000028
 8009308:	10624dd3 	.word	0x10624dd3
 800930c:	002000c5 	.word	0x002000c5

08009310 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009318:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <SDMMC_GetCmdResp3+0x74>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a1a      	ldr	r2, [pc, #104]	; (8009388 <SDMMC_GetCmdResp3+0x78>)
 800931e:	fba2 2303 	umull	r2, r3, r2, r3
 8009322:	0a5b      	lsrs	r3, r3, #9
 8009324:	f241 3288 	movw	r2, #5000	; 0x1388
 8009328:	fb02 f303 	mul.w	r3, r2, r3
 800932c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1e5a      	subs	r2, r3, #1
 8009332:	60fa      	str	r2, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d102      	bne.n	800933e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800933c:	e01b      	b.n	8009376 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0ef      	beq.n	800932e <SDMMC_GetCmdResp3+0x1e>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1ea      	bne.n	800932e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2204      	movs	r2, #4
 8009368:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800936a:	2304      	movs	r3, #4
 800936c:	e003      	b.n	8009376 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a06      	ldr	r2, [pc, #24]	; (800938c <SDMMC_GetCmdResp3+0x7c>)
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	24000028 	.word	0x24000028
 8009388:	10624dd3 	.word	0x10624dd3
 800938c:	002000c5 	.word	0x002000c5

08009390 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	460b      	mov	r3, r1
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800939e:	4b35      	ldr	r3, [pc, #212]	; (8009474 <SDMMC_GetCmdResp6+0xe4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a35      	ldr	r2, [pc, #212]	; (8009478 <SDMMC_GetCmdResp6+0xe8>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	0a5b      	lsrs	r3, r3, #9
 80093aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	1e5a      	subs	r2, r3, #1
 80093b8:	61fa      	str	r2, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093c2:	e052      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0ef      	beq.n	80093b4 <SDMMC_GetCmdResp6+0x24>
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1ea      	bne.n	80093b4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2204      	movs	r2, #4
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093f0:	2304      	movs	r3, #4
 80093f2:	e03a      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009406:	2301      	movs	r3, #1
 8009408:	e02f      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff fb7c 	bl	8008b08 <SDMMC_GetCommandResponse>
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	4293      	cmp	r3, r2
 8009418:	d001      	beq.n	800941e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800941a:	2301      	movs	r3, #1
 800941c:	e025      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4a16      	ldr	r2, [pc, #88]	; (800947c <SDMMC_GetCmdResp6+0xec>)
 8009422:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009424:	2100      	movs	r1, #0
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff fb7b 	bl	8008b22 <SDMMC_GetResponse>
 800942c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d106      	bne.n	8009446 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009442:	2300      	movs	r3, #0
 8009444:	e011      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009454:	e009      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009464:	e001      	b.n	800946a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	24000028 	.word	0x24000028
 8009478:	10624dd3 	.word	0x10624dd3
 800947c:	002000c5 	.word	0x002000c5

08009480 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009488:	4b22      	ldr	r3, [pc, #136]	; (8009514 <SDMMC_GetCmdResp7+0x94>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a22      	ldr	r2, [pc, #136]	; (8009518 <SDMMC_GetCmdResp7+0x98>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	0a5b      	lsrs	r3, r3, #9
 8009494:	f241 3288 	movw	r2, #5000	; 0x1388
 8009498:	fb02 f303 	mul.w	r3, r2, r3
 800949c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	60fa      	str	r2, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ac:	e02c      	b.n	8009508 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0ef      	beq.n	800949e <SDMMC_GetCmdResp7+0x1e>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1ea      	bne.n	800949e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094da:	2304      	movs	r3, #4
 80094dc:	e014      	b.n	8009508 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e009      	b.n	8009508 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2240      	movs	r2, #64	; 0x40
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009506:	2300      	movs	r3, #0

}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	24000028 	.word	0x24000028
 8009518:	10624dd3 	.word	0x10624dd3

0800951c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009524:	4b11      	ldr	r3, [pc, #68]	; (800956c <SDMMC_GetCmdError+0x50>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a11      	ldr	r2, [pc, #68]	; (8009570 <SDMMC_GetCmdError+0x54>)
 800952a:	fba2 2303 	umull	r2, r3, r2, r3
 800952e:	0a5b      	lsrs	r3, r3, #9
 8009530:	f241 3288 	movw	r2, #5000	; 0x1388
 8009534:	fb02 f303 	mul.w	r3, r2, r3
 8009538:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	1e5a      	subs	r2, r3, #1
 800953e:	60fa      	str	r2, [r7, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009548:	e009      	b.n	800955e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f1      	beq.n	800953a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a06      	ldr	r2, [pc, #24]	; (8009574 <SDMMC_GetCmdError+0x58>)
 800955a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	24000028 	.word	0x24000028
 8009570:	10624dd3 	.word	0x10624dd3
 8009574:	002000c5 	.word	0x002000c5

08009578 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800957c:	4904      	ldr	r1, [pc, #16]	; (8009590 <MX_FATFS_Init+0x18>)
 800957e:	4805      	ldr	r0, [pc, #20]	; (8009594 <MX_FATFS_Init+0x1c>)
 8009580:	f002 ff9a 	bl	800c4b8 <FATFS_LinkDriver>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	4b03      	ldr	r3, [pc, #12]	; (8009598 <MX_FATFS_Init+0x20>)
 800958a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800958c:	bf00      	nop
 800958e:	bd80      	pop	{r7, pc}
 8009590:	2403ee08 	.word	0x2403ee08
 8009594:	0800ce58 	.word	0x0800ce58
 8009598:	2403ee04 	.word	0x2403ee04

0800959c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80095b6:	f000 f89b 	bl	80096f0 <BSP_SD_IsDetected>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d001      	beq.n	80095c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80095c0:	2302      	movs	r3, #2
 80095c2:	e012      	b.n	80095ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80095c4:	480b      	ldr	r0, [pc, #44]	; (80095f4 <BSP_SD_Init+0x48>)
 80095c6:	f7fc fa83 	bl	8005ad0 <HAL_SD_Init>
 80095ca:	4603      	mov	r3, r0
 80095cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d109      	bne.n	80095e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80095d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80095d8:	4806      	ldr	r0, [pc, #24]	; (80095f4 <BSP_SD_Init+0x48>)
 80095da:	f7fd faf9 	bl	8006bd0 <HAL_SD_ConfigWideBusOperation>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80095e8:	79fb      	ldrb	r3, [r7, #7]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	2403ea54 	.word	0x2403ea54

080095f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	4806      	ldr	r0, [pc, #24]	; (8009630 <BSP_SD_ReadBlocks+0x38>)
 8009616:	f7fc fb75 	bl	8005d04 <HAL_SD_ReadBlocks>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009624:	7dfb      	ldrb	r3, [r7, #23]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	2403ea54 	.word	0x2403ea54

08009634 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
 8009640:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	4806      	ldr	r0, [pc, #24]	; (800966c <BSP_SD_WriteBlocks+0x38>)
 8009652:	f7fc fce1 	bl	8006018 <HAL_SD_WriteBlocks>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009660:	7dfb      	ldrb	r3, [r7, #23]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	2403ea54 	.word	0x2403ea54

08009670 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009674:	4805      	ldr	r0, [pc, #20]	; (800968c <BSP_SD_GetCardState+0x1c>)
 8009676:	f7fd fbbd 	bl	8006df4 <HAL_SD_GetCardState>
 800967a:	4603      	mov	r3, r0
 800967c:	2b04      	cmp	r3, #4
 800967e:	bf14      	ite	ne
 8009680:	2301      	movne	r3, #1
 8009682:	2300      	moveq	r3, #0
 8009684:	b2db      	uxtb	r3, r3
}
 8009686:	4618      	mov	r0, r3
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	2403ea54 	.word	0x2403ea54

08009690 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4803      	ldr	r0, [pc, #12]	; (80096a8 <BSP_SD_GetCardInfo+0x18>)
 800969c:	f7fd fa6c 	bl	8006b78 <HAL_SD_GetCardInfo>
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2403ea54 	.word	0x2403ea54

080096ac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80096b4:	f000 f80e 	bl	80096d4 <BSP_SD_WriteCpltCallback>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80096c8:	f000 f80b 	bl	80096e2 <BSP_SD_ReadCpltCallback>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0

}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80096e2:	b480      	push	{r7}
 80096e4:	af00      	add	r7, sp, #0

}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80096f6:	2301      	movs	r3, #1
 80096f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80096fa:	f000 f80b 	bl	8009714 <BSP_PlatformIsDetected>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009704:	2300      	movs	r3, #0
 8009706:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	b2db      	uxtb	r3, r3
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800971a:	2301      	movs	r3, #1
 800971c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800971e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009722:	4806      	ldr	r0, [pc, #24]	; (800973c <BSP_PlatformIsDetected+0x28>)
 8009724:	f7f8 fef8 	bl	8002518 <HAL_GPIO_ReadPin>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800972e:	2300      	movs	r3, #0
 8009730:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009732:	79fb      	ldrb	r3, [r7, #7]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	58020800 	.word	0x58020800

08009740 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800974a:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <SD_CheckStatus+0x38>)
 800974c:	2201      	movs	r2, #1
 800974e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009750:	f7ff ff8e 	bl	8009670 <BSP_SD_GetCardState>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d107      	bne.n	800976a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800975a:	4b07      	ldr	r3, [pc, #28]	; (8009778 <SD_CheckStatus+0x38>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f023 0301 	bic.w	r3, r3, #1
 8009764:	b2da      	uxtb	r2, r3
 8009766:	4b04      	ldr	r3, [pc, #16]	; (8009778 <SD_CheckStatus+0x38>)
 8009768:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800976a:	4b03      	ldr	r3, [pc, #12]	; (8009778 <SD_CheckStatus+0x38>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	24000035 	.word	0x24000035

0800977c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009786:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <SD_initialize+0x38>)
 8009788:	2201      	movs	r2, #1
 800978a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800978c:	f7ff ff0e 	bl	80095ac <BSP_SD_Init>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d107      	bne.n	80097a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff ffd1 	bl	8009740 <SD_CheckStatus>
 800979e:	4603      	mov	r3, r0
 80097a0:	461a      	mov	r2, r3
 80097a2:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <SD_initialize+0x38>)
 80097a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097a6:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <SD_initialize+0x38>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	b2db      	uxtb	r3, r3
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	24000035 	.word	0x24000035

080097b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff ffbb 	bl	8009740 <SD_CheckStatus>
 80097ca:	4603      	mov	r3, r0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80097e8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f7ff ff01 	bl	80095f8 <BSP_SD_ReadBlocks>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d107      	bne.n	800980c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80097fc:	bf00      	nop
 80097fe:	f7ff ff37 	bl	8009670 <BSP_SD_GetCardState>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1fa      	bne.n	80097fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800980c:	7dfb      	ldrb	r3, [r7, #23]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b086      	sub	sp, #24
 800981a:	af00      	add	r7, sp, #0
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800982a:	f04f 33ff 	mov.w	r3, #4294967295
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	68b8      	ldr	r0, [r7, #8]
 8009834:	f7ff fefe 	bl	8009634 <BSP_SD_WriteBlocks>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d107      	bne.n	800984e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800983e:	bf00      	nop
 8009840:	f7ff ff16 	bl	8009670 <BSP_SD_GetCardState>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1fa      	bne.n	8009840 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08c      	sub	sp, #48	; 0x30
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	603a      	str	r2, [r7, #0]
 8009862:	71fb      	strb	r3, [r7, #7]
 8009864:	460b      	mov	r3, r1
 8009866:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800986e:	4b25      	ldr	r3, [pc, #148]	; (8009904 <SD_ioctl+0xac>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	f003 0301 	and.w	r3, r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <SD_ioctl+0x28>
 800987c:	2303      	movs	r3, #3
 800987e:	e03c      	b.n	80098fa <SD_ioctl+0xa2>

  switch (cmd)
 8009880:	79bb      	ldrb	r3, [r7, #6]
 8009882:	2b03      	cmp	r3, #3
 8009884:	d834      	bhi.n	80098f0 <SD_ioctl+0x98>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <SD_ioctl+0x34>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	0800989d 	.word	0x0800989d
 8009890:	080098a5 	.word	0x080098a5
 8009894:	080098bd 	.word	0x080098bd
 8009898:	080098d7 	.word	0x080098d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098a2:	e028      	b.n	80098f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fef1 	bl	8009690 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098ae:	6a3a      	ldr	r2, [r7, #32]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ba:	e01c      	b.n	80098f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fee5 	bl	8009690 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098d4:	e00f      	b.n	80098f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098d6:	f107 0308 	add.w	r3, r7, #8
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff fed8 	bl	8009690 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	0a5a      	lsrs	r2, r3, #9
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ee:	e002      	b.n	80098f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80098f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3730      	adds	r7, #48	; 0x30
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	24000035 	.word	0x24000035

08009908 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	4a08      	ldr	r2, [pc, #32]	; (8009938 <disk_status+0x30>)
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	79fa      	ldrb	r2, [r7, #7]
 8009920:	4905      	ldr	r1, [pc, #20]	; (8009938 <disk_status+0x30>)
 8009922:	440a      	add	r2, r1
 8009924:	7a12      	ldrb	r2, [r2, #8]
 8009926:	4610      	mov	r0, r2
 8009928:	4798      	blx	r3
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	2403e9ac 	.word	0x2403e9ac

0800993c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <disk_initialize+0x48>)
 800994e:	5cd3      	ldrb	r3, [r2, r3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d111      	bne.n	8009978 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	4a0b      	ldr	r2, [pc, #44]	; (8009984 <disk_initialize+0x48>)
 8009958:	2101      	movs	r1, #1
 800995a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	4a09      	ldr	r2, [pc, #36]	; (8009984 <disk_initialize+0x48>)
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	79fa      	ldrb	r2, [r7, #7]
 800996a:	4906      	ldr	r1, [pc, #24]	; (8009984 <disk_initialize+0x48>)
 800996c:	440a      	add	r2, r1
 800996e:	7a12      	ldrb	r2, [r2, #8]
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	2403e9ac 	.word	0x2403e9ac

08009988 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	4a0a      	ldr	r2, [pc, #40]	; (80099c4 <disk_read+0x3c>)
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	689c      	ldr	r4, [r3, #8]
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4a07      	ldr	r2, [pc, #28]	; (80099c4 <disk_read+0x3c>)
 80099a8:	4413      	add	r3, r2
 80099aa:	7a18      	ldrb	r0, [r3, #8]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	47a0      	blx	r4
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	371c      	adds	r7, #28
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd90      	pop	{r4, r7, pc}
 80099c2:	bf00      	nop
 80099c4:	2403e9ac 	.word	0x2403e9ac

080099c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <disk_write+0x3c>)
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	68dc      	ldr	r4, [r3, #12]
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <disk_write+0x3c>)
 80099e8:	4413      	add	r3, r2
 80099ea:	7a18      	ldrb	r0, [r3, #8]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	47a0      	blx	r4
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd90      	pop	{r4, r7, pc}
 8009a02:	bf00      	nop
 8009a04:	2403e9ac 	.word	0x2403e9ac

08009a08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	603a      	str	r2, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
 8009a14:	460b      	mov	r3, r1
 8009a16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <disk_ioctl+0x38>)
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	79fa      	ldrb	r2, [r7, #7]
 8009a26:	4906      	ldr	r1, [pc, #24]	; (8009a40 <disk_ioctl+0x38>)
 8009a28:	440a      	add	r2, r1
 8009a2a:	7a10      	ldrb	r0, [r2, #8]
 8009a2c:	79b9      	ldrb	r1, [r7, #6]
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	4798      	blx	r3
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	2403e9ac 	.word	0x2403e9ac

08009a44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a54:	89fb      	ldrh	r3, [r7, #14]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	b21a      	sxth	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b21b      	sxth	r3, r3
 8009a60:	4313      	orrs	r3, r2
 8009a62:	b21b      	sxth	r3, r3
 8009a64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a66:	89fb      	ldrh	r3, [r7, #14]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3303      	adds	r3, #3
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	3202      	adds	r2, #2
 8009a8c:	7812      	ldrb	r2, [r2, #0]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	3201      	adds	r2, #1
 8009a9a:	7812      	ldrb	r2, [r2, #0]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
	return rv;
 8009aac:	68fb      	ldr	r3, [r7, #12]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	887a      	ldrh	r2, [r7, #2]
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	887b      	ldrh	r3, [r7, #2]
 8009ad4:	0a1b      	lsrs	r3, r3, #8
 8009ad6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	887a      	ldrh	r2, [r7, #2]
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	0a1b      	lsrs	r3, r3, #8
 8009b0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	b2d2      	uxtb	r2, r2
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	b2d2      	uxtb	r2, r2
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	0a1b      	lsrs	r3, r3, #8
 8009b2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	701a      	strb	r2, [r3, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00d      	beq.n	8009b7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	1c53      	adds	r3, r2, #1
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	1c59      	adds	r1, r3, #1
 8009b6c:	6179      	str	r1, [r7, #20]
 8009b6e:	7812      	ldrb	r2, [r2, #0]
 8009b70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1f1      	bne.n	8009b62 <mem_cpy+0x1a>
	}
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b8a:	b480      	push	{r7}
 8009b8c:	b087      	sub	sp, #28
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	617a      	str	r2, [r7, #20]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	607b      	str	r3, [r7, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1f3      	bne.n	8009b9a <mem_set+0x10>
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bc0:	b480      	push	{r7}
 8009bc2:	b089      	sub	sp, #36	; 0x24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	61fa      	str	r2, [r7, #28]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	4619      	mov	r1, r3
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	61ba      	str	r2, [r7, #24]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	1acb      	subs	r3, r1, r3
 8009bec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <mem_cmp+0x40>
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0eb      	beq.n	8009bd8 <mem_cmp+0x18>

	return r;
 8009c00:	697b      	ldr	r3, [r7, #20]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3724      	adds	r7, #36	; 0x24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c18:	e002      	b.n	8009c20 <chk_chr+0x12>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <chk_chr+0x26>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d1f2      	bne.n	8009c1a <chk_chr+0xc>
	return *str;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	781b      	ldrb	r3, [r3, #0]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	60fb      	str	r3, [r7, #12]
 8009c56:	e029      	b.n	8009cac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c58:	4a27      	ldr	r2, [pc, #156]	; (8009cf8 <chk_lock+0xb4>)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	011b      	lsls	r3, r3, #4
 8009c5e:	4413      	add	r3, r2
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01d      	beq.n	8009ca2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c66:	4a24      	ldr	r2, [pc, #144]	; (8009cf8 <chk_lock+0xb4>)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	4413      	add	r3, r2
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d116      	bne.n	8009ca6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c78:	4a1f      	ldr	r2, [pc, #124]	; (8009cf8 <chk_lock+0xb4>)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	4413      	add	r3, r2
 8009c80:	3304      	adds	r3, #4
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d10c      	bne.n	8009ca6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c8c:	4a1a      	ldr	r2, [pc, #104]	; (8009cf8 <chk_lock+0xb4>)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	4413      	add	r3, r2
 8009c94:	3308      	adds	r3, #8
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d102      	bne.n	8009ca6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ca0:	e007      	b.n	8009cb2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d9d2      	bls.n	8009c58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d109      	bne.n	8009ccc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <chk_lock+0x80>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d101      	bne.n	8009cc8 <chk_lock+0x84>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e010      	b.n	8009cea <chk_lock+0xa6>
 8009cc8:	2312      	movs	r3, #18
 8009cca:	e00e      	b.n	8009cea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d108      	bne.n	8009ce4 <chk_lock+0xa0>
 8009cd2:	4a09      	ldr	r2, [pc, #36]	; (8009cf8 <chk_lock+0xb4>)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	4413      	add	r3, r2
 8009cda:	330c      	adds	r3, #12
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ce2:	d101      	bne.n	8009ce8 <chk_lock+0xa4>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	e000      	b.n	8009cea <chk_lock+0xa6>
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	2403e98c 	.word	0x2403e98c

08009cfc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
 8009d06:	e002      	b.n	8009d0e <enq_lock+0x12>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	607b      	str	r3, [r7, #4]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d806      	bhi.n	8009d22 <enq_lock+0x26>
 8009d14:	4a09      	ldr	r2, [pc, #36]	; (8009d3c <enq_lock+0x40>)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	011b      	lsls	r3, r3, #4
 8009d1a:	4413      	add	r3, r2
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1f2      	bne.n	8009d08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	2403e98c 	.word	0x2403e98c

08009d40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	e01f      	b.n	8009d90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d50:	4a41      	ldr	r2, [pc, #260]	; (8009e58 <inc_lock+0x118>)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	4413      	add	r3, r2
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d113      	bne.n	8009d8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d62:	4a3d      	ldr	r2, [pc, #244]	; (8009e58 <inc_lock+0x118>)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	4413      	add	r3, r2
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d109      	bne.n	8009d8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d76:	4a38      	ldr	r2, [pc, #224]	; (8009e58 <inc_lock+0x118>)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	4413      	add	r3, r2
 8009d7e:	3308      	adds	r3, #8
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d006      	beq.n	8009d98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d9dc      	bls.n	8009d50 <inc_lock+0x10>
 8009d96:	e000      	b.n	8009d9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d132      	bne.n	8009e06 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e002      	b.n	8009dac <inc_lock+0x6c>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d806      	bhi.n	8009dc0 <inc_lock+0x80>
 8009db2:	4a29      	ldr	r2, [pc, #164]	; (8009e58 <inc_lock+0x118>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	4413      	add	r3, r2
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f2      	bne.n	8009da6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d101      	bne.n	8009dca <inc_lock+0x8a>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e040      	b.n	8009e4c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	4922      	ldr	r1, [pc, #136]	; (8009e58 <inc_lock+0x118>)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	440b      	add	r3, r1
 8009dd6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	491e      	ldr	r1, [pc, #120]	; (8009e58 <inc_lock+0x118>)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	440b      	add	r3, r1
 8009de4:	3304      	adds	r3, #4
 8009de6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	695a      	ldr	r2, [r3, #20]
 8009dec:	491a      	ldr	r1, [pc, #104]	; (8009e58 <inc_lock+0x118>)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	440b      	add	r3, r1
 8009df4:	3308      	adds	r3, #8
 8009df6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009df8:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <inc_lock+0x118>)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	4413      	add	r3, r2
 8009e00:	330c      	adds	r3, #12
 8009e02:	2200      	movs	r2, #0
 8009e04:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d009      	beq.n	8009e20 <inc_lock+0xe0>
 8009e0c:	4a12      	ldr	r2, [pc, #72]	; (8009e58 <inc_lock+0x118>)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	4413      	add	r3, r2
 8009e14:	330c      	adds	r3, #12
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <inc_lock+0xe0>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e015      	b.n	8009e4c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d108      	bne.n	8009e38 <inc_lock+0xf8>
 8009e26:	4a0c      	ldr	r2, [pc, #48]	; (8009e58 <inc_lock+0x118>)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	4413      	add	r3, r2
 8009e2e:	330c      	adds	r3, #12
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	3301      	adds	r3, #1
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	e001      	b.n	8009e3c <inc_lock+0xfc>
 8009e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e3c:	4906      	ldr	r1, [pc, #24]	; (8009e58 <inc_lock+0x118>)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	440b      	add	r3, r1
 8009e44:	330c      	adds	r3, #12
 8009e46:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3301      	adds	r3, #1
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	2403e98c 	.word	0x2403e98c

08009e5c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d825      	bhi.n	8009ebc <dec_lock+0x60>
		n = Files[i].ctr;
 8009e70:	4a17      	ldr	r2, [pc, #92]	; (8009ed0 <dec_lock+0x74>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	4413      	add	r3, r2
 8009e78:	330c      	adds	r3, #12
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e84:	d101      	bne.n	8009e8a <dec_lock+0x2e>
 8009e86:	2300      	movs	r3, #0
 8009e88:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e8a:	89fb      	ldrh	r3, [r7, #14]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <dec_lock+0x3a>
 8009e90:	89fb      	ldrh	r3, [r7, #14]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e96:	4a0e      	ldr	r2, [pc, #56]	; (8009ed0 <dec_lock+0x74>)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	4413      	add	r3, r2
 8009e9e:	330c      	adds	r3, #12
 8009ea0:	89fa      	ldrh	r2, [r7, #14]
 8009ea2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ea4:	89fb      	ldrh	r3, [r7, #14]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d105      	bne.n	8009eb6 <dec_lock+0x5a>
 8009eaa:	4a09      	ldr	r2, [pc, #36]	; (8009ed0 <dec_lock+0x74>)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	4413      	add	r3, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	737b      	strb	r3, [r7, #13]
 8009eba:	e001      	b.n	8009ec0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ec0:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	2403e98c 	.word	0x2403e98c

08009ed4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e010      	b.n	8009f04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ee2:	4a0d      	ldr	r2, [pc, #52]	; (8009f18 <clear_lock+0x44>)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	4413      	add	r3, r2
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d105      	bne.n	8009efe <clear_lock+0x2a>
 8009ef2:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <clear_lock+0x44>)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3301      	adds	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d9eb      	bls.n	8009ee2 <clear_lock+0xe>
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	2403e98c 	.word	0x2403e98c

08009f1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	78db      	ldrb	r3, [r3, #3]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d034      	beq.n	8009f9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	7858      	ldrb	r0, [r3, #1]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f40:	2301      	movs	r3, #1
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	f7ff fd40 	bl	80099c8 <disk_write>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	73fb      	strb	r3, [r7, #15]
 8009f52:	e022      	b.n	8009f9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	1ad2      	subs	r2, r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d217      	bcs.n	8009f9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	789b      	ldrb	r3, [r3, #2]
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	e010      	b.n	8009f94 <sync_window+0x78>
					wsect += fs->fsize;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4413      	add	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	7858      	ldrb	r0, [r3, #1]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f86:	2301      	movs	r3, #1
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	f7ff fd1d 	bl	80099c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d8eb      	bhi.n	8009f72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d01b      	beq.n	8009ff4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ffad 	bl	8009f1c <sync_window>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d113      	bne.n	8009ff4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7858      	ldrb	r0, [r3, #1]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	f7ff fcd5 	bl	8009988 <disk_read>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff87 	bl	8009f1c <sync_window>
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d158      	bne.n	800a0ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d148      	bne.n	800a0b2 <sync_fs+0xb2>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	791b      	ldrb	r3, [r3, #4]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d144      	bne.n	800a0b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3330      	adds	r3, #48	; 0x30
 800a02c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a030:	2100      	movs	r1, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff fda9 	bl	8009b8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3330      	adds	r3, #48	; 0x30
 800a03c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a040:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fd38 	bl	8009aba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3330      	adds	r3, #48	; 0x30
 800a04e:	4921      	ldr	r1, [pc, #132]	; (800a0d4 <sync_fs+0xd4>)
 800a050:	4618      	mov	r0, r3
 800a052:	f7ff fd4d 	bl	8009af0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3330      	adds	r3, #48	; 0x30
 800a05a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a05e:	491e      	ldr	r1, [pc, #120]	; (800a0d8 <sync_fs+0xd8>)
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff fd45 	bl	8009af0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3330      	adds	r3, #48	; 0x30
 800a06a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f7ff fd3b 	bl	8009af0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3330      	adds	r3, #48	; 0x30
 800a07e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7ff fd31 	bl	8009af0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7858      	ldrb	r0, [r3, #1]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f7ff fc8e 	bl	80099c8 <disk_write>
			fs->fsi_flag = 0;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff fca4 	bl	8009a08 <disk_ioctl>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <sync_fs+0xca>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	41615252 	.word	0x41615252
 800a0d8:	61417272 	.word	0x61417272

0800a0dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	3b02      	subs	r3, #2
 800a0ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	3b02      	subs	r3, #2
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d301      	bcc.n	800a0fc <clust2sect+0x20>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e008      	b.n	800a10e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	895b      	ldrh	r3, [r3, #10]
 800a100:	461a      	mov	r2, r3
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	fb03 f202 	mul.w	r2, r3, r2
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	4413      	add	r3, r2
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d904      	bls.n	800a13a <get_fat+0x20>
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d302      	bcc.n	800a140 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a13a:	2301      	movs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
 800a13e:	e08f      	b.n	800a260 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a140:	f04f 33ff 	mov.w	r3, #4294967295
 800a144:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d062      	beq.n	800a214 <get_fat+0xfa>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	dc7c      	bgt.n	800a24c <get_fat+0x132>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d002      	beq.n	800a15c <get_fat+0x42>
 800a156:	2b02      	cmp	r3, #2
 800a158:	d042      	beq.n	800a1e0 <get_fat+0xc6>
 800a15a:	e077      	b.n	800a24c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	6a1a      	ldr	r2, [r3, #32]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	0a5b      	lsrs	r3, r3, #9
 800a172:	4413      	add	r3, r2
 800a174:	4619      	mov	r1, r3
 800a176:	6938      	ldr	r0, [r7, #16]
 800a178:	f7ff ff14 	bl	8009fa4 <move_window>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d167      	bne.n	800a252 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	60fa      	str	r2, [r7, #12]
 800a188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4413      	add	r3, r2
 800a190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a194:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6a1a      	ldr	r2, [r3, #32]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	0a5b      	lsrs	r3, r3, #9
 800a19e:	4413      	add	r3, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6938      	ldr	r0, [r7, #16]
 800a1a4:	f7ff fefe 	bl	8009fa4 <move_window>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d153      	bne.n	800a256 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	461a      	mov	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <get_fat+0xbc>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	091b      	lsrs	r3, r3, #4
 800a1d4:	e002      	b.n	800a1dc <get_fat+0xc2>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1dc:	617b      	str	r3, [r7, #20]
			break;
 800a1de:	e03f      	b.n	800a260 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	6a1a      	ldr	r2, [r3, #32]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6938      	ldr	r0, [r7, #16]
 800a1ee:	f7ff fed9 	bl	8009fa4 <move_window>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d130      	bne.n	800a25a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a206:	4413      	add	r3, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fc1b 	bl	8009a44 <ld_word>
 800a20e:	4603      	mov	r3, r0
 800a210:	617b      	str	r3, [r7, #20]
			break;
 800a212:	e025      	b.n	800a260 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	09db      	lsrs	r3, r3, #7
 800a21c:	4413      	add	r3, r2
 800a21e:	4619      	mov	r1, r3
 800a220:	6938      	ldr	r0, [r7, #16]
 800a222:	f7ff febf 	bl	8009fa4 <move_window>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d118      	bne.n	800a25e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a23a:	4413      	add	r3, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff fc19 	bl	8009a74 <ld_dword>
 800a242:	4603      	mov	r3, r0
 800a244:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a248:	617b      	str	r3, [r7, #20]
			break;
 800a24a:	e009      	b.n	800a260 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a24c:	2301      	movs	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e006      	b.n	800a260 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a252:	bf00      	nop
 800a254:	e004      	b.n	800a260 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a256:	bf00      	nop
 800a258:	e002      	b.n	800a260 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a25e:	bf00      	nop
		}
	}

	return val;
 800a260:	697b      	ldr	r3, [r7, #20]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a26a:	b590      	push	{r4, r7, lr}
 800a26c:	b089      	sub	sp, #36	; 0x24
 800a26e:	af00      	add	r7, sp, #0
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	60b9      	str	r1, [r7, #8]
 800a274:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a276:	2302      	movs	r3, #2
 800a278:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	f240 80d2 	bls.w	800a426 <put_fat+0x1bc>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	429a      	cmp	r2, r3
 800a28a:	f080 80cc 	bcs.w	800a426 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b03      	cmp	r3, #3
 800a294:	f000 8096 	beq.w	800a3c4 <put_fat+0x15a>
 800a298:	2b03      	cmp	r3, #3
 800a29a:	f300 80cd 	bgt.w	800a438 <put_fat+0x1ce>
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d002      	beq.n	800a2a8 <put_fat+0x3e>
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d06e      	beq.n	800a384 <put_fat+0x11a>
 800a2a6:	e0c7      	b.n	800a438 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6a1a      	ldr	r2, [r3, #32]
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	0a5b      	lsrs	r3, r3, #9
 800a2be:	4413      	add	r3, r2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7ff fe6e 	bl	8009fa4 <move_window>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2cc:	7ffb      	ldrb	r3, [r7, #31]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 80ab 	bne.w	800a42a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	1c59      	adds	r1, r3, #1
 800a2de:	61b9      	str	r1, [r7, #24]
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	4413      	add	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00d      	beq.n	800a30e <put_fat+0xa4>
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b25b      	sxtb	r3, r3
 800a2f8:	f003 030f 	and.w	r3, r3, #15
 800a2fc:	b25a      	sxtb	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	b25b      	sxtb	r3, r3
 800a306:	4313      	orrs	r3, r2
 800a308:	b25b      	sxtb	r3, r3
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	e001      	b.n	800a312 <put_fat+0xa8>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1a      	ldr	r2, [r3, #32]
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	0a5b      	lsrs	r3, r3, #9
 800a324:	4413      	add	r3, r2
 800a326:	4619      	mov	r1, r3
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff fe3b 	bl	8009fa4 <move_window>
 800a32e:	4603      	mov	r3, r0
 800a330:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a332:	7ffb      	ldrb	r3, [r7, #31]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d17a      	bne.n	800a42e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a344:	4413      	add	r3, r2
 800a346:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <put_fat+0xf0>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	091b      	lsrs	r3, r3, #4
 800a356:	b2db      	uxtb	r3, r3
 800a358:	e00e      	b.n	800a378 <put_fat+0x10e>
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b25b      	sxtb	r3, r3
 800a360:	f023 030f 	bic.w	r3, r3, #15
 800a364:	b25a      	sxtb	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	0a1b      	lsrs	r3, r3, #8
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	b25b      	sxtb	r3, r3
 800a372:	4313      	orrs	r3, r2
 800a374:	b25b      	sxtb	r3, r3
 800a376:	b2db      	uxtb	r3, r3
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2201      	movs	r2, #1
 800a380:	70da      	strb	r2, [r3, #3]
			break;
 800a382:	e059      	b.n	800a438 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	0a1b      	lsrs	r3, r3, #8
 800a38c:	4413      	add	r3, r2
 800a38e:	4619      	mov	r1, r3
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f7ff fe07 	bl	8009fa4 <move_window>
 800a396:	4603      	mov	r3, r0
 800a398:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a39a:	7ffb      	ldrb	r3, [r7, #31]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d148      	bne.n	800a432 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a3ae:	4413      	add	r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fb7f 	bl	8009aba <st_word>
			fs->wflag = 1;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	70da      	strb	r2, [r3, #3]
			break;
 800a3c2:	e039      	b.n	800a438 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	09db      	lsrs	r3, r3, #7
 800a3cc:	4413      	add	r3, r2
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7ff fde7 	bl	8009fa4 <move_window>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3da:	7ffb      	ldrb	r3, [r7, #31]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d12a      	bne.n	800a436 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3f4:	4413      	add	r3, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fb3c 	bl	8009a74 <ld_dword>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a402:	4323      	orrs	r3, r4
 800a404:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a414:	4413      	add	r3, r2
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff fb69 	bl	8009af0 <st_dword>
			fs->wflag = 1;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	70da      	strb	r2, [r3, #3]
			break;
 800a424:	e008      	b.n	800a438 <put_fat+0x1ce>
		}
	}
 800a426:	bf00      	nop
 800a428:	e006      	b.n	800a438 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a42a:	bf00      	nop
 800a42c:	e004      	b.n	800a438 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a42e:	bf00      	nop
 800a430:	e002      	b.n	800a438 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a432:	bf00      	nop
 800a434:	e000      	b.n	800a438 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a436:	bf00      	nop
	return res;
 800a438:	7ffb      	ldrb	r3, [r7, #31]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3724      	adds	r7, #36	; 0x24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd90      	pop	{r4, r7, pc}

0800a442 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b088      	sub	sp, #32
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d904      	bls.n	800a468 <remove_chain+0x26>
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	429a      	cmp	r2, r3
 800a466:	d301      	bcc.n	800a46c <remove_chain+0x2a>
 800a468:	2302      	movs	r3, #2
 800a46a:	e04b      	b.n	800a504 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00c      	beq.n	800a48c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a472:	f04f 32ff 	mov.w	r2, #4294967295
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	69b8      	ldr	r0, [r7, #24]
 800a47a:	f7ff fef6 	bl	800a26a <put_fat>
 800a47e:	4603      	mov	r3, r0
 800a480:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a482:	7ffb      	ldrb	r3, [r7, #31]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <remove_chain+0x4a>
 800a488:	7ffb      	ldrb	r3, [r7, #31]
 800a48a:	e03b      	b.n	800a504 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a48c:	68b9      	ldr	r1, [r7, #8]
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fe43 	bl	800a11a <get_fat>
 800a494:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d031      	beq.n	800a500 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d101      	bne.n	800a4a6 <remove_chain+0x64>
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	e02e      	b.n	800a504 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ac:	d101      	bne.n	800a4b2 <remove_chain+0x70>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e028      	b.n	800a504 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	69b8      	ldr	r0, [r7, #24]
 800a4b8:	f7ff fed7 	bl	800a26a <put_fat>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a4c0:	7ffb      	ldrb	r3, [r7, #31]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <remove_chain+0x88>
 800a4c6:	7ffb      	ldrb	r3, [r7, #31]
 800a4c8:	e01c      	b.n	800a504 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	691a      	ldr	r2, [r3, #16]
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	3b02      	subs	r3, #2
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d20b      	bcs.n	800a4f0 <remove_chain+0xae>
			fs->free_clst++;
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	791b      	ldrb	r3, [r3, #4]
 800a4e6:	f043 0301 	orr.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d3c6      	bcc.n	800a48c <remove_chain+0x4a>
 800a4fe:	e000      	b.n	800a502 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a500:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10d      	bne.n	800a53e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d004      	beq.n	800a538 <create_chain+0x2c>
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	429a      	cmp	r2, r3
 800a536:	d31b      	bcc.n	800a570 <create_chain+0x64>
 800a538:	2301      	movs	r3, #1
 800a53a:	61bb      	str	r3, [r7, #24]
 800a53c:	e018      	b.n	800a570 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fdea 	bl	800a11a <get_fat>
 800a546:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d801      	bhi.n	800a552 <create_chain+0x46>
 800a54e:	2301      	movs	r3, #1
 800a550:	e070      	b.n	800a634 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d101      	bne.n	800a55e <create_chain+0x52>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	e06a      	b.n	800a634 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	429a      	cmp	r2, r3
 800a566:	d201      	bcs.n	800a56c <create_chain+0x60>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	e063      	b.n	800a634 <create_chain+0x128>
		scl = clst;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	429a      	cmp	r2, r3
 800a582:	d307      	bcc.n	800a594 <create_chain+0x88>
				ncl = 2;
 800a584:	2302      	movs	r3, #2
 800a586:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d901      	bls.n	800a594 <create_chain+0x88>
 800a590:	2300      	movs	r3, #0
 800a592:	e04f      	b.n	800a634 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a594:	69f9      	ldr	r1, [r7, #28]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff fdbf 	bl	800a11a <get_fat>
 800a59c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00e      	beq.n	800a5c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d003      	beq.n	800a5b2 <create_chain+0xa6>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b0:	d101      	bne.n	800a5b6 <create_chain+0xaa>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	e03e      	b.n	800a634 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d1da      	bne.n	800a574 <create_chain+0x68>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e038      	b.n	800a634 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a5c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c8:	69f9      	ldr	r1, [r7, #28]
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f7ff fe4d 	bl	800a26a <put_fat>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <create_chain+0xe2>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d006      	beq.n	800a5ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6938      	ldr	r0, [r7, #16]
 800a5e6:	f7ff fe40 	bl	800a26a <put_fat>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d116      	bne.n	800a622 <create_chain+0x116>
		fs->last_clst = ncl;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	3b02      	subs	r3, #2
 800a604:	429a      	cmp	r2, r3
 800a606:	d804      	bhi.n	800a612 <create_chain+0x106>
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	1e5a      	subs	r2, r3, #1
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	791b      	ldrb	r3, [r3, #4]
 800a616:	f043 0301 	orr.w	r3, r3, #1
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	711a      	strb	r2, [r3, #4]
 800a620:	e007      	b.n	800a632 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d102      	bne.n	800a62e <create_chain+0x122>
 800a628:	f04f 33ff 	mov.w	r3, #4294967295
 800a62c:	e000      	b.n	800a630 <create_chain+0x124>
 800a62e:	2301      	movs	r3, #1
 800a630:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a632:	69fb      	ldr	r3, [r7, #28]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	3304      	adds	r3, #4
 800a652:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	8952      	ldrh	r2, [r2, #10]
 800a65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a660:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	1d1a      	adds	r2, r3, #4
 800a666:	613a      	str	r2, [r7, #16]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <clmt_clust+0x3a>
 800a672:	2300      	movs	r3, #0
 800a674:	e010      	b.n	800a698 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d307      	bcc.n	800a68e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	3304      	adds	r3, #4
 800a68a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a68c:	e7e9      	b.n	800a662 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a68e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	4413      	add	r3, r2
}
 800a698:	4618      	mov	r0, r3
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ba:	d204      	bcs.n	800a6c6 <dir_sdi+0x22>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e063      	b.n	800a792 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d106      	bne.n	800a6ea <dir_sdi+0x46>
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d902      	bls.n	800a6ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10c      	bne.n	800a70a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	8912      	ldrh	r2, [r2, #8]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d301      	bcc.n	800a700 <dir_sdi+0x5c>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e048      	b.n	800a792 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	61da      	str	r2, [r3, #28]
 800a708:	e029      	b.n	800a75e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	895b      	ldrh	r3, [r3, #10]
 800a70e:	025b      	lsls	r3, r3, #9
 800a710:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a712:	e019      	b.n	800a748 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6979      	ldr	r1, [r7, #20]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fcfe 	bl	800a11a <get_fat>
 800a71e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d101      	bne.n	800a72c <dir_sdi+0x88>
 800a728:	2301      	movs	r3, #1
 800a72a:	e032      	b.n	800a792 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d904      	bls.n	800a73c <dir_sdi+0x98>
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d301      	bcc.n	800a740 <dir_sdi+0x9c>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e028      	b.n	800a792 <dir_sdi+0xee>
			ofs -= csz;
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d2e1      	bcs.n	800a714 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a750:	6979      	ldr	r1, [r7, #20]
 800a752:	6938      	ldr	r0, [r7, #16]
 800a754:	f7ff fcc2 	bl	800a0dc <clust2sect>
 800a758:	4602      	mov	r2, r0
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <dir_sdi+0xcc>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e010      	b.n	800a792 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	0a5b      	lsrs	r3, r3, #9
 800a778:	441a      	add	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78a:	441a      	add	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	3320      	adds	r3, #32
 800a7b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <dir_next+0x28>
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c0:	d301      	bcc.n	800a7c6 <dir_next+0x2c>
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	e0aa      	b.n	800a91c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f040 8098 	bne.w	800a902 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	095b      	lsrs	r3, r3, #5
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	8912      	ldrh	r2, [r2, #8]
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	f0c0 8088 	bcc.w	800a902 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	61da      	str	r2, [r3, #28]
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	e08f      	b.n	800a91c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	0a5b      	lsrs	r3, r3, #9
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	8952      	ldrh	r2, [r2, #10]
 800a804:	3a01      	subs	r2, #1
 800a806:	4013      	ands	r3, r2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d17a      	bne.n	800a902 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f7ff fc80 	bl	800a11a <get_fat>
 800a81a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d801      	bhi.n	800a826 <dir_next+0x8c>
 800a822:	2302      	movs	r3, #2
 800a824:	e07a      	b.n	800a91c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d101      	bne.n	800a832 <dir_next+0x98>
 800a82e:	2301      	movs	r3, #1
 800a830:	e074      	b.n	800a91c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d358      	bcc.n	800a8ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d104      	bne.n	800a84c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	61da      	str	r2, [r3, #28]
 800a848:	2304      	movs	r3, #4
 800a84a:	e067      	b.n	800a91c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	4619      	mov	r1, r3
 800a854:	4610      	mov	r0, r2
 800a856:	f7ff fe59 	bl	800a50c <create_chain>
 800a85a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <dir_next+0xcc>
 800a862:	2307      	movs	r3, #7
 800a864:	e05a      	b.n	800a91c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <dir_next+0xd6>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e055      	b.n	800a91c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d101      	bne.n	800a87c <dir_next+0xe2>
 800a878:	2301      	movs	r3, #1
 800a87a:	e04f      	b.n	800a91c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7ff fb4d 	bl	8009f1c <sync_window>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <dir_next+0xf2>
 800a888:	2301      	movs	r3, #1
 800a88a:	e047      	b.n	800a91c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3330      	adds	r3, #48	; 0x30
 800a890:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a894:	2100      	movs	r1, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff f977 	bl	8009b8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a89c:	2300      	movs	r3, #0
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	6979      	ldr	r1, [r7, #20]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7ff fc1a 	bl	800a0dc <clust2sect>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8ae:	e012      	b.n	800a8d6 <dir_next+0x13c>
						fs->wflag = 1;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fb30 	bl	8009f1c <sync_window>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <dir_next+0x12c>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e02a      	b.n	800a91c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	895b      	ldrh	r3, [r3, #10]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d3e6      	bcc.n	800a8b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad2      	subs	r2, r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a8f4:	6979      	ldr	r1, [r7, #20]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fbf0 	bl	800a0dc <clust2sect>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a914:	441a      	add	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a934:	2100      	movs	r1, #0
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff feb4 	bl	800a6a4 <dir_sdi>
 800a93c:	4603      	mov	r3, r0
 800a93e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a940:	7dfb      	ldrb	r3, [r7, #23]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d12b      	bne.n	800a99e <dir_alloc+0x7a>
		n = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	4619      	mov	r1, r3
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7ff fb27 	bl	8009fa4 <move_window>
 800a956:	4603      	mov	r3, r0
 800a958:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d11d      	bne.n	800a99c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2be5      	cmp	r3, #229	; 0xe5
 800a968:	d004      	beq.n	800a974 <dir_alloc+0x50>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d107      	bne.n	800a984 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	3301      	adds	r3, #1
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d102      	bne.n	800a988 <dir_alloc+0x64>
 800a982:	e00c      	b.n	800a99e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a984:	2300      	movs	r3, #0
 800a986:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a988:	2101      	movs	r1, #1
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff ff05 	bl	800a79a <dir_next>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0d7      	beq.n	800a94a <dir_alloc+0x26>
 800a99a:	e000      	b.n	800a99e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a99c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d101      	bne.n	800a9a8 <dir_alloc+0x84>
 800a9a4:	2307      	movs	r3, #7
 800a9a6:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	331a      	adds	r3, #26
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff f83f 	bl	8009a44 <ld_word>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d109      	bne.n	800a9e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	3314      	adds	r3, #20
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff f834 	bl	8009a44 <ld_word>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	331a      	adds	r3, #26
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	b292      	uxth	r2, r2
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff f857 	bl	8009aba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d109      	bne.n	800aa28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	f103 0214 	add.w	r2, r3, #20
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	0c1b      	lsrs	r3, r3, #16
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f7ff f849 	bl	8009aba <st_word>
	}
}
 800aa28:	bf00      	nop
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa3e:	2100      	movs	r1, #0
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff fe2f 	bl	800a6a4 <dir_sdi>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <dir_find+0x24>
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	e03e      	b.n	800aad2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6938      	ldr	r0, [r7, #16]
 800aa5c:	f7ff faa2 	bl	8009fa4 <move_window>
 800aa60:	4603      	mov	r3, r0
 800aa62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d12f      	bne.n	800aaca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <dir_find+0x4e>
 800aa78:	2304      	movs	r3, #4
 800aa7a:	75fb      	strb	r3, [r7, #23]
 800aa7c:	e028      	b.n	800aad0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	330b      	adds	r3, #11
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	330b      	adds	r3, #11
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	f003 0308 	and.w	r3, r3, #8
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <dir_find+0x86>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a18      	ldr	r0, [r3, #32]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3324      	adds	r3, #36	; 0x24
 800aaa8:	220b      	movs	r2, #11
 800aaaa:	4619      	mov	r1, r3
 800aaac:	f7ff f888 	bl	8009bc0 <mem_cmp>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00b      	beq.n	800aace <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aab6:	2100      	movs	r1, #0
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fe6e 	bl	800a79a <dir_next>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0c5      	beq.n	800aa54 <dir_find+0x24>
 800aac8:	e002      	b.n	800aad0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aaca:	bf00      	nop
 800aacc:	e000      	b.n	800aad0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aace:	bf00      	nop

	return res;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aae8:	2101      	movs	r1, #1
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7ff ff1a 	bl	800a924 <dir_alloc>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d11c      	bne.n	800ab34 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	4619      	mov	r1, r3
 800ab00:	68b8      	ldr	r0, [r7, #8]
 800ab02:	f7ff fa4f 	bl	8009fa4 <move_window>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d111      	bne.n	800ab34 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	2220      	movs	r2, #32
 800ab16:	2100      	movs	r1, #0
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff f836 	bl	8009b8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a18      	ldr	r0, [r3, #32]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3324      	adds	r3, #36	; 0x24
 800ab26:	220b      	movs	r2, #11
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f7ff f80d 	bl	8009b48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2201      	movs	r2, #1
 800ab32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3324      	adds	r3, #36	; 0x24
 800ab54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab56:	220b      	movs	r2, #11
 800ab58:	2120      	movs	r1, #32
 800ab5a:	68b8      	ldr	r0, [r7, #8]
 800ab5c:	f7ff f815 	bl	8009b8a <mem_set>
	si = i = 0; ni = 8;
 800ab60:	2300      	movs	r3, #0
 800ab62:	613b      	str	r3, [r7, #16]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	61fb      	str	r3, [r7, #28]
 800ab68:	2308      	movs	r3, #8
 800ab6a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	61fa      	str	r2, [r7, #28]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab7a:	7efb      	ldrb	r3, [r7, #27]
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d94e      	bls.n	800ac1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ab80:	7efb      	ldrb	r3, [r7, #27]
 800ab82:	2b2f      	cmp	r3, #47	; 0x2f
 800ab84:	d006      	beq.n	800ab94 <create_name+0x54>
 800ab86:	7efb      	ldrb	r3, [r7, #27]
 800ab88:	2b5c      	cmp	r3, #92	; 0x5c
 800ab8a:	d110      	bne.n	800abae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ab8c:	e002      	b.n	800ab94 <create_name+0x54>
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	3301      	adds	r3, #1
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ab9e:	d0f6      	beq.n	800ab8e <create_name+0x4e>
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	4413      	add	r3, r2
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b5c      	cmp	r3, #92	; 0x5c
 800abaa:	d0f0      	beq.n	800ab8e <create_name+0x4e>
			break;
 800abac:	e038      	b.n	800ac20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800abae:	7efb      	ldrb	r3, [r7, #27]
 800abb0:	2b2e      	cmp	r3, #46	; 0x2e
 800abb2:	d003      	beq.n	800abbc <create_name+0x7c>
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d30c      	bcc.n	800abd6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b0b      	cmp	r3, #11
 800abc0:	d002      	beq.n	800abc8 <create_name+0x88>
 800abc2:	7efb      	ldrb	r3, [r7, #27]
 800abc4:	2b2e      	cmp	r3, #46	; 0x2e
 800abc6:	d001      	beq.n	800abcc <create_name+0x8c>
 800abc8:	2306      	movs	r3, #6
 800abca:	e044      	b.n	800ac56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800abcc:	2308      	movs	r3, #8
 800abce:	613b      	str	r3, [r7, #16]
 800abd0:	230b      	movs	r3, #11
 800abd2:	617b      	str	r3, [r7, #20]
			continue;
 800abd4:	e022      	b.n	800ac1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800abd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	da04      	bge.n	800abe8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800abde:	7efb      	ldrb	r3, [r7, #27]
 800abe0:	3b80      	subs	r3, #128	; 0x80
 800abe2:	4a1f      	ldr	r2, [pc, #124]	; (800ac60 <create_name+0x120>)
 800abe4:	5cd3      	ldrb	r3, [r2, r3]
 800abe6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800abe8:	7efb      	ldrb	r3, [r7, #27]
 800abea:	4619      	mov	r1, r3
 800abec:	481d      	ldr	r0, [pc, #116]	; (800ac64 <create_name+0x124>)
 800abee:	f7ff f80e 	bl	8009c0e <chk_chr>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <create_name+0xbc>
 800abf8:	2306      	movs	r3, #6
 800abfa:	e02c      	b.n	800ac56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800abfc:	7efb      	ldrb	r3, [r7, #27]
 800abfe:	2b60      	cmp	r3, #96	; 0x60
 800ac00:	d905      	bls.n	800ac0e <create_name+0xce>
 800ac02:	7efb      	ldrb	r3, [r7, #27]
 800ac04:	2b7a      	cmp	r3, #122	; 0x7a
 800ac06:	d802      	bhi.n	800ac0e <create_name+0xce>
 800ac08:	7efb      	ldrb	r3, [r7, #27]
 800ac0a:	3b20      	subs	r3, #32
 800ac0c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	613a      	str	r2, [r7, #16]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	4413      	add	r3, r2
 800ac18:	7efa      	ldrb	r2, [r7, #27]
 800ac1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac1c:	e7a6      	b.n	800ab6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	441a      	add	r2, r3
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <create_name+0xf4>
 800ac30:	2306      	movs	r3, #6
 800ac32:	e010      	b.n	800ac56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2be5      	cmp	r3, #229	; 0xe5
 800ac3a:	d102      	bne.n	800ac42 <create_name+0x102>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2205      	movs	r2, #5
 800ac40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac42:	7efb      	ldrb	r3, [r7, #27]
 800ac44:	2b20      	cmp	r3, #32
 800ac46:	d801      	bhi.n	800ac4c <create_name+0x10c>
 800ac48:	2204      	movs	r2, #4
 800ac4a:	e000      	b.n	800ac4e <create_name+0x10e>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	330b      	adds	r3, #11
 800ac52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3720      	adds	r7, #32
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800ce6c 	.word	0x0800ce6c
 800ac64:	0800cddc 	.word	0x0800cddc

0800ac68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac7c:	e002      	b.n	800ac84 <follow_path+0x1c>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	3301      	adds	r3, #1
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b2f      	cmp	r3, #47	; 0x2f
 800ac8a:	d0f8      	beq.n	800ac7e <follow_path+0x16>
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b5c      	cmp	r3, #92	; 0x5c
 800ac92:	d0f4      	beq.n	800ac7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2200      	movs	r2, #0
 800ac98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b1f      	cmp	r3, #31
 800aca0:	d80a      	bhi.n	800acb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2280      	movs	r2, #128	; 0x80
 800aca6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800acaa:	2100      	movs	r1, #0
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff fcf9 	bl	800a6a4 <dir_sdi>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
 800acb6:	e043      	b.n	800ad40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acb8:	463b      	mov	r3, r7
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff ff3f 	bl	800ab40 <create_name>
 800acc2:	4603      	mov	r3, r0
 800acc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acc6:	7dfb      	ldrb	r3, [r7, #23]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d134      	bne.n	800ad36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff feaf 	bl	800aa30 <dir_find>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00a      	beq.n	800acfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	d127      	bne.n	800ad3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d122      	bne.n	800ad3a <follow_path+0xd2>
 800acf4:	2305      	movs	r3, #5
 800acf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800acf8:	e01f      	b.n	800ad3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d11c      	bne.n	800ad3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	799b      	ldrb	r3, [r3, #6]
 800ad08:	f003 0310 	and.w	r3, r3, #16
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d102      	bne.n	800ad16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad10:	2305      	movs	r3, #5
 800ad12:	75fb      	strb	r3, [r7, #23]
 800ad14:	e014      	b.n	800ad40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad24:	4413      	add	r3, r2
 800ad26:	4619      	mov	r1, r3
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fe42 	bl	800a9b2 <ld_clust>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad34:	e7c0      	b.n	800acb8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ad36:	bf00      	nop
 800ad38:	e002      	b.n	800ad40 <follow_path+0xd8>
				break;
 800ad3a:	bf00      	nop
 800ad3c:	e000      	b.n	800ad40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad3e:	bf00      	nop
			}
		}
	}

	return res;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b087      	sub	sp, #28
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad52:	f04f 33ff 	mov.w	r3, #4294967295
 800ad56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d031      	beq.n	800adc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	617b      	str	r3, [r7, #20]
 800ad66:	e002      	b.n	800ad6e <get_ldnumber+0x24>
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	617b      	str	r3, [r7, #20]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	d903      	bls.n	800ad7e <get_ldnumber+0x34>
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b3a      	cmp	r3, #58	; 0x3a
 800ad7c:	d1f4      	bne.n	800ad68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b3a      	cmp	r3, #58	; 0x3a
 800ad84:	d11c      	bne.n	800adc0 <get_ldnumber+0x76>
			tp = *path;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	60fa      	str	r2, [r7, #12]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	3b30      	subs	r3, #48	; 0x30
 800ad96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b09      	cmp	r3, #9
 800ad9c:	d80e      	bhi.n	800adbc <get_ldnumber+0x72>
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d10a      	bne.n	800adbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d107      	bne.n	800adbc <get_ldnumber+0x72>
					vol = (int)i;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	3301      	adds	r3, #1
 800adb4:	617b      	str	r3, [r7, #20]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	e002      	b.n	800adc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800adc0:	2300      	movs	r3, #0
 800adc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800adc4:	693b      	ldr	r3, [r7, #16]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	70da      	strb	r2, [r3, #3]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f04f 32ff 	mov.w	r2, #4294967295
 800adea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff f8d8 	bl	8009fa4 <move_window>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <check_fs+0x2a>
 800adfa:	2304      	movs	r3, #4
 800adfc:	e038      	b.n	800ae70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3330      	adds	r3, #48	; 0x30
 800ae02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe fe1c 	bl	8009a44 <ld_word>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d001      	beq.n	800ae1c <check_fs+0x48>
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e029      	b.n	800ae70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae22:	2be9      	cmp	r3, #233	; 0xe9
 800ae24:	d009      	beq.n	800ae3a <check_fs+0x66>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae2c:	2beb      	cmp	r3, #235	; 0xeb
 800ae2e:	d11e      	bne.n	800ae6e <check_fs+0x9a>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae36:	2b90      	cmp	r3, #144	; 0x90
 800ae38:	d119      	bne.n	800ae6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3330      	adds	r3, #48	; 0x30
 800ae3e:	3336      	adds	r3, #54	; 0x36
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fe17 	bl	8009a74 <ld_dword>
 800ae46:	4603      	mov	r3, r0
 800ae48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae4c:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <check_fs+0xa4>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d101      	bne.n	800ae56 <check_fs+0x82>
 800ae52:	2300      	movs	r3, #0
 800ae54:	e00c      	b.n	800ae70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3330      	adds	r3, #48	; 0x30
 800ae5a:	3352      	adds	r3, #82	; 0x52
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe fe09 	bl	8009a74 <ld_dword>
 800ae62:	4603      	mov	r3, r0
 800ae64:	4a05      	ldr	r2, [pc, #20]	; (800ae7c <check_fs+0xa8>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d101      	bne.n	800ae6e <check_fs+0x9a>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e000      	b.n	800ae70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae6e:	2302      	movs	r3, #2
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	00544146 	.word	0x00544146
 800ae7c:	33544146 	.word	0x33544146

0800ae80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b096      	sub	sp, #88	; 0x58
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7ff ff58 	bl	800ad4a <get_ldnumber>
 800ae9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	da01      	bge.n	800aea6 <find_volume+0x26>
 800aea2:	230b      	movs	r3, #11
 800aea4:	e22e      	b.n	800b304 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aea6:	4aa8      	ldr	r2, [pc, #672]	; (800b148 <find_volume+0x2c8>)
 800aea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <find_volume+0x3a>
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	e224      	b.n	800b304 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aebe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	f023 0301 	bic.w	r3, r3, #1
 800aec6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01a      	beq.n	800af06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	785b      	ldrb	r3, [r3, #1]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe fd17 	bl	8009908 <disk_status>
 800aeda:	4603      	mov	r3, r0
 800aedc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10c      	bne.n	800af06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <find_volume+0x82>
 800aef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aefe:	230a      	movs	r3, #10
 800af00:	e200      	b.n	800b304 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800af02:	2300      	movs	r3, #0
 800af04:	e1fe      	b.n	800b304 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	2200      	movs	r2, #0
 800af0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	785b      	ldrb	r3, [r3, #1]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fe fd0f 	bl	800993c <disk_initialize>
 800af1e:	4603      	mov	r3, r0
 800af20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af30:	2303      	movs	r3, #3
 800af32:	e1e7      	b.n	800b304 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af34:	79fb      	ldrb	r3, [r7, #7]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d007      	beq.n	800af4a <find_volume+0xca>
 800af3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af46:	230a      	movs	r3, #10
 800af48:	e1dc      	b.n	800b304 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af52:	f7ff ff3f 	bl	800add4 <check_fs>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af60:	2b02      	cmp	r3, #2
 800af62:	d14b      	bne.n	800affc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af64:	2300      	movs	r3, #0
 800af66:	643b      	str	r3, [r7, #64]	; 0x40
 800af68:	e01f      	b.n	800afaa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af78:	4413      	add	r3, r2
 800af7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	3304      	adds	r3, #4
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d006      	beq.n	800af94 <find_volume+0x114>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	3308      	adds	r3, #8
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fd72 	bl	8009a74 <ld_dword>
 800af90:	4602      	mov	r2, r0
 800af92:	e000      	b.n	800af96 <find_volume+0x116>
 800af94:	2200      	movs	r2, #0
 800af96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800af9e:	440b      	add	r3, r1
 800afa0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa6:	3301      	adds	r3, #1
 800afa8:	643b      	str	r3, [r7, #64]	; 0x40
 800afaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afac:	2b03      	cmp	r3, #3
 800afae:	d9dc      	bls.n	800af6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800afb0:	2300      	movs	r3, #0
 800afb2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800afb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <find_volume+0x140>
 800afba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbc:	3b01      	subs	r3, #1
 800afbe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800afc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800afc8:	4413      	add	r3, r2
 800afca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800afce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800afd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d005      	beq.n	800afe2 <find_volume+0x162>
 800afd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afda:	f7ff fefb 	bl	800add4 <check_fs>
 800afde:	4603      	mov	r3, r0
 800afe0:	e000      	b.n	800afe4 <find_volume+0x164>
 800afe2:	2303      	movs	r3, #3
 800afe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800afe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afec:	2b01      	cmp	r3, #1
 800afee:	d905      	bls.n	800affc <find_volume+0x17c>
 800aff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff2:	3301      	adds	r3, #1
 800aff4:	643b      	str	r3, [r7, #64]	; 0x40
 800aff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d9e1      	bls.n	800afc0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800affc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b000:	2b04      	cmp	r3, #4
 800b002:	d101      	bne.n	800b008 <find_volume+0x188>
 800b004:	2301      	movs	r3, #1
 800b006:	e17d      	b.n	800b304 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d901      	bls.n	800b014 <find_volume+0x194>
 800b010:	230d      	movs	r3, #13
 800b012:	e177      	b.n	800b304 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	3330      	adds	r3, #48	; 0x30
 800b018:	330b      	adds	r3, #11
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fd12 	bl	8009a44 <ld_word>
 800b020:	4603      	mov	r3, r0
 800b022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b026:	d001      	beq.n	800b02c <find_volume+0x1ac>
 800b028:	230d      	movs	r3, #13
 800b02a:	e16b      	b.n	800b304 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	3330      	adds	r3, #48	; 0x30
 800b030:	3316      	adds	r3, #22
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fd06 	bl	8009a44 <ld_word>
 800b038:	4603      	mov	r3, r0
 800b03a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d106      	bne.n	800b050 <find_volume+0x1d0>
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	3330      	adds	r3, #48	; 0x30
 800b046:	3324      	adds	r3, #36	; 0x24
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fd13 	bl	8009a74 <ld_dword>
 800b04e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b054:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	789b      	ldrb	r3, [r3, #2]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d005      	beq.n	800b074 <find_volume+0x1f4>
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	789b      	ldrb	r3, [r3, #2]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d001      	beq.n	800b074 <find_volume+0x1f4>
 800b070:	230d      	movs	r3, #13
 800b072:	e147      	b.n	800b304 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	789b      	ldrb	r3, [r3, #2]
 800b078:	461a      	mov	r2, r3
 800b07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b07c:	fb02 f303 	mul.w	r3, r2, r3
 800b080:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b088:	b29a      	uxth	r2, r3
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	895b      	ldrh	r3, [r3, #10]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d008      	beq.n	800b0a8 <find_volume+0x228>
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	895b      	ldrh	r3, [r3, #10]
 800b09a:	461a      	mov	r2, r3
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	895b      	ldrh	r3, [r3, #10]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <find_volume+0x22c>
 800b0a8:	230d      	movs	r3, #13
 800b0aa:	e12b      	b.n	800b304 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	3330      	adds	r3, #48	; 0x30
 800b0b0:	3311      	adds	r3, #17
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe fcc6 	bl	8009a44 <ld_word>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	891b      	ldrh	r3, [r3, #8]
 800b0c4:	f003 030f 	and.w	r3, r3, #15
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <find_volume+0x252>
 800b0ce:	230d      	movs	r3, #13
 800b0d0:	e118      	b.n	800b304 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	3330      	adds	r3, #48	; 0x30
 800b0d6:	3313      	adds	r3, #19
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fcb3 	bl	8009a44 <ld_word>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <find_volume+0x276>
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	3330      	adds	r3, #48	; 0x30
 800b0ec:	3320      	adds	r3, #32
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fcc0 	bl	8009a74 <ld_dword>
 800b0f4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	3330      	adds	r3, #48	; 0x30
 800b0fa:	330e      	adds	r3, #14
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fe fca1 	bl	8009a44 <ld_word>
 800b102:	4603      	mov	r3, r0
 800b104:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <find_volume+0x290>
 800b10c:	230d      	movs	r3, #13
 800b10e:	e0f9      	b.n	800b304 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b110:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b114:	4413      	add	r3, r2
 800b116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b118:	8912      	ldrh	r2, [r2, #8]
 800b11a:	0912      	lsrs	r2, r2, #4
 800b11c:	b292      	uxth	r2, r2
 800b11e:	4413      	add	r3, r2
 800b120:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	429a      	cmp	r2, r3
 800b128:	d201      	bcs.n	800b12e <find_volume+0x2ae>
 800b12a:	230d      	movs	r3, #13
 800b12c:	e0ea      	b.n	800b304 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b12e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b136:	8952      	ldrh	r2, [r2, #10]
 800b138:	fbb3 f3f2 	udiv	r3, r3, r2
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <find_volume+0x2cc>
 800b144:	230d      	movs	r3, #13
 800b146:	e0dd      	b.n	800b304 <find_volume+0x484>
 800b148:	2403e984 	.word	0x2403e984
		fmt = FS_FAT32;
 800b14c:	2303      	movs	r3, #3
 800b14e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b158:	4293      	cmp	r3, r2
 800b15a:	d802      	bhi.n	800b162 <find_volume+0x2e2>
 800b15c:	2302      	movs	r3, #2
 800b15e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b168:	4293      	cmp	r3, r2
 800b16a:	d802      	bhi.n	800b172 <find_volume+0x2f2>
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	1c9a      	adds	r2, r3, #2
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b17e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b180:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b184:	441a      	add	r2, r3
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b18a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	441a      	add	r2, r3
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d11e      	bne.n	800b1da <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	3330      	adds	r3, #48	; 0x30
 800b1a0:	332a      	adds	r3, #42	; 0x2a
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fc4e 	bl	8009a44 <ld_word>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <find_volume+0x332>
 800b1ae:	230d      	movs	r3, #13
 800b1b0:	e0a8      	b.n	800b304 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	891b      	ldrh	r3, [r3, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <find_volume+0x33e>
 800b1ba:	230d      	movs	r3, #13
 800b1bc:	e0a2      	b.n	800b304 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	3330      	adds	r3, #48	; 0x30
 800b1c2:	332c      	adds	r3, #44	; 0x2c
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fc55 	bl	8009a74 <ld_dword>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b1d8:	e01f      	b.n	800b21a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	891b      	ldrh	r3, [r3, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <find_volume+0x366>
 800b1e2:	230d      	movs	r3, #13
 800b1e4:	e08e      	b.n	800b304 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	6a1a      	ldr	r2, [r3, #32]
 800b1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ec:	441a      	add	r2, r3
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d103      	bne.n	800b202 <find_volume+0x382>
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	e00a      	b.n	800b218 <find_volume+0x398>
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	085a      	lsrs	r2, r3, #1
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b218:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	699a      	ldr	r2, [r3, #24]
 800b21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b220:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b224:	0a5b      	lsrs	r3, r3, #9
 800b226:	429a      	cmp	r2, r3
 800b228:	d201      	bcs.n	800b22e <find_volume+0x3ae>
 800b22a:	230d      	movs	r3, #13
 800b22c:	e06a      	b.n	800b304 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	611a      	str	r2, [r3, #16]
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	691a      	ldr	r2, [r3, #16]
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	2280      	movs	r2, #128	; 0x80
 800b242:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d149      	bne.n	800b2e0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	3330      	adds	r3, #48	; 0x30
 800b250:	3330      	adds	r3, #48	; 0x30
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe fbf6 	bl	8009a44 <ld_word>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d140      	bne.n	800b2e0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b260:	3301      	adds	r3, #1
 800b262:	4619      	mov	r1, r3
 800b264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b266:	f7fe fe9d 	bl	8009fa4 <move_window>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d137      	bne.n	800b2e0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	2200      	movs	r2, #0
 800b274:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	3330      	adds	r3, #48	; 0x30
 800b27a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe fbe0 	bl	8009a44 <ld_word>
 800b284:	4603      	mov	r3, r0
 800b286:	461a      	mov	r2, r3
 800b288:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d127      	bne.n	800b2e0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	3330      	adds	r3, #48	; 0x30
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe fbed 	bl	8009a74 <ld_dword>
 800b29a:	4603      	mov	r3, r0
 800b29c:	4a1b      	ldr	r2, [pc, #108]	; (800b30c <find_volume+0x48c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d11e      	bne.n	800b2e0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a4:	3330      	adds	r3, #48	; 0x30
 800b2a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe fbe2 	bl	8009a74 <ld_dword>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	4a17      	ldr	r2, [pc, #92]	; (800b310 <find_volume+0x490>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d113      	bne.n	800b2e0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	3330      	adds	r3, #48	; 0x30
 800b2bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fbd7 	bl	8009a74 <ld_dword>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	3330      	adds	r3, #48	; 0x30
 800b2d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe fbcd 	bl	8009a74 <ld_dword>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b2e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <find_volume+0x494>)
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	4b08      	ldr	r3, [pc, #32]	; (800b314 <find_volume+0x494>)
 800b2f2:	801a      	strh	r2, [r3, #0]
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <find_volume+0x494>)
 800b2f6:	881a      	ldrh	r2, [r3, #0]
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2fe:	f7fe fde9 	bl	8009ed4 <clear_lock>
#endif
	return FR_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3758      	adds	r7, #88	; 0x58
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	41615252 	.word	0x41615252
 800b310:	61417272 	.word	0x61417272
 800b314:	2403e988 	.word	0x2403e988

0800b318 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b322:	2309      	movs	r3, #9
 800b324:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01c      	beq.n	800b366 <validate+0x4e>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d018      	beq.n	800b366 <validate+0x4e>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d013      	beq.n	800b366 <validate+0x4e>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	889a      	ldrh	r2, [r3, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	88db      	ldrh	r3, [r3, #6]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d10c      	bne.n	800b366 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	785b      	ldrb	r3, [r3, #1]
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fad8 	bl	8009908 <disk_status>
 800b358:	4603      	mov	r3, r0
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <validate+0x4e>
			res = FR_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <validate+0x5a>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	e000      	b.n	800b374 <validate+0x5c>
 800b372:	2300      	movs	r3, #0
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	6013      	str	r3, [r2, #0]
	return res;
 800b378:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b396:	f107 0310 	add.w	r3, r7, #16
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff fcd5 	bl	800ad4a <get_ldnumber>
 800b3a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	da01      	bge.n	800b3ac <f_mount+0x28>
 800b3a8:	230b      	movs	r3, #11
 800b3aa:	e02b      	b.n	800b404 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b3ac:	4a17      	ldr	r2, [pc, #92]	; (800b40c <f_mount+0x88>)
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3bc:	69b8      	ldr	r0, [r7, #24]
 800b3be:	f7fe fd89 	bl	8009ed4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	490d      	ldr	r1, [pc, #52]	; (800b40c <f_mount+0x88>)
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <f_mount+0x66>
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d001      	beq.n	800b3ee <f_mount+0x6a>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e00a      	b.n	800b404 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3ee:	f107 010c 	add.w	r1, r7, #12
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7ff fd41 	bl	800ae80 <find_volume>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b402:	7dfb      	ldrb	r3, [r7, #23]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	2403e984 	.word	0x2403e984

0800b410 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b098      	sub	sp, #96	; 0x60
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4613      	mov	r3, r2
 800b41c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <f_open+0x18>
 800b424:	2309      	movs	r3, #9
 800b426:	e1ad      	b.n	800b784 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b42e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b430:	79fa      	ldrb	r2, [r7, #7]
 800b432:	f107 0110 	add.w	r1, r7, #16
 800b436:	f107 0308 	add.w	r3, r7, #8
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fd20 	bl	800ae80 <find_volume>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f040 8191 	bne.w	800b772 <f_open+0x362>
		dj.obj.fs = fs;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	f107 0314 	add.w	r3, r7, #20
 800b45a:	4611      	mov	r1, r2
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff fc03 	bl	800ac68 <follow_path>
 800b462:	4603      	mov	r3, r0
 800b464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d11a      	bne.n	800b4a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b470:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b474:	b25b      	sxtb	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	da03      	bge.n	800b482 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b47a:	2306      	movs	r3, #6
 800b47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b480:	e011      	b.n	800b4a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b482:	79fb      	ldrb	r3, [r7, #7]
 800b484:	f023 0301 	bic.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bf14      	ite	ne
 800b48c:	2301      	movne	r3, #1
 800b48e:	2300      	moveq	r3, #0
 800b490:	b2db      	uxtb	r3, r3
 800b492:	461a      	mov	r2, r3
 800b494:	f107 0314 	add.w	r3, r7, #20
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fbd2 	bl	8009c44 <chk_lock>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	f003 031c 	and.w	r3, r3, #28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d07f      	beq.n	800b5b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d017      	beq.n	800b4e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d10e      	bne.n	800b4de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4c0:	f7fe fc1c 	bl	8009cfc <enq_lock>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d006      	beq.n	800b4d8 <f_open+0xc8>
 800b4ca:	f107 0314 	add.w	r3, r7, #20
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff fb03 	bl	800aada <dir_register>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	e000      	b.n	800b4da <f_open+0xca>
 800b4d8:	2312      	movs	r3, #18
 800b4da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	f043 0308 	orr.w	r3, r3, #8
 800b4e4:	71fb      	strb	r3, [r7, #7]
 800b4e6:	e010      	b.n	800b50a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4e8:	7ebb      	ldrb	r3, [r7, #26]
 800b4ea:	f003 0311 	and.w	r3, r3, #17
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <f_open+0xea>
					res = FR_DENIED;
 800b4f2:	2307      	movs	r3, #7
 800b4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4f8:	e007      	b.n	800b50a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <f_open+0xfa>
 800b504:	2308      	movs	r3, #8
 800b506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b50a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d168      	bne.n	800b5e4 <f_open+0x1d4>
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	f003 0308 	and.w	r3, r3, #8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d063      	beq.n	800b5e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b51c:	f7fe f83e 	bl	800959c <get_fattime>
 800b520:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b524:	330e      	adds	r3, #14
 800b526:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fae1 	bl	8009af0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b530:	3316      	adds	r3, #22
 800b532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b534:	4618      	mov	r0, r3
 800b536:	f7fe fadb 	bl	8009af0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53c:	330b      	adds	r3, #11
 800b53e:	2220      	movs	r2, #32
 800b540:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b546:	4611      	mov	r1, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff fa32 	bl	800a9b2 <ld_clust>
 800b54e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b554:	2200      	movs	r2, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fa4a 	bl	800a9f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55e:	331c      	adds	r3, #28
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe fac4 	bl	8009af0 <st_dword>
					fs->wflag = 1;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2201      	movs	r2, #1
 800b56c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d037      	beq.n	800b5e4 <f_open+0x1d4>
						dw = fs->winsect;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b57a:	f107 0314 	add.w	r3, r7, #20
 800b57e:	2200      	movs	r2, #0
 800b580:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b582:	4618      	mov	r0, r3
 800b584:	f7fe ff5d 	bl	800a442 <remove_chain>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b58e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b592:	2b00      	cmp	r3, #0
 800b594:	d126      	bne.n	800b5e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fd02 	bl	8009fa4 <move_window>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5aa:	3a01      	subs	r2, #1
 800b5ac:	60da      	str	r2, [r3, #12]
 800b5ae:	e019      	b.n	800b5e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d115      	bne.n	800b5e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5b8:	7ebb      	ldrb	r3, [r7, #26]
 800b5ba:	f003 0310 	and.w	r3, r3, #16
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5c2:	2304      	movs	r3, #4
 800b5c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5c8:	e00c      	b.n	800b5e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d007      	beq.n	800b5e4 <f_open+0x1d4>
 800b5d4:	7ebb      	ldrb	r3, [r7, #26]
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <f_open+0x1d4>
						res = FR_DENIED;
 800b5de:	2307      	movs	r3, #7
 800b5e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d128      	bne.n	800b63e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5ec:	79fb      	ldrb	r3, [r7, #7]
 800b5ee:	f003 0308 	and.w	r3, r3, #8
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	f023 0301 	bic.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	bf14      	ite	ne
 800b616:	2301      	movne	r3, #1
 800b618:	2300      	moveq	r3, #0
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	461a      	mov	r2, r3
 800b61e:	f107 0314 	add.w	r3, r7, #20
 800b622:	4611      	mov	r1, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fb8b 	bl	8009d40 <inc_lock>
 800b62a:	4602      	mov	r2, r0
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <f_open+0x22e>
 800b638:	2302      	movs	r3, #2
 800b63a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b63e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b642:	2b00      	cmp	r3, #0
 800b644:	f040 8095 	bne.w	800b772 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff f9af 	bl	800a9b2 <ld_clust>
 800b654:	4602      	mov	r2, r0
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65c:	331c      	adds	r3, #28
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe fa08 	bl	8009a74 <ld_dword>
 800b664:	4602      	mov	r2, r0
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	88da      	ldrh	r2, [r3, #6]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	79fa      	ldrb	r2, [r7, #7]
 800b682:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3330      	adds	r3, #48	; 0x30
 800b69a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b69e:	2100      	movs	r1, #0
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fa72 	bl	8009b8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6a6:	79fb      	ldrb	r3, [r7, #7]
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d060      	beq.n	800b772 <f_open+0x362>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d05c      	beq.n	800b772 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68da      	ldr	r2, [r3, #12]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	895b      	ldrh	r3, [r3, #10]
 800b6c4:	025b      	lsls	r3, r3, #9
 800b6c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6d4:	e016      	b.n	800b704 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fd1d 	bl	800a11a <get_fat>
 800b6e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b6e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d802      	bhi.n	800b6ee <f_open+0x2de>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b6ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d102      	bne.n	800b6fc <f_open+0x2ec>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	657b      	str	r3, [r7, #84]	; 0x54
 800b704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d103      	bne.n	800b714 <f_open+0x304>
 800b70c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b70e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b710:	429a      	cmp	r2, r3
 800b712:	d8e0      	bhi.n	800b6d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b718:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d127      	bne.n	800b772 <f_open+0x362>
 800b722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d022      	beq.n	800b772 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b730:	4618      	mov	r0, r3
 800b732:	f7fe fcd3 	bl	800a0dc <clust2sect>
 800b736:	6478      	str	r0, [r7, #68]	; 0x44
 800b738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d103      	bne.n	800b746 <f_open+0x336>
						res = FR_INT_ERR;
 800b73e:	2302      	movs	r3, #2
 800b740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b744:	e015      	b.n	800b772 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b748:	0a5a      	lsrs	r2, r3, #9
 800b74a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b74c:	441a      	add	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	7858      	ldrb	r0, [r3, #1]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6a1a      	ldr	r2, [r3, #32]
 800b760:	2301      	movs	r3, #1
 800b762:	f7fe f911 	bl	8009988 <disk_read>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <f_open+0x362>
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <f_open+0x370>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b784:	4618      	mov	r0, r3
 800b786:	3760      	adds	r7, #96	; 0x60
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b08c      	sub	sp, #48	; 0x30
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f107 0210 	add.w	r2, r7, #16
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff fdb3 	bl	800b318 <validate>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d107      	bne.n	800b7d0 <f_write+0x44>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	7d5b      	ldrb	r3, [r3, #21]
 800b7c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <f_write+0x4a>
 800b7d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7d4:	e14b      	b.n	800ba6e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	7d1b      	ldrb	r3, [r3, #20]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <f_write+0x5a>
 800b7e2:	2307      	movs	r3, #7
 800b7e4:	e143      	b.n	800ba6e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	699a      	ldr	r2, [r3, #24]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	441a      	add	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	f080 812d 	bcs.w	800ba52 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	43db      	mvns	r3, r3
 800b7fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b800:	e127      	b.n	800ba52 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f040 80e3 	bne.w	800b9d6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	0a5b      	lsrs	r3, r3, #9
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	8952      	ldrh	r2, [r2, #10]
 800b81a:	3a01      	subs	r2, #1
 800b81c:	4013      	ands	r3, r2
 800b81e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d143      	bne.n	800b8ae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10c      	bne.n	800b848 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	2b00      	cmp	r3, #0
 800b838:	d11a      	bne.n	800b870 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2100      	movs	r1, #0
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fe64 	bl	800a50c <create_chain>
 800b844:	62b8      	str	r0, [r7, #40]	; 0x28
 800b846:	e013      	b.n	800b870 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d007      	beq.n	800b860 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	4619      	mov	r1, r3
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f7fe fef0 	bl	800a63c <clmt_clust>
 800b85c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b85e:	e007      	b.n	800b870 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7fe fe4f 	bl	800a50c <create_chain>
 800b86e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 80f2 	beq.w	800ba5c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d104      	bne.n	800b888 <f_write+0xfc>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2202      	movs	r2, #2
 800b882:	755a      	strb	r2, [r3, #21]
 800b884:	2302      	movs	r3, #2
 800b886:	e0f2      	b.n	800ba6e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88e:	d104      	bne.n	800b89a <f_write+0x10e>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	755a      	strb	r2, [r3, #21]
 800b896:	2301      	movs	r3, #1
 800b898:	e0e9      	b.n	800ba6e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <f_write+0x122>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	7d1b      	ldrb	r3, [r3, #20]
 800b8b2:	b25b      	sxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	da18      	bge.n	800b8ea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	7858      	ldrb	r0, [r3, #1]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a1a      	ldr	r2, [r3, #32]
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	f7fe f87e 	bl	80099c8 <disk_write>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d004      	beq.n	800b8dc <f_write+0x150>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	755a      	strb	r2, [r3, #21]
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0c8      	b.n	800ba6e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	7d1b      	ldrb	r3, [r3, #20]
 800b8e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	f7fe fbf2 	bl	800a0dc <clust2sect>
 800b8f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <f_write+0x17e>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2202      	movs	r2, #2
 800b904:	755a      	strb	r2, [r3, #21]
 800b906:	2302      	movs	r3, #2
 800b908:	e0b1      	b.n	800ba6e <f_write+0x2e2>
			sect += csect;
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	4413      	add	r3, r2
 800b910:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	0a5b      	lsrs	r3, r3, #9
 800b916:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d03c      	beq.n	800b998 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	4413      	add	r3, r2
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	8952      	ldrh	r2, [r2, #10]
 800b928:	4293      	cmp	r3, r2
 800b92a:	d905      	bls.n	800b938 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	895b      	ldrh	r3, [r3, #10]
 800b930:	461a      	mov	r2, r3
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	7858      	ldrb	r0, [r3, #1]
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	f7fe f841 	bl	80099c8 <disk_write>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d004      	beq.n	800b956 <f_write+0x1ca>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2201      	movs	r2, #1
 800b950:	755a      	strb	r2, [r3, #21]
 800b952:	2301      	movs	r3, #1
 800b954:	e08b      	b.n	800ba6e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6a1a      	ldr	r2, [r3, #32]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	6a3a      	ldr	r2, [r7, #32]
 800b960:	429a      	cmp	r2, r3
 800b962:	d915      	bls.n	800b990 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a1a      	ldr	r2, [r3, #32]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	025b      	lsls	r3, r3, #9
 800b974:	69fa      	ldr	r2, [r7, #28]
 800b976:	4413      	add	r3, r2
 800b978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7fe f8e3 	bl	8009b48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	7d1b      	ldrb	r3, [r3, #20]
 800b986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	025b      	lsls	r3, r3, #9
 800b994:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b996:	e03f      	b.n	800ba18 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6a1b      	ldr	r3, [r3, #32]
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d016      	beq.n	800b9d0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	699a      	ldr	r2, [r3, #24]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d210      	bcs.n	800b9d0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	7858      	ldrb	r0, [r3, #1]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	f7fd ffe4 	bl	8009988 <disk_read>
 800b9c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d004      	beq.n	800b9d0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	755a      	strb	r2, [r3, #21]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e04e      	b.n	800ba6e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b9e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d901      	bls.n	800b9f0 <f_write+0x264>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fe:	4413      	add	r3, r2
 800ba00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba02:	69f9      	ldr	r1, [r7, #28]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fe f89f 	bl	8009b48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	7d1b      	ldrb	r3, [r3, #20]
 800ba0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba18:	69fa      	ldr	r2, [r7, #28]
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	4413      	add	r3, r2
 800ba1e:	61fb      	str	r3, [r7, #28]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	699a      	ldr	r2, [r3, #24]
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	441a      	add	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	619a      	str	r2, [r3, #24]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68da      	ldr	r2, [r3, #12]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	bf38      	it	cc
 800ba38:	461a      	movcc	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	60da      	str	r2, [r3, #12]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	441a      	add	r2, r3
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f47f aed4 	bne.w	800b802 <f_write+0x76>
 800ba5a:	e000      	b.n	800ba5e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba5c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	7d1b      	ldrb	r3, [r3, #20]
 800ba62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3730      	adds	r7, #48	; 0x30
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f107 0208 	add.w	r2, r7, #8
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fc46 	bl	800b318 <validate>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d168      	bne.n	800bb68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	7d1b      	ldrb	r3, [r3, #20]
 800ba9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d062      	beq.n	800bb68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	7d1b      	ldrb	r3, [r3, #20]
 800baa6:	b25b      	sxtb	r3, r3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da15      	bge.n	800bad8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	7858      	ldrb	r0, [r3, #1]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a1a      	ldr	r2, [r3, #32]
 800baba:	2301      	movs	r3, #1
 800babc:	f7fd ff84 	bl	80099c8 <disk_write>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <f_sync+0x54>
 800bac6:	2301      	movs	r3, #1
 800bac8:	e04f      	b.n	800bb6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	7d1b      	ldrb	r3, [r3, #20]
 800bace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bad8:	f7fd fd60 	bl	800959c <get_fattime>
 800badc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	4619      	mov	r1, r3
 800bae6:	4610      	mov	r0, r2
 800bae8:	f7fe fa5c 	bl	8009fa4 <move_window>
 800baec:	4603      	mov	r3, r0
 800baee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d138      	bne.n	800bb68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	330b      	adds	r3, #11
 800bb00:	781a      	ldrb	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	330b      	adds	r3, #11
 800bb06:	f042 0220 	orr.w	r2, r2, #32
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	461a      	mov	r2, r3
 800bb18:	68f9      	ldr	r1, [r7, #12]
 800bb1a:	f7fe ff69 	bl	800a9f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f103 021c 	add.w	r2, r3, #28
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f7fd ffe0 	bl	8009af0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3316      	adds	r3, #22
 800bb34:	6939      	ldr	r1, [r7, #16]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fd ffda 	bl	8009af0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	3312      	adds	r3, #18
 800bb40:	2100      	movs	r1, #0
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fd ffb9 	bl	8009aba <st_word>
					fs->wflag = 1;
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe fa55 	bl	800a000 <sync_fs>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff ff7b 	bl	800ba76 <f_sync>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d118      	bne.n	800bbbc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f107 0208 	add.w	r2, r7, #8
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7ff fbc0 	bl	800b318 <validate>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10c      	bne.n	800bbbc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe f958 	bl	8009e5c <dec_lock>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d102      	bne.n	800bbbc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bbc8:	b590      	push	{r4, r7, lr}
 800bbca:	b09d      	sub	sp, #116	; 0x74
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	607a      	str	r2, [r7, #4]
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bbd8:	2301      	movs	r3, #1
 800bbda:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bbdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbe0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bbe2:	f107 030c 	add.w	r3, r7, #12
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff f8af 	bl	800ad4a <get_ldnumber>
 800bbec:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da02      	bge.n	800bbfa <f_mkfs+0x32>
 800bbf4:	230b      	movs	r3, #11
 800bbf6:	f000 bc0d 	b.w	800c414 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bbfa:	4a94      	ldr	r2, [pc, #592]	; (800be4c <f_mkfs+0x284>)
 800bbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d005      	beq.n	800bc12 <f_mkfs+0x4a>
 800bc06:	4a91      	ldr	r2, [pc, #580]	; (800be4c <f_mkfs+0x284>)
 800bc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bc1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fd fe8a 	bl	800993c <disk_initialize>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bc2e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <f_mkfs+0x76>
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e3ea      	b.n	800c414 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bc3e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <f_mkfs+0x86>
 800bc4a:	230a      	movs	r3, #10
 800bc4c:	e3e2      	b.n	800c414 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bc4e:	f107 0214 	add.w	r2, r7, #20
 800bc52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc56:	2103      	movs	r1, #3
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fd fed5 	bl	8009a08 <disk_ioctl>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10c      	bne.n	800bc7e <f_mkfs+0xb6>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d009      	beq.n	800bc7e <f_mkfs+0xb6>
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc70:	d805      	bhi.n	800bc7e <f_mkfs+0xb6>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	1e5a      	subs	r2, r3, #1
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <f_mkfs+0xba>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bc82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc86:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <f_mkfs+0xce>
 800bc8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d309      	bcc.n	800bcaa <f_mkfs+0xe2>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc9c:	d805      	bhi.n	800bcaa <f_mkfs+0xe2>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	1e5a      	subs	r2, r3, #1
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4013      	ands	r3, r2
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <f_mkfs+0xe6>
 800bcaa:	2313      	movs	r3, #19
 800bcac:	e3b2      	b.n	800c414 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bcae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bcbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bcc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	fb02 f303 	mul.w	r3, r2, r3
 800bcd0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <f_mkfs+0x114>
 800bcd8:	230e      	movs	r3, #14
 800bcda:	e39b      	b.n	800c414 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bcdc:	f107 0210 	add.w	r2, r7, #16
 800bce0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bce4:	2101      	movs	r1, #1
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fd fe8e 	bl	8009a08 <disk_ioctl>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <f_mkfs+0x12e>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e38e      	b.n	800c414 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	f003 0308 	and.w	r3, r3, #8
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <f_mkfs+0x13c>
 800bd00:	2300      	movs	r3, #0
 800bd02:	e000      	b.n	800bd06 <f_mkfs+0x13e>
 800bd04:	233f      	movs	r3, #63	; 0x3f
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d901      	bls.n	800bd14 <f_mkfs+0x14c>
 800bd10:	230e      	movs	r3, #14
 800bd12:	e37f      	b.n	800c414 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	2b7f      	cmp	r3, #127	; 0x7f
 800bd20:	d801      	bhi.n	800bd26 <f_mkfs+0x15e>
 800bd22:	230e      	movs	r3, #14
 800bd24:	e376      	b.n	800c414 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b80      	cmp	r3, #128	; 0x80
 800bd2a:	d901      	bls.n	800bd30 <f_mkfs+0x168>
 800bd2c:	2313      	movs	r3, #19
 800bd2e:	e371      	b.n	800c414 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bd30:	7afb      	ldrb	r3, [r7, #11]
 800bd32:	f003 0302 	and.w	r3, r3, #2
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00d      	beq.n	800bd56 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bd3a:	7afb      	ldrb	r3, [r7, #11]
 800bd3c:	f003 0307 	and.w	r3, r3, #7
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d004      	beq.n	800bd4e <f_mkfs+0x186>
 800bd44:	7afb      	ldrb	r3, [r7, #11]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d103      	bne.n	800bd56 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bd54:	e009      	b.n	800bd6a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	f003 0301 	and.w	r3, r3, #1
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <f_mkfs+0x19c>
 800bd60:	2313      	movs	r3, #19
 800bd62:	e357      	b.n	800c414 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bd64:	2302      	movs	r3, #2
 800bd66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bd6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d13c      	bne.n	800bdf0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11b      	bne.n	800bdb4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	0c5b      	lsrs	r3, r3, #17
 800bd80:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bd82:	2300      	movs	r3, #0
 800bd84:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd86:	2301      	movs	r3, #1
 800bd88:	653b      	str	r3, [r7, #80]	; 0x50
 800bd8a:	e005      	b.n	800bd98 <f_mkfs+0x1d0>
 800bd8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8e:	3301      	adds	r3, #1
 800bd90:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	653b      	str	r3, [r7, #80]	; 0x50
 800bd98:	4a2d      	ldr	r2, [pc, #180]	; (800be50 <f_mkfs+0x288>)
 800bd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d007      	beq.n	800bdb4 <f_mkfs+0x1ec>
 800bda4:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <f_mkfs+0x288>)
 800bda6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdac:	461a      	mov	r2, r3
 800bdae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d2eb      	bcs.n	800bd8c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdbc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	009a      	lsls	r2, r3, #2
 800bdc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdc6:	4413      	add	r3, r2
 800bdc8:	1e5a      	subs	r2, r3, #1
 800bdca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bdd2:	2320      	movs	r3, #32
 800bdd4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d903      	bls.n	800bdec <f_mkfs+0x224>
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	4a1b      	ldr	r2, [pc, #108]	; (800be54 <f_mkfs+0x28c>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d952      	bls.n	800be92 <f_mkfs+0x2ca>
 800bdec:	230e      	movs	r3, #14
 800bdee:	e311      	b.n	800c414 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bdf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d11b      	bne.n	800be2e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	0b1b      	lsrs	r3, r3, #12
 800bdfa:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800be00:	2301      	movs	r3, #1
 800be02:	653b      	str	r3, [r7, #80]	; 0x50
 800be04:	e005      	b.n	800be12 <f_mkfs+0x24a>
 800be06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be08:	3301      	adds	r3, #1
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	653b      	str	r3, [r7, #80]	; 0x50
 800be12:	4a11      	ldr	r2, [pc, #68]	; (800be58 <f_mkfs+0x290>)
 800be14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d007      	beq.n	800be2e <f_mkfs+0x266>
 800be1e:	4a0e      	ldr	r2, [pc, #56]	; (800be58 <f_mkfs+0x290>)
 800be20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be26:	461a      	mov	r2, r3
 800be28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d2eb      	bcs.n	800be06 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be32:	fbb2 f3f3 	udiv	r3, r2, r3
 800be36:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be3e:	4293      	cmp	r3, r2
 800be40:	d90c      	bls.n	800be5c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	3302      	adds	r3, #2
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be4a:	e012      	b.n	800be72 <f_mkfs+0x2aa>
 800be4c:	2403e984 	.word	0x2403e984
 800be50:	0800ceec 	.word	0x0800ceec
 800be54:	0ffffff5 	.word	0x0ffffff5
 800be58:	0800cefc 	.word	0x0800cefc
				} else {
					fmt = FS_FAT12;
 800be5c:	2301      	movs	r3, #1
 800be5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800be62:	6a3a      	ldr	r2, [r7, #32]
 800be64:	4613      	mov	r3, r2
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	4413      	add	r3, r2
 800be6a:	3301      	adds	r3, #1
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	3303      	adds	r3, #3
 800be70:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800be72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be76:	4413      	add	r3, r2
 800be78:	1e5a      	subs	r2, r3, #1
 800be7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be80:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800be82:	2301      	movs	r3, #1
 800be84:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800be86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be88:	015a      	lsls	r2, r3, #5
 800be8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be90:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800be92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be96:	4413      	add	r3, r2
 800be98:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800be9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be9e:	fb02 f203 	mul.w	r2, r2, r3
 800bea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bea4:	4413      	add	r3, r2
 800bea6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bea8:	4413      	add	r3, r2
 800beaa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	4413      	add	r3, r2
 800beb2:	1e5a      	subs	r2, r3, #1
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	425b      	negs	r3, r3
 800beb8:	401a      	ands	r2, r3
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bec0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d108      	bne.n	800beda <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800bec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800beca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800becc:	4413      	add	r3, r2
 800bece:	657b      	str	r3, [r7, #84]	; 0x54
 800bed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed4:	4413      	add	r3, r2
 800bed6:	65bb      	str	r3, [r7, #88]	; 0x58
 800bed8:	e006      	b.n	800bee8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800beda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bede:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bee4:	4413      	add	r3, r2
 800bee6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800bee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beea:	011a      	lsls	r2, r3, #4
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	441a      	add	r2, r3
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d901      	bls.n	800befe <f_mkfs+0x336>
 800befa:	230e      	movs	r3, #14
 800befc:	e28a      	b.n	800c414 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf02:	1ad2      	subs	r2, r2, r3
 800bf04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf08:	fb01 f303 	mul.w	r3, r1, r3
 800bf0c:	1ad2      	subs	r2, r2, r3
 800bf0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf10:	1ad2      	subs	r2, r2, r3
 800bf12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf14:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf18:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bf1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d10f      	bne.n	800bf42 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d80a      	bhi.n	800bf42 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d105      	bne.n	800bf3e <f_mkfs+0x376>
 800bf32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf34:	085b      	lsrs	r3, r3, #1
 800bf36:	607b      	str	r3, [r7, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d144      	bne.n	800bfc8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800bf3e:	230e      	movs	r3, #14
 800bf40:	e268      	b.n	800c414 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bf42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d133      	bne.n	800bfb2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d91e      	bls.n	800bf92 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d107      	bne.n	800bf6a <f_mkfs+0x3a2>
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	2b40      	cmp	r3, #64	; 0x40
 800bf60:	d803      	bhi.n	800bf6a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bf62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	607b      	str	r3, [r7, #4]
 800bf68:	e033      	b.n	800bfd2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bf6a:	7afb      	ldrb	r3, [r7, #11]
 800bf6c:	f003 0302 	and.w	r3, r3, #2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bf74:	2303      	movs	r3, #3
 800bf76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf7a:	e02a      	b.n	800bfd2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <f_mkfs+0x3c6>
 800bf82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	607b      	str	r3, [r7, #4]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b80      	cmp	r3, #128	; 0x80
 800bf8c:	d91e      	bls.n	800bfcc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bf8e:	230e      	movs	r3, #14
 800bf90:	e240      	b.n	800c414 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d80a      	bhi.n	800bfb2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d105      	bne.n	800bfae <f_mkfs+0x3e6>
 800bfa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	607b      	str	r3, [r7, #4]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b80      	cmp	r3, #128	; 0x80
 800bfac:	d910      	bls.n	800bfd0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bfae:	230e      	movs	r3, #14
 800bfb0:	e230      	b.n	800c414 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bfb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d10c      	bne.n	800bfd4 <f_mkfs+0x40c>
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d907      	bls.n	800bfd4 <f_mkfs+0x40c>
 800bfc4:	230e      	movs	r3, #14
 800bfc6:	e225      	b.n	800c414 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bfc8:	bf00      	nop
 800bfca:	e6ce      	b.n	800bd6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfcc:	bf00      	nop
 800bfce:	e6cc      	b.n	800bd6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfd0:	bf00      	nop
			pau = au;
 800bfd2:	e6ca      	b.n	800bd6a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bfd4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bfd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2100      	movs	r1, #0
 800bfdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfde:	f7fd fdd4 	bl	8009b8a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bfe2:	220b      	movs	r2, #11
 800bfe4:	49bc      	ldr	r1, [pc, #752]	; (800c2d8 <f_mkfs+0x710>)
 800bfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe8:	f7fd fdae 	bl	8009b48 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	330b      	adds	r3, #11
 800bff0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bff2:	4611      	mov	r1, r2
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fd fd60 	bl	8009aba <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	330d      	adds	r3, #13
 800bffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c000:	b2d2      	uxtb	r2, r2
 800c002:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	330e      	adds	r3, #14
 800c008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c00a:	b292      	uxth	r2, r2
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fd fd53 	bl	8009aba <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	3310      	adds	r3, #16
 800c018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c01a:	b2d2      	uxtb	r2, r2
 800c01c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	f103 0211 	add.w	r2, r3, #17
 800c024:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d002      	beq.n	800c032 <f_mkfs+0x46a>
 800c02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02e:	b29b      	uxth	r3, r3
 800c030:	e000      	b.n	800c034 <f_mkfs+0x46c>
 800c032:	2300      	movs	r3, #0
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7fd fd3f 	bl	8009aba <st_word>
		if (sz_vol < 0x10000) {
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c042:	d208      	bcs.n	800c056 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	3313      	adds	r3, #19
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	b292      	uxth	r2, r2
 800c04c:	4611      	mov	r1, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fd fd33 	bl	8009aba <st_word>
 800c054:	e006      	b.n	800c064 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	3320      	adds	r3, #32
 800c05a:	693a      	ldr	r2, [r7, #16]
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd fd46 	bl	8009af0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	3315      	adds	r3, #21
 800c068:	22f8      	movs	r2, #248	; 0xf8
 800c06a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	3318      	adds	r3, #24
 800c070:	213f      	movs	r1, #63	; 0x3f
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd fd21 	bl	8009aba <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	331a      	adds	r3, #26
 800c07c:	21ff      	movs	r1, #255	; 0xff
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fd fd1b 	bl	8009aba <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	331c      	adds	r3, #28
 800c088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fd fd30 	bl	8009af0 <st_dword>
		if (fmt == FS_FAT32) {
 800c090:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c094:	2b03      	cmp	r3, #3
 800c096:	d131      	bne.n	800c0fc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c09e:	f7fd fa7d 	bl	800959c <get_fattime>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f7fd fd22 	bl	8009af0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	3324      	adds	r3, #36	; 0x24
 800c0b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fd fd1c 	bl	8009af0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	332c      	adds	r3, #44	; 0x2c
 800c0bc:	2102      	movs	r1, #2
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fd fd16 	bl	8009af0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	3330      	adds	r3, #48	; 0x30
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fd fcf5 	bl	8009aba <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d2:	3332      	adds	r3, #50	; 0x32
 800c0d4:	2106      	movs	r1, #6
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fcef 	bl	8009aba <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	3340      	adds	r3, #64	; 0x40
 800c0e0:	2280      	movs	r2, #128	; 0x80
 800c0e2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	3342      	adds	r3, #66	; 0x42
 800c0e8:	2229      	movs	r2, #41	; 0x29
 800c0ea:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	3347      	adds	r3, #71	; 0x47
 800c0f0:	2213      	movs	r2, #19
 800c0f2:	497a      	ldr	r1, [pc, #488]	; (800c2dc <f_mkfs+0x714>)
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fd fd27 	bl	8009b48 <mem_cpy>
 800c0fa:	e020      	b.n	800c13e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c102:	f7fd fa4b 	bl	800959c <get_fattime>
 800c106:	4603      	mov	r3, r0
 800c108:	4619      	mov	r1, r3
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7fd fcf0 	bl	8009af0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	3316      	adds	r3, #22
 800c114:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c116:	b292      	uxth	r2, r2
 800c118:	4611      	mov	r1, r2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fd fccd 	bl	8009aba <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	3324      	adds	r3, #36	; 0x24
 800c124:	2280      	movs	r2, #128	; 0x80
 800c126:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	3326      	adds	r3, #38	; 0x26
 800c12c:	2229      	movs	r2, #41	; 0x29
 800c12e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	332b      	adds	r3, #43	; 0x2b
 800c134:	2213      	movs	r2, #19
 800c136:	496a      	ldr	r1, [pc, #424]	; (800c2e0 <f_mkfs+0x718>)
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fd fd05 	bl	8009b48 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c144:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fd fcb6 	bl	8009aba <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c14e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c152:	2301      	movs	r3, #1
 800c154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c158:	f7fd fc36 	bl	80099c8 <disk_write>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <f_mkfs+0x59e>
 800c162:	2301      	movs	r3, #1
 800c164:	e156      	b.n	800c414 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c166:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d140      	bne.n	800c1f0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	1d9a      	adds	r2, r3, #6
 800c172:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c176:	2301      	movs	r3, #1
 800c178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c17a:	f7fd fc25 	bl	80099c8 <disk_write>
			mem_set(buf, 0, ss);
 800c17e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c180:	461a      	mov	r2, r3
 800c182:	2100      	movs	r1, #0
 800c184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c186:	f7fd fd00 	bl	8009b8a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c18a:	4956      	ldr	r1, [pc, #344]	; (800c2e4 <f_mkfs+0x71c>)
 800c18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c18e:	f7fd fcaf 	bl	8009af0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c198:	4953      	ldr	r1, [pc, #332]	; (800c2e8 <f_mkfs+0x720>)
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fd fca8 	bl	8009af0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7fd fc9f 	bl	8009af0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1b8:	2102      	movs	r1, #2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fd fc98 	bl	8009af0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fd fc75 	bl	8009aba <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	1dda      	adds	r2, r3, #7
 800c1d4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1d8:	2301      	movs	r3, #1
 800c1da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1dc:	f7fd fbf4 	bl	80099c8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ec:	f7fd fbec 	bl	80099c8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1f6:	f7fd fcc8 	bl	8009b8a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c1fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1fc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c1fe:	2300      	movs	r3, #0
 800c200:	64bb      	str	r3, [r7, #72]	; 0x48
 800c202:	e04b      	b.n	800c29c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c204:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d113      	bne.n	800c234 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c20c:	f06f 0107 	mvn.w	r1, #7
 800c210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c212:	f7fd fc6d 	bl	8009af0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	3304      	adds	r3, #4
 800c21a:	f04f 31ff 	mov.w	r1, #4294967295
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fd fc66 	bl	8009af0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	3308      	adds	r3, #8
 800c228:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fd fc5f 	bl	8009af0 <st_dword>
 800c232:	e00b      	b.n	800c24c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c234:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d101      	bne.n	800c240 <f_mkfs+0x678>
 800c23c:	4b2b      	ldr	r3, [pc, #172]	; (800c2ec <f_mkfs+0x724>)
 800c23e:	e001      	b.n	800c244 <f_mkfs+0x67c>
 800c240:	f06f 0307 	mvn.w	r3, #7
 800c244:	4619      	mov	r1, r3
 800c246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c248:	f7fd fc52 	bl	8009af0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c24c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c24e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	4293      	cmp	r3, r2
 800c256:	bf28      	it	cs
 800c258:	4613      	movcs	r3, r2
 800c25a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c25c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c262:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c266:	f7fd fbaf 	bl	80099c8 <disk_write>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <f_mkfs+0x6ac>
 800c270:	2301      	movs	r3, #1
 800c272:	e0cf      	b.n	800c414 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c274:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c276:	461a      	mov	r2, r3
 800c278:	2100      	movs	r1, #0
 800c27a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c27c:	f7fd fc85 	bl	8009b8a <mem_set>
				sect += n; nsect -= n;
 800c280:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c284:	4413      	add	r3, r2
 800c286:	667b      	str	r3, [r7, #100]	; 0x64
 800c288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c28a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1dc      	bne.n	800c250 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c298:	3301      	adds	r3, #1
 800c29a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d3af      	bcc.n	800c204 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c2a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d101      	bne.n	800c2b0 <f_mkfs+0x6e8>
 800c2ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ae:	e000      	b.n	800c2b2 <f_mkfs+0x6ea>
 800c2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2b2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c2b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	bf28      	it	cs
 800c2bc:	4613      	movcs	r3, r2
 800c2be:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c2c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2ca:	f7fd fb7d 	bl	80099c8 <disk_write>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00d      	beq.n	800c2f0 <f_mkfs+0x728>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e09d      	b.n	800c414 <f_mkfs+0x84c>
 800c2d8:	0800cdec 	.word	0x0800cdec
 800c2dc:	0800cdf8 	.word	0x0800cdf8
 800c2e0:	0800ce0c 	.word	0x0800ce0c
 800c2e4:	41615252 	.word	0x41615252
 800c2e8:	61417272 	.word	0x61417272
 800c2ec:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c2f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f4:	4413      	add	r3, r2
 800c2f6:	667b      	str	r3, [r7, #100]	; 0x64
 800c2f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1d6      	bne.n	800c2b4 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c306:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d103      	bne.n	800c316 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c30e:	230c      	movs	r3, #12
 800c310:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c314:	e010      	b.n	800c338 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c31c:	d303      	bcc.n	800c326 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c31e:	2306      	movs	r3, #6
 800c320:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c324:	e008      	b.n	800c338 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c326:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d101      	bne.n	800c332 <f_mkfs+0x76a>
 800c32e:	2304      	movs	r3, #4
 800c330:	e000      	b.n	800c334 <f_mkfs+0x76c>
 800c332:	2301      	movs	r3, #1
 800c334:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	f003 0308 	and.w	r3, r3, #8
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d15b      	bne.n	800c3fa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c342:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c344:	461a      	mov	r2, r3
 800c346:	2100      	movs	r1, #0
 800c348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c34a:	f7fd fc1e 	bl	8009b8a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c354:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fd fbae 	bl	8009aba <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c364:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	3301      	adds	r3, #1
 800c370:	2201      	movs	r2, #1
 800c372:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	3302      	adds	r3, #2
 800c378:	2201      	movs	r2, #1
 800c37a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	3303      	adds	r3, #3
 800c380:	2200      	movs	r2, #0
 800c382:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	3304      	adds	r3, #4
 800c388:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c38c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	441a      	add	r2, r3
 800c394:	4b21      	ldr	r3, [pc, #132]	; (800c41c <f_mkfs+0x854>)
 800c396:	fba3 1302 	umull	r1, r3, r3, r2
 800c39a:	1ad2      	subs	r2, r2, r3
 800c39c:	0852      	lsrs	r2, r2, #1
 800c39e:	4413      	add	r3, r2
 800c3a0:	0b5b      	lsrs	r3, r3, #13
 800c3a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	3305      	adds	r3, #5
 800c3a8:	22fe      	movs	r2, #254	; 0xfe
 800c3aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ae:	089b      	lsrs	r3, r3, #2
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	3306      	adds	r3, #6
 800c3b6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	3307      	adds	r3, #7
 800c3c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3c4:	b2d2      	uxtb	r2, r2
 800c3c6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fd fb8e 	bl	8009af0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	330c      	adds	r3, #12
 800c3d8:	693a      	ldr	r2, [r7, #16]
 800c3da:	4611      	mov	r1, r2
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fd fb87 	bl	8009af0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c3e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3ec:	f7fd faec 	bl	80099c8 <disk_write>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <f_mkfs+0x832>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e00c      	b.n	800c414 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c3fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c3fe:	2200      	movs	r2, #0
 800c400:	2100      	movs	r1, #0
 800c402:	4618      	mov	r0, r3
 800c404:	f7fd fb00 	bl	8009a08 <disk_ioctl>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <f_mkfs+0x84a>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <f_mkfs+0x84c>

	return FR_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3774      	adds	r7, #116	; 0x74
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd90      	pop	{r4, r7, pc}
 800c41c:	0515565b 	.word	0x0515565b

0800c420 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c42e:	2301      	movs	r3, #1
 800c430:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c436:	4b1f      	ldr	r3, [pc, #124]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c438:	7a5b      	ldrb	r3, [r3, #9]
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d131      	bne.n	800c4a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c440:	4b1c      	ldr	r3, [pc, #112]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c442:	7a5b      	ldrb	r3, [r3, #9]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	461a      	mov	r2, r3
 800c448:	4b1a      	ldr	r3, [pc, #104]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c44a:	2100      	movs	r1, #0
 800c44c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c44e:	4b19      	ldr	r3, [pc, #100]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c450:	7a5b      	ldrb	r3, [r3, #9]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	4a17      	ldr	r2, [pc, #92]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c45e:	4b15      	ldr	r3, [pc, #84]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c460:	7a5b      	ldrb	r3, [r3, #9]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	461a      	mov	r2, r3
 800c466:	4b13      	ldr	r3, [pc, #76]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c468:	4413      	add	r3, r2
 800c46a:	79fa      	ldrb	r2, [r7, #7]
 800c46c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c46e:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c470:	7a5b      	ldrb	r3, [r3, #9]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	b2d1      	uxtb	r1, r2
 800c478:	4a0e      	ldr	r2, [pc, #56]	; (800c4b4 <FATFS_LinkDriverEx+0x94>)
 800c47a:	7251      	strb	r1, [r2, #9]
 800c47c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c47e:	7dbb      	ldrb	r3, [r7, #22]
 800c480:	3330      	adds	r3, #48	; 0x30
 800c482:	b2da      	uxtb	r2, r3
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	3301      	adds	r3, #1
 800c48c:	223a      	movs	r2, #58	; 0x3a
 800c48e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	3302      	adds	r3, #2
 800c494:	222f      	movs	r2, #47	; 0x2f
 800c496:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	3303      	adds	r3, #3
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	2403e9ac 	.word	0x2403e9ac

0800c4b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7ff ffaa 	bl	800c420 <FATFS_LinkDriverEx>
 800c4cc:	4603      	mov	r3, r0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <__errno>:
 800c4d8:	4b01      	ldr	r3, [pc, #4]	; (800c4e0 <__errno+0x8>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	24000038 	.word	0x24000038

0800c4e4 <__libc_init_array>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	4d0d      	ldr	r5, [pc, #52]	; (800c51c <__libc_init_array+0x38>)
 800c4e8:	4c0d      	ldr	r4, [pc, #52]	; (800c520 <__libc_init_array+0x3c>)
 800c4ea:	1b64      	subs	r4, r4, r5
 800c4ec:	10a4      	asrs	r4, r4, #2
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	d109      	bne.n	800c508 <__libc_init_array+0x24>
 800c4f4:	4d0b      	ldr	r5, [pc, #44]	; (800c524 <__libc_init_array+0x40>)
 800c4f6:	4c0c      	ldr	r4, [pc, #48]	; (800c528 <__libc_init_array+0x44>)
 800c4f8:	f000 fc4e 	bl	800cd98 <_init>
 800c4fc:	1b64      	subs	r4, r4, r5
 800c4fe:	10a4      	asrs	r4, r4, #2
 800c500:	2600      	movs	r6, #0
 800c502:	42a6      	cmp	r6, r4
 800c504:	d105      	bne.n	800c512 <__libc_init_array+0x2e>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50c:	4798      	blx	r3
 800c50e:	3601      	adds	r6, #1
 800c510:	e7ee      	b.n	800c4f0 <__libc_init_array+0xc>
 800c512:	f855 3b04 	ldr.w	r3, [r5], #4
 800c516:	4798      	blx	r3
 800c518:	3601      	adds	r6, #1
 800c51a:	e7f2      	b.n	800c502 <__libc_init_array+0x1e>
 800c51c:	0800cf48 	.word	0x0800cf48
 800c520:	0800cf48 	.word	0x0800cf48
 800c524:	0800cf48 	.word	0x0800cf48
 800c528:	0800cf4c 	.word	0x0800cf4c

0800c52c <memset>:
 800c52c:	4402      	add	r2, r0
 800c52e:	4603      	mov	r3, r0
 800c530:	4293      	cmp	r3, r2
 800c532:	d100      	bne.n	800c536 <memset+0xa>
 800c534:	4770      	bx	lr
 800c536:	f803 1b01 	strb.w	r1, [r3], #1
 800c53a:	e7f9      	b.n	800c530 <memset+0x4>

0800c53c <siprintf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	b500      	push	{lr}
 800c540:	b09c      	sub	sp, #112	; 0x70
 800c542:	ab1d      	add	r3, sp, #116	; 0x74
 800c544:	9002      	str	r0, [sp, #8]
 800c546:	9006      	str	r0, [sp, #24]
 800c548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c54c:	4809      	ldr	r0, [pc, #36]	; (800c574 <siprintf+0x38>)
 800c54e:	9107      	str	r1, [sp, #28]
 800c550:	9104      	str	r1, [sp, #16]
 800c552:	4909      	ldr	r1, [pc, #36]	; (800c578 <siprintf+0x3c>)
 800c554:	f853 2b04 	ldr.w	r2, [r3], #4
 800c558:	9105      	str	r1, [sp, #20]
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	a902      	add	r1, sp, #8
 800c560:	f000 f868 	bl	800c634 <_svfiprintf_r>
 800c564:	9b02      	ldr	r3, [sp, #8]
 800c566:	2200      	movs	r2, #0
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	b01c      	add	sp, #112	; 0x70
 800c56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c570:	b003      	add	sp, #12
 800c572:	4770      	bx	lr
 800c574:	24000038 	.word	0x24000038
 800c578:	ffff0208 	.word	0xffff0208

0800c57c <__ssputs_r>:
 800c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	688e      	ldr	r6, [r1, #8]
 800c582:	429e      	cmp	r6, r3
 800c584:	4682      	mov	sl, r0
 800c586:	460c      	mov	r4, r1
 800c588:	4690      	mov	r8, r2
 800c58a:	461f      	mov	r7, r3
 800c58c:	d838      	bhi.n	800c600 <__ssputs_r+0x84>
 800c58e:	898a      	ldrh	r2, [r1, #12]
 800c590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c594:	d032      	beq.n	800c5fc <__ssputs_r+0x80>
 800c596:	6825      	ldr	r5, [r4, #0]
 800c598:	6909      	ldr	r1, [r1, #16]
 800c59a:	eba5 0901 	sub.w	r9, r5, r1
 800c59e:	6965      	ldr	r5, [r4, #20]
 800c5a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	444b      	add	r3, r9
 800c5ac:	106d      	asrs	r5, r5, #1
 800c5ae:	429d      	cmp	r5, r3
 800c5b0:	bf38      	it	cc
 800c5b2:	461d      	movcc	r5, r3
 800c5b4:	0553      	lsls	r3, r2, #21
 800c5b6:	d531      	bpl.n	800c61c <__ssputs_r+0xa0>
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f000 fb47 	bl	800cc4c <_malloc_r>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	b950      	cbnz	r0, 800c5d8 <__ssputs_r+0x5c>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	f8ca 3000 	str.w	r3, [sl]
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ce:	81a3      	strh	r3, [r4, #12]
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d8:	6921      	ldr	r1, [r4, #16]
 800c5da:	464a      	mov	r2, r9
 800c5dc:	f000 fabe 	bl	800cb5c <memcpy>
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ea:	81a3      	strh	r3, [r4, #12]
 800c5ec:	6126      	str	r6, [r4, #16]
 800c5ee:	6165      	str	r5, [r4, #20]
 800c5f0:	444e      	add	r6, r9
 800c5f2:	eba5 0509 	sub.w	r5, r5, r9
 800c5f6:	6026      	str	r6, [r4, #0]
 800c5f8:	60a5      	str	r5, [r4, #8]
 800c5fa:	463e      	mov	r6, r7
 800c5fc:	42be      	cmp	r6, r7
 800c5fe:	d900      	bls.n	800c602 <__ssputs_r+0x86>
 800c600:	463e      	mov	r6, r7
 800c602:	4632      	mov	r2, r6
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	4641      	mov	r1, r8
 800c608:	f000 fab6 	bl	800cb78 <memmove>
 800c60c:	68a3      	ldr	r3, [r4, #8]
 800c60e:	6822      	ldr	r2, [r4, #0]
 800c610:	1b9b      	subs	r3, r3, r6
 800c612:	4432      	add	r2, r6
 800c614:	60a3      	str	r3, [r4, #8]
 800c616:	6022      	str	r2, [r4, #0]
 800c618:	2000      	movs	r0, #0
 800c61a:	e7db      	b.n	800c5d4 <__ssputs_r+0x58>
 800c61c:	462a      	mov	r2, r5
 800c61e:	f000 fb6f 	bl	800cd00 <_realloc_r>
 800c622:	4606      	mov	r6, r0
 800c624:	2800      	cmp	r0, #0
 800c626:	d1e1      	bne.n	800c5ec <__ssputs_r+0x70>
 800c628:	6921      	ldr	r1, [r4, #16]
 800c62a:	4650      	mov	r0, sl
 800c62c:	f000 fabe 	bl	800cbac <_free_r>
 800c630:	e7c7      	b.n	800c5c2 <__ssputs_r+0x46>
	...

0800c634 <_svfiprintf_r>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	4698      	mov	r8, r3
 800c63a:	898b      	ldrh	r3, [r1, #12]
 800c63c:	061b      	lsls	r3, r3, #24
 800c63e:	b09d      	sub	sp, #116	; 0x74
 800c640:	4607      	mov	r7, r0
 800c642:	460d      	mov	r5, r1
 800c644:	4614      	mov	r4, r2
 800c646:	d50e      	bpl.n	800c666 <_svfiprintf_r+0x32>
 800c648:	690b      	ldr	r3, [r1, #16]
 800c64a:	b963      	cbnz	r3, 800c666 <_svfiprintf_r+0x32>
 800c64c:	2140      	movs	r1, #64	; 0x40
 800c64e:	f000 fafd 	bl	800cc4c <_malloc_r>
 800c652:	6028      	str	r0, [r5, #0]
 800c654:	6128      	str	r0, [r5, #16]
 800c656:	b920      	cbnz	r0, 800c662 <_svfiprintf_r+0x2e>
 800c658:	230c      	movs	r3, #12
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295
 800c660:	e0d1      	b.n	800c806 <_svfiprintf_r+0x1d2>
 800c662:	2340      	movs	r3, #64	; 0x40
 800c664:	616b      	str	r3, [r5, #20]
 800c666:	2300      	movs	r3, #0
 800c668:	9309      	str	r3, [sp, #36]	; 0x24
 800c66a:	2320      	movs	r3, #32
 800c66c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c670:	f8cd 800c 	str.w	r8, [sp, #12]
 800c674:	2330      	movs	r3, #48	; 0x30
 800c676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c820 <_svfiprintf_r+0x1ec>
 800c67a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c67e:	f04f 0901 	mov.w	r9, #1
 800c682:	4623      	mov	r3, r4
 800c684:	469a      	mov	sl, r3
 800c686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c68a:	b10a      	cbz	r2, 800c690 <_svfiprintf_r+0x5c>
 800c68c:	2a25      	cmp	r2, #37	; 0x25
 800c68e:	d1f9      	bne.n	800c684 <_svfiprintf_r+0x50>
 800c690:	ebba 0b04 	subs.w	fp, sl, r4
 800c694:	d00b      	beq.n	800c6ae <_svfiprintf_r+0x7a>
 800c696:	465b      	mov	r3, fp
 800c698:	4622      	mov	r2, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7ff ff6d 	bl	800c57c <__ssputs_r>
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	f000 80aa 	beq.w	800c7fc <_svfiprintf_r+0x1c8>
 800c6a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6aa:	445a      	add	r2, fp
 800c6ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80a2 	beq.w	800c7fc <_svfiprintf_r+0x1c8>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c6be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c2:	f10a 0a01 	add.w	sl, sl, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	9307      	str	r3, [sp, #28]
 800c6ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d0:	4654      	mov	r4, sl
 800c6d2:	2205      	movs	r2, #5
 800c6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d8:	4851      	ldr	r0, [pc, #324]	; (800c820 <_svfiprintf_r+0x1ec>)
 800c6da:	f7f3 fe21 	bl	8000320 <memchr>
 800c6de:	9a04      	ldr	r2, [sp, #16]
 800c6e0:	b9d8      	cbnz	r0, 800c71a <_svfiprintf_r+0xe6>
 800c6e2:	06d0      	lsls	r0, r2, #27
 800c6e4:	bf44      	itt	mi
 800c6e6:	2320      	movmi	r3, #32
 800c6e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ec:	0711      	lsls	r1, r2, #28
 800c6ee:	bf44      	itt	mi
 800c6f0:	232b      	movmi	r3, #43	; 0x2b
 800c6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fc:	d015      	beq.n	800c72a <_svfiprintf_r+0xf6>
 800c6fe:	9a07      	ldr	r2, [sp, #28]
 800c700:	4654      	mov	r4, sl
 800c702:	2000      	movs	r0, #0
 800c704:	f04f 0c0a 	mov.w	ip, #10
 800c708:	4621      	mov	r1, r4
 800c70a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c70e:	3b30      	subs	r3, #48	; 0x30
 800c710:	2b09      	cmp	r3, #9
 800c712:	d94e      	bls.n	800c7b2 <_svfiprintf_r+0x17e>
 800c714:	b1b0      	cbz	r0, 800c744 <_svfiprintf_r+0x110>
 800c716:	9207      	str	r2, [sp, #28]
 800c718:	e014      	b.n	800c744 <_svfiprintf_r+0x110>
 800c71a:	eba0 0308 	sub.w	r3, r0, r8
 800c71e:	fa09 f303 	lsl.w	r3, r9, r3
 800c722:	4313      	orrs	r3, r2
 800c724:	9304      	str	r3, [sp, #16]
 800c726:	46a2      	mov	sl, r4
 800c728:	e7d2      	b.n	800c6d0 <_svfiprintf_r+0x9c>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	1d19      	adds	r1, r3, #4
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	9103      	str	r1, [sp, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfbb      	ittet	lt
 800c736:	425b      	neglt	r3, r3
 800c738:	f042 0202 	orrlt.w	r2, r2, #2
 800c73c:	9307      	strge	r3, [sp, #28]
 800c73e:	9307      	strlt	r3, [sp, #28]
 800c740:	bfb8      	it	lt
 800c742:	9204      	strlt	r2, [sp, #16]
 800c744:	7823      	ldrb	r3, [r4, #0]
 800c746:	2b2e      	cmp	r3, #46	; 0x2e
 800c748:	d10c      	bne.n	800c764 <_svfiprintf_r+0x130>
 800c74a:	7863      	ldrb	r3, [r4, #1]
 800c74c:	2b2a      	cmp	r3, #42	; 0x2a
 800c74e:	d135      	bne.n	800c7bc <_svfiprintf_r+0x188>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	1d1a      	adds	r2, r3, #4
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	9203      	str	r2, [sp, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfb8      	it	lt
 800c75c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c760:	3402      	adds	r4, #2
 800c762:	9305      	str	r3, [sp, #20]
 800c764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c830 <_svfiprintf_r+0x1fc>
 800c768:	7821      	ldrb	r1, [r4, #0]
 800c76a:	2203      	movs	r2, #3
 800c76c:	4650      	mov	r0, sl
 800c76e:	f7f3 fdd7 	bl	8000320 <memchr>
 800c772:	b140      	cbz	r0, 800c786 <_svfiprintf_r+0x152>
 800c774:	2340      	movs	r3, #64	; 0x40
 800c776:	eba0 000a 	sub.w	r0, r0, sl
 800c77a:	fa03 f000 	lsl.w	r0, r3, r0
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	4303      	orrs	r3, r0
 800c782:	3401      	adds	r4, #1
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78a:	4826      	ldr	r0, [pc, #152]	; (800c824 <_svfiprintf_r+0x1f0>)
 800c78c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c790:	2206      	movs	r2, #6
 800c792:	f7f3 fdc5 	bl	8000320 <memchr>
 800c796:	2800      	cmp	r0, #0
 800c798:	d038      	beq.n	800c80c <_svfiprintf_r+0x1d8>
 800c79a:	4b23      	ldr	r3, [pc, #140]	; (800c828 <_svfiprintf_r+0x1f4>)
 800c79c:	bb1b      	cbnz	r3, 800c7e6 <_svfiprintf_r+0x1b2>
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	3307      	adds	r3, #7
 800c7a2:	f023 0307 	bic.w	r3, r3, #7
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ac:	4433      	add	r3, r6
 800c7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b0:	e767      	b.n	800c682 <_svfiprintf_r+0x4e>
 800c7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	e7a5      	b.n	800c708 <_svfiprintf_r+0xd4>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f04f 0c0a 	mov.w	ip, #10
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ce:	3a30      	subs	r2, #48	; 0x30
 800c7d0:	2a09      	cmp	r2, #9
 800c7d2:	d903      	bls.n	800c7dc <_svfiprintf_r+0x1a8>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0c5      	beq.n	800c764 <_svfiprintf_r+0x130>
 800c7d8:	9105      	str	r1, [sp, #20]
 800c7da:	e7c3      	b.n	800c764 <_svfiprintf_r+0x130>
 800c7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7f0      	b.n	800c7c8 <_svfiprintf_r+0x194>
 800c7e6:	ab03      	add	r3, sp, #12
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <_svfiprintf_r+0x1f8>)
 800c7ee:	a904      	add	r1, sp, #16
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	f3af 8000 	nop.w
 800c7f6:	1c42      	adds	r2, r0, #1
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	d1d6      	bne.n	800c7aa <_svfiprintf_r+0x176>
 800c7fc:	89ab      	ldrh	r3, [r5, #12]
 800c7fe:	065b      	lsls	r3, r3, #25
 800c800:	f53f af2c 	bmi.w	800c65c <_svfiprintf_r+0x28>
 800c804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c806:	b01d      	add	sp, #116	; 0x74
 800c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80c:	ab03      	add	r3, sp, #12
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	462a      	mov	r2, r5
 800c812:	4b06      	ldr	r3, [pc, #24]	; (800c82c <_svfiprintf_r+0x1f8>)
 800c814:	a904      	add	r1, sp, #16
 800c816:	4638      	mov	r0, r7
 800c818:	f000 f87a 	bl	800c910 <_printf_i>
 800c81c:	e7eb      	b.n	800c7f6 <_svfiprintf_r+0x1c2>
 800c81e:	bf00      	nop
 800c820:	0800cf0a 	.word	0x0800cf0a
 800c824:	0800cf14 	.word	0x0800cf14
 800c828:	00000000 	.word	0x00000000
 800c82c:	0800c57d 	.word	0x0800c57d
 800c830:	0800cf10 	.word	0x0800cf10

0800c834 <_printf_common>:
 800c834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c838:	4616      	mov	r6, r2
 800c83a:	4699      	mov	r9, r3
 800c83c:	688a      	ldr	r2, [r1, #8]
 800c83e:	690b      	ldr	r3, [r1, #16]
 800c840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c844:	4293      	cmp	r3, r2
 800c846:	bfb8      	it	lt
 800c848:	4613      	movlt	r3, r2
 800c84a:	6033      	str	r3, [r6, #0]
 800c84c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c850:	4607      	mov	r7, r0
 800c852:	460c      	mov	r4, r1
 800c854:	b10a      	cbz	r2, 800c85a <_printf_common+0x26>
 800c856:	3301      	adds	r3, #1
 800c858:	6033      	str	r3, [r6, #0]
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	0699      	lsls	r1, r3, #26
 800c85e:	bf42      	ittt	mi
 800c860:	6833      	ldrmi	r3, [r6, #0]
 800c862:	3302      	addmi	r3, #2
 800c864:	6033      	strmi	r3, [r6, #0]
 800c866:	6825      	ldr	r5, [r4, #0]
 800c868:	f015 0506 	ands.w	r5, r5, #6
 800c86c:	d106      	bne.n	800c87c <_printf_common+0x48>
 800c86e:	f104 0a19 	add.w	sl, r4, #25
 800c872:	68e3      	ldr	r3, [r4, #12]
 800c874:	6832      	ldr	r2, [r6, #0]
 800c876:	1a9b      	subs	r3, r3, r2
 800c878:	42ab      	cmp	r3, r5
 800c87a:	dc26      	bgt.n	800c8ca <_printf_common+0x96>
 800c87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c880:	1e13      	subs	r3, r2, #0
 800c882:	6822      	ldr	r2, [r4, #0]
 800c884:	bf18      	it	ne
 800c886:	2301      	movne	r3, #1
 800c888:	0692      	lsls	r2, r2, #26
 800c88a:	d42b      	bmi.n	800c8e4 <_printf_common+0xb0>
 800c88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c890:	4649      	mov	r1, r9
 800c892:	4638      	mov	r0, r7
 800c894:	47c0      	blx	r8
 800c896:	3001      	adds	r0, #1
 800c898:	d01e      	beq.n	800c8d8 <_printf_common+0xa4>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	68e5      	ldr	r5, [r4, #12]
 800c89e:	6832      	ldr	r2, [r6, #0]
 800c8a0:	f003 0306 	and.w	r3, r3, #6
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	bf08      	it	eq
 800c8a8:	1aad      	subeq	r5, r5, r2
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	6922      	ldr	r2, [r4, #16]
 800c8ae:	bf0c      	ite	eq
 800c8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8b4:	2500      	movne	r5, #0
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	bfc4      	itt	gt
 800c8ba:	1a9b      	subgt	r3, r3, r2
 800c8bc:	18ed      	addgt	r5, r5, r3
 800c8be:	2600      	movs	r6, #0
 800c8c0:	341a      	adds	r4, #26
 800c8c2:	42b5      	cmp	r5, r6
 800c8c4:	d11a      	bne.n	800c8fc <_printf_common+0xc8>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e008      	b.n	800c8dc <_printf_common+0xa8>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	4652      	mov	r2, sl
 800c8ce:	4649      	mov	r1, r9
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	47c0      	blx	r8
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	d103      	bne.n	800c8e0 <_printf_common+0xac>
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e0:	3501      	adds	r5, #1
 800c8e2:	e7c6      	b.n	800c872 <_printf_common+0x3e>
 800c8e4:	18e1      	adds	r1, r4, r3
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	2030      	movs	r0, #48	; 0x30
 800c8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8ee:	4422      	add	r2, r4
 800c8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8f8:	3302      	adds	r3, #2
 800c8fa:	e7c7      	b.n	800c88c <_printf_common+0x58>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	4622      	mov	r2, r4
 800c900:	4649      	mov	r1, r9
 800c902:	4638      	mov	r0, r7
 800c904:	47c0      	blx	r8
 800c906:	3001      	adds	r0, #1
 800c908:	d0e6      	beq.n	800c8d8 <_printf_common+0xa4>
 800c90a:	3601      	adds	r6, #1
 800c90c:	e7d9      	b.n	800c8c2 <_printf_common+0x8e>
	...

0800c910 <_printf_i>:
 800c910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	460c      	mov	r4, r1
 800c916:	4691      	mov	r9, r2
 800c918:	7e27      	ldrb	r7, [r4, #24]
 800c91a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c91c:	2f78      	cmp	r7, #120	; 0x78
 800c91e:	4680      	mov	r8, r0
 800c920:	469a      	mov	sl, r3
 800c922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c926:	d807      	bhi.n	800c938 <_printf_i+0x28>
 800c928:	2f62      	cmp	r7, #98	; 0x62
 800c92a:	d80a      	bhi.n	800c942 <_printf_i+0x32>
 800c92c:	2f00      	cmp	r7, #0
 800c92e:	f000 80d8 	beq.w	800cae2 <_printf_i+0x1d2>
 800c932:	2f58      	cmp	r7, #88	; 0x58
 800c934:	f000 80a3 	beq.w	800ca7e <_printf_i+0x16e>
 800c938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c940:	e03a      	b.n	800c9b8 <_printf_i+0xa8>
 800c942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c946:	2b15      	cmp	r3, #21
 800c948:	d8f6      	bhi.n	800c938 <_printf_i+0x28>
 800c94a:	a001      	add	r0, pc, #4	; (adr r0, 800c950 <_printf_i+0x40>)
 800c94c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c950:	0800c9a9 	.word	0x0800c9a9
 800c954:	0800c9bd 	.word	0x0800c9bd
 800c958:	0800c939 	.word	0x0800c939
 800c95c:	0800c939 	.word	0x0800c939
 800c960:	0800c939 	.word	0x0800c939
 800c964:	0800c939 	.word	0x0800c939
 800c968:	0800c9bd 	.word	0x0800c9bd
 800c96c:	0800c939 	.word	0x0800c939
 800c970:	0800c939 	.word	0x0800c939
 800c974:	0800c939 	.word	0x0800c939
 800c978:	0800c939 	.word	0x0800c939
 800c97c:	0800cac9 	.word	0x0800cac9
 800c980:	0800c9ed 	.word	0x0800c9ed
 800c984:	0800caab 	.word	0x0800caab
 800c988:	0800c939 	.word	0x0800c939
 800c98c:	0800c939 	.word	0x0800c939
 800c990:	0800caeb 	.word	0x0800caeb
 800c994:	0800c939 	.word	0x0800c939
 800c998:	0800c9ed 	.word	0x0800c9ed
 800c99c:	0800c939 	.word	0x0800c939
 800c9a0:	0800c939 	.word	0x0800c939
 800c9a4:	0800cab3 	.word	0x0800cab3
 800c9a8:	680b      	ldr	r3, [r1, #0]
 800c9aa:	1d1a      	adds	r2, r3, #4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	600a      	str	r2, [r1, #0]
 800c9b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e0a3      	b.n	800cb04 <_printf_i+0x1f4>
 800c9bc:	6825      	ldr	r5, [r4, #0]
 800c9be:	6808      	ldr	r0, [r1, #0]
 800c9c0:	062e      	lsls	r6, r5, #24
 800c9c2:	f100 0304 	add.w	r3, r0, #4
 800c9c6:	d50a      	bpl.n	800c9de <_printf_i+0xce>
 800c9c8:	6805      	ldr	r5, [r0, #0]
 800c9ca:	600b      	str	r3, [r1, #0]
 800c9cc:	2d00      	cmp	r5, #0
 800c9ce:	da03      	bge.n	800c9d8 <_printf_i+0xc8>
 800c9d0:	232d      	movs	r3, #45	; 0x2d
 800c9d2:	426d      	negs	r5, r5
 800c9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9d8:	485e      	ldr	r0, [pc, #376]	; (800cb54 <_printf_i+0x244>)
 800c9da:	230a      	movs	r3, #10
 800c9dc:	e019      	b.n	800ca12 <_printf_i+0x102>
 800c9de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9e2:	6805      	ldr	r5, [r0, #0]
 800c9e4:	600b      	str	r3, [r1, #0]
 800c9e6:	bf18      	it	ne
 800c9e8:	b22d      	sxthne	r5, r5
 800c9ea:	e7ef      	b.n	800c9cc <_printf_i+0xbc>
 800c9ec:	680b      	ldr	r3, [r1, #0]
 800c9ee:	6825      	ldr	r5, [r4, #0]
 800c9f0:	1d18      	adds	r0, r3, #4
 800c9f2:	6008      	str	r0, [r1, #0]
 800c9f4:	0628      	lsls	r0, r5, #24
 800c9f6:	d501      	bpl.n	800c9fc <_printf_i+0xec>
 800c9f8:	681d      	ldr	r5, [r3, #0]
 800c9fa:	e002      	b.n	800ca02 <_printf_i+0xf2>
 800c9fc:	0669      	lsls	r1, r5, #25
 800c9fe:	d5fb      	bpl.n	800c9f8 <_printf_i+0xe8>
 800ca00:	881d      	ldrh	r5, [r3, #0]
 800ca02:	4854      	ldr	r0, [pc, #336]	; (800cb54 <_printf_i+0x244>)
 800ca04:	2f6f      	cmp	r7, #111	; 0x6f
 800ca06:	bf0c      	ite	eq
 800ca08:	2308      	moveq	r3, #8
 800ca0a:	230a      	movne	r3, #10
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca12:	6866      	ldr	r6, [r4, #4]
 800ca14:	60a6      	str	r6, [r4, #8]
 800ca16:	2e00      	cmp	r6, #0
 800ca18:	bfa2      	ittt	ge
 800ca1a:	6821      	ldrge	r1, [r4, #0]
 800ca1c:	f021 0104 	bicge.w	r1, r1, #4
 800ca20:	6021      	strge	r1, [r4, #0]
 800ca22:	b90d      	cbnz	r5, 800ca28 <_printf_i+0x118>
 800ca24:	2e00      	cmp	r6, #0
 800ca26:	d04d      	beq.n	800cac4 <_printf_i+0x1b4>
 800ca28:	4616      	mov	r6, r2
 800ca2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ca32:	5dc7      	ldrb	r7, [r0, r7]
 800ca34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca38:	462f      	mov	r7, r5
 800ca3a:	42bb      	cmp	r3, r7
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	d9f4      	bls.n	800ca2a <_printf_i+0x11a>
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d10b      	bne.n	800ca5c <_printf_i+0x14c>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	07df      	lsls	r7, r3, #31
 800ca48:	d508      	bpl.n	800ca5c <_printf_i+0x14c>
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	6861      	ldr	r1, [r4, #4]
 800ca4e:	4299      	cmp	r1, r3
 800ca50:	bfde      	ittt	le
 800ca52:	2330      	movle	r3, #48	; 0x30
 800ca54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca5c:	1b92      	subs	r2, r2, r6
 800ca5e:	6122      	str	r2, [r4, #16]
 800ca60:	f8cd a000 	str.w	sl, [sp]
 800ca64:	464b      	mov	r3, r9
 800ca66:	aa03      	add	r2, sp, #12
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4640      	mov	r0, r8
 800ca6c:	f7ff fee2 	bl	800c834 <_printf_common>
 800ca70:	3001      	adds	r0, #1
 800ca72:	d14c      	bne.n	800cb0e <_printf_i+0x1fe>
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	b004      	add	sp, #16
 800ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7e:	4835      	ldr	r0, [pc, #212]	; (800cb54 <_printf_i+0x244>)
 800ca80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	680e      	ldr	r6, [r1, #0]
 800ca88:	061f      	lsls	r7, r3, #24
 800ca8a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca8e:	600e      	str	r6, [r1, #0]
 800ca90:	d514      	bpl.n	800cabc <_printf_i+0x1ac>
 800ca92:	07d9      	lsls	r1, r3, #31
 800ca94:	bf44      	itt	mi
 800ca96:	f043 0320 	orrmi.w	r3, r3, #32
 800ca9a:	6023      	strmi	r3, [r4, #0]
 800ca9c:	b91d      	cbnz	r5, 800caa6 <_printf_i+0x196>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	f023 0320 	bic.w	r3, r3, #32
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	2310      	movs	r3, #16
 800caa8:	e7b0      	b.n	800ca0c <_printf_i+0xfc>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	f043 0320 	orr.w	r3, r3, #32
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	2378      	movs	r3, #120	; 0x78
 800cab4:	4828      	ldr	r0, [pc, #160]	; (800cb58 <_printf_i+0x248>)
 800cab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800caba:	e7e3      	b.n	800ca84 <_printf_i+0x174>
 800cabc:	065e      	lsls	r6, r3, #25
 800cabe:	bf48      	it	mi
 800cac0:	b2ad      	uxthmi	r5, r5
 800cac2:	e7e6      	b.n	800ca92 <_printf_i+0x182>
 800cac4:	4616      	mov	r6, r2
 800cac6:	e7bb      	b.n	800ca40 <_printf_i+0x130>
 800cac8:	680b      	ldr	r3, [r1, #0]
 800caca:	6826      	ldr	r6, [r4, #0]
 800cacc:	6960      	ldr	r0, [r4, #20]
 800cace:	1d1d      	adds	r5, r3, #4
 800cad0:	600d      	str	r5, [r1, #0]
 800cad2:	0635      	lsls	r5, r6, #24
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	d501      	bpl.n	800cadc <_printf_i+0x1cc>
 800cad8:	6018      	str	r0, [r3, #0]
 800cada:	e002      	b.n	800cae2 <_printf_i+0x1d2>
 800cadc:	0671      	lsls	r1, r6, #25
 800cade:	d5fb      	bpl.n	800cad8 <_printf_i+0x1c8>
 800cae0:	8018      	strh	r0, [r3, #0]
 800cae2:	2300      	movs	r3, #0
 800cae4:	6123      	str	r3, [r4, #16]
 800cae6:	4616      	mov	r6, r2
 800cae8:	e7ba      	b.n	800ca60 <_printf_i+0x150>
 800caea:	680b      	ldr	r3, [r1, #0]
 800caec:	1d1a      	adds	r2, r3, #4
 800caee:	600a      	str	r2, [r1, #0]
 800caf0:	681e      	ldr	r6, [r3, #0]
 800caf2:	6862      	ldr	r2, [r4, #4]
 800caf4:	2100      	movs	r1, #0
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7f3 fc12 	bl	8000320 <memchr>
 800cafc:	b108      	cbz	r0, 800cb02 <_printf_i+0x1f2>
 800cafe:	1b80      	subs	r0, r0, r6
 800cb00:	6060      	str	r0, [r4, #4]
 800cb02:	6863      	ldr	r3, [r4, #4]
 800cb04:	6123      	str	r3, [r4, #16]
 800cb06:	2300      	movs	r3, #0
 800cb08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb0c:	e7a8      	b.n	800ca60 <_printf_i+0x150>
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	4632      	mov	r2, r6
 800cb12:	4649      	mov	r1, r9
 800cb14:	4640      	mov	r0, r8
 800cb16:	47d0      	blx	sl
 800cb18:	3001      	adds	r0, #1
 800cb1a:	d0ab      	beq.n	800ca74 <_printf_i+0x164>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	079b      	lsls	r3, r3, #30
 800cb20:	d413      	bmi.n	800cb4a <_printf_i+0x23a>
 800cb22:	68e0      	ldr	r0, [r4, #12]
 800cb24:	9b03      	ldr	r3, [sp, #12]
 800cb26:	4298      	cmp	r0, r3
 800cb28:	bfb8      	it	lt
 800cb2a:	4618      	movlt	r0, r3
 800cb2c:	e7a4      	b.n	800ca78 <_printf_i+0x168>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4632      	mov	r2, r6
 800cb32:	4649      	mov	r1, r9
 800cb34:	4640      	mov	r0, r8
 800cb36:	47d0      	blx	sl
 800cb38:	3001      	adds	r0, #1
 800cb3a:	d09b      	beq.n	800ca74 <_printf_i+0x164>
 800cb3c:	3501      	adds	r5, #1
 800cb3e:	68e3      	ldr	r3, [r4, #12]
 800cb40:	9903      	ldr	r1, [sp, #12]
 800cb42:	1a5b      	subs	r3, r3, r1
 800cb44:	42ab      	cmp	r3, r5
 800cb46:	dcf2      	bgt.n	800cb2e <_printf_i+0x21e>
 800cb48:	e7eb      	b.n	800cb22 <_printf_i+0x212>
 800cb4a:	2500      	movs	r5, #0
 800cb4c:	f104 0619 	add.w	r6, r4, #25
 800cb50:	e7f5      	b.n	800cb3e <_printf_i+0x22e>
 800cb52:	bf00      	nop
 800cb54:	0800cf1b 	.word	0x0800cf1b
 800cb58:	0800cf2c 	.word	0x0800cf2c

0800cb5c <memcpy>:
 800cb5c:	440a      	add	r2, r1
 800cb5e:	4291      	cmp	r1, r2
 800cb60:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb64:	d100      	bne.n	800cb68 <memcpy+0xc>
 800cb66:	4770      	bx	lr
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb72:	4291      	cmp	r1, r2
 800cb74:	d1f9      	bne.n	800cb6a <memcpy+0xe>
 800cb76:	bd10      	pop	{r4, pc}

0800cb78 <memmove>:
 800cb78:	4288      	cmp	r0, r1
 800cb7a:	b510      	push	{r4, lr}
 800cb7c:	eb01 0402 	add.w	r4, r1, r2
 800cb80:	d902      	bls.n	800cb88 <memmove+0x10>
 800cb82:	4284      	cmp	r4, r0
 800cb84:	4623      	mov	r3, r4
 800cb86:	d807      	bhi.n	800cb98 <memmove+0x20>
 800cb88:	1e43      	subs	r3, r0, #1
 800cb8a:	42a1      	cmp	r1, r4
 800cb8c:	d008      	beq.n	800cba0 <memmove+0x28>
 800cb8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb96:	e7f8      	b.n	800cb8a <memmove+0x12>
 800cb98:	4402      	add	r2, r0
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	428a      	cmp	r2, r1
 800cb9e:	d100      	bne.n	800cba2 <memmove+0x2a>
 800cba0:	bd10      	pop	{r4, pc}
 800cba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbaa:	e7f7      	b.n	800cb9c <memmove+0x24>

0800cbac <_free_r>:
 800cbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbae:	2900      	cmp	r1, #0
 800cbb0:	d048      	beq.n	800cc44 <_free_r+0x98>
 800cbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb6:	9001      	str	r0, [sp, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f1a1 0404 	sub.w	r4, r1, #4
 800cbbe:	bfb8      	it	lt
 800cbc0:	18e4      	addlt	r4, r4, r3
 800cbc2:	f000 f8d3 	bl	800cd6c <__malloc_lock>
 800cbc6:	4a20      	ldr	r2, [pc, #128]	; (800cc48 <_free_r+0x9c>)
 800cbc8:	9801      	ldr	r0, [sp, #4]
 800cbca:	6813      	ldr	r3, [r2, #0]
 800cbcc:	4615      	mov	r5, r2
 800cbce:	b933      	cbnz	r3, 800cbde <_free_r+0x32>
 800cbd0:	6063      	str	r3, [r4, #4]
 800cbd2:	6014      	str	r4, [r2, #0]
 800cbd4:	b003      	add	sp, #12
 800cbd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbda:	f000 b8cd 	b.w	800cd78 <__malloc_unlock>
 800cbde:	42a3      	cmp	r3, r4
 800cbe0:	d90b      	bls.n	800cbfa <_free_r+0x4e>
 800cbe2:	6821      	ldr	r1, [r4, #0]
 800cbe4:	1862      	adds	r2, r4, r1
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	bf04      	itt	eq
 800cbea:	681a      	ldreq	r2, [r3, #0]
 800cbec:	685b      	ldreq	r3, [r3, #4]
 800cbee:	6063      	str	r3, [r4, #4]
 800cbf0:	bf04      	itt	eq
 800cbf2:	1852      	addeq	r2, r2, r1
 800cbf4:	6022      	streq	r2, [r4, #0]
 800cbf6:	602c      	str	r4, [r5, #0]
 800cbf8:	e7ec      	b.n	800cbd4 <_free_r+0x28>
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	b10b      	cbz	r3, 800cc04 <_free_r+0x58>
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	d9fa      	bls.n	800cbfa <_free_r+0x4e>
 800cc04:	6811      	ldr	r1, [r2, #0]
 800cc06:	1855      	adds	r5, r2, r1
 800cc08:	42a5      	cmp	r5, r4
 800cc0a:	d10b      	bne.n	800cc24 <_free_r+0x78>
 800cc0c:	6824      	ldr	r4, [r4, #0]
 800cc0e:	4421      	add	r1, r4
 800cc10:	1854      	adds	r4, r2, r1
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	6011      	str	r1, [r2, #0]
 800cc16:	d1dd      	bne.n	800cbd4 <_free_r+0x28>
 800cc18:	681c      	ldr	r4, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	6053      	str	r3, [r2, #4]
 800cc1e:	4421      	add	r1, r4
 800cc20:	6011      	str	r1, [r2, #0]
 800cc22:	e7d7      	b.n	800cbd4 <_free_r+0x28>
 800cc24:	d902      	bls.n	800cc2c <_free_r+0x80>
 800cc26:	230c      	movs	r3, #12
 800cc28:	6003      	str	r3, [r0, #0]
 800cc2a:	e7d3      	b.n	800cbd4 <_free_r+0x28>
 800cc2c:	6825      	ldr	r5, [r4, #0]
 800cc2e:	1961      	adds	r1, r4, r5
 800cc30:	428b      	cmp	r3, r1
 800cc32:	bf04      	itt	eq
 800cc34:	6819      	ldreq	r1, [r3, #0]
 800cc36:	685b      	ldreq	r3, [r3, #4]
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	bf04      	itt	eq
 800cc3c:	1949      	addeq	r1, r1, r5
 800cc3e:	6021      	streq	r1, [r4, #0]
 800cc40:	6054      	str	r4, [r2, #4]
 800cc42:	e7c7      	b.n	800cbd4 <_free_r+0x28>
 800cc44:	b003      	add	sp, #12
 800cc46:	bd30      	pop	{r4, r5, pc}
 800cc48:	2403e9b8 	.word	0x2403e9b8

0800cc4c <_malloc_r>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	1ccd      	adds	r5, r1, #3
 800cc50:	f025 0503 	bic.w	r5, r5, #3
 800cc54:	3508      	adds	r5, #8
 800cc56:	2d0c      	cmp	r5, #12
 800cc58:	bf38      	it	cc
 800cc5a:	250c      	movcc	r5, #12
 800cc5c:	2d00      	cmp	r5, #0
 800cc5e:	4606      	mov	r6, r0
 800cc60:	db01      	blt.n	800cc66 <_malloc_r+0x1a>
 800cc62:	42a9      	cmp	r1, r5
 800cc64:	d903      	bls.n	800cc6e <_malloc_r+0x22>
 800cc66:	230c      	movs	r3, #12
 800cc68:	6033      	str	r3, [r6, #0]
 800cc6a:	2000      	movs	r0, #0
 800cc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6e:	f000 f87d 	bl	800cd6c <__malloc_lock>
 800cc72:	4921      	ldr	r1, [pc, #132]	; (800ccf8 <_malloc_r+0xac>)
 800cc74:	680a      	ldr	r2, [r1, #0]
 800cc76:	4614      	mov	r4, r2
 800cc78:	b99c      	cbnz	r4, 800cca2 <_malloc_r+0x56>
 800cc7a:	4f20      	ldr	r7, [pc, #128]	; (800ccfc <_malloc_r+0xb0>)
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	b923      	cbnz	r3, 800cc8a <_malloc_r+0x3e>
 800cc80:	4621      	mov	r1, r4
 800cc82:	4630      	mov	r0, r6
 800cc84:	f000 f862 	bl	800cd4c <_sbrk_r>
 800cc88:	6038      	str	r0, [r7, #0]
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f000 f85d 	bl	800cd4c <_sbrk_r>
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	d123      	bne.n	800ccde <_malloc_r+0x92>
 800cc96:	230c      	movs	r3, #12
 800cc98:	6033      	str	r3, [r6, #0]
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 f86c 	bl	800cd78 <__malloc_unlock>
 800cca0:	e7e3      	b.n	800cc6a <_malloc_r+0x1e>
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	1b5b      	subs	r3, r3, r5
 800cca6:	d417      	bmi.n	800ccd8 <_malloc_r+0x8c>
 800cca8:	2b0b      	cmp	r3, #11
 800ccaa:	d903      	bls.n	800ccb4 <_malloc_r+0x68>
 800ccac:	6023      	str	r3, [r4, #0]
 800ccae:	441c      	add	r4, r3
 800ccb0:	6025      	str	r5, [r4, #0]
 800ccb2:	e004      	b.n	800ccbe <_malloc_r+0x72>
 800ccb4:	6863      	ldr	r3, [r4, #4]
 800ccb6:	42a2      	cmp	r2, r4
 800ccb8:	bf0c      	ite	eq
 800ccba:	600b      	streq	r3, [r1, #0]
 800ccbc:	6053      	strne	r3, [r2, #4]
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f000 f85a 	bl	800cd78 <__malloc_unlock>
 800ccc4:	f104 000b 	add.w	r0, r4, #11
 800ccc8:	1d23      	adds	r3, r4, #4
 800ccca:	f020 0007 	bic.w	r0, r0, #7
 800ccce:	1ac2      	subs	r2, r0, r3
 800ccd0:	d0cc      	beq.n	800cc6c <_malloc_r+0x20>
 800ccd2:	1a1b      	subs	r3, r3, r0
 800ccd4:	50a3      	str	r3, [r4, r2]
 800ccd6:	e7c9      	b.n	800cc6c <_malloc_r+0x20>
 800ccd8:	4622      	mov	r2, r4
 800ccda:	6864      	ldr	r4, [r4, #4]
 800ccdc:	e7cc      	b.n	800cc78 <_malloc_r+0x2c>
 800ccde:	1cc4      	adds	r4, r0, #3
 800cce0:	f024 0403 	bic.w	r4, r4, #3
 800cce4:	42a0      	cmp	r0, r4
 800cce6:	d0e3      	beq.n	800ccb0 <_malloc_r+0x64>
 800cce8:	1a21      	subs	r1, r4, r0
 800ccea:	4630      	mov	r0, r6
 800ccec:	f000 f82e 	bl	800cd4c <_sbrk_r>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	d1dd      	bne.n	800ccb0 <_malloc_r+0x64>
 800ccf4:	e7cf      	b.n	800cc96 <_malloc_r+0x4a>
 800ccf6:	bf00      	nop
 800ccf8:	2403e9b8 	.word	0x2403e9b8
 800ccfc:	2403e9bc 	.word	0x2403e9bc

0800cd00 <_realloc_r>:
 800cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd02:	4607      	mov	r7, r0
 800cd04:	4614      	mov	r4, r2
 800cd06:	460e      	mov	r6, r1
 800cd08:	b921      	cbnz	r1, 800cd14 <_realloc_r+0x14>
 800cd0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd0e:	4611      	mov	r1, r2
 800cd10:	f7ff bf9c 	b.w	800cc4c <_malloc_r>
 800cd14:	b922      	cbnz	r2, 800cd20 <_realloc_r+0x20>
 800cd16:	f7ff ff49 	bl	800cbac <_free_r>
 800cd1a:	4625      	mov	r5, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd20:	f000 f830 	bl	800cd84 <_malloc_usable_size_r>
 800cd24:	42a0      	cmp	r0, r4
 800cd26:	d20f      	bcs.n	800cd48 <_realloc_r+0x48>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	f7ff ff8e 	bl	800cc4c <_malloc_r>
 800cd30:	4605      	mov	r5, r0
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d0f2      	beq.n	800cd1c <_realloc_r+0x1c>
 800cd36:	4631      	mov	r1, r6
 800cd38:	4622      	mov	r2, r4
 800cd3a:	f7ff ff0f 	bl	800cb5c <memcpy>
 800cd3e:	4631      	mov	r1, r6
 800cd40:	4638      	mov	r0, r7
 800cd42:	f7ff ff33 	bl	800cbac <_free_r>
 800cd46:	e7e9      	b.n	800cd1c <_realloc_r+0x1c>
 800cd48:	4635      	mov	r5, r6
 800cd4a:	e7e7      	b.n	800cd1c <_realloc_r+0x1c>

0800cd4c <_sbrk_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	4d06      	ldr	r5, [pc, #24]	; (800cd68 <_sbrk_r+0x1c>)
 800cd50:	2300      	movs	r3, #0
 800cd52:	4604      	mov	r4, r0
 800cd54:	4608      	mov	r0, r1
 800cd56:	602b      	str	r3, [r5, #0]
 800cd58:	f7f4 fb6e 	bl	8001438 <_sbrk>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_sbrk_r+0x1a>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_sbrk_r+0x1a>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	2403f26c 	.word	0x2403f26c

0800cd6c <__malloc_lock>:
 800cd6c:	4801      	ldr	r0, [pc, #4]	; (800cd74 <__malloc_lock+0x8>)
 800cd6e:	f000 b811 	b.w	800cd94 <__retarget_lock_acquire_recursive>
 800cd72:	bf00      	nop
 800cd74:	2403f274 	.word	0x2403f274

0800cd78 <__malloc_unlock>:
 800cd78:	4801      	ldr	r0, [pc, #4]	; (800cd80 <__malloc_unlock+0x8>)
 800cd7a:	f000 b80c 	b.w	800cd96 <__retarget_lock_release_recursive>
 800cd7e:	bf00      	nop
 800cd80:	2403f274 	.word	0x2403f274

0800cd84 <_malloc_usable_size_r>:
 800cd84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd88:	1f18      	subs	r0, r3, #4
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	bfbc      	itt	lt
 800cd8e:	580b      	ldrlt	r3, [r1, r0]
 800cd90:	18c0      	addlt	r0, r0, r3
 800cd92:	4770      	bx	lr

0800cd94 <__retarget_lock_acquire_recursive>:
 800cd94:	4770      	bx	lr

0800cd96 <__retarget_lock_release_recursive>:
 800cd96:	4770      	bx	lr

0800cd98 <_init>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	bf00      	nop
 800cd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd9e:	bc08      	pop	{r3}
 800cda0:	469e      	mov	lr, r3
 800cda2:	4770      	bx	lr

0800cda4 <_fini>:
 800cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda6:	bf00      	nop
 800cda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdaa:	bc08      	pop	{r3}
 800cdac:	469e      	mov	lr, r3
 800cdae:	4770      	bx	lr
