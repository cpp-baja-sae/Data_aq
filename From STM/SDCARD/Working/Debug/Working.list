
Working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054cc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080057e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000022c  24000010  080057f0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400023c  080057f0  0002023c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e244  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a4e  00000000  00000000  0003e282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd0  00000000  00000000  00040cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f18  00000000  00000000  00041ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000322ae  00000000  00000000  00042bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013c8b  00000000  00000000  00074e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b8b4  00000000  00000000  00088af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d43a5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004378  00000000  00000000  001d43f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005780 	.word	0x08005780

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08005780 	.word	0x08005780

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fc4f 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f839 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f951 	bl	80008b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000616:	f000 f903 	bl	8000820 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800061a:	f000 f8a1 	bl	8000760 <MX_TIM7_Init>
  MX_TIM14_Init();
 800061e:	f000 f8d9 	bl	80007d4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  int counter = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
  int write = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (StartADC == 1)
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <main+0x74>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d1fb      	bne.n	800062a <main+0x26>
	  {
		  if((TIM14->CNT >=34) && (write == 1)){
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <main+0x78>)
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	2b21      	cmp	r3, #33	; 0x21
 8000638:	d910      	bls.n	800065c <main+0x58>
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10d      	bne.n	800065c <main+0x58>
			  counter++;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
			  HAL_GPIO_WritePin(toggle_GPIO_Port, toggle_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2102      	movs	r1, #2
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <main+0x7c>)
 800064c:	f000 ff78 	bl	8001540 <HAL_GPIO_WritePin>
			  write = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
			  TIM14->CNT = 0;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x78>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
 800065a:	e00b      	b.n	8000674 <main+0x70>
		  }else if(write == 0)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1e3      	bne.n	800062a <main+0x26>
		  {
			  counter = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
			  write = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
			  HAL_GPIO_WritePin(toggle_GPIO_Port, toggle_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2102      	movs	r1, #2
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <main+0x7c>)
 8000670:	f000 ff66 	bl	8001540 <HAL_GPIO_WritePin>
	  if (StartADC == 1)
 8000674:	e7d9      	b.n	800062a <main+0x26>
 8000676:	bf00      	nop
 8000678:	2400002c 	.word	0x2400002c
 800067c:	40002000 	.word	0x40002000
 8000680:	58021800 	.word	0x58021800

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	224c      	movs	r2, #76	; 0x4c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f86c 	bl	8005770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 f866 	bl	8005770 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 ff7f 	bl	80015a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <SystemClock_Config+0xd8>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <SystemClock_Config+0xd8>)
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0xd8>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemClock_Config+0xd8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d4:	d1f8      	bne.n	80006c8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006ec:	f240 1313 	movw	r3, #275	; 0x113
 80006f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006fe:	2304      	movs	r3, #4
 8000700:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000702:	2300      	movs	r3, #0
 8000704:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff84 	bl	800161c <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071a:	f000 fa2b 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	233f      	movs	r3, #63	; 0x3f
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072a:	2308      	movs	r3, #8
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000732:	2340      	movs	r3, #64	; 0x40
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073c:	2340      	movs	r3, #64	; 0x40
 800073e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2103      	movs	r1, #3
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fb15 	bl	8001d74 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000750:	f000 fa10 	bl	8000b74 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	; 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58024800 	.word	0x58024800

08000760 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_TIM7_Init+0x6c>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_TIM7_Init+0x70>)
 8000774:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1375-1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_TIM7_Init+0x6c>)
 8000778:	f240 525e 	movw	r2, #1374	; 0x55e
 800077c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_TIM7_Init+0x6c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_TIM7_Init+0x6c>)
 8000786:	f242 720f 	movw	r2, #9999	; 0x270f
 800078a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_TIM7_Init+0x6c>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_TIM7_Init+0x6c>)
 8000794:	f003 f996 	bl	8003ac4 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800079e:	f000 f9e9 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM7_Init+0x6c>)
 80007b0:	f003 fd90 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80007ba:	f000 f9db 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM7_Init+0x6c>)
 80007c0:	f003 fa62 	bl	8003c88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2400017c 	.word	0x2400017c
 80007d0:	40001400 	.word	0x40001400

080007d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_TIM14_Init+0x44>)
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_TIM14_Init+0x48>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_TIM14_Init+0x44>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_TIM14_Init+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 69-1;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_TIM14_Init+0x44>)
 80007ec:	2244      	movs	r2, #68	; 0x44
 80007ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_TIM14_Init+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_TIM14_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_TIM14_Init+0x44>)
 80007fe:	f003 f961 	bl	8003ac4 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000808:	f000 f9b4 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  //HAL_TIM_Base_Start_IT(&htim14);
  //TIM14->CCR1 = 34;
  HAL_TIM_Base_Start(&htim14);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <MX_TIM14_Init+0x44>)
 800080e:	f003 f9bd 	bl	8003b8c <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	240000c0 	.word	0x240000c0
 800081c:	40002000 	.word	0x40002000

08000820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <MX_USART3_UART_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800086a:	f003 fdf7 	bl	800445c <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f97e 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800087c:	f004 fe8a 	bl	8005594 <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 f975 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800088e:	f004 febf 	bl	8005610 <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f96c 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_USART3_UART_Init+0x90>)
 800089e:	f004 fe40 	bl	8005522 <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f964 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000030 	.word	0x24000030
 80008b4:	40004800 	.word	0x40004800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b95      	ldr	r3, [pc, #596]	; (8000b24 <MX_GPIO_Init+0x26c>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a93      	ldr	r2, [pc, #588]	; (8000b24 <MX_GPIO_Init+0x26c>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b91      	ldr	r3, [pc, #580]	; (8000b24 <MX_GPIO_Init+0x26c>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ec:	4b8d      	ldr	r3, [pc, #564]	; (8000b24 <MX_GPIO_Init+0x26c>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a8c      	ldr	r2, [pc, #560]	; (8000b24 <MX_GPIO_Init+0x26c>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b89      	ldr	r3, [pc, #548]	; (8000b24 <MX_GPIO_Init+0x26c>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b86      	ldr	r3, [pc, #536]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a84      	ldr	r2, [pc, #528]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b82      	ldr	r3, [pc, #520]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b7e      	ldr	r3, [pc, #504]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a7d      	ldr	r2, [pc, #500]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b7a      	ldr	r3, [pc, #488]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000946:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a75      	ldr	r2, [pc, #468]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b73      	ldr	r3, [pc, #460]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000964:	4b6f      	ldr	r3, [pc, #444]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a6e      	ldr	r2, [pc, #440]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b6b      	ldr	r3, [pc, #428]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4b68      	ldr	r3, [pc, #416]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a66      	ldr	r2, [pc, #408]	; (8000b24 <MX_GPIO_Init+0x26c>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b64      	ldr	r3, [pc, #400]	; (8000b24 <MX_GPIO_Init+0x26c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f244 0101 	movw	r1, #16385	; 0x4001
 80009a6:	4860      	ldr	r0, [pc, #384]	; (8000b28 <MX_GPIO_Init+0x270>)
 80009a8:	f000 fdca 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(toggle_GPIO_Port, toggle_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2102      	movs	r1, #2
 80009b0:	485e      	ldr	r0, [pc, #376]	; (8000b2c <MX_GPIO_Init+0x274>)
 80009b2:	f000 fdc5 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009bc:	485c      	ldr	r0, [pc, #368]	; (8000b30 <MX_GPIO_Init+0x278>)
 80009be:	f000 fdbf 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TEST_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2103      	movs	r1, #3
 80009c6:	485b      	ldr	r0, [pc, #364]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80009c8:	f000 fdba 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4855      	ldr	r0, [pc, #340]	; (8000b38 <MX_GPIO_Init+0x280>)
 80009e2:	f000 fc05 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009e6:	2332      	movs	r3, #50	; 0x32
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f6:	230b      	movs	r3, #11
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	484d      	ldr	r0, [pc, #308]	; (8000b38 <MX_GPIO_Init+0x280>)
 8000a02:	f000 fbf5 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a06:	2386      	movs	r3, #134	; 0x86
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a16:	230b      	movs	r3, #11
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4846      	ldr	r0, [pc, #280]	; (8000b3c <MX_GPIO_Init+0x284>)
 8000a22:	f000 fbe5 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a26:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	483a      	ldr	r0, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x270>)
 8000a40:	f000 fbd6 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : toggle_Pin */
  GPIO_InitStruct.Pin = toggle_Pin;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(toggle_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4834      	ldr	r0, [pc, #208]	; (8000b2c <MX_GPIO_Init+0x274>)
 8000a5c:	f000 fbc8 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482a      	ldr	r0, [pc, #168]	; (8000b28 <MX_GPIO_Init+0x270>)
 8000a7e:	f000 fbb7 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4825      	ldr	r0, [pc, #148]	; (8000b30 <MX_GPIO_Init+0x278>)
 8000a9c:	f000 fba8 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <MX_GPIO_Init+0x274>)
 8000ab6:	f000 fb9b 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4819      	ldr	r0, [pc, #100]	; (8000b3c <MX_GPIO_Init+0x284>)
 8000ad8:	f000 fb8a 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000adc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aee:	230b      	movs	r3, #11
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0x274>)
 8000afa:	f000 fb79 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_YELLOW_Pin;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000b16:	f000 fb6b 	bl	80011f0 <HAL_GPIO_Init>

}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	58024400 	.word	0x58024400
 8000b28:	58020400 	.word	0x58020400
 8000b2c:	58021800 	.word	0x58021800
 8000b30:	58020c00 	.word	0x58020c00
 8000b34:	58021000 	.word	0x58021000
 8000b38:	58020800 	.word	0x58020800
 8000b3c:	58020000 	.word	0x58020000

08000b40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	  if (htim == &htim7 )
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d106      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x1e>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000b50:	2101      	movs	r1, #1
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b54:	f000 fd0d 	bl	8001572 <HAL_GPIO_TogglePin>
		  // Flag for ADC Task
		  StartADC = 1;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
	  }
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2400017c 	.word	0x2400017c
 8000b6c:	58020400 	.word	0x58020400
 8000b70:	2400002c 	.word	0x2400002c

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_TIM_Base_MspInit+0x74>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d117      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_TIM_Base_MspInit+0x78>)
 8000bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_TIM_Base_MspInit+0x78>)
 8000bce:	f043 0320 	orr.w	r3, r3, #32
 8000bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_TIM_Base_MspInit+0x78>)
 8000bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bdc:	f003 0320 	and.w	r3, r3, #32
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2037      	movs	r0, #55	; 0x37
 8000bea:	f000 facc 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bee:	2037      	movs	r0, #55	; 0x37
 8000bf0:	f000 fae3 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000bf4:	e013      	b.n	8000c1e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM14)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_TIM_Base_MspInit+0x7c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d10e      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_TIM_Base_MspInit+0x78>)
 8000c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_TIM_Base_MspInit+0x78>)
 8000c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_TIM_Base_MspInit+0x78>)
 8000c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40001400 	.word	0x40001400
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	40002000 	.word	0x40002000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b6      	sub	sp, #216	; 0xd8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	22b4      	movs	r2, #180	; 0xb4
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 fd8b 	bl	8005770 <memset>
  if(huart->Instance==USART3)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_UART_MspInit+0xc0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d142      	bne.n	8000cea <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fc0a 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c7e:	f7ff ff79 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0xc8>)
 8000ce6:	f000 fa83 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	37d8      	adds	r7, #216	; 0xd8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020c00 	.word	0x58020c00

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f920 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM7_IRQHandler+0x10>)
 8000d5a:	f003 f81b 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2400017c 	.word	0x2400017c

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <SystemInit+0xd0>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <SystemInit+0xd0>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <SystemInit+0xd4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	d807      	bhi.n	8000d98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <SystemInit+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 030f 	bic.w	r3, r3, #15
 8000d90:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <SystemInit+0xd4>)
 8000d92:	f043 0307 	orr.w	r3, r3, #7
 8000d96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <SystemInit+0xd8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <SystemInit+0xd8>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemInit+0xd8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SystemInit+0xd8>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4924      	ldr	r1, [pc, #144]	; (8000e40 <SystemInit+0xd8>)
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <SystemInit+0xdc>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <SystemInit+0xd4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <SystemInit+0xd4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 030f 	bic.w	r3, r3, #15
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <SystemInit+0xd4>)
 8000dcc:	f043 0307 	orr.w	r3, r3, #7
 8000dd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <SystemInit+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <SystemInit+0xd8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <SystemInit+0xd8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <SystemInit+0xd8>)
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <SystemInit+0xe0>)
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <SystemInit+0xd8>)
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <SystemInit+0xe4>)
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <SystemInit+0xd8>)
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <SystemInit+0xe8>)
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <SystemInit+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SystemInit+0xd8>)
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <SystemInit+0xe8>)
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SystemInit+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <SystemInit+0xd8>)
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <SystemInit+0xe8>)
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <SystemInit+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SystemInit+0xd8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <SystemInit+0xd8>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <SystemInit+0xd8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SystemInit+0xec>)
 8000e28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e2c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	52002000 	.word	0x52002000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e48:	02020200 	.word	0x02020200
 8000e4c:	01ff0000 	.word	0x01ff0000
 8000e50:	01010280 	.word	0x01010280
 8000e54:	52004000 	.word	0x52004000

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff ff84 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f004 fc4f 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fbbb 	bl	8000604 <main>
  bx  lr
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e9c:	080057e0 	.word	0x080057e0
  ldr r2, =_sbss
 8000ea0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ea4:	2400023c 	.word	0x2400023c

08000ea8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC3_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f95c 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb8:	f001 f912 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_Init+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	4913      	ldr	r1, [pc, #76]	; (8000f18 <HAL_Init+0x6c>)
 8000eca:	5ccb      	ldrb	r3, [r1, r3]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_Init+0x68>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_Init+0x6c>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_Init+0x70>)
 8000eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_Init+0x74>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f814 	bl	8000f24 <HAL_InitTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e002      	b.n	8000f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f06:	f7ff fe3b 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400
 8000f18:	08005798 	.word	0x08005798
 8000f1c:	24000004 	.word	0x24000004
 8000f20:	24000000 	.word	0x24000000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e021      	b.n	8000f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_InitTick+0x64>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_InitTick+0x60>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f941 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f90b 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x68>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2400000c 	.word	0x2400000c
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	24000008 	.word	0x24000008

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2400000c 	.word	0x2400000c
 8000fb4:	24000238 	.word	0x24000238

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000238 	.word	0x24000238

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	05fa0000 	.word	0x05fa0000

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff40 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff33 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa4 	bl	800112c <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011fe:	4b86      	ldr	r3, [pc, #536]	; (8001418 <HAL_GPIO_Init+0x228>)
 8001200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001202:	e18c      	b.n	800151e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 817e 	beq.w	8001518 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d005      	beq.n	8001234 <HAL_GPIO_Init+0x44>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d130      	bne.n	8001296 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126a:	2201      	movs	r2, #1
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 0201 	and.w	r2, r3, #1
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d017      	beq.n	80012d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d123      	bne.n	8001326 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	08da      	lsrs	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0203 	and.w	r2, r3, #3
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80d8 	beq.w	8001518 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <HAL_GPIO_Init+0x22c>)
 800136a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800136e:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_GPIO_Init+0x22c>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_GPIO_Init+0x22c>)
 800137a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <HAL_GPIO_Init+0x230>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_GPIO_Init+0x234>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d04a      	beq.n	8001448 <HAL_GPIO_Init+0x258>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_GPIO_Init+0x238>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x222>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x23c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x21e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x240>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x21a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x244>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x216>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_GPIO_Init+0x248>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x212>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_GPIO_Init+0x24c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a16      	ldr	r2, [pc, #88]	; (8001440 <HAL_GPIO_Init+0x250>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x20a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_GPIO_Init+0x254>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x206>
 80013f2:	2309      	movs	r3, #9
 80013f4:	e029      	b.n	800144a <HAL_GPIO_Init+0x25a>
 80013f6:	230a      	movs	r3, #10
 80013f8:	e027      	b.n	800144a <HAL_GPIO_Init+0x25a>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e025      	b.n	800144a <HAL_GPIO_Init+0x25a>
 80013fe:	2306      	movs	r3, #6
 8001400:	e023      	b.n	800144a <HAL_GPIO_Init+0x25a>
 8001402:	2305      	movs	r3, #5
 8001404:	e021      	b.n	800144a <HAL_GPIO_Init+0x25a>
 8001406:	2304      	movs	r3, #4
 8001408:	e01f      	b.n	800144a <HAL_GPIO_Init+0x25a>
 800140a:	2303      	movs	r3, #3
 800140c:	e01d      	b.n	800144a <HAL_GPIO_Init+0x25a>
 800140e:	2302      	movs	r3, #2
 8001410:	e01b      	b.n	800144a <HAL_GPIO_Init+0x25a>
 8001412:	2301      	movs	r3, #1
 8001414:	e019      	b.n	800144a <HAL_GPIO_Init+0x25a>
 8001416:	bf00      	nop
 8001418:	58000080 	.word	0x58000080
 800141c:	58024400 	.word	0x58024400
 8001420:	58000400 	.word	0x58000400
 8001424:	58020000 	.word	0x58020000
 8001428:	58020400 	.word	0x58020400
 800142c:	58020800 	.word	0x58020800
 8001430:	58020c00 	.word	0x58020c00
 8001434:	58021000 	.word	0x58021000
 8001438:	58021400 	.word	0x58021400
 800143c:	58021800 	.word	0x58021800
 8001440:	58021c00 	.word	0x58021c00
 8001444:	58022400 	.word	0x58022400
 8001448:	2300      	movs	r3, #0
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145a:	4938      	ldr	r1, [pc, #224]	; (800153c <HAL_GPIO_Init+0x34c>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800148e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3301      	adds	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f ae6b 	bne.w	8001204 <HAL_GPIO_Init+0x14>
  }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3724      	adds	r7, #36	; 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58000400 	.word	0x58000400

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43d9      	mvns	r1, r3
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	400b      	ands	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_PWREx_ConfigSupply+0x70>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d00a      	beq.n	80015d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_PWREx_ConfigSupply+0x70>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e01f      	b.n	800160e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e01d      	b.n	800160e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_PWREx_ConfigSupply+0x70>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f023 0207 	bic.w	r2, r3, #7
 80015da:	490f      	ldr	r1, [pc, #60]	; (8001618 <HAL_PWREx_ConfigSupply+0x70>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015e2:	f7ff fce9 	bl	8000fb8 <HAL_GetTick>
 80015e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015e8:	e009      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ea:	f7ff fce5 	bl	8000fb8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f8:	d901      	bls.n	80015fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e007      	b.n	800160e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_PWREx_ConfigSupply+0x70>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800160a:	d1ee      	bne.n	80015ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	58024800 	.word	0x58024800

0800161c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e397      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8087 	beq.w	800174a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163c:	4b9e      	ldr	r3, [pc, #632]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	2b10      	cmp	r3, #16
 8001650:	d007      	beq.n	8001662 <HAL_RCC_OscConfig+0x46>
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	2b18      	cmp	r3, #24
 8001656:	d110      	bne.n	800167a <HAL_RCC_OscConfig+0x5e>
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d10b      	bne.n	800167a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001662:	4b95      	ldr	r3, [pc, #596]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d06c      	beq.n	8001748 <HAL_RCC_OscConfig+0x12c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d168      	bne.n	8001748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e371      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x76>
 8001684:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a8b      	ldr	r2, [pc, #556]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e02e      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x98>
 800169a:	4b87      	ldr	r3, [pc, #540]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a86      	ldr	r2, [pc, #536]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b84      	ldr	r3, [pc, #528]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a83      	ldr	r2, [pc, #524]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0xbc>
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7d      	ldr	r2, [pc, #500]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b74      	ldr	r3, [pc, #464]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a73      	ldr	r2, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fc5e 	bl	8000fb8 <HAL_GetTick>
 80016fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fc5a 	bl	8000fb8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e325      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001712:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xe4>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fc4a 	bl	8000fb8 <HAL_GetTick>
 8001724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fc46 	bl	8000fb8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e311      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800173a:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x10c>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 808a 	beq.w	800186c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001760:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001762:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_RCC_OscConfig+0x162>
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	2b18      	cmp	r3, #24
 8001772:	d137      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1c8>
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d132      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x17a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e2e3      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001796:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0219 	bic.w	r2, r3, #25
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4945      	ldr	r1, [pc, #276]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017a8:	f7ff fc06 	bl	8000fb8 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc02 	bl	8000fb8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2cd      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	4936      	ldr	r1, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e2:	e043      	b.n	800186c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d026      	beq.n	800183a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 0219 	bic.w	r2, r3, #25
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	492f      	ldr	r1, [pc, #188]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff fbdb 	bl	8000fb8 <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001806:	f7ff fbd7 	bl	8000fb8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e2a2      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	4921      	ldr	r1, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	e018      	b.n	800186c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fbb7 	bl	8000fb8 <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fbb3 	bl	8000fb8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e27e      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d06d      	beq.n	8001954 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001880:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b08      	cmp	r3, #8
 800188c:	d007      	beq.n	800189e <HAL_RCC_OscConfig+0x282>
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b18      	cmp	r3, #24
 8001892:	d11e      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2b6>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d119      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_RCC_OscConfig+0x2a0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	2b80      	cmp	r3, #128	; 0x80
 80018b0:	d004      	beq.n	80018bc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e253      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
 80018b6:	bf00      	nop
 80018b8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018bc:	4ba3      	ldr	r3, [pc, #652]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	49a0      	ldr	r1, [pc, #640]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018d0:	e040      	b.n	8001954 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d023      	beq.n	8001922 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018da:	4b9c      	ldr	r3, [pc, #624]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a9b      	ldr	r2, [pc, #620]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff fb67 	bl	8000fb8 <HAL_GetTick>
 80018ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018ee:	f7ff fb63 	bl	8000fb8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e22e      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001900:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	498c      	ldr	r1, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 800191c:	4313      	orrs	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
 8001920:	e018      	b.n	8001954 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001922:	4b8a      	ldr	r3, [pc, #552]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a89      	ldr	r2, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800192c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff fb43 	bl	8000fb8 <HAL_GetTick>
 8001932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001936:	f7ff fb3f 	bl	8000fb8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e20a      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001948:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d036      	beq.n	80019ce <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d019      	beq.n	800199c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001968:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196c:	4a77      	ldr	r2, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff fb20 	bl	8000fb8 <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff fb1c 	bl	8000fb8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1e7      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800198e:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x360>
 800199a:	e018      	b.n	80019ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 800199e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fb06 	bl	8000fb8 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fb02 	bl	8000fb8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1cd      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c2:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80019c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d036      	beq.n	8001a48 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d019      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a59      	ldr	r2, [pc, #356]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 80019e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fae3 	bl	8000fb8 <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019f6:	f7ff fadf 	bl	8000fb8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1aa      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x3da>
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a16:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fac9 	bl	8000fb8 <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a2a:	f7ff fac5 	bl	8000fb8 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e190      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8085 	beq.w	8001b60 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_RCC_OscConfig+0x534>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x534>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a62:	f7ff faa9 	bl	8000fb8 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff faa5 	bl	8000fb8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e170      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_OscConfig+0x534>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x482>
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x4de>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4a4>
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x4de>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4c6>
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x4de>
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa59 	bl	8000fb8 <HAL_GetTick>
 8001b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa55 	bl	8000fb8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e11e      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x530>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4ee>
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fa43 	bl	8000fb8 <HAL_GetTick>
 8001b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fa3f 	bl	8000fb8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d905      	bls.n	8001b54 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e108      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b54:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ea      	bne.n	8001b36 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80f9 	beq.w	8001d5c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b6a:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b72:	2b18      	cmp	r3, #24
 8001b74:	f000 80b4 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	f040 8095 	bne.w	8001cac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b79      	ldr	r3, [pc, #484]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a78      	ldr	r2, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fa13 	bl	8000fb8 <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff fa0f 	bl	8000fb8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e0da      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb8:	4b6c      	ldr	r3, [pc, #432]	; (8001d6c <HAL_RCC_OscConfig+0x750>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	4967      	ldr	r1, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	628b      	str	r3, [r1, #40]	; 0x28
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bfe:	495a      	ldr	r1, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c04:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_RCC_OscConfig+0x754>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	4952      	ldr	r1, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f023 020c 	bic.w	r2, r3, #12
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c36:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f023 0202 	bic.w	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4949      	ldr	r1, [pc, #292]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c48:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c54:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c60:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f998 	bl	8000fb8 <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f994 	bl	8000fb8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e05f      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9e:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x670>
 8001caa:	e057      	b.n	8001d5c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f97e 	bl	8000fb8 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f97a 	bl	8000fb8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e045      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x6a4>
 8001cde:	e03d      	b.n	8001d5c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_OscConfig+0x74c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d031      	beq.n	8001d58 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0203 	and.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d12a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d122      	bne.n	8001d58 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	0a5b      	lsrs	r3, r3, #9
 8001d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0e1b      	lsrs	r3, r3, #24
 8001d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	fffffc0c 	.word	0xfffffc0c
 8001d70:	ffff0007 	.word	0xffff0007

08001d74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e19c      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b87      	ldr	r3, [pc, #540]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 020f 	bic.w	r2, r3, #15
 8001d9e:	4985      	ldr	r1, [pc, #532]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e184      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d908      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dd4:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4975      	ldr	r1, [pc, #468]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d010      	beq.n	8001e14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e02:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	496a      	ldr	r1, [pc, #424]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d908      	bls.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	495e      	ldr	r1, [pc, #376]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d908      	bls.n	8001e70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e5e:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4953      	ldr	r1, [pc, #332]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d908      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f023 020f 	bic.w	r2, r3, #15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4947      	ldr	r1, [pc, #284]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d055      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4940      	ldr	r1, [pc, #256]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d121      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0f6      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d115      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0ea      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0de      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0d6      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4925      	ldr	r1, [pc, #148]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff f847 	bl	8000fb8 <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7ff f843 	bl	8000fb8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0be      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d1eb      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d208      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f023 020f 	bic.w	r2, r3, #15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d214      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e086      	b.n	80020c2 <HAL_RCC_ClockConfig+0x34e>
 8001fb4:	52002000 	.word	0x52002000
 8001fb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d208      	bcs.n	8001fea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	4939      	ldr	r1, [pc, #228]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002002:	429a      	cmp	r2, r3
 8002004:	d208      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	492e      	ldr	r1, [pc, #184]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002014:	4313      	orrs	r3, r2
 8002016:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002030:	429a      	cmp	r2, r3
 8002032:	d208      	bcs.n	8002046 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002042:	4313      	orrs	r3, r2
 8002044:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	d208      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4917      	ldr	r1, [pc, #92]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002070:	4313      	orrs	r3, r2
 8002072:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002074:	f000 f834 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	4912      	ldr	r1, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x35c>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_RCC_ClockConfig+0x358>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_RCC_ClockConfig+0x35c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x360>)
 80020aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x364>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCC_ClockConfig+0x368>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe ff34 	bl	8000f24 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	58024400 	.word	0x58024400
 80020d0:	08005798 	.word	0x08005798
 80020d4:	24000004 	.word	0x24000004
 80020d8:	24000000 	.word	0x24000000
 80020dc:	24000008 	.word	0x24000008

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e6:	4bb3      	ldr	r3, [pc, #716]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ee:	2b18      	cmp	r3, #24
 80020f0:	f200 8155 	bhi.w	800239e <HAL_RCC_GetSysClockFreq+0x2be>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002161 	.word	0x08002161
 8002100:	0800239f 	.word	0x0800239f
 8002104:	0800239f 	.word	0x0800239f
 8002108:	0800239f 	.word	0x0800239f
 800210c:	0800239f 	.word	0x0800239f
 8002110:	0800239f 	.word	0x0800239f
 8002114:	0800239f 	.word	0x0800239f
 8002118:	0800239f 	.word	0x0800239f
 800211c:	08002187 	.word	0x08002187
 8002120:	0800239f 	.word	0x0800239f
 8002124:	0800239f 	.word	0x0800239f
 8002128:	0800239f 	.word	0x0800239f
 800212c:	0800239f 	.word	0x0800239f
 8002130:	0800239f 	.word	0x0800239f
 8002134:	0800239f 	.word	0x0800239f
 8002138:	0800239f 	.word	0x0800239f
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800239f 	.word	0x0800239f
 8002144:	0800239f 	.word	0x0800239f
 8002148:	0800239f 	.word	0x0800239f
 800214c:	0800239f 	.word	0x0800239f
 8002150:	0800239f 	.word	0x0800239f
 8002154:	0800239f 	.word	0x0800239f
 8002158:	0800239f 	.word	0x0800239f
 800215c:	08002193 	.word	0x08002193
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002160:	4b94      	ldr	r3, [pc, #592]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800216c:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	4a90      	ldr	r2, [pc, #576]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800217e:	e111      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002180:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002182:	61bb      	str	r3, [r7, #24]
    break;
 8002184:	e10e      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002186:	4b8d      	ldr	r3, [pc, #564]	; (80023bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002188:	61bb      	str	r3, [r7, #24]
    break;
 800218a:	e10b      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800218e:	61bb      	str	r3, [r7, #24]
    break;
 8002190:	e108      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002192:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800219c:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021a8:	4b82      	ldr	r3, [pc, #520]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021b2:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80e1 	beq.w	8002398 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f000 8083 	beq.w	80022e4 <HAL_RCC_GetSysClockFreq+0x204>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	f200 80a1 	bhi.w	8002328 <HAL_RCC_GetSysClockFreq+0x248>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x114>
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d056      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021f2:	e099      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02d      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002200:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
 8002210:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800222a:	4b62      	ldr	r3, [pc, #392]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223a:	ed97 6a02 	vldr	s12, [r7, #8]
 800223e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800224a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800224e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800225a:	e087      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002266:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800226a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800226e:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800227e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002282:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800228a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800228e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800229e:	e065      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022e2:	e043      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002306:	ed97 6a02 	vldr	s12, [r7, #8]
 800230a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800230e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800231a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002326:	e021      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002332:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234a:	ed97 6a02 	vldr	s12, [r7, #8]
 800234e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800235e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800236a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	0a5b      	lsrs	r3, r3, #9
 8002372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002376:	3301      	adds	r3, #1
 8002378:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002384:	edd7 6a07 	vldr	s13, [r7, #28]
 8002388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002390:	ee17 3a90 	vmov	r3, s15
 8002394:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002396:	e005      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    break;
 800239c:	e002      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023a0:	61bb      	str	r3, [r7, #24]
    break;
 80023a2:	bf00      	nop
  }

  return sysclockfreq;
 80023a4:	69bb      	ldr	r3, [r7, #24]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	58024400 	.word	0x58024400
 80023b8:	03d09000 	.word	0x03d09000
 80023bc:	003d0900 	.word	0x003d0900
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	46000000 	.word	0x46000000
 80023c8:	4c742400 	.word	0x4c742400
 80023cc:	4a742400 	.word	0x4a742400
 80023d0:	4af42400 	.word	0x4af42400

080023d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80023da:	f7ff fe81 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_GetHCLKFreq+0x50>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490f      	ldr	r1, [pc, #60]	; (8002428 <HAL_RCC_GetHCLKFreq+0x54>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_RCC_GetHCLKFreq+0x50>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_GetHCLKFreq+0x54>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_RCC_GetHCLKFreq+0x58>)
 8002410:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_RCC_GetHCLKFreq+0x58>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	58024400 	.word	0x58024400
 8002428:	08005798 	.word	0x08005798
 800242c:	24000004 	.word	0x24000004
 8002430:	24000000 	.word	0x24000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002438:	f7ff ffcc 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCC_GetPCLK1Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	58024400 	.word	0x58024400
 800245c:	08005798 	.word	0x08005798

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002464:	f7ff ffb6 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	58024400 	.word	0x58024400
 8002488:	08005798 	.word	0x08005798

0800248c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002498:	2300      	movs	r3, #0
 800249a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03f      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024b0:	d02a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024b6:	d824      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024bc:	d018      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c2:	d81e      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024cc:	d007      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024ce:	e018      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d0:	4bab      	ldr	r3, [pc, #684]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	4aaa      	ldr	r2, [pc, #680]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024dc:	e015      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 f989 	bl	80037fc <RCCEx_PLL2_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024ee:	e00c      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3324      	adds	r3, #36	; 0x24
 80024f4:	2102      	movs	r1, #2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 fa32 	bl	8003960 <RCCEx_PLL3_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002500:	e003      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
      break;
 8002506:	e000      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002510:	4b9b      	ldr	r3, [pc, #620]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	4998      	ldr	r1, [pc, #608]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	650b      	str	r3, [r1, #80]	; 0x50
 8002522:	e001      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03d      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	2b04      	cmp	r3, #4
 800253a:	d826      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002559 	.word	0x08002559
 8002548:	08002567 	.word	0x08002567
 800254c:	08002579 	.word	0x08002579
 8002550:	08002591 	.word	0x08002591
 8002554:	08002591 	.word	0x08002591
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002558:	4b89      	ldr	r3, [pc, #548]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	4a88      	ldr	r2, [pc, #544]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002564:	e015      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f001 f945 	bl	80037fc <RCCEx_PLL2_Config>
 8002572:	4603      	mov	r3, r0
 8002574:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002576:	e00c      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3324      	adds	r3, #36	; 0x24
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f001 f9ee 	bl	8003960 <RCCEx_PLL3_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002588:	e003      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
      break;
 800258e:	e000      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	4976      	ldr	r1, [pc, #472]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	650b      	str	r3, [r1, #80]	; 0x50
 80025aa:	e001      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d051      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025c2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80025c6:	d036      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025c8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80025cc:	d830      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80025ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025d2:	d032      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80025d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025d8:	d82a      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80025da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025de:	d02e      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80025e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025e4:	d824      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80025e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ea:	d018      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80025ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f0:	d81e      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x172>
 80025f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fa:	d007      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80025fc:	e018      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025fe:	4b60      	ldr	r3, [pc, #384]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800260a:	e019      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f001 f8f2 	bl	80037fc <RCCEx_PLL2_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800261c:	e010      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3324      	adds	r3, #36	; 0x24
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f99b 	bl	8003960 <RCCEx_PLL3_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800262e:	e007      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	75fb      	strb	r3, [r7, #23]
      break;
 8002634:	e004      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002636:	bf00      	nop
 8002638:	e002      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800263e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002646:	4b4e      	ldr	r3, [pc, #312]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002654:	494a      	ldr	r1, [pc, #296]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	658b      	str	r3, [r1, #88]	; 0x58
 800265a:	e001      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002668:	2b00      	cmp	r3, #0
 800266a:	d051      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002672:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002676:	d036      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002678:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800267c:	d830      	bhi.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800267e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002682:	d032      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d82a      	bhi.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800268a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268e:	d02e      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002690:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002694:	d824      	bhi.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269a:	d018      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x242>
 800269c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a0:	d81e      	bhi.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x222>
 80026a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026aa:	d007      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 80026ac:	e018      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ae:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	4a33      	ldr	r2, [pc, #204]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026ba:	e019      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3304      	adds	r3, #4
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f89a 	bl	80037fc <RCCEx_PLL2_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026cc:	e010      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3324      	adds	r3, #36	; 0x24
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f943 	bl	8003960 <RCCEx_PLL3_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026de:	e007      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	75fb      	strb	r3, [r7, #23]
      break;
 80026e4:	e004      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80026e6:	bf00      	nop
 80026e8:	e002      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80026ea:	bf00      	nop
 80026ec:	e000      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80026ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10a      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002704:	491e      	ldr	r1, [pc, #120]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	658b      	str	r3, [r1, #88]	; 0x58
 800270a:	e001      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d035      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	2b30      	cmp	r3, #48	; 0x30
 8002722:	d01c      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d817      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002728:	2b20      	cmp	r3, #32
 800272a:	d00c      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d813      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d016      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d10f      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002744:	e00e      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2102      	movs	r1, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f001 f855 	bl	80037fc <RCCEx_PLL2_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002756:	e005      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	75fb      	strb	r3, [r7, #23]
      break;
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8002762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002776:	4902      	ldr	r1, [pc, #8]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800277c:	e004      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800277e:	bf00      	nop
 8002780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d047      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279c:	d030      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800279e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a2:	d82a      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80027a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027a8:	d02c      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80027aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027ae:	d824      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b4:	d018      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d81e      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c4:	d007      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80027c6:	e018      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c8:	4bac      	ldr	r3, [pc, #688]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4aab      	ldr	r2, [pc, #684]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027d4:	e017      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 f80d 	bl	80037fc <RCCEx_PLL2_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027e6:	e00e      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3324      	adds	r3, #36	; 0x24
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 f8b6 	bl	8003960 <RCCEx_PLL3_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027f8:	e005      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800280c:	4b9b      	ldr	r3, [pc, #620]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002810:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	4998      	ldr	r1, [pc, #608]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800281a:	4313      	orrs	r3, r2
 800281c:	650b      	str	r3, [r1, #80]	; 0x50
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d049      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d02e      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800283a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283e:	d828      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002844:	d02a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800284a:	d822      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800284c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002850:	d026      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002856:	d81c      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800285c:	d010      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800285e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002862:	d816      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d111      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f000 ffc1 	bl	80037fc <RCCEx_PLL2_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800287e:	e012      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3324      	adds	r3, #36	; 0x24
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f86a 	bl	8003960 <RCCEx_PLL3_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002890:	e009      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
      break;
 8002896:	e006      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002898:	bf00      	nop
 800289a:	e004      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800289c:	bf00      	nop
 800289e:	e002      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80028a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028ac:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80028ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	4970      	ldr	r1, [pc, #448]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	650b      	str	r3, [r1, #80]	; 0x50
 80028be:	e001      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d04b      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028da:	d02e      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80028dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e0:	d828      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d02a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d822      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028f2:	d026      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80028f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028f8:	d81c      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fe:	d010      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002904:	d816      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01d      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800290a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800290e:	d111      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f000 ff70 	bl	80037fc <RCCEx_PLL2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002920:	e012      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3324      	adds	r3, #36	; 0x24
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f819 	bl	8003960 <RCCEx_PLL3_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002932:	e009      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	75fb      	strb	r3, [r7, #23]
      break;
 8002938:	e006      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800293a:	bf00      	nop
 800293c:	e004      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800295c:	4947      	ldr	r1, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	658b      	str	r3, [r1, #88]	; 0x58
 8002962:	e001      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02f      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297c:	d00e      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800297e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002982:	d814      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800298c:	d10f      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	4a3a      	ldr	r2, [pc, #232]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800299a:	e00c      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 ff2a 	bl	80037fc <RCCEx_PLL2_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029ac:	e003      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
      break;
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80029b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80029be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c8:	492c      	ldr	r1, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	650b      	str	r3, [r1, #80]	; 0x50
 80029ce:	e001      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d032      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d81b      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a27 	.word	0x08002a27
 80029f4:	08002a01 	.word	0x08002a01
 80029f8:	08002a0f 	.word	0x08002a0f
 80029fc:	08002a27 	.word	0x08002a27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a0c:	e00c      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fef1 	bl	80037fc <RCCEx_PLL2_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a1e:	e003      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
      break;
 8002a24:	e000      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4910      	ldr	r1, [pc, #64]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a40:	e001      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 808a 	beq.w	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a60:	f7fe faaa 	bl	8000fb8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a66:	e00d      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe faa6 	bl	8000fb8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d906      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	75fb      	strb	r3, [r7, #23]
        break;
 8002a7a:	e009      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a84:	4bb9      	ldr	r3, [pc, #740]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0eb      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d166      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a96:	4bb6      	ldr	r3, [pc, #728]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aa0:	4053      	eors	r3, r2
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aaa:	4bb1      	ldr	r3, [pc, #708]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab4:	4bae      	ldr	r3, [pc, #696]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4aad      	ldr	r2, [pc, #692]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac0:	4bab      	ldr	r3, [pc, #684]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4aaa      	ldr	r2, [pc, #680]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002acc:	4aa8      	ldr	r2, [pc, #672]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002adc:	d115      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fa6b 	bl	8000fb8 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae4:	e00b      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fa67 	bl	8000fb8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d902      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	75fb      	strb	r3, [r7, #23]
            break;
 8002afc:	e005      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afe:	4b9c      	ldr	r3, [pc, #624]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ed      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d126      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8002b20:	4b93      	ldr	r3, [pc, #588]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b2e:	0919      	lsrs	r1, r3, #4
 8002b30:	4b90      	ldr	r3, [pc, #576]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002b32:	400b      	ands	r3, r1
 8002b34:	498e      	ldr	r1, [pc, #568]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	610b      	str	r3, [r1, #16]
 8002b3a:	e005      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	4a8b      	ldr	r2, [pc, #556]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b46:	6113      	str	r3, [r2, #16]
 8002b48:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	4986      	ldr	r1, [pc, #536]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	670b      	str	r3, [r1, #112]	; 0x70
 8002b5c:	e004      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	75bb      	strb	r3, [r7, #22]
 8002b62:	e001      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d07e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	2b28      	cmp	r3, #40	; 0x28
 8002b7a:	d867      	bhi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002c53 	.word	0x08002c53
 8002b88:	08002c4d 	.word	0x08002c4d
 8002b8c:	08002c4d 	.word	0x08002c4d
 8002b90:	08002c4d 	.word	0x08002c4d
 8002b94:	08002c4d 	.word	0x08002c4d
 8002b98:	08002c4d 	.word	0x08002c4d
 8002b9c:	08002c4d 	.word	0x08002c4d
 8002ba0:	08002c4d 	.word	0x08002c4d
 8002ba4:	08002c29 	.word	0x08002c29
 8002ba8:	08002c4d 	.word	0x08002c4d
 8002bac:	08002c4d 	.word	0x08002c4d
 8002bb0:	08002c4d 	.word	0x08002c4d
 8002bb4:	08002c4d 	.word	0x08002c4d
 8002bb8:	08002c4d 	.word	0x08002c4d
 8002bbc:	08002c4d 	.word	0x08002c4d
 8002bc0:	08002c4d 	.word	0x08002c4d
 8002bc4:	08002c3b 	.word	0x08002c3b
 8002bc8:	08002c4d 	.word	0x08002c4d
 8002bcc:	08002c4d 	.word	0x08002c4d
 8002bd0:	08002c4d 	.word	0x08002c4d
 8002bd4:	08002c4d 	.word	0x08002c4d
 8002bd8:	08002c4d 	.word	0x08002c4d
 8002bdc:	08002c4d 	.word	0x08002c4d
 8002be0:	08002c4d 	.word	0x08002c4d
 8002be4:	08002c53 	.word	0x08002c53
 8002be8:	08002c4d 	.word	0x08002c4d
 8002bec:	08002c4d 	.word	0x08002c4d
 8002bf0:	08002c4d 	.word	0x08002c4d
 8002bf4:	08002c4d 	.word	0x08002c4d
 8002bf8:	08002c4d 	.word	0x08002c4d
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c4d 	.word	0x08002c4d
 8002c04:	08002c53 	.word	0x08002c53
 8002c08:	08002c4d 	.word	0x08002c4d
 8002c0c:	08002c4d 	.word	0x08002c4d
 8002c10:	08002c4d 	.word	0x08002c4d
 8002c14:	08002c4d 	.word	0x08002c4d
 8002c18:	08002c4d 	.word	0x08002c4d
 8002c1c:	08002c4d 	.word	0x08002c4d
 8002c20:	08002c4d 	.word	0x08002c4d
 8002c24:	08002c53 	.word	0x08002c53
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fde4 	bl	80037fc <RCCEx_PLL2_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c38:	e00c      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3324      	adds	r3, #36	; 0x24
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fe8d 	bl	8003960 <RCCEx_PLL3_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c4a:	e003      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c50:	e000      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8002c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c5a:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	4942      	ldr	r1, [pc, #264]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c6c:	e001      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d037      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d820      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002c86:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002ccf 	.word	0x08002ccf
 8002c90:	08002ca5 	.word	0x08002ca5
 8002c94:	08002cb7 	.word	0x08002cb7
 8002c98:	08002ccf 	.word	0x08002ccf
 8002c9c:	08002ccf 	.word	0x08002ccf
 8002ca0:	08002ccf 	.word	0x08002ccf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fda6 	bl	80037fc <RCCEx_PLL2_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002cb4:	e00c      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3324      	adds	r3, #36	; 0x24
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fe4f 	bl	8003960 <RCCEx_PLL3_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002cc6:	e003      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4923      	ldr	r1, [pc, #140]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ce8:	e001      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d040      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d821      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d4f 	.word	0x08002d4f
 8002d10:	08002d25 	.word	0x08002d25
 8002d14:	08002d37 	.word	0x08002d37
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fd66 	bl	80037fc <RCCEx_PLL2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3324      	adds	r3, #36	; 0x24
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fe0f 	bl	8003960 <RCCEx_PLL3_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d110      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d64:	4902      	ldr	r1, [pc, #8]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	658b      	str	r3, [r1, #88]	; 0x58
 8002d6a:	e007      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002d6c:	58024800 	.word	0x58024800
 8002d70:	58024400 	.word	0x58024400
 8002d74:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d04b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d92:	d02e      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d98:	d828      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d02a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d822      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002da6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002daa:	d026      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002db0:	d81c      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db6:	d010      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbc:	d816      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01d      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc6:	d111      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd14 	bl	80037fc <RCCEx_PLL2_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dd8:	e012      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3324      	adds	r3, #36	; 0x24
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fdbd 	bl	8003960 <RCCEx_PLL3_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dea:	e009      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
      break;
 8002df0:	e006      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e06:	4bb2      	ldr	r3, [pc, #712]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	49ae      	ldr	r1, [pc, #696]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	654b      	str	r3, [r1, #84]	; 0x54
 8002e1a:	e001      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d04b      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e36:	d02e      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002e38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e3c:	d828      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	d02a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d822      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e4e:	d026      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e54:	d81c      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5a:	d010      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e60:	d816      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01d      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d111      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fcc2 	bl	80037fc <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e7c:	e012      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3324      	adds	r3, #36	; 0x24
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fd6b 	bl	8003960 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
      break;
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002e96:	bf00      	nop
 8002e98:	e004      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eaa:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb8:	4985      	ldr	r1, [pc, #532]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	658b      	str	r3, [r1, #88]	; 0x58
 8002ebe:	e001      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d04b      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002eda:	d02e      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002edc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ee0:	d828      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	d02a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d822      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002eee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ef2:	d026      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002ef4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ef8:	d81c      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002efe:	d010      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f04:	d816      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01d      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f0e:	d111      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fc70 	bl	80037fc <RCCEx_PLL2_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f20:	e012      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3324      	adds	r3, #36	; 0x24
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fd19 	bl	8003960 <RCCEx_PLL3_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f32:	e009      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
      break;
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e004      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f4e:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5c:	495c      	ldr	r1, [pc, #368]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	658b      	str	r3, [r1, #88]	; 0x58
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d018      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d10a      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3324      	adds	r3, #36	; 0x24
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fceb 	bl	8003960 <RCCEx_PLL3_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002f94:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa0:	494b      	ldr	r1, [pc, #300]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3324      	adds	r3, #36	; 0x24
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fccb 	bl	8003960 <RCCEx_PLL3_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fd4:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	493b      	ldr	r1, [pc, #236]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d034      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ffe:	d01d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003004:	d817      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300e:	d009      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003010:	e011      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fbef 	bl	80037fc <RCCEx_PLL2_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	2102      	movs	r1, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fc98 	bl	8003960 <RCCEx_PLL3_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003052:	491f      	ldr	r1, [pc, #124]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003054:	4313      	orrs	r3, r2
 8003056:	658b      	str	r3, [r1, #88]	; 0x58
 8003058:	e001      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003070:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003074:	d01c      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003076:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800307a:	d816      	bhi.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800307c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003080:	d003      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003086:	d007      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003088:	e00f      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003096:	e00c      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fc5e 	bl	8003960 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80030a8:	e003      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
      break;
 80030ae:	e000      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80030b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	4902      	ldr	r1, [pc, #8]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	654b      	str	r3, [r1, #84]	; 0x54
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d029      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d007      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80030f2:	e00f      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f4:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	4a60      	ldr	r2, [pc, #384]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80030fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003100:	e00b      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	2102      	movs	r1, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fb77 	bl	80037fc <RCCEx_PLL2_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003112:	e002      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
      break;
 8003118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003120:	4b56      	ldr	r3, [pc, #344]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	4953      	ldr	r1, [pc, #332]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800312e:	4313      	orrs	r3, r2
 8003130:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3324      	adds	r3, #36	; 0x24
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fc08 	bl	8003960 <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d030      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316e:	d017      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003174:	d811      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317a:	d013      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800317c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003180:	d80b      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d106      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a3a      	ldr	r2, [pc, #232]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003198:	e007      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
      break;
 800319e:	e004      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80031a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031bc:	492f      	ldr	r1, [pc, #188]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	654b      	str	r3, [r1, #84]	; 0x54
 80031c2:	e001      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031d4:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e0:	4926      	ldr	r1, [pc, #152]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fe:	491f      	ldr	r1, [pc, #124]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003200:	4313      	orrs	r3, r2
 8003202:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003216:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800321a:	6113      	str	r3, [r2, #16]
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003226:	4915      	ldr	r1, [pc, #84]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003228:	4313      	orrs	r3, r2
 800322a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	da08      	bge.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003266:	7dbb      	ldrb	r3, [r7, #22]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400

08003280 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003284:	f7ff f8a6 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58024400 	.word	0x58024400
 80032a8:	08005798 	.word	0x08005798

080032ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032b4:	4ba1      	ldr	r3, [pc, #644]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80032be:	4b9f      	ldr	r3, [pc, #636]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	0b1b      	lsrs	r3, r3, #12
 80032c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032ca:	4b9c      	ldr	r3, [pc, #624]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80032d6:	4b99      	ldr	r3, [pc, #612]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	08db      	lsrs	r3, r3, #3
 80032dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8111 	beq.w	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f000 8083 	beq.w	8003408 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b02      	cmp	r3, #2
 8003306:	f200 80a1 	bhi.w	800344c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d056      	beq.n	80033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003316:	e099      	b.n	800344c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003318:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02d      	beq.n	8003380 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003324:	4b85      	ldr	r3, [pc, #532]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	4a84      	ldr	r2, [pc, #528]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b7b      	ldr	r3, [pc, #492]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003362:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800337e:	e087      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80033a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033c2:	e065      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80033d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d6:	4b59      	ldr	r3, [pc, #356]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003406:	e043      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341a:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 6a03 	vldr	s12, [r7, #12]
 800342e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800344a:	e021      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800345a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003472:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800347e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800348e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	0a5b      	lsrs	r3, r3, #9
 8003496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80034ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b6:	ee17 2a90 	vmov	r2, s15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80034be:	4b1f      	ldr	r3, [pc, #124]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	ee17 2a90 	vmov	r2, s15
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003506:	edd7 6a07 	vldr	s13, [r7, #28]
 800350a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800350e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003512:	ee17 2a90 	vmov	r2, s15
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800351a:	e008      	b.n	800352e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
}
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	58024400 	.word	0x58024400
 8003540:	03d09000 	.word	0x03d09000
 8003544:	46000000 	.word	0x46000000
 8003548:	4c742400 	.word	0x4c742400
 800354c:	4a742400 	.word	0x4a742400
 8003550:	4af42400 	.word	0x4af42400

08003554 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800355c:	4ba1      	ldr	r3, [pc, #644]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003566:	4b9f      	ldr	r3, [pc, #636]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	0d1b      	lsrs	r3, r3, #20
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003572:	4b9c      	ldr	r3, [pc, #624]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800357e:	4b99      	ldr	r3, [pc, #612]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003596:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8111 	beq.w	80037c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	f000 8083 	beq.w	80036b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f200 80a1 	bhi.w	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d056      	beq.n	800366c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80035be:	e099      	b.n	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035c0:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02d      	beq.n	8003628 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035cc:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	4a84      	ldr	r2, [pc, #528]	; (80037e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	4b7b      	ldr	r3, [pc, #492]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003606:	ed97 6a03 	vldr	s12, [r7, #12]
 800360a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800360e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003622:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003626:	e087      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80037f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363a:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a03 	vldr	s12, [r7, #12]
 800364e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800366a:	e065      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80037f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003692:	eddf 5a56 	vldr	s11, [pc, #344]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ae:	e043      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80036be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c2:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036f2:	e021      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80037f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003716:	ed97 6a03 	vldr	s12, [r7, #12]
 800371a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800371e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003736:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003738:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	0a5b      	lsrs	r3, r3, #9
 800373e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800374e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003752:	edd7 6a07 	vldr	s13, [r7, #28]
 8003756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375e:	ee17 2a90 	vmov	r2, s15
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800377c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003780:	edd7 6a07 	vldr	s13, [r7, #28]
 8003784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800378c:	ee17 2a90 	vmov	r2, s15
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	0e1b      	lsrs	r3, r3, #24
 800379a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80037b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ba:	ee17 2a90 	vmov	r2, s15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
}
 80037d6:	bf00      	nop
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	58024400 	.word	0x58024400
 80037e8:	03d09000 	.word	0x03d09000
 80037ec:	46000000 	.word	0x46000000
 80037f0:	4c742400 	.word	0x4c742400
 80037f4:	4a742400 	.word	0x4a742400
 80037f8:	4af42400 	.word	0x4af42400

080037fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d101      	bne.n	800381a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e099      	b.n	800394e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800381a:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4e      	ldr	r2, [pc, #312]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003820:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003826:	f7fd fbc7 	bl	8000fb8 <HAL_GetTick>
 800382a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800382c:	e008      	b.n	8003840 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800382e:	f7fd fbc3 	bl	8000fb8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e086      	b.n	800394e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003840:	4b45      	ldr	r3, [pc, #276]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800384c:	4b42      	ldr	r3, [pc, #264]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	031b      	lsls	r3, r3, #12
 800385a:	493f      	ldr	r1, [pc, #252]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	628b      	str	r3, [r1, #40]	; 0x28
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	3b01      	subs	r3, #1
 8003866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	025b      	lsls	r3, r3, #9
 8003872:	b29b      	uxth	r3, r3
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	3b01      	subs	r3, #1
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	3b01      	subs	r3, #1
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003890:	4931      	ldr	r1, [pc, #196]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	492d      	ldr	r1, [pc, #180]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f023 0220 	bic.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	4928      	ldr	r1, [pc, #160]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	4a26      	ldr	r2, [pc, #152]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038c0:	f023 0310 	bic.w	r3, r3, #16
 80038c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <RCCEx_PLL2_Config+0x160>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	69d2      	ldr	r2, [r2, #28]
 80038d2:	00d2      	lsls	r2, r2, #3
 80038d4:	4920      	ldr	r1, [pc, #128]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038da:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a19      	ldr	r2, [pc, #100]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 80038f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f8:	e00f      	b.n	800391a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d106      	bne.n	800390e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800390c:	e005      	b.n	800391a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4a11      	ldr	r2, [pc, #68]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003918:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003926:	f7fd fb47 	bl	8000fb8 <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800392c:	e008      	b.n	8003940 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800392e:	f7fd fb43 	bl	8000fb8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e006      	b.n	800394e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <RCCEx_PLL2_Config+0x15c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	58024400 	.word	0x58024400
 800395c:	ffff0007 	.word	0xffff0007

08003960 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800396e:	4b53      	ldr	r3, [pc, #332]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b03      	cmp	r3, #3
 8003978:	d101      	bne.n	800397e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e099      	b.n	8003ab2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800397e:	4b4f      	ldr	r3, [pc, #316]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a4e      	ldr	r2, [pc, #312]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398a:	f7fd fb15 	bl	8000fb8 <HAL_GetTick>
 800398e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003990:	e008      	b.n	80039a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003992:	f7fd fb11 	bl	8000fb8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e086      	b.n	8003ab2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80039b0:	4b42      	ldr	r3, [pc, #264]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	051b      	lsls	r3, r3, #20
 80039be:	493f      	ldr	r1, [pc, #252]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	628b      	str	r3, [r1, #40]	; 0x28
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	061b      	lsls	r3, r3, #24
 80039f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039f4:	4931      	ldr	r1, [pc, #196]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	492d      	ldr	r1, [pc, #180]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	4928      	ldr	r1, [pc, #160]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <RCCEx_PLL3_Config+0x160>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	69d2      	ldr	r2, [r2, #28]
 8003a36:	00d2      	lsls	r2, r2, #3
 8003a38:	4920      	ldr	r1, [pc, #128]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a5c:	e00f      	b.n	8003a7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a70:	e005      	b.n	8003a7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	4a11      	ldr	r2, [pc, #68]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8a:	f7fd fa95 	bl	8000fb8 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a92:	f7fd fa91 	bl	8000fb8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e006      	b.n	8003ab2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <RCCEx_PLL3_Config+0x15c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	ffff0007 	.word	0xffff0007

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e054      	b.n	8003b80 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d111      	bne.n	8003b06 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fb94 	bl	8004218 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <HAL_TIM_Base_Init+0xc4>)
 8003afc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f000 fad7 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	08000bb5 	.word	0x08000bb5

08003b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d001      	beq.n	8003ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e056      	b.n	8003c52 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <HAL_TIM_Base_Start+0xd4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02c      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d027      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <HAL_TIM_Base_Start+0xd8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_TIM_Base_Start+0xdc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <HAL_TIM_Base_Start+0xe0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a23      	ldr	r2, [pc, #140]	; (8003c70 <HAL_TIM_Base_Start+0xe4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_TIM_Base_Start+0xe8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <HAL_TIM_Base_Start+0xec>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <HAL_TIM_Base_Start+0xf0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_Base_Start+0x84>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <HAL_TIM_Base_Start+0xf4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d115      	bne.n	8003c3c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_TIM_Base_Start+0xf8>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d015      	beq.n	8003c4e <HAL_TIM_Base_Start+0xc2>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d011      	beq.n	8003c4e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3a:	e008      	b.n	8003c4e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e000      	b.n	8003c50 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40001800 	.word	0x40001800
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	4000e000 	.word	0x4000e000
 8003c80:	4000e400 	.word	0x4000e400
 8003c84:	00010007 	.word	0x00010007

08003c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d001      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e05e      	b.n	8003d5e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <HAL_TIM_Base_Start_IT+0xe4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02c      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d027      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d022      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_TIM_Base_Start_IT+0xec>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d01d      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <HAL_TIM_Base_Start_IT+0xf0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d018      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <HAL_TIM_Base_Start_IT+0xf4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <HAL_TIM_Base_Start_IT+0xf8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <HAL_TIM_Base_Start_IT+0xfc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <HAL_TIM_Base_Start_IT+0x100>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x94>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_TIM_Base_Start_IT+0x104>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d115      	bne.n	8003d48 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_TIM_Base_Start_IT+0x108>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d015      	beq.n	8003d5a <HAL_TIM_Base_Start_IT+0xd2>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d011      	beq.n	8003d5a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d46:	e008      	b.n	8003d5a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e000      	b.n	8003d5c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800
 8003d78:	40000c00 	.word	0x40000c00
 8003d7c:	40010400 	.word	0x40010400
 8003d80:	40001800 	.word	0x40001800
 8003d84:	40014000 	.word	0x40014000
 8003d88:	4000e000 	.word	0x4000e000
 8003d8c:	4000e400 	.word	0x4000e400
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d128      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d121      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
 8003de0:	e009      	b.n	8003df6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d128      	bne.n	8003e5c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d121      	bne.n	8003e5c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0204 	mvn.w	r2, #4
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
 8003e40:	e009      	b.n	8003e56 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d128      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d121      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0208 	mvn.w	r2, #8
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e009      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d128      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d121      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0210 	mvn.w	r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
 8003f00:	e009      	b.n	8003f16 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d110      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d109      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0201 	mvn.w	r2, #1
 8003f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d110      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d109      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8a:	d110      	bne.n	8003fae <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d109      	bne.n	8003fae <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d110      	bne.n	8003fde <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d109      	bne.n	8003fde <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d110      	bne.n	800400e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d109      	bne.n	800400e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0220 	mvn.w	r2, #32
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a44      	ldr	r2, [pc, #272]	; (80041f0 <TIM_Base_SetConfig+0x124>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d00f      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a41      	ldr	r2, [pc, #260]	; (80041f4 <TIM_Base_SetConfig+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <TIM_Base_SetConfig+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3f      	ldr	r2, [pc, #252]	; (80041fc <TIM_Base_SetConfig+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <TIM_Base_SetConfig+0x134>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a33      	ldr	r2, [pc, #204]	; (80041f0 <TIM_Base_SetConfig+0x124>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <TIM_Base_SetConfig+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_Base_SetConfig+0x12c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <TIM_Base_SetConfig+0x130>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2d      	ldr	r2, [pc, #180]	; (8004200 <TIM_Base_SetConfig+0x134>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_Base_SetConfig+0x138>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_Base_SetConfig+0x13c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <TIM_Base_SetConfig+0x140>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <TIM_Base_SetConfig+0x144>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <TIM_Base_SetConfig+0x148>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0x108>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <TIM_Base_SetConfig+0x134>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x108>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <TIM_Base_SetConfig+0x138>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x108>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <TIM_Base_SetConfig+0x13c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x108>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0f      	ldr	r2, [pc, #60]	; (800420c <TIM_Base_SetConfig+0x140>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d103      	bne.n	80041dc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	615a      	str	r2, [r3, #20]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40010400 	.word	0x40010400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	4000e000 	.word	0x4000e000
 8004214:	4000e400 	.word	0x4000e400

08004218 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1e      	ldr	r2, [pc, #120]	; (800429c <TIM_ResetCallback+0x84>)
 8004224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <TIM_ResetCallback+0x88>)
 800422c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <TIM_ResetCallback+0x8c>)
 8004234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <TIM_ResetCallback+0x90>)
 800423c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <TIM_ResetCallback+0x94>)
 8004244:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <TIM_ResetCallback+0x98>)
 800424c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <TIM_ResetCallback+0x9c>)
 8004254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <TIM_ResetCallback+0xa0>)
 800425c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_ResetCallback+0xa4>)
 8004264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <TIM_ResetCallback+0xa8>)
 800426c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <TIM_ResetCallback+0xac>)
 8004274:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <TIM_ResetCallback+0xb0>)
 800427c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a12      	ldr	r2, [pc, #72]	; (80042cc <TIM_ResetCallback+0xb4>)
 8004284:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <TIM_ResetCallback+0xb8>)
 800428c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	08000b41 	.word	0x08000b41
 80042a0:	08004017 	.word	0x08004017
 80042a4:	0800408f 	.word	0x0800408f
 80042a8:	080040a3 	.word	0x080040a3
 80042ac:	0800403f 	.word	0x0800403f
 80042b0:	08004053 	.word	0x08004053
 80042b4:	0800402b 	.word	0x0800402b
 80042b8:	08004067 	.word	0x08004067
 80042bc:	0800407b 	.word	0x0800407b
 80042c0:	080040b7 	.word	0x080040b7
 80042c4:	0800440d 	.word	0x0800440d
 80042c8:	08004421 	.word	0x08004421
 80042cc:	08004435 	.word	0x08004435
 80042d0:	08004449 	.word	0x08004449

080042d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e077      	b.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a35      	ldr	r2, [pc, #212]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a34      	ldr	r2, [pc, #208]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	d027      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10c      	bne.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40001800 	.word	0x40001800
 8004400:	40014000 	.word	0x40014000
 8004404:	4000e000 	.word	0x4000e000
 8004408:	4000e400 	.word	0x4000e400

0800440c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e042      	b.n	80044f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fbd7 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f82c 	bl	80044fc <UART_SetConfig>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fe7e 	bl	80051b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 ff05 	bl	80052fc <UART_CheckIdleState>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b08e      	sub	sp, #56	; 0x38
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4bbf      	ldr	r3, [pc, #764]	; (8004828 <UART_SetConfig+0x32c>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004532:	430b      	orrs	r3, r1
 8004534:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4ab5      	ldr	r2, [pc, #724]	; (800482c <UART_SetConfig+0x330>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004562:	4313      	orrs	r3, r2
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	4bb0      	ldr	r3, [pc, #704]	; (8004830 <UART_SetConfig+0x334>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004576:	430b      	orrs	r3, r1
 8004578:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f023 010f 	bic.w	r1, r3, #15
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4aa7      	ldr	r2, [pc, #668]	; (8004834 <UART_SetConfig+0x338>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d176      	bne.n	8004688 <UART_SetConfig+0x18c>
 800459a:	4ba7      	ldr	r3, [pc, #668]	; (8004838 <UART_SetConfig+0x33c>)
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a2:	2b28      	cmp	r3, #40	; 0x28
 80045a4:	d86c      	bhi.n	8004680 <UART_SetConfig+0x184>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0xb0>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	08004651 	.word	0x08004651
 80045b0:	08004681 	.word	0x08004681
 80045b4:	08004681 	.word	0x08004681
 80045b8:	08004681 	.word	0x08004681
 80045bc:	08004681 	.word	0x08004681
 80045c0:	08004681 	.word	0x08004681
 80045c4:	08004681 	.word	0x08004681
 80045c8:	08004681 	.word	0x08004681
 80045cc:	08004659 	.word	0x08004659
 80045d0:	08004681 	.word	0x08004681
 80045d4:	08004681 	.word	0x08004681
 80045d8:	08004681 	.word	0x08004681
 80045dc:	08004681 	.word	0x08004681
 80045e0:	08004681 	.word	0x08004681
 80045e4:	08004681 	.word	0x08004681
 80045e8:	08004681 	.word	0x08004681
 80045ec:	08004661 	.word	0x08004661
 80045f0:	08004681 	.word	0x08004681
 80045f4:	08004681 	.word	0x08004681
 80045f8:	08004681 	.word	0x08004681
 80045fc:	08004681 	.word	0x08004681
 8004600:	08004681 	.word	0x08004681
 8004604:	08004681 	.word	0x08004681
 8004608:	08004681 	.word	0x08004681
 800460c:	08004669 	.word	0x08004669
 8004610:	08004681 	.word	0x08004681
 8004614:	08004681 	.word	0x08004681
 8004618:	08004681 	.word	0x08004681
 800461c:	08004681 	.word	0x08004681
 8004620:	08004681 	.word	0x08004681
 8004624:	08004681 	.word	0x08004681
 8004628:	08004681 	.word	0x08004681
 800462c:	08004671 	.word	0x08004671
 8004630:	08004681 	.word	0x08004681
 8004634:	08004681 	.word	0x08004681
 8004638:	08004681 	.word	0x08004681
 800463c:	08004681 	.word	0x08004681
 8004640:	08004681 	.word	0x08004681
 8004644:	08004681 	.word	0x08004681
 8004648:	08004681 	.word	0x08004681
 800464c:	08004679 	.word	0x08004679
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004656:	e326      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465e:	e322      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004666:	e31e      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466e:	e31a      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004670:	2320      	movs	r3, #32
 8004672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004676:	e316      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004678:	2340      	movs	r3, #64	; 0x40
 800467a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467e:	e312      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004686:	e30e      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6b      	ldr	r2, [pc, #428]	; (800483c <UART_SetConfig+0x340>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d130      	bne.n	80046f4 <UART_SetConfig+0x1f8>
 8004692:	4b69      	ldr	r3, [pc, #420]	; (8004838 <UART_SetConfig+0x33c>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	2b05      	cmp	r3, #5
 800469c:	d826      	bhi.n	80046ec <UART_SetConfig+0x1f0>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0x1a8>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046bd 	.word	0x080046bd
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	080046cd 	.word	0x080046cd
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046e5 	.word	0x080046e5
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c2:	e2f0      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046c4:	2304      	movs	r3, #4
 80046c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ca:	e2ec      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046cc:	2308      	movs	r3, #8
 80046ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046d2:	e2e8      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046da:	e2e4      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046dc:	2320      	movs	r3, #32
 80046de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e2:	e2e0      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ea:	e2dc      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f2:	e2d8      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a51      	ldr	r2, [pc, #324]	; (8004840 <UART_SetConfig+0x344>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d130      	bne.n	8004760 <UART_SetConfig+0x264>
 80046fe:	4b4e      	ldr	r3, [pc, #312]	; (8004838 <UART_SetConfig+0x33c>)
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	2b05      	cmp	r3, #5
 8004708:	d826      	bhi.n	8004758 <UART_SetConfig+0x25c>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <UART_SetConfig+0x214>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004729 	.word	0x08004729
 8004714:	08004731 	.word	0x08004731
 8004718:	08004739 	.word	0x08004739
 800471c:	08004741 	.word	0x08004741
 8004720:	08004749 	.word	0x08004749
 8004724:	08004751 	.word	0x08004751
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800472e:	e2ba      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004736:	e2b6      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800473e:	e2b2      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004746:	e2ae      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004748:	2320      	movs	r3, #32
 800474a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474e:	e2aa      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004756:	e2a6      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475e:	e2a2      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a37      	ldr	r2, [pc, #220]	; (8004844 <UART_SetConfig+0x348>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d130      	bne.n	80047cc <UART_SetConfig+0x2d0>
 800476a:	4b33      	ldr	r3, [pc, #204]	; (8004838 <UART_SetConfig+0x33c>)
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b05      	cmp	r3, #5
 8004774:	d826      	bhi.n	80047c4 <UART_SetConfig+0x2c8>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0x280>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	08004795 	.word	0x08004795
 8004780:	0800479d 	.word	0x0800479d
 8004784:	080047a5 	.word	0x080047a5
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800479a:	e284      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 800479c:	2304      	movs	r3, #4
 800479e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047a2:	e280      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80047a4:	2308      	movs	r3, #8
 80047a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047aa:	e27c      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047b2:	e278      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80047b4:	2320      	movs	r3, #32
 80047b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ba:	e274      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047c2:	e270      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ca:	e26c      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <UART_SetConfig+0x34c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d142      	bne.n	800485c <UART_SetConfig+0x360>
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <UART_SetConfig+0x33c>)
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d838      	bhi.n	8004854 <UART_SetConfig+0x358>
 80047e2:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <UART_SetConfig+0x2ec>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	08004801 	.word	0x08004801
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004811 	.word	0x08004811
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004821 	.word	0x08004821
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004806:	e24e      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480e:	e24a      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004816:	e246      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800481e:	e242      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004820:	2320      	movs	r3, #32
 8004822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004826:	e23e      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004828:	cfff69f3 	.word	0xcfff69f3
 800482c:	58000c00 	.word	0x58000c00
 8004830:	11fff4ff 	.word	0x11fff4ff
 8004834:	40011000 	.word	0x40011000
 8004838:	58024400 	.word	0x58024400
 800483c:	40004400 	.word	0x40004400
 8004840:	40004800 	.word	0x40004800
 8004844:	40004c00 	.word	0x40004c00
 8004848:	40005000 	.word	0x40005000
 800484c:	2340      	movs	r3, #64	; 0x40
 800484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004852:	e228      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485a:	e224      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4ab1      	ldr	r2, [pc, #708]	; (8004b28 <UART_SetConfig+0x62c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d176      	bne.n	8004954 <UART_SetConfig+0x458>
 8004866:	4bb1      	ldr	r3, [pc, #708]	; (8004b2c <UART_SetConfig+0x630>)
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486e:	2b28      	cmp	r3, #40	; 0x28
 8004870:	d86c      	bhi.n	800494c <UART_SetConfig+0x450>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x37c>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	0800491d 	.word	0x0800491d
 800487c:	0800494d 	.word	0x0800494d
 8004880:	0800494d 	.word	0x0800494d
 8004884:	0800494d 	.word	0x0800494d
 8004888:	0800494d 	.word	0x0800494d
 800488c:	0800494d 	.word	0x0800494d
 8004890:	0800494d 	.word	0x0800494d
 8004894:	0800494d 	.word	0x0800494d
 8004898:	08004925 	.word	0x08004925
 800489c:	0800494d 	.word	0x0800494d
 80048a0:	0800494d 	.word	0x0800494d
 80048a4:	0800494d 	.word	0x0800494d
 80048a8:	0800494d 	.word	0x0800494d
 80048ac:	0800494d 	.word	0x0800494d
 80048b0:	0800494d 	.word	0x0800494d
 80048b4:	0800494d 	.word	0x0800494d
 80048b8:	0800492d 	.word	0x0800492d
 80048bc:	0800494d 	.word	0x0800494d
 80048c0:	0800494d 	.word	0x0800494d
 80048c4:	0800494d 	.word	0x0800494d
 80048c8:	0800494d 	.word	0x0800494d
 80048cc:	0800494d 	.word	0x0800494d
 80048d0:	0800494d 	.word	0x0800494d
 80048d4:	0800494d 	.word	0x0800494d
 80048d8:	08004935 	.word	0x08004935
 80048dc:	0800494d 	.word	0x0800494d
 80048e0:	0800494d 	.word	0x0800494d
 80048e4:	0800494d 	.word	0x0800494d
 80048e8:	0800494d 	.word	0x0800494d
 80048ec:	0800494d 	.word	0x0800494d
 80048f0:	0800494d 	.word	0x0800494d
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	0800493d 	.word	0x0800493d
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	0800494d 	.word	0x0800494d
 8004904:	0800494d 	.word	0x0800494d
 8004908:	0800494d 	.word	0x0800494d
 800490c:	0800494d 	.word	0x0800494d
 8004910:	0800494d 	.word	0x0800494d
 8004914:	0800494d 	.word	0x0800494d
 8004918:	08004945 	.word	0x08004945
 800491c:	2301      	movs	r3, #1
 800491e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004922:	e1c0      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004924:	2304      	movs	r3, #4
 8004926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492a:	e1bc      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 800492c:	2308      	movs	r3, #8
 800492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004932:	e1b8      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004934:	2310      	movs	r3, #16
 8004936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493a:	e1b4      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 800493c:	2320      	movs	r3, #32
 800493e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004942:	e1b0      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004944:	2340      	movs	r3, #64	; 0x40
 8004946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494a:	e1ac      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004952:	e1a8      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a75      	ldr	r2, [pc, #468]	; (8004b30 <UART_SetConfig+0x634>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d130      	bne.n	80049c0 <UART_SetConfig+0x4c4>
 800495e:	4b73      	ldr	r3, [pc, #460]	; (8004b2c <UART_SetConfig+0x630>)
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b05      	cmp	r3, #5
 8004968:	d826      	bhi.n	80049b8 <UART_SetConfig+0x4bc>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <UART_SetConfig+0x474>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004989 	.word	0x08004989
 8004974:	08004991 	.word	0x08004991
 8004978:	08004999 	.word	0x08004999
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498e:	e18a      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004996:	e186      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499e:	e182      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a6:	e17e      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80049a8:	2320      	movs	r3, #32
 80049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ae:	e17a      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e176      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049be:	e172      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5b      	ldr	r2, [pc, #364]	; (8004b34 <UART_SetConfig+0x638>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d130      	bne.n	8004a2c <UART_SetConfig+0x530>
 80049ca:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <UART_SetConfig+0x630>)
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d826      	bhi.n	8004a24 <UART_SetConfig+0x528>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x4e0>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049f5 	.word	0x080049f5
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	08004a05 	.word	0x08004a05
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a1d 	.word	0x08004a1d
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fa:	e154      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a02:	e150      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0a:	e14c      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a12:	e148      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004a14:	2320      	movs	r3, #32
 8004a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1a:	e144      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004a1c:	2340      	movs	r3, #64	; 0x40
 8004a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a22:	e140      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2a:	e13c      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <UART_SetConfig+0x63c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	f040 8082 	bne.w	8004b3c <UART_SetConfig+0x640>
 8004a38:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <UART_SetConfig+0x630>)
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a40:	2b28      	cmp	r3, #40	; 0x28
 8004a42:	d86d      	bhi.n	8004b20 <UART_SetConfig+0x624>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0x550>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004af1 	.word	0x08004af1
 8004a50:	08004b21 	.word	0x08004b21
 8004a54:	08004b21 	.word	0x08004b21
 8004a58:	08004b21 	.word	0x08004b21
 8004a5c:	08004b21 	.word	0x08004b21
 8004a60:	08004b21 	.word	0x08004b21
 8004a64:	08004b21 	.word	0x08004b21
 8004a68:	08004b21 	.word	0x08004b21
 8004a6c:	08004af9 	.word	0x08004af9
 8004a70:	08004b21 	.word	0x08004b21
 8004a74:	08004b21 	.word	0x08004b21
 8004a78:	08004b21 	.word	0x08004b21
 8004a7c:	08004b21 	.word	0x08004b21
 8004a80:	08004b21 	.word	0x08004b21
 8004a84:	08004b21 	.word	0x08004b21
 8004a88:	08004b21 	.word	0x08004b21
 8004a8c:	08004b01 	.word	0x08004b01
 8004a90:	08004b21 	.word	0x08004b21
 8004a94:	08004b21 	.word	0x08004b21
 8004a98:	08004b21 	.word	0x08004b21
 8004a9c:	08004b21 	.word	0x08004b21
 8004aa0:	08004b21 	.word	0x08004b21
 8004aa4:	08004b21 	.word	0x08004b21
 8004aa8:	08004b21 	.word	0x08004b21
 8004aac:	08004b09 	.word	0x08004b09
 8004ab0:	08004b21 	.word	0x08004b21
 8004ab4:	08004b21 	.word	0x08004b21
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004b21 	.word	0x08004b21
 8004ac0:	08004b21 	.word	0x08004b21
 8004ac4:	08004b21 	.word	0x08004b21
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	08004b11 	.word	0x08004b11
 8004ad0:	08004b21 	.word	0x08004b21
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004b21 	.word	0x08004b21
 8004adc:	08004b21 	.word	0x08004b21
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b21 	.word	0x08004b21
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e0d6      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e0d2      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e0ce      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e0ca      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004b10:	2320      	movs	r3, #32
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e0c6      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b1e:	e0c2      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b26:	e0be      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004b28:	40011400 	.word	0x40011400
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	40007800 	.word	0x40007800
 8004b34:	40007c00 	.word	0x40007c00
 8004b38:	40011800 	.word	0x40011800
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4aad      	ldr	r2, [pc, #692]	; (8004df8 <UART_SetConfig+0x8fc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d176      	bne.n	8004c34 <UART_SetConfig+0x738>
 8004b46:	4bad      	ldr	r3, [pc, #692]	; (8004dfc <UART_SetConfig+0x900>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b4e:	2b28      	cmp	r3, #40	; 0x28
 8004b50:	d86c      	bhi.n	8004c2c <UART_SetConfig+0x730>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x65c>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004bfd 	.word	0x08004bfd
 8004b5c:	08004c2d 	.word	0x08004c2d
 8004b60:	08004c2d 	.word	0x08004c2d
 8004b64:	08004c2d 	.word	0x08004c2d
 8004b68:	08004c2d 	.word	0x08004c2d
 8004b6c:	08004c2d 	.word	0x08004c2d
 8004b70:	08004c2d 	.word	0x08004c2d
 8004b74:	08004c2d 	.word	0x08004c2d
 8004b78:	08004c05 	.word	0x08004c05
 8004b7c:	08004c2d 	.word	0x08004c2d
 8004b80:	08004c2d 	.word	0x08004c2d
 8004b84:	08004c2d 	.word	0x08004c2d
 8004b88:	08004c2d 	.word	0x08004c2d
 8004b8c:	08004c2d 	.word	0x08004c2d
 8004b90:	08004c2d 	.word	0x08004c2d
 8004b94:	08004c2d 	.word	0x08004c2d
 8004b98:	08004c0d 	.word	0x08004c0d
 8004b9c:	08004c2d 	.word	0x08004c2d
 8004ba0:	08004c2d 	.word	0x08004c2d
 8004ba4:	08004c2d 	.word	0x08004c2d
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004c2d 	.word	0x08004c2d
 8004bb0:	08004c2d 	.word	0x08004c2d
 8004bb4:	08004c2d 	.word	0x08004c2d
 8004bb8:	08004c15 	.word	0x08004c15
 8004bbc:	08004c2d 	.word	0x08004c2d
 8004bc0:	08004c2d 	.word	0x08004c2d
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004c2d 	.word	0x08004c2d
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004c2d 	.word	0x08004c2d
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004c1d 	.word	0x08004c1d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c2d 	.word	0x08004c2d
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c02:	e050      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0a:	e04c      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c12:	e048      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1a:	e044      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c22:	e040      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c24:	2340      	movs	r3, #64	; 0x40
 8004c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2a:	e03c      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c32:	e038      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a71      	ldr	r2, [pc, #452]	; (8004e00 <UART_SetConfig+0x904>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d130      	bne.n	8004ca0 <UART_SetConfig+0x7a4>
 8004c3e:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <UART_SetConfig+0x900>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d826      	bhi.n	8004c98 <UART_SetConfig+0x79c>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x754>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c69 	.word	0x08004c69
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c79 	.word	0x08004c79
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	2302      	movs	r3, #2
 8004c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c6e:	e01a      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c76:	e016      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7e:	e012      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c86:	e00e      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c88:	2320      	movs	r3, #32
 8004c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c8e:	e00a      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c96:	e006      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c9e:	e002      	b.n	8004ca6 <UART_SetConfig+0x7aa>
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a55      	ldr	r2, [pc, #340]	; (8004e00 <UART_SetConfig+0x904>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	f040 80f0 	bne.w	8004e92 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	dc46      	bgt.n	8004d48 <UART_SetConfig+0x84c>
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	db75      	blt.n	8004daa <UART_SetConfig+0x8ae>
 8004cbe:	3b02      	subs	r3, #2
 8004cc0:	2b1e      	cmp	r3, #30
 8004cc2:	d872      	bhi.n	8004daa <UART_SetConfig+0x8ae>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x7d0>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d4f 	.word	0x08004d4f
 8004cd0:	08004dab 	.word	0x08004dab
 8004cd4:	08004d57 	.word	0x08004d57
 8004cd8:	08004dab 	.word	0x08004dab
 8004cdc:	08004dab 	.word	0x08004dab
 8004ce0:	08004dab 	.word	0x08004dab
 8004ce4:	08004d67 	.word	0x08004d67
 8004ce8:	08004dab 	.word	0x08004dab
 8004cec:	08004dab 	.word	0x08004dab
 8004cf0:	08004dab 	.word	0x08004dab
 8004cf4:	08004dab 	.word	0x08004dab
 8004cf8:	08004dab 	.word	0x08004dab
 8004cfc:	08004dab 	.word	0x08004dab
 8004d00:	08004dab 	.word	0x08004dab
 8004d04:	08004d77 	.word	0x08004d77
 8004d08:	08004dab 	.word	0x08004dab
 8004d0c:	08004dab 	.word	0x08004dab
 8004d10:	08004dab 	.word	0x08004dab
 8004d14:	08004dab 	.word	0x08004dab
 8004d18:	08004dab 	.word	0x08004dab
 8004d1c:	08004dab 	.word	0x08004dab
 8004d20:	08004dab 	.word	0x08004dab
 8004d24:	08004dab 	.word	0x08004dab
 8004d28:	08004dab 	.word	0x08004dab
 8004d2c:	08004dab 	.word	0x08004dab
 8004d30:	08004dab 	.word	0x08004dab
 8004d34:	08004dab 	.word	0x08004dab
 8004d38:	08004dab 	.word	0x08004dab
 8004d3c:	08004dab 	.word	0x08004dab
 8004d40:	08004dab 	.word	0x08004dab
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d02a      	beq.n	8004da2 <UART_SetConfig+0x8a6>
 8004d4c:	e02d      	b.n	8004daa <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d4e:	f7fe fa97 	bl	8003280 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d54:	e02f      	b.n	8004db6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe faa6 	bl	80032ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d64:	e027      	b.n	8004db6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fbf2 	bl	8003554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d74:	e01f      	b.n	8004db6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d76:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <UART_SetConfig+0x900>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <UART_SetConfig+0x900>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	08db      	lsrs	r3, r3, #3
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <UART_SetConfig+0x908>)
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d94:	e00f      	b.n	8004db6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <UART_SetConfig+0x908>)
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d9a:	e00c      	b.n	8004db6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <UART_SetConfig+0x90c>)
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004da0:	e009      	b.n	8004db6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004da8:	e005      	b.n	8004db6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004db4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 81e6 	beq.w	800518a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <UART_SetConfig+0x910>)
 8004dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d305      	bcc.n	8004dee <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d910      	bls.n	8004e10 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004df4:	e1c9      	b.n	800518a <UART_SetConfig+0xc8e>
 8004df6:	bf00      	nop
 8004df8:	40011c00 	.word	0x40011c00
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	58000c00 	.word	0x58000c00
 8004e04:	03d09000 	.word	0x03d09000
 8004e08:	003d0900 	.word	0x003d0900
 8004e0c:	080057a8 	.word	0x080057a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	4618      	mov	r0, r3
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	4ac1      	ldr	r2, [pc, #772]	; (8005124 <UART_SetConfig+0xc28>)
 8004e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	f7fb fa70 	bl	800030c <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	020b      	lsls	r3, r1, #8
 8004e3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e42:	0202      	lsls	r2, r0, #8
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6849      	ldr	r1, [r1, #4]
 8004e48:	0849      	lsrs	r1, r1, #1
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	1814      	adds	r4, r2, r0
 8004e52:	eb43 0501 	adc.w	r5, r3, r1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	4620      	mov	r0, r4
 8004e62:	4629      	mov	r1, r5
 8004e64:	f7fb fa52 	bl	800030c <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e76:	d308      	bcc.n	8004e8a <UART_SetConfig+0x98e>
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d204      	bcs.n	8004e8a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e17f      	b.n	800518a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e90:	e17b      	b.n	800518a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	f040 80bd 	bne.w	8005018 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	dc48      	bgt.n	8004f38 <UART_SetConfig+0xa3c>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	db7b      	blt.n	8004fa2 <UART_SetConfig+0xaa6>
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d879      	bhi.n	8004fa2 <UART_SetConfig+0xaa6>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x9b8>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004f3f 	.word	0x08004f3f
 8004eb8:	08004f47 	.word	0x08004f47
 8004ebc:	08004fa3 	.word	0x08004fa3
 8004ec0:	08004fa3 	.word	0x08004fa3
 8004ec4:	08004f4f 	.word	0x08004f4f
 8004ec8:	08004fa3 	.word	0x08004fa3
 8004ecc:	08004fa3 	.word	0x08004fa3
 8004ed0:	08004fa3 	.word	0x08004fa3
 8004ed4:	08004f5f 	.word	0x08004f5f
 8004ed8:	08004fa3 	.word	0x08004fa3
 8004edc:	08004fa3 	.word	0x08004fa3
 8004ee0:	08004fa3 	.word	0x08004fa3
 8004ee4:	08004fa3 	.word	0x08004fa3
 8004ee8:	08004fa3 	.word	0x08004fa3
 8004eec:	08004fa3 	.word	0x08004fa3
 8004ef0:	08004fa3 	.word	0x08004fa3
 8004ef4:	08004f6f 	.word	0x08004f6f
 8004ef8:	08004fa3 	.word	0x08004fa3
 8004efc:	08004fa3 	.word	0x08004fa3
 8004f00:	08004fa3 	.word	0x08004fa3
 8004f04:	08004fa3 	.word	0x08004fa3
 8004f08:	08004fa3 	.word	0x08004fa3
 8004f0c:	08004fa3 	.word	0x08004fa3
 8004f10:	08004fa3 	.word	0x08004fa3
 8004f14:	08004fa3 	.word	0x08004fa3
 8004f18:	08004fa3 	.word	0x08004fa3
 8004f1c:	08004fa3 	.word	0x08004fa3
 8004f20:	08004fa3 	.word	0x08004fa3
 8004f24:	08004fa3 	.word	0x08004fa3
 8004f28:	08004fa3 	.word	0x08004fa3
 8004f2c:	08004fa3 	.word	0x08004fa3
 8004f30:	08004fa3 	.word	0x08004fa3
 8004f34:	08004f95 	.word	0x08004f95
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d02e      	beq.n	8004f9a <UART_SetConfig+0xa9e>
 8004f3c:	e031      	b.n	8004fa2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3e:	f7fd fa79 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8004f42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f44:	e033      	b.n	8004fae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f46:	f7fd fa8b 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8004f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f4c:	e02f      	b.n	8004fae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f9aa 	bl	80032ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f5c:	e027      	b.n	8004fae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe faf6 	bl	8003554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f6c:	e01f      	b.n	8004fae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f6e:	4b6e      	ldr	r3, [pc, #440]	; (8005128 <UART_SetConfig+0xc2c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f7a:	4b6b      	ldr	r3, [pc, #428]	; (8005128 <UART_SetConfig+0xc2c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	08db      	lsrs	r3, r3, #3
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	4a69      	ldr	r2, [pc, #420]	; (800512c <UART_SetConfig+0xc30>)
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f8c:	e00f      	b.n	8004fae <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004f8e:	4b67      	ldr	r3, [pc, #412]	; (800512c <UART_SetConfig+0xc30>)
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f92:	e00c      	b.n	8004fae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f94:	4b66      	ldr	r3, [pc, #408]	; (8005130 <UART_SetConfig+0xc34>)
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f98:	e009      	b.n	8004fae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa0:	e005      	b.n	8004fae <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80ea 	beq.w	800518a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	4a5a      	ldr	r2, [pc, #360]	; (8005124 <UART_SetConfig+0xc28>)
 8004fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc8:	005a      	lsls	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d916      	bls.n	8005010 <UART_SetConfig+0xb14>
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d212      	bcs.n	8005010 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f023 030f 	bic.w	r3, r3, #15
 8004ff2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005002:	4313      	orrs	r3, r2
 8005004:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e0bc      	b.n	800518a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005016:	e0b8      	b.n	800518a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800501c:	2b20      	cmp	r3, #32
 800501e:	dc4b      	bgt.n	80050b8 <UART_SetConfig+0xbbc>
 8005020:	2b00      	cmp	r3, #0
 8005022:	f2c0 8087 	blt.w	8005134 <UART_SetConfig+0xc38>
 8005026:	2b20      	cmp	r3, #32
 8005028:	f200 8084 	bhi.w	8005134 <UART_SetConfig+0xc38>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0xb38>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	080050bf 	.word	0x080050bf
 8005038:	080050c7 	.word	0x080050c7
 800503c:	08005135 	.word	0x08005135
 8005040:	08005135 	.word	0x08005135
 8005044:	080050cf 	.word	0x080050cf
 8005048:	08005135 	.word	0x08005135
 800504c:	08005135 	.word	0x08005135
 8005050:	08005135 	.word	0x08005135
 8005054:	080050df 	.word	0x080050df
 8005058:	08005135 	.word	0x08005135
 800505c:	08005135 	.word	0x08005135
 8005060:	08005135 	.word	0x08005135
 8005064:	08005135 	.word	0x08005135
 8005068:	08005135 	.word	0x08005135
 800506c:	08005135 	.word	0x08005135
 8005070:	08005135 	.word	0x08005135
 8005074:	080050ef 	.word	0x080050ef
 8005078:	08005135 	.word	0x08005135
 800507c:	08005135 	.word	0x08005135
 8005080:	08005135 	.word	0x08005135
 8005084:	08005135 	.word	0x08005135
 8005088:	08005135 	.word	0x08005135
 800508c:	08005135 	.word	0x08005135
 8005090:	08005135 	.word	0x08005135
 8005094:	08005135 	.word	0x08005135
 8005098:	08005135 	.word	0x08005135
 800509c:	08005135 	.word	0x08005135
 80050a0:	08005135 	.word	0x08005135
 80050a4:	08005135 	.word	0x08005135
 80050a8:	08005135 	.word	0x08005135
 80050ac:	08005135 	.word	0x08005135
 80050b0:	08005135 	.word	0x08005135
 80050b4:	08005115 	.word	0x08005115
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d02e      	beq.n	800511a <UART_SetConfig+0xc1e>
 80050bc:	e03a      	b.n	8005134 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7fd f9b9 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80050c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80050c4:	e03c      	b.n	8005140 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c6:	f7fd f9cb 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 80050ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80050cc:	e038      	b.n	8005140 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe f8ea 	bl	80032ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050dc:	e030      	b.n	8005140 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fa36 	bl	8003554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ec:	e028      	b.n	8005140 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ee:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <UART_SetConfig+0xc2c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <UART_SetConfig+0xc2c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	08db      	lsrs	r3, r3, #3
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	4a09      	ldr	r2, [pc, #36]	; (800512c <UART_SetConfig+0xc30>)
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800510c:	e018      	b.n	8005140 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <UART_SetConfig+0xc30>)
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005112:	e015      	b.n	8005140 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <UART_SetConfig+0xc34>)
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005118:	e012      	b.n	8005140 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005120:	e00e      	b.n	8005140 <UART_SetConfig+0xc44>
 8005122:	bf00      	nop
 8005124:	080057a8 	.word	0x080057a8
 8005128:	58024400 	.word	0x58024400
 800512c:	03d09000 	.word	0x03d09000
 8005130:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800513e:	bf00      	nop
    }

    if (pclk != 0U)
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d021      	beq.n	800518a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <UART_SetConfig+0xcb8>)
 800514c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005150:	461a      	mov	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	fbb3 f2f2 	udiv	r2, r3, r2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	441a      	add	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	2b0f      	cmp	r3, #15
 800516e:	d909      	bls.n	8005184 <UART_SetConfig+0xc88>
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005176:	d205      	bcs.n	8005184 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	e002      	b.n	800518a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80051a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3738      	adds	r7, #56	; 0x38
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bdb0      	pop	{r4, r5, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	080057a8 	.word	0x080057a8

080051b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01a      	beq.n	80052ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d10a      	bne.n	80052ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800530c:	f7fb fe54 	bl	8000fb8 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d10e      	bne.n	800533e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f82f 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e025      	b.n	800538a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d10e      	bne.n	800536a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f819 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e00f      	b.n	800538a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b09c      	sub	sp, #112	; 0x70
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	e0a9      	b.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	f000 80a5 	beq.w	80054f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fb fe03 	bl	8000fb8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80053be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d140      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d8:	667b      	str	r3, [r7, #100]	; 0x64
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	663b      	str	r3, [r7, #96]	; 0x60
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005416:	64ba      	str	r2, [r7, #72]	; 0x48
 8005418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800541c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e069      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d051      	beq.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d149      	bne.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
 800548e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	613b      	str	r3, [r7, #16]
   return(result);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054c0:	623a      	str	r2, [r7, #32]
 80054c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	6a3a      	ldr	r2, [r7, #32]
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e010      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	429a      	cmp	r2, r3
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	429a      	cmp	r2, r3
 8005514:	f43f af46 	beq.w	80053a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3770      	adds	r7, #112	; 0x70
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_UARTEx_DisableFifoMode+0x16>
 8005534:	2302      	movs	r3, #2
 8005536:	e027      	b.n	8005588 <HAL_UARTEx_DisableFifoMode+0x66>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	; 0x24
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005566:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e02d      	b.n	8005608 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	; 0x24
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f84f 	bl	800568c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e02d      	b.n	8005684 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f811 	bl	800568c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005698:	2b00      	cmp	r3, #0
 800569a:	d108      	bne.n	80056ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056ac:	e031      	b.n	8005712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ae:	2310      	movs	r3, #16
 80056b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056b2:	2310      	movs	r3, #16
 80056b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	0e5b      	lsrs	r3, r3, #25
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	0f5b      	lsrs	r3, r3, #29
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056d6:	7bbb      	ldrb	r3, [r7, #14]
 80056d8:	7b3a      	ldrb	r2, [r7, #12]
 80056da:	4911      	ldr	r1, [pc, #68]	; (8005720 <UARTEx_SetNbDataToProcess+0x94>)
 80056dc:	5c8a      	ldrb	r2, [r1, r2]
 80056de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056e2:	7b3a      	ldrb	r2, [r7, #12]
 80056e4:	490f      	ldr	r1, [pc, #60]	; (8005724 <UARTEx_SetNbDataToProcess+0x98>)
 80056e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	7b7a      	ldrb	r2, [r7, #13]
 80056f8:	4909      	ldr	r1, [pc, #36]	; (8005720 <UARTEx_SetNbDataToProcess+0x94>)
 80056fa:	5c8a      	ldrb	r2, [r1, r2]
 80056fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005700:	7b7a      	ldrb	r2, [r7, #13]
 8005702:	4908      	ldr	r1, [pc, #32]	; (8005724 <UARTEx_SetNbDataToProcess+0x98>)
 8005704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005706:	fb93 f3f2 	sdiv	r3, r3, r2
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	080057c0 	.word	0x080057c0
 8005724:	080057c8 	.word	0x080057c8

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4d0d      	ldr	r5, [pc, #52]	; (8005760 <__libc_init_array+0x38>)
 800572c:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <__libc_init_array+0x3c>)
 800572e:	1b64      	subs	r4, r4, r5
 8005730:	10a4      	asrs	r4, r4, #2
 8005732:	2600      	movs	r6, #0
 8005734:	42a6      	cmp	r6, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	4d0b      	ldr	r5, [pc, #44]	; (8005768 <__libc_init_array+0x40>)
 800573a:	4c0c      	ldr	r4, [pc, #48]	; (800576c <__libc_init_array+0x44>)
 800573c:	f000 f820 	bl	8005780 <_init>
 8005740:	1b64      	subs	r4, r4, r5
 8005742:	10a4      	asrs	r4, r4, #2
 8005744:	2600      	movs	r6, #0
 8005746:	42a6      	cmp	r6, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005750:	4798      	blx	r3
 8005752:	3601      	adds	r6, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f855 3b04 	ldr.w	r3, [r5], #4
 800575a:	4798      	blx	r3
 800575c:	3601      	adds	r6, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	080057d8 	.word	0x080057d8
 8005764:	080057d8 	.word	0x080057d8
 8005768:	080057d8 	.word	0x080057d8
 800576c:	080057dc 	.word	0x080057dc

08005770 <memset>:
 8005770:	4402      	add	r2, r0
 8005772:	4603      	mov	r3, r0
 8005774:	4293      	cmp	r3, r2
 8005776:	d100      	bne.n	800577a <memset+0xa>
 8005778:	4770      	bx	lr
 800577a:	f803 1b01 	strb.w	r1, [r3], #1
 800577e:	e7f9      	b.n	8005774 <memset+0x4>

08005780 <_init>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

0800578c <_fini>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr
