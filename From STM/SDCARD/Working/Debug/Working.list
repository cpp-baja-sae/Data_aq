
Working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c498  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c8a0  0800c8a0  0001c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c8a8  0800c8a8  0001c8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c8ac  0800c8ac  0001c8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800c8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007b0  24000014  0800c8c4  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240007c4  0800c8c4  000207c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030d71  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b50  00000000  00000000  00050db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001828  00000000  00000000  00055908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016a0  00000000  00000000  00057130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000367e0  00000000  00000000  000587d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021a81  00000000  00000000  0008efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001552f6  00000000  00000000  000b0a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00205d27  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065b0  00000000  00000000  00205d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c74c 	.word	0x0800c74c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800c74c 	.word	0x0800c74c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ADC_SERVICE_ROUTINE>:

#include "ADS8588H.h"
#include "main.h"
#include "HelperCommand.h"

void ADC_SERVICE_ROUTINE(ADC_DATA_t *ADC_DATA) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  // Begin conversion
  ADS8588H_CONV_AB();
 800060c:	f000 f88e 	bl	800072c <ADS8588H_CONV_AB>
  /** TODO, Should not need this,
   * Board needs a interrupt tied to falling edge of BUSY(?)
   * Wait out BUSY and OSR
   */
  // Replace with pin read instead.
  TIM14WaitUntil(BUSYWAIT);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f000 f8bd 	bl	8000790 <TIM14WaitUntil>
  //delay_5ns(WAIT_OUT_CONVERSION_TIME_200us);

  ADS8588H_READ_8CH(ADC_DATA);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f804 	bl	8000624 <ADS8588H_READ_8CH>
  return;
 800061c:	bf00      	nop
}
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <ADS8588H_READ_8CH>:

void ADS8588H_READ_8CH(ADC_DATA_t *ADC_DATA) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  // Lower CS to enable data conversion
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	483a      	ldr	r0, [pc, #232]	; (800071c <ADS8588H_READ_8CH+0xf8>)
 8000632:	f001 fb8f 	bl	8001d54 <HAL_GPIO_WritePin>
  for (int channel = 0; channel < QTY_DIFF_CHANNELS; channel++)
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e05d      	b.n	80006f8 <ADS8588H_READ_8CH+0xd4>
  {
    for (int stepping = CLK_CYCLES; stepping >= 0; stepping--)
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e054      	b.n	80006ec <ADS8588H_READ_8CH+0xc8>
    {
    	//Timer is very sensitive to abstraction ???
		while(TIM14->CNT <=HalfDutyCycle/2);
 8000642:	bf00      	nop
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 8000646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 800064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	429a      	cmp	r2, r3
 8000650:	d9f8      	bls.n	8000644 <ADS8588H_READ_8CH+0x20>
		TIM14->CNT = RESET;
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(ADC_SCLK_GPIO_Port,ADC_SCLK_Pin,RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	482f      	ldr	r0, [pc, #188]	; (800071c <ADS8588H_READ_8CH+0xf8>)
 800065e:	f001 fb79 	bl	8001d54 <HAL_GPIO_WritePin>

		// Reading GPIO pins directly and adjusting register value as needed
		ADC_DATA->ADC1_8[channel] |= (((ADC1_8_GPIO_Port->IDR & ADC1_8_Pin) >> 7 ) & 1U )<< stepping;
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <ADS8588H_READ_8CH+0x100>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	09db      	lsrs	r3, r3, #7
 8000668:	f003 0201 	and.w	r2, r3, #1
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	fa02 f103 	lsl.w	r1, r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800067a:	b28b      	uxth	r3, r1
 800067c:	4313      	orrs	r3, r2
 800067e:	b299      	uxth	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		ADC_DATA->ADC9_16[channel] |= (((ADC9_16_GPIO_Port->IDR & ADC9_16_Pin)>> 8 ) & 1U )<< stepping;
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <ADS8588H_READ_8CH+0x100>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0201 	and.w	r2, r3, #1
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	fa02 f103 	lsl.w	r1, r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	3208      	adds	r2, #8
 800069e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80006a2:	b28b      	uxth	r3, r1
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b299      	uxth	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	3208      	adds	r2, #8
 80006ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		ADC_DATA->ADC17_24[channel] |= (((ADC17_24_GPIO_Port->IDR & ADC17_24_Pin) >> 3 ) & 1U) << stepping;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <ADS8588H_READ_8CH+0x104>)
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	08db      	lsrs	r3, r3, #3
 80006b8:	f003 0201 	and.w	r2, r3, #1
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	fa02 f103 	lsl.w	r1, r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	3210      	adds	r2, #16
 80006c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80006cc:	b28b      	uxth	r3, r1
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b299      	uxth	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	3210      	adds	r2, #16
 80006d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		HAL_GPIO_WritePin(ADC_SCLK_GPIO_Port,ADC_SCLK_Pin,SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2102      	movs	r1, #2
 80006e0:	480e      	ldr	r0, [pc, #56]	; (800071c <ADS8588H_READ_8CH+0xf8>)
 80006e2:	f001 fb37 	bl	8001d54 <HAL_GPIO_WritePin>
    for (int stepping = CLK_CYCLES; stepping >= 0; stepping--)
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	daa7      	bge.n	8000642 <ADS8588H_READ_8CH+0x1e>
  for (int channel = 0; channel < QTY_DIFF_CHANNELS; channel++)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	dd9e      	ble.n	800063c <ADS8588H_READ_8CH+0x18>
    }
  }
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <ADS8588H_READ_8CH+0xf8>)
 8000704:	f001 fb26 	bl	8001d54 <HAL_GPIO_WritePin>
  ADC_DATA->DataPoint++;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800070c:	3301      	adds	r3, #1
 800070e:	b29a      	uxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58021800 	.word	0x58021800
 8000720:	40002000 	.word	0x40002000
 8000724:	58021400 	.word	0x58021400
 8000728:	58021000 	.word	0x58021000

0800072c <ADS8588H_CONV_AB>:
//        ADC_ABS_RANGE;
//  }
//  ADC->bit_collector = 0;
//}

void ADS8588H_CONV_AB() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADC_CONV_AB_GPIO_Port, ADC_CONV_AB_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000736:	4807      	ldr	r0, [pc, #28]	; (8000754 <ADS8588H_CONV_AB+0x28>)
 8000738:	f001 fb0c 	bl	8001d54 <HAL_GPIO_WritePin>
	TIM14WaitUntil(SMALLWAIT);
 800073c:	2032      	movs	r0, #50	; 0x32
 800073e:	f000 f827 	bl	8000790 <TIM14WaitUntil>
  	HAL_GPIO_WritePin(ADC_CONV_AB_GPIO_Port, ADC_CONV_AB_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <ADS8588H_CONV_AB+0x28>)
 800074a:	f001 fb03 	bl	8001d54 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	58021400 	.word	0x58021400

08000758 <ADS8588H_reset>:

void ADS8588H_reset() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	TIM14WaitUntil(SMALLWAIT);
 800075c:	2032      	movs	r0, #50	; 0x32
 800075e:	f000 f817 	bl	8000790 <TIM14WaitUntil>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2102      	movs	r1, #2
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <ADS8588H_reset+0x28>)
 8000768:	f001 faf4 	bl	8001d54 <HAL_GPIO_WritePin>
	TIM14WaitUntil(SMALLWAIT);
 800076c:	2032      	movs	r0, #50	; 0x32
 800076e:	f000 f80f 	bl	8000790 <TIM14WaitUntil>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <ADS8588H_reset+0x28>)
 8000778:	f001 faec 	bl	8001d54 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	58020c00 	.word	0x58020c00

08000784 <ADS8588H_init>:

void ADS8588H_init() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /*
   * From section 7.4.1.6 of data sheet
   * Needed for settling internal references.
   */
  ADS8588H_reset();
 8000788:	f7ff ffe6 	bl	8000758 <ADS8588H_reset>
  return;
 800078c:	bf00      	nop
}
 800078e:	bd80      	pop	{r7, pc}

08000790 <TIM14WaitUntil>:
#include "stm32h723xx.h"
/**
 * @brief Wait time tick is based off of what ever Timer14 is
 * configured for.
 */
void TIM14WaitUntil(uint16_t WaitLength){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	while((TIM14->CNT) <= WaitLength);
 800079a:	bf00      	nop
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <TIM14WaitUntil+0x28>)
 800079e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d9fa      	bls.n	800079c <TIM14WaitUntil+0xc>
	TIM14->CNT = RESET;
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <TIM14WaitUntil+0x28>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40002000 	.word	0x40002000

080007bc <MountSD>:
#include "stdio.h"
#include "ADS8588H.h"
#include "string.h"

void MountSD()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 80007c2:	b084      	sub	sp, #16
 80007c4:	af02      	add	r7, sp, #8
	// Temporary memory allocation to setup file system
	// http://elm-chan.org/fsw/ff/doc/mkfs.html
	uint8_t rtext[_MAX_SS*64];
	FRESULT res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	4918      	ldr	r1, [pc, #96]	; (800082c <MountSD+0x70>)
 80007ca:	4819      	ldr	r0, [pc, #100]	; (8000830 <MountSD+0x74>)
 80007cc:	f00a feda 	bl	800b584 <f_mount>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f248 0207 	movw	r2, #32775	; 0x8007
 80007d6:	443a      	add	r2, r7
 80007d8:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK)
 80007da:	f248 0307 	movw	r3, #32775	; 0x8007
 80007de:	443b      	add	r3, r7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <MountSD+0x30>
    {
        Error_Handler();
 80007e6:	f000 fce3 	bl	80011b0 <Error_Handler>
        if( res != FR_OK)
        {
            Error_Handler();
        }
    }
};
 80007ea:	e019      	b.n	8000820 <MountSD+0x64>
    	FRESULT res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MountSD+0x78>)
 80007ee:	f248 0208 	movw	r2, #32776	; 0x8008
 80007f2:	443a      	add	r2, r7
 80007f4:	4413      	add	r3, r2
 80007f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	2107      	movs	r1, #7
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <MountSD+0x70>)
 8000802:	f00b fae1 	bl	800bdc8 <f_mkfs>
 8000806:	4603      	mov	r3, r0
 8000808:	f248 0206 	movw	r2, #32774	; 0x8006
 800080c:	443a      	add	r2, r7
 800080e:	7013      	strb	r3, [r2, #0]
        if( res != FR_OK)
 8000810:	f248 0306 	movw	r3, #32774	; 0x8006
 8000814:	443b      	add	r3, r7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MountSD+0x64>
            Error_Handler();
 800081c:	f000 fcc8 	bl	80011b0 <Error_Handler>
};
 8000820:	bf00      	nop
 8000822:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	24000360 	.word	0x24000360
 8000830:	24000594 	.word	0x24000594
 8000834:	ffff7ffc 	.word	0xffff7ffc

08000838 <UnMountSD>:

void UnMountSD()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	f_mount(0, (TCHAR const*)NULL, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2000      	movs	r0, #0
 8000842:	f00a fe9f 	bl	800b584 <f_mount>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <OpenSD>:

void OpenSD(const char **file_name,enum SD_FATFS_POSIX file_acces_type)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	FRESULT res = f_open(&SDFile, *file_name, file_acces_type);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	78fa      	ldrb	r2, [r7, #3]
 800085e:	4619      	mov	r1, r3
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <OpenSD+0x30>)
 8000862:	f00a fed5 	bl	800b610 <f_open>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <OpenSD+0x28>
	{
		Error_Handler();
 8000870:	f000 fc9e 	bl	80011b0 <Error_Handler>
	}
};
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000364 	.word	0x24000364

08000880 <WriteSD>:

void WriteSD(uint16_t *wtext, uint32_t wtextSize, uint32_t *BytesWritten)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	FRESULT res = f_write(&SDFile, (uint16_t *)wtext, wtextSize, (void *)&BytesWritten);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	68f9      	ldr	r1, [r7, #12]
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <WriteSD+0x34>)
 8000894:	f00b f87a 	bl	800b98c <f_write>
 8000898:	4603      	mov	r3, r0
 800089a:	75fb      	strb	r3, [r7, #23]
	if((BytesWritten == 0) || (res != FR_OK))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <WriteSD+0x28>
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <WriteSD+0x2c>
	{
	  Error_Handler();
 80008a8:	f000 fc82 	bl	80011b0 <Error_Handler>
	}
};
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000364 	.word	0x24000364

080008b8 <CloseSD>:

void CloseSD()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <CloseSD+0x10>)
 80008be:	f00b fa58 	bl	800bd72 <f_close>
};
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	24000364 	.word	0x24000364

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	f5ad 4dc0 	sub.w	sp, sp, #24576	; 0x6000
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 feb7 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f93f 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 fad5 	bl	8000e8c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008e2:	f000 fa23 	bl	8000d2c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80008e6:	f000 f9c7 	bl	8000c78 <MX_TIM7_Init>
  MX_MDMA_Init();
 80008ea:	f000 fa6b 	bl	8000dc4 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 80008ee:	f000 f9a3 	bl	8000c38 <MX_SDMMC1_SD_Init>
  MX_TIM14_Init();
 80008f2:	f000 f9f9 	bl	8000ce8 <MX_TIM14_Init>
  MX_FATFS_Init();
 80008f6:	f008 ff3f 	bl	8009778 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MountSD();
 80008fa:	f7ff ff5f 	bl	80007bc <MountSD>
  HAL_TIM_Base_Start(&htim14);
 80008fe:	4891      	ldr	r0, [pc, #580]	; (8000b44 <main+0x278>)
 8000900:	f006 fb74 	bl	8006fec <HAL_TIM_Base_Start>
  ADS8588H_init();
 8000904:	f7ff ff3e 	bl	8000784 <ADS8588H_init>
  HAL_TIM_Base_Start_IT(&htim7);
 8000908:	488f      	ldr	r0, [pc, #572]	; (8000b48 <main+0x27c>)
 800090a:	f006 fbed 	bl	80070e8 <HAL_TIM_Base_Start_IT>

  OpenSD(file_name,a);
 800090e:	2132      	movs	r1, #50	; 0x32
 8000910:	488e      	ldr	r0, [pc, #568]	; (8000b4c <main+0x280>)
 8000912:	f7ff ff9b 	bl	800084c <OpenSD>
  ADC_DATA_t ADC_DATA = {0};
 8000916:	f246 0310 	movw	r3, #24592	; 0x6010
 800091a:	443b      	add	r3, r7
 800091c:	2234      	movs	r2, #52	; 0x34
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f00b ff0b 	bl	800c73c <memset>
  uint16_t DATATRANS[SDCardDataLength] = {0};
 8000926:	4b8a      	ldr	r3, [pc, #552]	; (8000b50 <main+0x284>)
 8000928:	f246 0250 	movw	r2, #24656	; 0x6050
 800092c:	443a      	add	r2, r7
 800092e:	4413      	add	r3, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f246 0308 	movw	r3, #24584	; 0x6008
 8000936:	461a      	mov	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f00b feff 	bl	800c73c <memset>
  uint32_t BytesWritten = 0;
 800093e:	4b85      	ldr	r3, [pc, #532]	; (8000b54 <main+0x288>)
 8000940:	f246 0250 	movw	r2, #24656	; 0x6050
 8000944:	443a      	add	r2, r7
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
  uint32_t SAVEFILENOW = 200*60*1/ADCFrames;
 800094c:	f240 1377 	movw	r3, #375	; 0x177
 8000950:	f246 0244 	movw	r2, #24644	; 0x6044
 8000954:	443a      	add	r2, r7
 8000956:	6013      	str	r3, [r2, #0]
  uint32_t FileINC = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f246 024c 	movw	r2, #24652	; 0x604c
 800095e:	443a      	add	r2, r7
 8000960:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Enter task list
	  if (StartADCFlag == 1)
 8000962:	4b7d      	ldr	r3, [pc, #500]	; (8000b58 <main+0x28c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	f040 808f 	bne.w	8000a8a <main+0x1be>
	  {
		ADC_SERVICE_ROUTINE(&ADC_DATA);
 800096c:	f246 0310 	movw	r3, #24592	; 0x6010
 8000970:	443b      	add	r3, r7
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe46 	bl	8000604 <ADC_SERVICE_ROUTINE>
		StartADCFlag = RESET;
 8000978:	4b77      	ldr	r3, [pc, #476]	; (8000b58 <main+0x28c>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]

		ADC_DATA.ADC1_8[0] = 2001;
 800097e:	f240 73d1 	movw	r3, #2001	; 0x7d1
 8000982:	f246 0210 	movw	r2, #24592	; 0x6010
 8000986:	443a      	add	r2, r7
 8000988:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[1] = 2002;
 800098a:	f240 73d2 	movw	r3, #2002	; 0x7d2
 800098e:	f246 0212 	movw	r2, #24594	; 0x6012
 8000992:	443a      	add	r2, r7
 8000994:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[2] = 2003;
 8000996:	f240 73d3 	movw	r3, #2003	; 0x7d3
 800099a:	f246 0214 	movw	r2, #24596	; 0x6014
 800099e:	443a      	add	r2, r7
 80009a0:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[3] = 2004;
 80009a2:	f240 73d4 	movw	r3, #2004	; 0x7d4
 80009a6:	f246 0216 	movw	r2, #24598	; 0x6016
 80009aa:	443a      	add	r2, r7
 80009ac:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[4] = 2005;
 80009ae:	f240 73d5 	movw	r3, #2005	; 0x7d5
 80009b2:	f246 0218 	movw	r2, #24600	; 0x6018
 80009b6:	443a      	add	r2, r7
 80009b8:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[5] = 2006;
 80009ba:	f240 73d6 	movw	r3, #2006	; 0x7d6
 80009be:	f246 021a 	movw	r2, #24602	; 0x601a
 80009c2:	443a      	add	r2, r7
 80009c4:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[6] = 2007;
 80009c6:	f240 73d7 	movw	r3, #2007	; 0x7d7
 80009ca:	f246 021c 	movw	r2, #24604	; 0x601c
 80009ce:	443a      	add	r2, r7
 80009d0:	8013      	strh	r3, [r2, #0]
		ADC_DATA.ADC1_8[7] = 2008;
 80009d2:	f44f 63fb 	mov.w	r3, #2008	; 0x7d8
 80009d6:	f246 021e 	movw	r2, #24606	; 0x601e
 80009da:	443a      	add	r2, r7
 80009dc:	8013      	strh	r3, [r2, #0]

		memcpy(&DATATRANS[ADC_DATA.ADCCallCount*24 + 0], &ADC_DATA.ADC1_8[0],16);
 80009de:	f246 0342 	movw	r3, #24642	; 0x6042
 80009e2:	443b      	add	r3, r7
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b57      	ldr	r3, [pc, #348]	; (8000b50 <main+0x284>)
 80009f4:	f246 0150 	movw	r1, #24656	; 0x6050
 80009f8:	4439      	add	r1, r7
 80009fa:	440b      	add	r3, r1
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	f246 0110 	movw	r1, #24592	; 0x6010
 8000a04:	4439      	add	r1, r7
 8000a06:	2210      	movs	r2, #16
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00b fe89 	bl	800c720 <memcpy>
		memcpy(&DATATRANS[ADC_DATA.ADCCallCount*24 + 8], &ADC_DATA.ADC9_16[0],16);
 8000a0e:	f246 0342 	movw	r3, #24642	; 0x6042
 8000a12:	443b      	add	r3, r7
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	f103 0208 	add.w	r2, r3, #8
 8000a24:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <main+0x284>)
 8000a26:	f246 0150 	movw	r1, #24656	; 0x6050
 8000a2a:	4439      	add	r1, r7
 8000a2c:	440b      	add	r3, r1
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	1898      	adds	r0, r3, r2
 8000a32:	f246 0310 	movw	r3, #24592	; 0x6010
 8000a36:	443b      	add	r3, r7
 8000a38:	3310      	adds	r3, #16
 8000a3a:	2210      	movs	r2, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f00b fe6f 	bl	800c720 <memcpy>
		memcpy(&DATATRANS[ADC_DATA.ADCCallCount*24 + 16], &ADC_DATA.ADC17_24[0],16);
 8000a42:	f246 0342 	movw	r3, #24642	; 0x6042
 8000a46:	443b      	add	r3, r7
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	f103 0210 	add.w	r2, r3, #16
 8000a58:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <main+0x284>)
 8000a5a:	f246 0150 	movw	r1, #24656	; 0x6050
 8000a5e:	4439      	add	r1, r7
 8000a60:	440b      	add	r3, r1
 8000a62:	0052      	lsls	r2, r2, #1
 8000a64:	1898      	adds	r0, r3, r2
 8000a66:	f246 0310 	movw	r3, #24592	; 0x6010
 8000a6a:	443b      	add	r3, r7
 8000a6c:	3320      	adds	r3, #32
 8000a6e:	2210      	movs	r2, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	f00b fe55 	bl	800c720 <memcpy>
		ADC_DATA.ADCCallCount++;
 8000a76:	f246 0342 	movw	r3, #24642	; 0x6042
 8000a7a:	443b      	add	r3, r7
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f246 0242 	movw	r2, #24642	; 0x6042
 8000a86:	443a      	add	r2, r7
 8000a88:	8013      	strh	r3, [r2, #0]
	  }

	  if(ADC_DATA.ADCCallCount >= ADCFrames)
 8000a8a:	f246 0342 	movw	r3, #24642	; 0x6042
 8000a8e:	443b      	add	r3, r7
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2b1f      	cmp	r3, #31
 8000a94:	d940      	bls.n	8000b18 <main+0x24c>
	  {
		  ADC_DATA.ADCCallCount = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f246 0242 	movw	r2, #24642	; 0x6042
 8000a9c:	443a      	add	r2, r7
 8000a9e:	8013      	strh	r3, [r2, #0]
		  for(uint16_t i = 0; i < SDCardDataLength; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f246 024a 	movw	r2, #24650	; 0x604a
 8000aa6:	443a      	add	r2, r7
 8000aa8:	8013      	strh	r3, [r2, #0]
 8000aaa:	e015      	b.n	8000ad8 <main+0x20c>
		  {
			  DATATRANS[SDCardDataLength] = i;
 8000aac:	4a28      	ldr	r2, [pc, #160]	; (8000b50 <main+0x284>)
 8000aae:	f246 0350 	movw	r3, #24656	; 0x6050
 8000ab2:	443b      	add	r3, r7
 8000ab4:	441a      	add	r2, r3
 8000ab6:	f246 0308 	movw	r3, #24584	; 0x6008
 8000aba:	4413      	add	r3, r2
 8000abc:	f246 024a 	movw	r2, #24650	; 0x604a
 8000ac0:	443a      	add	r2, r7
 8000ac2:	8812      	ldrh	r2, [r2, #0]
 8000ac4:	801a      	strh	r2, [r3, #0]
		  for(uint16_t i = 0; i < SDCardDataLength; i++)
 8000ac6:	f246 034a 	movw	r3, #24650	; 0x604a
 8000aca:	443b      	add	r3, r7
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	f246 024a 	movw	r2, #24650	; 0x604a
 8000ad4:	443a      	add	r2, r7
 8000ad6:	8013      	strh	r3, [r2, #0]
 8000ad8:	f246 034a 	movw	r3, #24650	; 0x604a
 8000adc:	443b      	add	r3, r7
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	f243 0203 	movw	r2, #12291	; 0x3003
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d9e1      	bls.n	8000aac <main+0x1e0>
		  }
		  WriteSD(DATATRANS,SDCardDataLength,&BytesWritten);
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <main+0x288>)
 8000aea:	f246 0350 	movw	r3, #24656	; 0x6050
 8000aee:	443b      	add	r3, r7
 8000af0:	441a      	add	r2, r3
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <main+0x284>)
 8000af4:	f246 0150 	movw	r1, #24656	; 0x6050
 8000af8:	4439      	add	r1, r7
 8000afa:	440b      	add	r3, r1
 8000afc:	f243 0104 	movw	r1, #12292	; 0x3004
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff febd 	bl	8000880 <WriteSD>
		  FileINC++;
 8000b06:	f246 034c 	movw	r3, #24652	; 0x604c
 8000b0a:	443b      	add	r3, r7
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f246 024c 	movw	r2, #24652	; 0x604c
 8000b14:	443a      	add	r2, r7
 8000b16:	6013      	str	r3, [r2, #0]
	  }
	  if (FileINC >= SAVEFILENOW)
 8000b18:	f246 034c 	movw	r3, #24652	; 0x604c
 8000b1c:	443b      	add	r3, r7
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	f246 0344 	movw	r3, #24644	; 0x6044
 8000b24:	443b      	add	r3, r7
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f4ff af1a 	bcc.w	8000962 <main+0x96>
	  {
		  HAL_TIM_Base_Stop_IT(&htim7);
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <main+0x27c>)
 8000b30:	f006 fb60 	bl	80071f4 <HAL_TIM_Base_Stop_IT>
		  CloseSD();
 8000b34:	f7ff fec0 	bl	80008b8 <CloseSD>
		  UnMountSD();
 8000b38:	f7ff fe7e 	bl	8000838 <UnMountSD>
		  Error_Handler();
 8000b3c:	f000 fb38 	bl	80011b0 <Error_Handler>
	  if (StartADCFlag == 1)
 8000b40:	e70f      	b.n	8000962 <main+0x96>
 8000b42:	bf00      	nop
 8000b44:	24000174 	.word	0x24000174
 8000b48:	24000230 	.word	0x24000230
 8000b4c:	24000000 	.word	0x24000000
 8000b50:	ffff9fb8 	.word	0xffff9fb8
 8000b54:	ffff9fb4 	.word	0xffff9fb4
 8000b58:	24000030 	.word	0x24000030

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09c      	sub	sp, #112	; 0x70
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	224c      	movs	r2, #76	; 0x4c
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00b fde6 	bl	800c73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2220      	movs	r2, #32
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00b fde0 	bl	800c73c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f001 fba9 	bl	80022d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <SystemClock_Config+0xd8>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <SystemClock_Config+0xd8>)
 8000b8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <SystemClock_Config+0xd8>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9e:	bf00      	nop
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <SystemClock_Config+0xd8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bac:	d1f8      	bne.n	8000ba0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000bc4:	f240 1313 	movw	r3, #275	; 0x113
 8000bc8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fbae 	bl	8002348 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bf2:	f000 fadd 	bl	80011b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	233f      	movs	r3, #63	; 0x3f
 8000bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c02:	2308      	movs	r3, #8
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c14:	2340      	movs	r3, #64	; 0x40
 8000c16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 ff3f 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c28:	f000 fac2 	bl	80011b0 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3770      	adds	r7, #112	; 0x70
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	58024800 	.word	0x58024800

08000c38 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SDMMC1_SD_Init+0x38>)
 8000c3e:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <MX_SDMMC1_SD_Init+0x3c>)
 8000c40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_SDMMC1_SD_Init+0x38>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SDMMC1_SD_Init+0x38>)
 8000c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c4e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_SDMMC1_SD_Init+0x38>)
 8000c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c56:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <MX_SDMMC1_SD_Init+0x38>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <MX_SDMMC1_SD_Init+0x38>)
 8000c60:	2205      	movs	r2, #5
 8000c62:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	240000f8 	.word	0x240000f8
 8000c74:	52007000 	.word	0x52007000

08000c78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_TIM7_Init+0x6c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1375-1;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000c90:	f240 525e 	movw	r2, #1374	; 0x55e
 8000c94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500-1;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000c9e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ca2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000cac:	f006 f93a 	bl	8006f24 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000cb6:	f000 fa7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_TIM7_Init+0x68>)
 8000cc8:	f006 fd62 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000cd2:	f000 fa6d 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000230 	.word	0x24000230
 8000ce4:	40001400 	.word	0x40001400

08000ce8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <MX_TIM14_Init+0x40>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 136;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000d00:	2288      	movs	r2, #136	; 0x88
 8000d02:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_TIM14_Init+0x3c>)
 8000d12:	f006 f907 	bl	8006f24 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000d1c:	f000 fa48 	bl	80011b0 <Error_Handler>
  //HAL_TIM_Base_Start_IT(&htim14);
  //TIM14->CCR1 = 34;

  /* USER CODE END TIM14_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000174 	.word	0x24000174
 8000d28:	40002000 	.word	0x40002000

08000d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <MX_USART3_UART_Init+0x94>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d76:	f006 fdcf 	bl	8007918 <HAL_UART_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d80:	f000 fa16 	bl	80011b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d88:	f007 fe62 	bl	8008a50 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f000 fa0d 	bl	80011b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d9a:	f007 fe97 	bl	8008acc <HAL_UARTEx_SetRxFifoThreshold>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f000 fa04 	bl	80011b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_USART3_UART_Init+0x90>)
 8000daa:	f007 fe18 	bl	80089de <HAL_UARTEx_DisableFifoMode>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f000 f9fc 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000068 	.word	0x24000068
 8000dc0:	40004800 	.word	0x40004800

08000dc4 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0
  */
static void MX_MDMA_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <MX_MDMA_Init+0xbc>)
 8000dcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dd0:	4a2b      	ldr	r2, [pc, #172]	; (8000e80 <MX_MDMA_Init+0xbc>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_MDMA_Init+0xbc>)
 8000ddc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Instance = MDMA_Channel0;
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000dea:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <MX_MDMA_Init+0xc4>)
 8000dec:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.Request = MDMA_REQUEST_SDMMC1_DMA_ENDBUFFER;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000df0:	221e      	movs	r2, #30
 8000df2:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e0e:	2208      	movs	r2, #8
 8000e10:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.BufferTransferLength = 1;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.SourceBlockAddressOffset = 0;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0.Init.DestBlockAddressOffset = 0;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0) != HAL_OK)
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e46:	f000 ffb8 	bl	8001dba <HAL_MDMA_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000e50:	f000 f9ae 	bl	80011b0 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0, 0, 0) != HAL_OK)
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <MX_MDMA_Init+0xc0>)
 8000e5a:	f000 fffa 	bl	8001e52 <HAL_MDMA_ConfigPostRequestMask>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000e64:	f000 f9a4 	bl	80011b0 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	207a      	movs	r0, #122	; 0x7a
 8000e6e:	f000 fd7c 	bl	800196a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e72:	207a      	movs	r0, #122	; 0x7a
 8000e74:	f000 fd93 	bl	800199e <HAL_NVIC_EnableIRQ>

}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	58024400 	.word	0x58024400
 8000e84:	240002ec 	.word	0x240002ec
 8000e88:	52000040 	.word	0x52000040

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4bae      	ldr	r3, [pc, #696]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4aac      	ldr	r2, [pc, #688]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4baa      	ldr	r3, [pc, #680]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	623b      	str	r3, [r7, #32]
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4ba6      	ldr	r3, [pc, #664]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4aa5      	ldr	r2, [pc, #660]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4ba2      	ldr	r3, [pc, #648]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	4b9f      	ldr	r3, [pc, #636]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a9d      	ldr	r2, [pc, #628]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eee:	4b9b      	ldr	r3, [pc, #620]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a96      	ldr	r2, [pc, #600]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b93      	ldr	r3, [pc, #588]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b90      	ldr	r3, [pc, #576]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a8e      	ldr	r2, [pc, #568]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b8c      	ldr	r3, [pc, #560]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b88      	ldr	r3, [pc, #544]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a87      	ldr	r2, [pc, #540]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b84      	ldr	r3, [pc, #528]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f56:	4b81      	ldr	r3, [pc, #516]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a7f      	ldr	r2, [pc, #508]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b79      	ldr	r3, [pc, #484]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a78      	ldr	r2, [pc, #480]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <MX_GPIO_Init+0x2d0>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADC17_24_Pin|TEST_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210b      	movs	r1, #11
 8000f96:	4872      	ldr	r0, [pc, #456]	; (8001160 <MX_GPIO_Init+0x2d4>)
 8000f98:	f000 fedc 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ADC1_8_Pin|ADC9_16_Pin|ADC_CONV_AB_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000fa2:	4870      	ldr	r0, [pc, #448]	; (8001164 <MX_GPIO_Init+0x2d8>)
 8000fa4:	f000 fed6 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fae:	486e      	ldr	r0, [pc, #440]	; (8001168 <MX_GPIO_Init+0x2dc>)
 8000fb0:	f000 fed0 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ADC_CS_Pin|ADC_SCLK_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	486c      	ldr	r0, [pc, #432]	; (800116c <MX_GPIO_Init+0x2e0>)
 8000fba:	f000 fecb 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|ADC_RESET_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f240 4102 	movw	r1, #1026	; 0x402
 8000fc4:	486a      	ldr	r0, [pc, #424]	; (8001170 <MX_GPIO_Init+0x2e4>)
 8000fc6:	f000 fec5 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC17_24_Pin TEST_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = ADC17_24_Pin|TEST_Pin|LED_YELLOW_Pin;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	485f      	ldr	r0, [pc, #380]	; (8001160 <MX_GPIO_Init+0x2d4>)
 8000fe2:	f000 fcf7 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	485e      	ldr	r0, [pc, #376]	; (8001174 <MX_GPIO_Init+0x2e8>)
 8000ffc:	f000 fcea 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_8_Pin ADC9_16_Pin ADC_CONV_AB_Pin */
  GPIO_InitStruct.Pin = ADC1_8_Pin|ADC9_16_Pin|ADC_CONV_AB_Pin;
 8001000:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	4852      	ldr	r0, [pc, #328]	; (8001164 <MX_GPIO_Init+0x2d8>)
 800101a:	f000 fcdb 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800101e:	2332      	movs	r3, #50	; 0x32
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102e:	230b      	movs	r3, #11
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	484e      	ldr	r0, [pc, #312]	; (8001174 <MX_GPIO_Init+0x2e8>)
 800103a:	f000 fccb 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800103e:	2386      	movs	r3, #134	; 0x86
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104e:	230b      	movs	r3, #11
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4847      	ldr	r0, [pc, #284]	; (8001178 <MX_GPIO_Init+0x2ec>)
 800105a:	f000 fcbb 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800105e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	483c      	ldr	r0, [pc, #240]	; (8001168 <MX_GPIO_Init+0x2dc>)
 8001078:	f000 fcac 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4836      	ldr	r0, [pc, #216]	; (800116c <MX_GPIO_Init+0x2e0>)
 8001094:	f000 fc9e 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_SCLK_Pin */
  GPIO_InitStruct.Pin = ADC_SCLK_Pin;
 8001098:	2302      	movs	r3, #2
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_SCLK_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	482f      	ldr	r0, [pc, #188]	; (800116c <MX_GPIO_Init+0x2e0>)
 80010b0:	f000 fc90 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c6:	230b      	movs	r3, #11
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_GPIO_Init+0x2dc>)
 80010d2:	f000 fc7f 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin ADC_RESET_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|ADC_RESET_Pin;
 80010d6:	f240 4302 	movw	r3, #1026	; 0x402
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4820      	ldr	r0, [pc, #128]	; (8001170 <MX_GPIO_Init+0x2e4>)
 80010f0:	f000 fc70 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4818      	ldr	r0, [pc, #96]	; (800116c <MX_GPIO_Init+0x2e0>)
 800110a:	f000 fc63 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001120:	230a      	movs	r3, #10
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	4813      	ldr	r0, [pc, #76]	; (8001178 <MX_GPIO_Init+0x2ec>)
 800112c:	f000 fc52 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001130:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001142:	230b      	movs	r3, #11
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_GPIO_Init+0x2e0>)
 800114e:	f000 fc41 	bl	80019d4 <HAL_GPIO_Init>

}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	; 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	58021000 	.word	0x58021000
 8001164:	58021400 	.word	0x58021400
 8001168:	58020400 	.word	0x58020400
 800116c:	58021800 	.word	0x58021800
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58020800 	.word	0x58020800
 8001178:	58020000 	.word	0x58020000

0800117c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	  if (htim == &htim7 )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d106      	bne.n	800119a <HAL_TIM_PeriodElapsedCallback+0x1e>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 800118c:	2101      	movs	r1, #1
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001190:	f000 fdf9 	bl	8001d86 <HAL_GPIO_TogglePin>
		  // Flag for ADC Task
		  StartADCFlag = 1;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
	  }
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000230 	.word	0x24000230
 80011a8:	58020400 	.word	0x58020400
 80011ac:	24000030 	.word	0x24000030

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
	  HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 fad9 	bl	800176c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80011ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <Error_Handler+0x18>)
 80011c0:	f000 fde1 	bl	8001d86 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80011c4:	e7f6      	b.n	80011b4 <Error_Handler+0x4>
 80011c6:	bf00      	nop
 80011c8:	58020400 	.word	0x58020400

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_MspInit+0x30>)
 80011d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x30>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x30>)
 80011e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	58024400 	.word	0x58024400

08001200 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0b8      	sub	sp, #224	; 0xe0
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	22b4      	movs	r2, #180	; 0xb4
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f00b fa8b 	bl	800c73c <memset>
  if(hsd->Instance==SDMMC1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a3b      	ldr	r2, [pc, #236]	; (8001318 <HAL_SD_MspInit+0x118>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d16e      	bne.n	800130e <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001236:	2300      	movs	r3, #0
 8001238:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f001 ffba 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800124a:	f7ff ffb1 	bl	80011b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_SD_MspInit+0x11c>)
 8001250:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_SD_MspInit+0x11c>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_SD_MspInit+0x11c>)
 8001260:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_SD_MspInit+0x11c>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_SD_MspInit+0x11c>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <HAL_SD_MspInit+0x11c>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_SD_MspInit+0x11c>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_SD_MspInit+0x11c>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_SD_MspInit+0x11c>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012c2:	230c      	movs	r3, #12
 80012c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012cc:	4619      	mov	r1, r3
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <HAL_SD_MspInit+0x120>)
 80012d0:	f000 fb80 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d4:	2304      	movs	r3, #4
 80012d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012ec:	230c      	movs	r3, #12
 80012ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f6:	4619      	mov	r1, r3
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <HAL_SD_MspInit+0x124>)
 80012fa:	f000 fb6b 	bl	80019d4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2031      	movs	r0, #49	; 0x31
 8001304:	f000 fb31 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001308:	2031      	movs	r0, #49	; 0x31
 800130a:	f000 fb48 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	37e0      	adds	r7, #224	; 0xe0
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	52007000 	.word	0x52007000
 800131c:	58024400 	.word	0x58024400
 8001320:	58020800 	.word	0x58020800
 8001324:	58020c00 	.word	0x58020c00

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_TIM_Base_MspInit+0x74>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d117      	bne.n	800136a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_TIM_Base_MspInit+0x78>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_TIM_Base_MspInit+0x78>)
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_TIM_Base_MspInit+0x78>)
 800134c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2037      	movs	r0, #55	; 0x37
 800135e:	f000 fb04 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001362:	2037      	movs	r0, #55	; 0x37
 8001364:	f000 fb1b 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001368:	e013      	b.n	8001392 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM14)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_TIM_Base_MspInit+0x7c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d10e      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_TIM_Base_MspInit+0x78>)
 8001376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_TIM_Base_MspInit+0x78>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_TIM_Base_MspInit+0x78>)
 8001386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40001400 	.word	0x40001400
 80013a0:	58024400 	.word	0x58024400
 80013a4:	40002000 	.word	0x40002000

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0b6      	sub	sp, #216	; 0xd8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	22b4      	movs	r2, #180	; 0xb4
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00b f9b7 	bl	800c73c <memset>
  if(huart->Instance==USART3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a25      	ldr	r2, [pc, #148]	; (8001468 <HAL_UART_MspInit+0xc0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d142      	bne.n	800145e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fee6 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013f2:	f7ff fedd 	bl	80011b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_UART_MspInit+0xc4>)
 80013f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <HAL_UART_MspInit+0xc4>)
 80013fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001402:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_UART_MspInit+0xc4>)
 8001408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800140c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_UART_MspInit+0xc4>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_UART_MspInit+0xc4>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_UART_MspInit+0xc4>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001432:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001436:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800144c:	2307      	movs	r3, #7
 800144e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_UART_MspInit+0xc8>)
 800145a:	f000 fabb 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	37d8      	adds	r7, #216	; 0xd8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004800 	.word	0x40004800
 800146c:	58024400 	.word	0x58024400
 8001470:	58020c00 	.word	0x58020c00

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f934 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <SDMMC1_IRQHandler+0x10>)
 80014ce:	f004 fb37 	bl	8005b40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	240000f8 	.word	0x240000f8

080014dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM7_IRQHandler+0x10>)
 80014e2:	f005 feb6 	bl	8007252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000230 	.word	0x24000230

080014f0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_dma_endbuffer_0);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <MDMA_IRQHandler+0x10>)
 80014f6:	f000 fcff 	bl	8001ef8 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	240002ec 	.word	0x240002ec

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <SystemInit+0xd0>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <SystemInit+0xd0>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001518:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <SystemInit+0xd4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b06      	cmp	r3, #6
 8001522:	d807      	bhi.n	8001534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <SystemInit+0xd4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 030f 	bic.w	r3, r3, #15
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <SystemInit+0xd4>)
 800152e:	f043 0307 	orr.w	r3, r3, #7
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <SystemInit+0xd8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a28      	ldr	r2, [pc, #160]	; (80015dc <SystemInit+0xd8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <SystemInit+0xd8>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <SystemInit+0xd8>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4924      	ldr	r1, [pc, #144]	; (80015dc <SystemInit+0xd8>)
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <SystemInit+0xdc>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <SystemInit+0xd4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <SystemInit+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <SystemInit+0xd4>)
 8001568:	f043 0307 	orr.w	r3, r3, #7
 800156c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <SystemInit+0xd8>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <SystemInit+0xd8>)
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <SystemInit+0xe0>)
 8001584:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <SystemInit+0xd8>)
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <SystemInit+0xe4>)
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <SystemInit+0xd8>)
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <SystemInit+0xe8>)
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <SystemInit+0xd8>)
 8001594:	2200      	movs	r2, #0
 8001596:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SystemInit+0xd8>)
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <SystemInit+0xe8>)
 800159c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <SystemInit+0xd8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <SystemInit+0xd8>)
 80015a6:	4a11      	ldr	r2, [pc, #68]	; (80015ec <SystemInit+0xe8>)
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <SystemInit+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <SystemInit+0xd8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <SystemInit+0xd8>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <SystemInit+0xd8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <SystemInit+0xec>)
 80015c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015c8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	52002000 	.word	0x52002000
 80015dc:	58024400 	.word	0x58024400
 80015e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e4:	02020200 	.word	0x02020200
 80015e8:	01ff0000 	.word	0x01ff0000
 80015ec:	01010280 	.word	0x01010280
 80015f0:	52004000 	.word	0x52004000

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f8:	f7ff ff84 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f00b f859 	bl	800c6d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff f951 	bl	80008cc <main>
  bx  lr
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001630:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001634:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001638:	0800c8b0 	.word	0x0800c8b0
  ldr r2, =_sbss
 800163c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001640:	240007c4 	.word	0x240007c4

08001644 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC3_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f980 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001654:	f001 fbda 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	4913      	ldr	r1, [pc, #76]	; (80016b4 <HAL_Init+0x6c>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_Init+0x6c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_Init+0x70>)
 800168a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_Init+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f814 	bl	80016c0 <HAL_InitTick>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e002      	b.n	80016a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a2:	f7ff fd93 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024400 	.word	0x58024400
 80016b4:	0800c7b4 	.word	0x0800c7b4
 80016b8:	24000008 	.word	0x24000008
 80016bc:	24000004 	.word	0x24000004

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_InitTick+0x60>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e021      	b.n	8001718 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_InitTick+0x64>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f965 	bl	80019ba <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f92f 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x68>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	24000010 	.word	0x24000010
 8001724:	24000004 	.word	0x24000004
 8001728:	2400000c 	.word	0x2400000c

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	24000010 	.word	0x24000010
 8001750:	24000358 	.word	0x24000358

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	24000358 	.word	0x24000358

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000010 	.word	0x24000010

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x40>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00
 80017f8:	05fa0000 	.word	0x05fa0000

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff8e 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff29 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff40 	bl	80017fc <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff90 	bl	80018a8 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5f 	bl	8001854 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff33 	bl	8001818 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa4 	bl	8001910 <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019e2:	4b86      	ldr	r3, [pc, #536]	; (8001bfc <HAL_GPIO_Init+0x228>)
 80019e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019e6:	e18c      	b.n	8001d02 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 817e 	beq.w	8001cfc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d005      	beq.n	8001a18 <HAL_GPIO_Init+0x44>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d017      	beq.n	8001ab6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d123      	bne.n	8001b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	69b9      	ldr	r1, [r7, #24]
 8001b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0203 	and.w	r2, r3, #3
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80d8 	beq.w	8001cfc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <HAL_GPIO_Init+0x22c>)
 8001b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b52:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_GPIO_Init+0x22c>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_GPIO_Init+0x22c>)
 8001b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_GPIO_Init+0x230>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_GPIO_Init+0x234>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d04a      	beq.n	8001c2c <HAL_GPIO_Init+0x258>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_GPIO_Init+0x238>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02b      	beq.n	8001bf6 <HAL_GPIO_Init+0x222>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_GPIO_Init+0x23c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x21e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_GPIO_Init+0x240>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x244>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_GPIO_Init+0x248>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_GPIO_Init+0x24c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_GPIO_Init+0x250>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x20a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_GPIO_Init+0x254>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x206>
 8001bd6:	2309      	movs	r3, #9
 8001bd8:	e029      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bda:	230a      	movs	r3, #10
 8001bdc:	e027      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e025      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001be2:	2306      	movs	r3, #6
 8001be4:	e023      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e021      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e01f      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e01d      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e01b      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e019      	b.n	8001c2e <HAL_GPIO_Init+0x25a>
 8001bfa:	bf00      	nop
 8001bfc:	58000080 	.word	0x58000080
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58000400 	.word	0x58000400
 8001c08:	58020000 	.word	0x58020000
 8001c0c:	58020400 	.word	0x58020400
 8001c10:	58020800 	.word	0x58020800
 8001c14:	58020c00 	.word	0x58020c00
 8001c18:	58021000 	.word	0x58021000
 8001c1c:	58021400 	.word	0x58021400
 8001c20:	58021800 	.word	0x58021800
 8001c24:	58021c00 	.word	0x58021c00
 8001c28:	58022400 	.word	0x58022400
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3e:	4938      	ldr	r1, [pc, #224]	; (8001d20 <HAL_GPIO_Init+0x34c>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f ae6b 	bne.w	80019e8 <HAL_GPIO_Init+0x14>
  }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	58000400 	.word	0x58000400

08001d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e001      	b.n	8001d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d70:	e003      	b.n	8001d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	400b      	ands	r3, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff fcc7 	bl	8001754 <HAL_GetTick>
 8001dc6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e03b      	b.n	8001e4a <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001df2:	e00f      	b.n	8001e14 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8001df4:	f7ff fcae 	bl	8001754 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d908      	bls.n	8001e14 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e01a      	b.n	8001e4a <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e8      	bne.n	8001df4 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f9be 	bl	80021a4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b087      	sub	sp, #28
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e03e      	b.n	8001eea <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_MDMA_ConfigPostRequestMask+0x28>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e037      	b.n	8001eea <HAL_MDMA_ConfigPostRequestMask+0x98>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d126      	bne.n	8001edc <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11c      	bne.n	8001ed6 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	e00d      	b.n	8001ee0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	e004      	b.n	8001ee0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
 8001eda:	e001      	b.n	8001ee0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f04:	4b9a      	ldr	r3, [pc, #616]	; (8002170 <HAL_MDMA_IRQHandler+0x278>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a9a      	ldr	r2, [pc, #616]	; (8002174 <HAL_MDMA_IRQHandler+0x27c>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b97      	ldr	r3, [pc, #604]	; (8002178 <HAL_MDMA_IRQHandler+0x280>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2201      	movs	r2, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8001f2a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 812e 	beq.w	8002196 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d054      	beq.n	8001ff2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d04d      	beq.n	8001ff2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0202 	bic.w	r2, r2, #2
 8001f64:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d106      	bne.n	8001f86 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	669a      	str	r2, [r3, #104]	; 0x68
 8001f84:	e005      	b.n	8001f92 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f8a:	f043 0202 	orr.w	r2, r3, #2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb6:	f043 0208 	orr.w	r2, r3, #8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fcc:	f043 0210 	orr.w	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe2:	f043 0220 	orr.w	r2, r3, #32
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2210      	movs	r2, #16
 8002014:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2208      	movs	r2, #8
 8002048:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d012      	beq.n	800208e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2204      	movs	r2, #4
 800207c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d039      	beq.n	8002110 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d032      	beq.n	8002110 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80020b8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d110      	bne.n	80020e8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d05d      	beq.n	800219a <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
        }
        return;
 80020e6:	e058      	b.n	800219a <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2202      	movs	r2, #2
 80020ee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002114:	2b00      	cmp	r3, #0
 8002116:	d041      	beq.n	800219c <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2204      	movs	r2, #4
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	d307      	bcc.n	800214c <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f2      	bne.n	8002130 <HAL_MDMA_IRQHandler+0x238>
 800214a:	e000      	b.n	800214e <HAL_MDMA_IRQHandler+0x256>
        break;
 800214c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00b      	beq.n	800217c <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800216c:	e00a      	b.n	8002184 <HAL_MDMA_IRQHandler+0x28c>
 800216e:	bf00      	nop
 8002170:	24000004 	.word	0x24000004
 8002174:	1b4e81b5 	.word	0x1b4e81b5
 8002178:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
 8002194:	e002      	b.n	800219c <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8002196:	bf00      	nop
 8002198:	e000      	b.n	800219c <HAL_MDMA_IRQHandler+0x2a4>
        return;
 800219a:	bf00      	nop
    }
  }
}
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop

080021a4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80021ca:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80021d6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80021e2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80021f8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80021fa:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d107      	bne.n	8002216 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002214:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	2b00      	cmp	r3, #0
 8002224:	da11      	bge.n	800224a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002234:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	425b      	negs	r3, r3
 800223c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	b292      	uxth	r2, r2
 8002246:	621a      	str	r2, [r3, #32]
 8002248:	e006      	b.n	8002258 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b292      	uxth	r2, r2
 8002256:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	2b00      	cmp	r3, #0
 800225e:	da15      	bge.n	800228c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800226e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	425b      	negs	r3, r3
 8002276:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6a19      	ldr	r1, [r3, #32]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	621a      	str	r2, [r3, #32]
 800228a:	e009      	b.n	80022a0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a19      	ldr	r1, [r3, #32]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	041a      	lsls	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d006      	beq.n	80022b8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
 80022b6:	e003      	b.n	80022c0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_PWREx_ConfigSupply+0x70>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d00a      	beq.n	80022fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_PWREx_ConfigSupply+0x70>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e01f      	b.n	800233a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e01d      	b.n	800233a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_PWREx_ConfigSupply+0x70>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	490f      	ldr	r1, [pc, #60]	; (8002344 <HAL_PWREx_ConfigSupply+0x70>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4313      	orrs	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800230e:	f7ff fa21 	bl	8001754 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002314:	e009      	b.n	800232a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002316:	f7ff fa1d 	bl	8001754 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002324:	d901      	bls.n	800232a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e007      	b.n	800233a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_PWREx_ConfigSupply+0x70>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002336:	d1ee      	bne.n	8002316 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	58024800 	.word	0x58024800

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e397      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8087 	beq.w	8002476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002368:	4b9e      	ldr	r3, [pc, #632]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002372:	4b9c      	ldr	r3, [pc, #624]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	2b10      	cmp	r3, #16
 800237c:	d007      	beq.n	800238e <HAL_RCC_OscConfig+0x46>
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	2b18      	cmp	r3, #24
 8002382:	d110      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5e>
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d10b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	4b95      	ldr	r3, [pc, #596]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d06c      	beq.n	8002474 <HAL_RCC_OscConfig+0x12c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d168      	bne.n	8002474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e371      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x76>
 80023b0:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a8b      	ldr	r2, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e02e      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a86      	ldr	r2, [pc, #536]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0xbc>
 80023ea:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7d      	ldr	r2, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 8002404:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a76      	ldr	r2, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b74      	ldr	r3, [pc, #464]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a73      	ldr	r2, [pc, #460]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff f996 	bl	8001754 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff f992 	bl	8001754 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e325      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243e:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xe4>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff f982 	bl	8001754 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002454:	f7ff f97e 	bl	8001754 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e311      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x10c>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 808a 	beq.w	8002598 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800248c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800248e:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_RCC_OscConfig+0x162>
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	2b18      	cmp	r3, #24
 800249e:	d137      	bne.n	8002510 <HAL_RCC_OscConfig+0x1c8>
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d132      	bne.n	8002510 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e2e3      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c2:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0219 	bic.w	r2, r3, #25
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4945      	ldr	r1, [pc, #276]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d4:	f7ff f93e 	bl	8001754 <HAL_GetTick>
 80024d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024dc:	f7ff f93a 	bl	8001754 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e2cd      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	4936      	ldr	r1, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250e:	e043      	b.n	8002598 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d026      	beq.n	8002566 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 0219 	bic.w	r2, r3, #25
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	492f      	ldr	r1, [pc, #188]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7ff f913 	bl	8001754 <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002532:	f7ff f90f 	bl	8001754 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e2a2      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e018      	b.n	8002598 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7ff f8ef 	bl	8001754 <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257a:	f7ff f8eb 	bl	8001754 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e27e      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d06d      	beq.n	8002680 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d007      	beq.n	80025ca <HAL_RCC_OscConfig+0x282>
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b18      	cmp	r3, #24
 80025be:	d11e      	bne.n	80025fe <HAL_RCC_OscConfig+0x2b6>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2a0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b80      	cmp	r3, #128	; 0x80
 80025dc:	d004      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e253      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025e8:	4ba3      	ldr	r3, [pc, #652]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	49a0      	ldr	r1, [pc, #640]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025fc:	e040      	b.n	8002680 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d023      	beq.n	800264e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002606:	4b9c      	ldr	r3, [pc, #624]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a9b      	ldr	r2, [pc, #620]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff f89f 	bl	8001754 <HAL_GetTick>
 8002616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800261a:	f7ff f89b 	bl	8001754 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e22e      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800262c:	4b92      	ldr	r3, [pc, #584]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002638:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	498c      	ldr	r1, [pc, #560]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002648:	4313      	orrs	r3, r2
 800264a:	60cb      	str	r3, [r1, #12]
 800264c:	e018      	b.n	8002680 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800264e:	4b8a      	ldr	r3, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a89      	ldr	r2, [pc, #548]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff f87b 	bl	8001754 <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002662:	f7ff f877 	bl	8001754 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e20a      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002674:	4b80      	ldr	r3, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d036      	beq.n	80026fa <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d019      	beq.n	80026c8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7ff f858 	bl	8001754 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff f854 	bl	8001754 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1e7      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ba:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x360>
 80026c6:	e018      	b.n	80026fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	4a6a      	ldr	r2, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7ff f83e 	bl	8001754 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff f83a 	bl	8001754 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1cd      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ee:	4b62      	ldr	r3, [pc, #392]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d036      	beq.n	8002774 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d019      	beq.n	8002742 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a59      	ldr	r2, [pc, #356]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800271a:	f7ff f81b 	bl	8001754 <HAL_GetTick>
 800271e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002722:	f7ff f817 	bl	8001754 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1aa      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x3da>
 8002740:	e018      	b.n	8002774 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002742:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800274c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800274e:	f7ff f801 	bl	8001754 <HAL_GetTick>
 8002752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002756:	f7fe fffd 	bl	8001754 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e190      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8085 	beq.w	800288c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x534>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3d      	ldr	r2, [pc, #244]	; (800287c <HAL_RCC_OscConfig+0x534>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800278e:	f7fe ffe1 	bl	8001754 <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe ffdd 	bl	8001754 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e170      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_RCC_OscConfig+0x534>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x482>
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	e02d      	b.n	8002826 <HAL_RCC_OscConfig+0x4de>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x4a4>
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a25      	ldr	r2, [pc, #148]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	e01c      	b.n	8002826 <HAL_RCC_OscConfig+0x4de>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x4c6>
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	e00b      	b.n	8002826 <HAL_RCC_OscConfig+0x4de>
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d015      	beq.n	800285a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe ff91 	bl	8001754 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe ff8d 	bl	8001754 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e11e      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x530>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ee      	beq.n	8002836 <HAL_RCC_OscConfig+0x4ee>
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe ff7b 	bl	8001754 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002860:	e00e      	b.n	8002880 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe ff77 	bl	8001754 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d905      	bls.n	8002880 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e108      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
 8002878:	58024400 	.word	0x58024400
 800287c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002880:	4b84      	ldr	r3, [pc, #528]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ea      	bne.n	8002862 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80f9 	beq.w	8002a88 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002896:	4b7f      	ldr	r3, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289e:	2b18      	cmp	r3, #24
 80028a0:	f000 80b4 	beq.w	8002a0c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	f040 8095 	bne.w	80029d8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a78      	ldr	r2, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80028b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe ff4b 	bl	8001754 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe ff47 	bl	8001754 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0da      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d4:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b6c      	ldr	r3, [pc, #432]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80028e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e4:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x750>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	430a      	orrs	r2, r1
 80028f4:	4967      	ldr	r1, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	628b      	str	r3, [r1, #40]	; 0x28
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	3b01      	subs	r3, #1
 8002900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	3b01      	subs	r3, #1
 800290a:	025b      	lsls	r3, r3, #9
 800290c:	b29b      	uxth	r3, r3
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	3b01      	subs	r3, #1
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800292a:	495a      	ldr	r1, [pc, #360]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800292c:	4313      	orrs	r3, r2
 800292e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002930:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800293c:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800293e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002940:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002948:	00d2      	lsls	r2, r2, #3
 800294a:	4952      	ldr	r1, [pc, #328]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f023 020c 	bic.w	r2, r3, #12
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002962:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f023 0202 	bic.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4949      	ldr	r1, [pc, #292]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002974:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4a46      	ldr	r2, [pc, #280]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a43      	ldr	r2, [pc, #268]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3a      	ldr	r2, [pc, #232]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fed0 	bl	8001754 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fecc 	bl	8001754 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e05f      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ca:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x670>
 80029d6:	e057      	b.n	8002a88 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 80029de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe feb6 	bl	8001754 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe feb2 	bl	8001754 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e045      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x6a4>
 8002a0a:	e03d      	b.n	8002a88 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_OscConfig+0x74c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d031      	beq.n	8002a84 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d12a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d122      	bne.n	8002a84 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0a5b      	lsrs	r3, r3, #9
 8002a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d111      	bne.n	8002a84 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d108      	bne.n	8002a84 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0e1b      	lsrs	r3, r3, #24
 8002a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3730      	adds	r7, #48	; 0x30
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
 8002a98:	fffffc0c 	.word	0xfffffc0c
 8002a9c:	ffff0007 	.word	0xffff0007

08002aa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e19c      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b8a      	ldr	r3, [pc, #552]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b87      	ldr	r3, [pc, #540]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 020f 	bic.w	r2, r3, #15
 8002aca:	4985      	ldr	r1, [pc, #532]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e184      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	4b7b      	ldr	r3, [pc, #492]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d908      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b00:	4b78      	ldr	r3, [pc, #480]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	4975      	ldr	r1, [pc, #468]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d908      	bls.n	8002b40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	496a      	ldr	r1, [pc, #424]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d908      	bls.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b5c:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	495e      	ldr	r1, [pc, #376]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d908      	bls.n	8002b9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4953      	ldr	r1, [pc, #332]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d908      	bls.n	8002bca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f023 020f 	bic.w	r2, r3, #15
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4947      	ldr	r1, [pc, #284]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d055      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4940      	ldr	r1, [pc, #256]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d121      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0f6      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d115      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0ea      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0de      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c30:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0d6      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c40:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f023 0207 	bic.w	r2, r3, #7
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe fd7f 	bl	8001754 <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5a:	f7fe fd7b 	bl	8001754 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0be      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d1eb      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d208      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f023 020f 	bic.w	r2, r3, #15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	490e      	ldr	r1, [pc, #56]	; (8002ce4 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d214      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 020f 	bic.w	r2, r3, #15
 8002cc6:	4906      	ldr	r1, [pc, #24]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e086      	b.n	8002dee <HAL_RCC_ClockConfig+0x34e>
 8002ce0:	52002000 	.word	0x52002000
 8002ce4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d208      	bcs.n	8002d16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d04:	4b3c      	ldr	r3, [pc, #240]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4939      	ldr	r1, [pc, #228]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d208      	bcs.n	8002d44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	492e      	ldr	r1, [pc, #184]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d208      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4922      	ldr	r1, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d208      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4917      	ldr	r1, [pc, #92]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002da0:	f000 f834 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	4912      	ldr	r1, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x35c>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <HAL_RCC_ClockConfig+0x35c>)
 8002dc8:	5cd3      	ldrb	r3, [r2, r3]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x360>)
 8002dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x364>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x368>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fc6c 	bl	80016c0 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	0800c7b4 	.word	0x0800c7b4
 8002e00:	24000008 	.word	0x24000008
 8002e04:	24000004 	.word	0x24000004
 8002e08:	2400000c 	.word	0x2400000c

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e12:	4bb3      	ldr	r3, [pc, #716]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1a:	2b18      	cmp	r3, #24
 8002e1c:	f200 8155 	bhi.w	80030ca <HAL_RCC_GetSysClockFreq+0x2be>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e8d 	.word	0x08002e8d
 8002e2c:	080030cb 	.word	0x080030cb
 8002e30:	080030cb 	.word	0x080030cb
 8002e34:	080030cb 	.word	0x080030cb
 8002e38:	080030cb 	.word	0x080030cb
 8002e3c:	080030cb 	.word	0x080030cb
 8002e40:	080030cb 	.word	0x080030cb
 8002e44:	080030cb 	.word	0x080030cb
 8002e48:	08002eb3 	.word	0x08002eb3
 8002e4c:	080030cb 	.word	0x080030cb
 8002e50:	080030cb 	.word	0x080030cb
 8002e54:	080030cb 	.word	0x080030cb
 8002e58:	080030cb 	.word	0x080030cb
 8002e5c:	080030cb 	.word	0x080030cb
 8002e60:	080030cb 	.word	0x080030cb
 8002e64:	080030cb 	.word	0x080030cb
 8002e68:	08002eb9 	.word	0x08002eb9
 8002e6c:	080030cb 	.word	0x080030cb
 8002e70:	080030cb 	.word	0x080030cb
 8002e74:	080030cb 	.word	0x080030cb
 8002e78:	080030cb 	.word	0x080030cb
 8002e7c:	080030cb 	.word	0x080030cb
 8002e80:	080030cb 	.word	0x080030cb
 8002e84:	080030cb 	.word	0x080030cb
 8002e88:	08002ebf 	.word	0x08002ebf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e8c:	4b94      	ldr	r3, [pc, #592]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e98:	4b91      	ldr	r3, [pc, #580]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	08db      	lsrs	r3, r3, #3
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	4a90      	ldr	r2, [pc, #576]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002eaa:	e111      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eac:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eae:	61bb      	str	r3, [r7, #24]
    break;
 8002eb0:	e10e      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002eb2:	4b8d      	ldr	r3, [pc, #564]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eb4:	61bb      	str	r3, [r7, #24]
    break;
 8002eb6:	e10b      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002eb8:	4b8c      	ldr	r3, [pc, #560]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002eba:	61bb      	str	r3, [r7, #24]
    break;
 8002ebc:	e108      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ec8:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ed4:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ede:	4b80      	ldr	r3, [pc, #512]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	08db      	lsrs	r3, r3, #3
 8002ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80e1 	beq.w	80030c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f000 8083 	beq.w	8003010 <HAL_RCC_GetSysClockFreq+0x204>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f200 80a1 	bhi.w	8003054 <HAL_RCC_GetSysClockFreq+0x248>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x114>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d056      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f1e:	e099      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02d      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	08db      	lsrs	r3, r3, #3
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f56:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f86:	e087      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f92:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fca:	e065      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800300e:	e043      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a02 	vldr	s12, [r7, #8]
 8003036:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003052:	e021      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a02 	vldr	s12, [r7, #8]
 800307a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003096:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	0a5b      	lsrs	r3, r3, #9
 800309e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a2:	3301      	adds	r3, #1
 80030a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80030b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030bc:	ee17 3a90 	vmov	r3, s15
 80030c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030cc:	61bb      	str	r3, [r7, #24]
    break;
 80030ce:	bf00      	nop
  }

  return sysclockfreq;
 80030d0:	69bb      	ldr	r3, [r7, #24]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	58024400 	.word	0x58024400
 80030e4:	03d09000 	.word	0x03d09000
 80030e8:	003d0900 	.word	0x003d0900
 80030ec:	007a1200 	.word	0x007a1200
 80030f0:	46000000 	.word	0x46000000
 80030f4:	4c742400 	.word	0x4c742400
 80030f8:	4a742400 	.word	0x4a742400
 80030fc:	4af42400 	.word	0x4af42400

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003106:	f7ff fe81 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_GetHCLKFreq+0x50>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490f      	ldr	r1, [pc, #60]	; (8003154 <HAL_RCC_GetHCLKFreq+0x54>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_GetHCLKFreq+0x50>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_GetHCLKFreq+0x54>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <HAL_RCC_GetHCLKFreq+0x58>)
 800313c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <HAL_RCC_GetHCLKFreq+0x58>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	58024400 	.word	0x58024400
 8003154:	0800c7b4 	.word	0x0800c7b4
 8003158:	24000008 	.word	0x24000008
 800315c:	24000004 	.word	0x24000004

08003160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003164:	f7ff ffcc 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	58024400 	.word	0x58024400
 8003188:	0800c7b4 	.word	0x0800c7b4

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003190:	f7ff ffb6 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	58024400 	.word	0x58024400
 80031b4:	0800c7b4 	.word	0x0800c7b4

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d03f      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031dc:	d02a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e2:	d824      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e8:	d018      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ee:	d81e      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f8:	d007      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031fa:	e018      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fc:	4bab      	ldr	r3, [pc, #684]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4aaa      	ldr	r2, [pc, #680]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003208:	e015      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f001 feff 	bl	8005014 <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800321a:	e00c      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f001 ffa8 	bl	8005178 <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
      break;
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800323c:	4b9b      	ldr	r3, [pc, #620]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	4998      	ldr	r1, [pc, #608]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	650b      	str	r3, [r1, #80]	; 0x50
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d03d      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	2b04      	cmp	r3, #4
 8003266:	d826      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003285 	.word	0x08003285
 8003274:	08003293 	.word	0x08003293
 8003278:	080032a5 	.word	0x080032a5
 800327c:	080032bd 	.word	0x080032bd
 8003280:	080032bd 	.word	0x080032bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003284:	4b89      	ldr	r3, [pc, #548]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4a88      	ldr	r2, [pc, #544]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003290:	e015      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f001 febb 	bl	8005014 <RCCEx_PLL2_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032a2:	e00c      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 ff64 	bl	8005178 <RCCEx_PLL3_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032b4:	e003      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
      break;
 80032ba:	e000      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c4:	4b79      	ldr	r3, [pc, #484]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	f023 0207 	bic.w	r2, r3, #7
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	4976      	ldr	r1, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	650b      	str	r3, [r1, #80]	; 0x50
 80032d6:	e001      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d051      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80032f2:	d036      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032f4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80032f8:	d830      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80032fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032fe:	d032      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003304:	d82a      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003306:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800330a:	d02e      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800330c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003310:	d824      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003316:	d018      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d81e      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003326:	d007      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003328:	e018      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332a:	4b60      	ldr	r3, [pc, #384]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4a5f      	ldr	r2, [pc, #380]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003336:	e019      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fe68 	bl	8005014 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003348:	e010      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3324      	adds	r3, #36	; 0x24
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f001 ff11 	bl	8005178 <RCCEx_PLL3_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800335a:	e007      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
      break;
 8003360:	e004      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800336a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003380:	494a      	ldr	r1, [pc, #296]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	658b      	str	r3, [r1, #88]	; 0x58
 8003386:	e001      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d051      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800339e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033a2:	d036      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80033a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033a8:	d830      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80033aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ae:	d032      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80033b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b4:	d82a      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80033b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ba:	d02e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80033bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033c0:	d824      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80033c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c6:	d018      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x242>
 80033c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033cc:	d81e      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x222>
 80033d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d6:	d007      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80033d8:	e018      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033da:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	4a33      	ldr	r2, [pc, #204]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033e6:	e019      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fe10 	bl	8005014 <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033f8:	e010      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3324      	adds	r3, #36	; 0x24
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f001 feb9 	bl	8005178 <RCCEx_PLL3_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800340a:	e007      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	75fb      	strb	r3, [r7, #23]
      break;
 8003410:	e004      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003430:	491e      	ldr	r1, [pc, #120]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	658b      	str	r3, [r1, #88]	; 0x58
 8003436:	e001      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d035      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d01c      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d817      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d00c      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d813      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d016      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003460:	2b10      	cmp	r3, #16
 8003462:	d10f      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003470:	e00e      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f001 fdcb 	bl	8005014 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003482:	e005      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
      break;
 8003488:	e002      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800348e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	4902      	ldr	r1, [pc, #8]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034a8:	e004      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80034aa:	bf00      	nop
 80034ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d047      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c8:	d030      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80034ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ce:	d82a      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034d4:	d02c      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80034d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034da:	d824      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e0:	d018      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e6:	d81e      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d007      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034f2:	e018      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4bac      	ldr	r3, [pc, #688]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4aab      	ldr	r2, [pc, #684]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003500:	e017      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fd83 	bl	8005014 <RCCEx_PLL2_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003512:	e00e      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fe2c 	bl	8005178 <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003524:	e005      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003538:	4b9b      	ldr	r3, [pc, #620]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4998      	ldr	r1, [pc, #608]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	650b      	str	r3, [r1, #80]	; 0x50
 800354a:	e001      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d049      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d02e      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356a:	d828      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x406>
 800356c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003570:	d02a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003576:	d822      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800357c:	d026      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800357e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003582:	d81c      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003588:	d010      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800358a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358e:	d816      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d111      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fd37 	bl	8005014 <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035aa:	e012      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fde0 	bl	8005178 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035bc:	e009      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
      break;
 80035c2:	e006      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80035c4:	bf00      	nop
 80035c6:	e004      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80035c8:	bf00      	nop
 80035ca:	e002      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80035d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035d8:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	4970      	ldr	r1, [pc, #448]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	650b      	str	r3, [r1, #80]	; 0x50
 80035ea:	e001      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d04b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003606:	d02e      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800360c:	d828      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d02a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d822      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800361a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800361e:	d026      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003624:	d81c      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362a:	d010      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003630:	d816      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01d      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363a:	d111      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fce6 	bl	8005014 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800364c:	e012      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fd8f 	bl	8005178 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800365e:	e009      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e006      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003666:	bf00      	nop
 8003668:	e004      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800367a:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003688:	4947      	ldr	r1, [pc, #284]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	658b      	str	r3, [r1, #88]	; 0x58
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02f      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d00e      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80036aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ae:	d814      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x522>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80036b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b8:	d10f      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a3a      	ldr	r2, [pc, #232]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036c6:	e00c      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fca0 	bl	8005014 <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f4:	492c      	ldr	r1, [pc, #176]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	650b      	str	r3, [r1, #80]	; 0x50
 80036fa:	e001      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d032      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	2b03      	cmp	r3, #3
 8003712:	d81b      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003753 	.word	0x08003753
 8003720:	0800372d 	.word	0x0800372d
 8003724:	0800373b 	.word	0x0800373b
 8003728:	08003753 	.word	0x08003753
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003738:	e00c      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fc67 	bl	8005014 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800374a:	e003      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
      break;
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	4910      	ldr	r1, [pc, #64]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800376c:	e001      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 808a 	beq.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800378c:	f7fd ffe2 	bl	8001754 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003792:	e00d      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fd ffde 	bl	8001754 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d906      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	75fb      	strb	r3, [r7, #23]
        break;
 80037a6:	e009      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80037a8:	58024400 	.word	0x58024400
 80037ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b0:	4bb9      	ldr	r3, [pc, #740]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0eb      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d166      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037c2:	4bb6      	ldr	r3, [pc, #728]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037cc:	4053      	eors	r3, r2
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d6:	4bb1      	ldr	r3, [pc, #708]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e0:	4bae      	ldr	r3, [pc, #696]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4aad      	ldr	r2, [pc, #692]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ec:	4bab      	ldr	r3, [pc, #684]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4aaa      	ldr	r2, [pc, #680]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037f8:	4aa8      	ldr	r2, [pc, #672]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003808:	d115      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd ffa3 	bl	8001754 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003810:	e00b      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fd ff9f 	bl	8001754 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d902      	bls.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	75fb      	strb	r3, [r7, #23]
            break;
 8003828:	e005      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800382a:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ed      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d126      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384a:	d10d      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800384c:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800385a:	0919      	lsrs	r1, r3, #4
 800385c:	4b90      	ldr	r3, [pc, #576]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800385e:	400b      	ands	r3, r1
 8003860:	498e      	ldr	r1, [pc, #568]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003868:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4a8b      	ldr	r2, [pc, #556]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800386e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003872:	6113      	str	r3, [r2, #16]
 8003874:	4b89      	ldr	r3, [pc, #548]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800387e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003882:	4986      	ldr	r1, [pc, #536]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003884:	4313      	orrs	r3, r2
 8003886:	670b      	str	r3, [r1, #112]	; 0x70
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	75bb      	strb	r3, [r7, #22]
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d07e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	2b28      	cmp	r3, #40	; 0x28
 80038a6:	d867      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	0800397f 	.word	0x0800397f
 80038b4:	08003979 	.word	0x08003979
 80038b8:	08003979 	.word	0x08003979
 80038bc:	08003979 	.word	0x08003979
 80038c0:	08003979 	.word	0x08003979
 80038c4:	08003979 	.word	0x08003979
 80038c8:	08003979 	.word	0x08003979
 80038cc:	08003979 	.word	0x08003979
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003979 	.word	0x08003979
 80038d8:	08003979 	.word	0x08003979
 80038dc:	08003979 	.word	0x08003979
 80038e0:	08003979 	.word	0x08003979
 80038e4:	08003979 	.word	0x08003979
 80038e8:	08003979 	.word	0x08003979
 80038ec:	08003979 	.word	0x08003979
 80038f0:	08003967 	.word	0x08003967
 80038f4:	08003979 	.word	0x08003979
 80038f8:	08003979 	.word	0x08003979
 80038fc:	08003979 	.word	0x08003979
 8003900:	08003979 	.word	0x08003979
 8003904:	08003979 	.word	0x08003979
 8003908:	08003979 	.word	0x08003979
 800390c:	08003979 	.word	0x08003979
 8003910:	0800397f 	.word	0x0800397f
 8003914:	08003979 	.word	0x08003979
 8003918:	08003979 	.word	0x08003979
 800391c:	08003979 	.word	0x08003979
 8003920:	08003979 	.word	0x08003979
 8003924:	08003979 	.word	0x08003979
 8003928:	08003979 	.word	0x08003979
 800392c:	08003979 	.word	0x08003979
 8003930:	0800397f 	.word	0x0800397f
 8003934:	08003979 	.word	0x08003979
 8003938:	08003979 	.word	0x08003979
 800393c:	08003979 	.word	0x08003979
 8003940:	08003979 	.word	0x08003979
 8003944:	08003979 	.word	0x08003979
 8003948:	08003979 	.word	0x08003979
 800394c:	08003979 	.word	0x08003979
 8003950:	0800397f 	.word	0x0800397f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fb5a 	bl	8005014 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003964:	e00c      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fc03 	bl	8005178 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800397e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003986:	4b45      	ldr	r3, [pc, #276]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003992:	4942      	ldr	r1, [pc, #264]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	654b      	str	r3, [r1, #84]	; 0x54
 8003998:	e001      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d037      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d820      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039fb 	.word	0x080039fb
 80039bc:	080039d1 	.word	0x080039d1
 80039c0:	080039e3 	.word	0x080039e3
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fb1c 	bl	8005014 <RCCEx_PLL2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039e0:	e00c      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fbc5 	bl	8005178 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80039fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4923      	ldr	r1, [pc, #140]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	654b      	str	r3, [r1, #84]	; 0x54
 8003a14:	e001      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d040      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d821      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a7b 	.word	0x08003a7b
 8003a3c:	08003a51 	.word	0x08003a51
 8003a40:	08003a63 	.word	0x08003a63
 8003a44:	08003a7b 	.word	0x08003a7b
 8003a48:	08003a7b 	.word	0x08003a7b
 8003a4c:	08003a7b 	.word	0x08003a7b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fadc 	bl	8005014 <RCCEx_PLL2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a60:	e00c      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3324      	adds	r3, #36	; 0x24
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fb85 	bl	8005178 <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	75fb      	strb	r3, [r7, #23]
      break;
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d110      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	f023 0207 	bic.w	r2, r3, #7
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a90:	4902      	ldr	r1, [pc, #8]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	658b      	str	r3, [r1, #88]	; 0x58
 8003a96:	e007      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003a98:	58024800 	.word	0x58024800
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d04b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003abe:	d02e      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac4:	d828      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d02a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d822      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad6:	d026      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003adc:	d81c      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d816      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01d      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d111      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fa8a 	bl	8005014 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b04:	e012      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3324      	adds	r3, #36	; 0x24
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fb33 	bl	8005178 <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b16:	e009      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	e006      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4bb2      	ldr	r3, [pc, #712]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	49ae      	ldr	r1, [pc, #696]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	654b      	str	r3, [r1, #84]	; 0x54
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b62:	d02e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003b64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b68:	d828      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d02a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d822      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b7a:	d026      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b80:	d81c      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b86:	d010      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8c:	d816      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01d      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d111      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fa38 	bl	8005014 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e012      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fae1 	bl	8005178 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003bba:	e009      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	4985      	ldr	r1, [pc, #532]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d04b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c06:	d02e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003c08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d02a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003c1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003c20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c24:	d81c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c30:	d816      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3a:	d111      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 f9e6 	bl	8005014 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e012      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 fa8f 	bl	8005178 <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e009      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c7a:	4b60      	ldr	r3, [pc, #384]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c88:	495c      	ldr	r1, [pc, #368]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c8e:	e001      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d018      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3324      	adds	r3, #36	; 0x24
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fa61 	bl	8005178 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003cc0:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	494b      	ldr	r1, [pc, #300]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce8:	d10a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fa41 	bl	8005178 <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d00:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	493b      	ldr	r1, [pc, #236]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d034      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d2a:	d01d      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d30:	d817      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d009      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d3c:	e011      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f965 	bl	8005014 <RCCEx_PLL2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d4e:	e00c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3324      	adds	r3, #36	; 0x24
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fa0e 	bl	8005178 <RCCEx_PLL3_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d70:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d7e:	491f      	ldr	r1, [pc, #124]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	658b      	str	r3, [r1, #88]	; 0x58
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d036      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003da0:	d01c      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003da2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003da6:	d816      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003db2:	d007      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dc2:	e00c      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3324      	adds	r3, #36	; 0x24
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 f9d4 	bl	8005178 <RCCEx_PLL3_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df2:	4902      	ldr	r1, [pc, #8]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	654b      	str	r3, [r1, #84]	; 0x54
 8003df8:	e004      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d029      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003e1e:	e00f      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a60      	ldr	r2, [pc, #384]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 f8ed 	bl	8005014 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e4c:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e58:	4953      	ldr	r1, [pc, #332]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e5e:	e001      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3324      	adds	r3, #36	; 0x24
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f97e 	bl	8005178 <RCCEx_PLL3_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d030      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9a:	d017      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea0:	d811      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eac:	d80b      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ec4:	e007      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eca:	e004      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003ecc:	bf00      	nop
 8003ece:	e002      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003ed0:	bf00      	nop
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003edc:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee8:	492f      	ldr	r1, [pc, #188]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	654b      	str	r3, [r1, #84]	; 0x54
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f00:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0c:	4926      	ldr	r1, [pc, #152]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2a:	491f      	ldr	r1, [pc, #124]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f46:	6113      	str	r3, [r2, #16]
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f52:	4915      	ldr	r1, [pc, #84]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da08      	bge.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	490e      	ldr	r1, [pc, #56]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8c:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f92:	7dbb      	ldrb	r3, [r7, #22]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	58024400 	.word	0x58024400

08003fac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b090      	sub	sp, #64	; 0x40
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fba:	f040 8089 	bne.w	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003fbe:	4b95      	ldr	r3, [pc, #596]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d87d      	bhi.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	08004031 	.word	0x08004031
 8003fe0:	080040c5 	.word	0x080040c5
 8003fe4:	08004055 	.word	0x08004055

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fe8:	4b8a      	ldr	r3, [pc, #552]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff4:	d107      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 feb8 	bl	8004d70 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004004:	e3ed      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800400a:	e3ea      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800400c:	4b81      	ldr	r3, [pc, #516]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d107      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800401a:	f107 0318 	add.w	r3, r7, #24
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fbfe 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004028:	e3db      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800402e:	e3d8      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004030:	4b78      	ldr	r3, [pc, #480]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403c:	d107      	bne.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800403e:	f107 030c 	add.w	r3, r7, #12
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fd40 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800404c:	e3c9      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004052:	e3c6      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004054:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800405c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800405e:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b04      	cmp	r3, #4
 8004068:	d10c      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	4a67      	ldr	r2, [pc, #412]	; (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004082:	e01e      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004084:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d106      	bne.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004098:	d102      	bne.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800409a:	4b60      	ldr	r3, [pc, #384]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	e010      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040a0:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ac:	d106      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b4:	d102      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80040b6:	4b5a      	ldr	r3, [pc, #360]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ba:	e002      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80040c0:	e38f      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80040c2:	e38e      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80040c4:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040c8:	e38b      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040ce:	e388      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	f040 80a7 	bne.w	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80040da:	4b4e      	ldr	r3, [pc, #312]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ea:	d054      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040f2:	f200 808b 	bhi.w	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fc:	f000 8083 	beq.w	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004106:	f200 8081 	bhi.w	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004110:	d02f      	beq.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004118:	d878      	bhi.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004126:	d012      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004128:	e070      	b.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800412a:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004136:	d107      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fe17 	bl	8004d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004146:	e34c      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800414c:	e349      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d107      	bne.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800415c:	f107 0318 	add.w	r3, r7, #24
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fb5d 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800416a:	e33a      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004170:	e337      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800417a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417e:	d107      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004180:	f107 030c 	add.w	r3, r7, #12
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fc9f 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800418e:	e328      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004194:	e325      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004196:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800419e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c4:	e01e      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d106      	bne.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041da:	d102      	bne.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e0:	e010      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ee:	d106      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80041f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f6:	d102      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004202:	e2ee      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004204:	e2ed      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800420a:	e2ea      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004210:	e2e7      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	03d09000 	.word	0x03d09000
 800421c:	003d0900 	.word	0x003d0900
 8004220:	007a1200 	.word	0x007a1200
 8004224:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422e:	f040 809c 	bne.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004232:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800423a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004242:	d054      	beq.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800424a:	f200 808b 	bhi.w	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004254:	f000 8083 	beq.w	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800425e:	f200 8081 	bhi.w	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004268:	d02f      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004270:	d878      	bhi.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800427e:	d012      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004280:	e070      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004282:	4b8a      	ldr	r3, [pc, #552]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428e:	d107      	bne.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fd6b 	bl	8004d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800429e:	e2a0      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042a4:	e29d      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042a6:	4b81      	ldr	r3, [pc, #516]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d107      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042b4:	f107 0318 	add.w	r3, r7, #24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fab1 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80042c2:	e28e      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042c8:	e28b      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042ca:	4b78      	ldr	r3, [pc, #480]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d6:	d107      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042d8:	f107 030c 	add.w	r3, r7, #12
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fbf3 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80042e6:	e27c      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042ec:	e279      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80042ee:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80042f8:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d10c      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800430a:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	4a66      	ldr	r2, [pc, #408]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004316:	fa22 f303 	lsr.w	r3, r2, r3
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800431c:	e01e      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d106      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004332:	d102      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004334:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004338:	e010      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800433a:	4b5c      	ldr	r3, [pc, #368]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004346:	d106      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800434e:	d102      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004354:	e002      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800435a:	e242      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800435c:	e241      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800435e:	4b57      	ldr	r3, [pc, #348]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004362:	e23e      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004368:	e23b      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	f040 80a6 	bne.w	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004374:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800437c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004384:	d054      	beq.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438c:	f200 808b 	bhi.w	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004396:	f000 8083 	beq.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a0:	f200 8081 	bhi.w	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	d02f      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	d878      	bhi.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d012      	beq.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80043c2:	e070      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043c4:	4b39      	ldr	r3, [pc, #228]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d0:	d107      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fcca 	bl	8004d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80043e0:	e1ff      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043e6:	e1fc      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043e8:	4b30      	ldr	r3, [pc, #192]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f4:	d107      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043f6:	f107 0318 	add.w	r3, r7, #24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa10 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004404:	e1ed      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800440a:	e1ea      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800440c:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d107      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fb52 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004428:	e1db      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800442e:	e1d8      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004430:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004438:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800443a:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d10c      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	08db      	lsrs	r3, r3, #3
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445e:	e01e      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446c:	d106      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004474:	d102      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447a:	e010      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004488:	d106      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004490:	d102      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004496:	e002      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800449c:	e1a1      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800449e:	e1a0      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044a4:	e19d      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044aa:	e19a      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80044ac:	58024400 	.word	0x58024400
 80044b0:	03d09000 	.word	0x03d09000
 80044b4:	003d0900 	.word	0x003d0900
 80044b8:	007a1200 	.word	0x007a1200
 80044bc:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044c6:	d173      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80044c8:	4b9a      	ldr	r3, [pc, #616]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d8:	d02f      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e0:	d863      	bhi.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ee:	d012      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80044f0:	e05b      	b.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044f2:	4b90      	ldr	r3, [pc, #576]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fe:	d107      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004500:	f107 0318 	add.w	r3, r7, #24
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f98b 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800450e:	e168      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004514:	e165      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004516:	4b87      	ldr	r3, [pc, #540]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004522:	d107      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4618      	mov	r0, r3
 800452a:	f000 facd 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004532:	e156      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004538:	e153      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800453a:	4b7e      	ldr	r3, [pc, #504]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004542:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004544:	4b7b      	ldr	r3, [pc, #492]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d10c      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004556:	4b77      	ldr	r3, [pc, #476]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	08db      	lsrs	r3, r3, #3
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	4a75      	ldr	r2, [pc, #468]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004568:	e01e      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004576:	d106      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800457e:	d102      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004580:	4b6e      	ldr	r3, [pc, #440]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004584:	e010      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004592:	d106      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459a:	d102      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800459c:	4b68      	ldr	r3, [pc, #416]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80045a6:	e11c      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80045a8:	e11b      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045ae:	e118      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d133      	bne.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80045ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ce:	d012      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80045d0:	e023      	b.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045d2:	4b58      	ldr	r3, [pc, #352]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045de:	d107      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fbc3 	bl	8004d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80045ee:	e0f8      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045f4:	e0f5      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045f6:	4b4f      	ldr	r3, [pc, #316]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004602:	d107      	bne.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004604:	f107 0318 	add.w	r3, r7, #24
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f909 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004612:	e0e6      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004618:	e0e3      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800461e:	e0e0      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004626:	f040 808d 	bne.w	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800463a:	d06b      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004642:	d874      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d056      	beq.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d86c      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800465a:	d03b      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004662:	d864      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466a:	d021      	beq.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004672:	d85c      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004680:	d004      	beq.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004682:	e054      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004684:	f000 f8b6 	bl	80047f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004688:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800468a:	e0aa      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800468c:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004698:	d107      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800469a:	f107 0318 	add.w	r3, r7, #24
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f8be 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80046a8:	e09b      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046ae:	e098      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046bc:	d107      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046be:	f107 030c 	add.w	r3, r7, #12
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa00 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80046cc:	e089      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046d2:	e086      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046d4:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d109      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80046f2:	e076      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046f8:	e073      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004706:	d102      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800470c:	e069      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004712:	e066      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004720:	d102      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004726:	e05c      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800472c:	e059      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004732:	e056      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004734:	58024400 	.word	0x58024400
 8004738:	03d09000 	.word	0x03d09000
 800473c:	003d0900 	.word	0x003d0900
 8004740:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474a:	d148      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004754:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475c:	d02a      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004764:	d838      	bhi.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d00d      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004774:	e030      	b.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004782:	d102      	bne.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004788:	e02b      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800478e:	e028      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800479c:	d107      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800479e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fae4 	bl	8004d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80047ac:	e019      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047b2:	e016      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c0:	d107      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047c2:	f107 0318 	add.w	r3, r7, #24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f82a 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80047d0:	e007      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047d6:	e004      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047dc:	e001      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3740      	adds	r7, #64	; 0x40
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	58024400 	.word	0x58024400
 80047f0:	007a1200 	.word	0x007a1200

080047f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047f8:	f7fe fc82 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4904      	ldr	r1, [pc, #16]	; (800481c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	58024400 	.word	0x58024400
 800481c:	0800c7b4 	.word	0x0800c7b4

08004820 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	; 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004828:	4ba1      	ldr	r3, [pc, #644]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004832:	4b9f      	ldr	r3, [pc, #636]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	0b1b      	lsrs	r3, r3, #12
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800483e:	4b9c      	ldr	r3, [pc, #624]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800484a:	4b99      	ldr	r3, [pc, #612]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8111 	beq.w	8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b02      	cmp	r3, #2
 8004872:	f000 8083 	beq.w	800497c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b02      	cmp	r3, #2
 800487a:	f200 80a1 	bhi.w	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d056      	beq.n	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800488a:	e099      	b.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800488c:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02d      	beq.n	80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004898:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	4a84      	ldr	r2, [pc, #528]	; (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c2:	4b7b      	ldr	r3, [pc, #492]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048f2:	e087      	b.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004906:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	ed97 6a03 	vldr	s12, [r7, #12]
 800491a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004936:	e065      	b.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a03 	vldr	s12, [r7, #12]
 800495e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800497a:	e043      	b.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b48      	ldr	r3, [pc, #288]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049be:	e021      	b.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004a04:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	0a5b      	lsrs	r3, r3, #9
 8004a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2a:	ee17 2a90 	vmov	r2, s15
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a32:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a58:	ee17 2a90 	vmov	r2, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	0e1b      	lsrs	r3, r3, #24
 8004a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a86:	ee17 2a90 	vmov	r2, s15
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	bf00      	nop
 8004aa4:	3724      	adds	r7, #36	; 0x24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	03d09000 	.word	0x03d09000
 8004ab8:	46000000 	.word	0x46000000
 8004abc:	4c742400 	.word	0x4c742400
 8004ac0:	4a742400 	.word	0x4a742400
 8004ac4:	4af42400 	.word	0x4af42400

08004ac8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ad0:	4ba1      	ldr	r3, [pc, #644]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ada:	4b9f      	ldr	r3, [pc, #636]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	0d1b      	lsrs	r3, r3, #20
 8004ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ae6:	4b9c      	ldr	r3, [pc, #624]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004af2:	4b99      	ldr	r3, [pc, #612]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	08db      	lsrs	r3, r3, #3
 8004af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8111 	beq.w	8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	f000 8083 	beq.w	8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	f200 80a1 	bhi.w	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d056      	beq.n	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b32:	e099      	b.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b34:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02d      	beq.n	8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b40:	4b85      	ldr	r3, [pc, #532]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	08db      	lsrs	r3, r3, #3
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	4a84      	ldr	r2, [pc, #528]	; (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6a:	4b7b      	ldr	r3, [pc, #492]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b9a:	e087      	b.n	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b6a      	ldr	r3, [pc, #424]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bde:	e065      	b.n	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf2:	4b59      	ldr	r3, [pc, #356]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c22:	e043      	b.n	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b48      	ldr	r3, [pc, #288]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c66:	e021      	b.n	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004caa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	0a5b      	lsrs	r3, r3, #9
 8004cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd2:	ee17 2a90 	vmov	r2, s15
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	0c1b      	lsrs	r3, r3, #16
 8004ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d00:	ee17 2a90 	vmov	r2, s15
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2e:	ee17 2a90 	vmov	r2, s15
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d36:	e008      	b.n	8004d4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
}
 8004d4a:	bf00      	nop
 8004d4c:	3724      	adds	r7, #36	; 0x24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	03d09000 	.word	0x03d09000
 8004d60:	46000000 	.word	0x46000000
 8004d64:	4c742400 	.word	0x4c742400
 8004d68:	4a742400 	.word	0x4a742400
 8004d6c:	4af42400 	.word	0x4af42400

08004d70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d78:	4ba0      	ldr	r3, [pc, #640]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004d82:	4b9e      	ldr	r3, [pc, #632]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004d8e:	4b9b      	ldr	r3, [pc, #620]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d98:	4b98      	ldr	r3, [pc, #608]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8111 	beq.w	8004fde <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	f000 8083 	beq.w	8004eca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	f200 80a1 	bhi.w	8004f0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d056      	beq.n	8004e86 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004dd8:	e099      	b.n	8004f0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dda:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d02d      	beq.n	8004e42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004de6:	4b85      	ldr	r3, [pc, #532]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	4a83      	ldr	r2, [pc, #524]	; (8005000 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e10:	4b7a      	ldr	r3, [pc, #488]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e18:	ee07 3a90 	vmov	s15, r3
 8004e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e20:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e24:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e40:	e087      	b.n	8004f52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005008 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e54:	4b69      	ldr	r3, [pc, #420]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e64:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e68:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e84:	e065      	b.n	8004f52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800500c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e98:	4b58      	ldr	r3, [pc, #352]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec8:	e043      	b.n	8004f52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005010 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004edc:	4b47      	ldr	r3, [pc, #284]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eec:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f0c:	e021      	b.n	8004f52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005008 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f20:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f30:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004f52:	4b2a      	ldr	r3, [pc, #168]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f78:	ee17 2a90 	vmov	r2, s15
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa6:	ee17 2a90 	vmov	r2, s15
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	0e1b      	lsrs	r3, r3, #24
 8004fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd4:	ee17 2a90 	vmov	r2, s15
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	3724      	adds	r7, #36	; 0x24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	58024400 	.word	0x58024400
 8005000:	03d09000 	.word	0x03d09000
 8005004:	46000000 	.word	0x46000000
 8005008:	4c742400 	.word	0x4c742400
 800500c:	4a742400 	.word	0x4a742400
 8005010:	4af42400 	.word	0x4af42400

08005014 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005022:	4b53      	ldr	r3, [pc, #332]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d101      	bne.n	8005032 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e099      	b.n	8005166 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005032:	4b4f      	ldr	r3, [pc, #316]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4e      	ldr	r2, [pc, #312]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc fb89 	bl	8001754 <HAL_GetTick>
 8005042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005044:	e008      	b.n	8005058 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005046:	f7fc fb85 	bl	8001754 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e086      	b.n	8005166 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005058:	4b45      	ldr	r3, [pc, #276]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005064:	4b42      	ldr	r3, [pc, #264]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	493f      	ldr	r1, [pc, #252]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	628b      	str	r3, [r1, #40]	; 0x28
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	3b01      	subs	r3, #1
 800507e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	3b01      	subs	r3, #1
 8005088:	025b      	lsls	r3, r3, #9
 800508a:	b29b      	uxth	r3, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	3b01      	subs	r3, #1
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050a8:	4931      	ldr	r1, [pc, #196]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050ae:	4b30      	ldr	r3, [pc, #192]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	492d      	ldr	r1, [pc, #180]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050c0:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	f023 0220 	bic.w	r2, r3, #32
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	4928      	ldr	r1, [pc, #160]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050d2:	4b27      	ldr	r3, [pc, #156]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4a26      	ldr	r2, [pc, #152]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	f023 0310 	bic.w	r3, r3, #16
 80050dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <RCCEx_PLL2_Config+0x160>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	69d2      	ldr	r2, [r2, #28]
 80050ea:	00d2      	lsls	r2, r2, #3
 80050ec:	4920      	ldr	r1, [pc, #128]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050f2:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	f043 0310 	orr.w	r3, r3, #16
 80050fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005104:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 800510a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005110:	e00f      	b.n	8005132 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005118:	4b15      	ldr	r3, [pc, #84]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	4a14      	ldr	r2, [pc, #80]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 800511e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005124:	e005      	b.n	8005132 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	4a11      	ldr	r2, [pc, #68]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 800512c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005130:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a0e      	ldr	r2, [pc, #56]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 8005138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800513c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513e:	f7fc fb09 	bl	8001754 <HAL_GetTick>
 8005142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005144:	e008      	b.n	8005158 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005146:	f7fc fb05 	bl	8001754 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e006      	b.n	8005166 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <RCCEx_PLL2_Config+0x15c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
 8005174:	ffff0007 	.word	0xffff0007

08005178 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005186:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d101      	bne.n	8005196 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e099      	b.n	80052ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005196:	4b4f      	ldr	r3, [pc, #316]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a4e      	ldr	r2, [pc, #312]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800519c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fc fad7 	bl	8001754 <HAL_GetTick>
 80051a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051a8:	e008      	b.n	80051bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051aa:	f7fc fad3 	bl	8001754 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e086      	b.n	80052ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051bc:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	051b      	lsls	r3, r3, #20
 80051d6:	493f      	ldr	r1, [pc, #252]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	628b      	str	r3, [r1, #40]	; 0x28
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	025b      	lsls	r3, r3, #9
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	3b01      	subs	r3, #1
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800520c:	4931      	ldr	r1, [pc, #196]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005212:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	492d      	ldr	r1, [pc, #180]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005224:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	4928      	ldr	r1, [pc, #160]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800523c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005242:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <RCCEx_PLL3_Config+0x160>)
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	69d2      	ldr	r2, [r2, #28]
 800524e:	00d2      	lsls	r2, r2, #3
 8005250:	4920      	ldr	r1, [pc, #128]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005256:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800525c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005268:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800526e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005274:	e00f      	b.n	8005296 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005288:	e005      	b.n	8005296 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a2:	f7fc fa57 	bl	8001754 <HAL_GetTick>
 80052a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052a8:	e008      	b.n	80052bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052aa:	f7fc fa53 	bl	8001754 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e006      	b.n	80052ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <RCCEx_PLL3_Config+0x15c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	58024400 	.word	0x58024400
 80052d8:	ffff0007 	.word	0xffff0007

080052dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	; 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e075      	b.n	80053da <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fb ff7d 	bl	8001200 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2204      	movs	r2, #4
 800530a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f868 	bl	80053e4 <HAL_SD_InitCard>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e05d      	b.n	80053da <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 ff6f 	bl	8006208 <HAL_SD_GetCardStatus>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e052      	b.n	80053da <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005334:	7e3b      	ldrb	r3, [r7, #24]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800533a:	7e7b      	ldrb	r3, [r7, #25]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10a      	bne.n	800535e <HAL_SD_Init+0x82>
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_SD_Init+0x78>
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535a:	659a      	str	r2, [r3, #88]	; 0x58
 800535c:	e00b      	b.n	8005376 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	2b01      	cmp	r3, #1
 8005364:	d104      	bne.n	8005370 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800536c:	659a      	str	r2, [r3, #88]	; 0x58
 800536e:	e002      	b.n	8005376 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f82d 	bl	80063dc <HAL_SD_ConfigWideBusOperation>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e026      	b.n	80053da <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800538c:	f7fc f9e2 	bl	8001754 <HAL_GetTick>
 8005390:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005392:	e011      	b.n	80053b8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005394:	f7fc f9de 	bl	8001754 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d109      	bne.n	80053b8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e010      	b.n	80053da <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 f921 	bl	8006600 <HAL_SD_GetCardState>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d1e7      	bne.n	8005394 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3728      	adds	r7, #40	; 0x28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b08d      	sub	sp, #52	; 0x34
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005400:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005404:	f7fe fdd2 	bl	8003fac <HAL_RCCEx_GetPeriphCLKFreq>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800541e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e06a      	b.n	80054fa <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	4a36      	ldr	r2, [pc, #216]	; (8005504 <HAL_SD_InitCard+0x120>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	466a      	mov	r2, sp
 8005438:	f107 0318 	add.w	r3, r7, #24
 800543c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005440:	e882 0003 	stmia.w	r2, {r0, r1}
 8005444:	f107 030c 	add.w	r3, r7, #12
 8005448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800544a:	4620      	mov	r0, r4
 800544c:	f003 fbca 	bl	8008be4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f003 fc0d 	bl	8008c74 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005466:	4a28      	ldr	r2, [pc, #160]	; (8005508 <HAL_SD_InitCard+0x124>)
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	3301      	adds	r3, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f7fc f97b 	bl	800176c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f9b0 	bl	80067dc <SD_PowerON>
 800547c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e02e      	b.n	80054fa <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 f8cf 	bl	8006640 <SD_InitCard>
 80054a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e01b      	b.n	80054fa <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054ca:	4618      	mov	r0, r3
 80054cc:	f003 fc68 	bl	8008da0 <SDMMC_CmdBlockLength>
 80054d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0b      	ldr	r2, [pc, #44]	; (800550c <HAL_SD_InitCard+0x128>)
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	372c      	adds	r7, #44	; 0x2c
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	014f8b59 	.word	0x014f8b59
 8005508:	00012110 	.word	0x00012110
 800550c:	1fe00fff 	.word	0x1fe00fff

08005510 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b092      	sub	sp, #72	; 0x48
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800551e:	f7fc f919 	bl	8001754 <HAL_GetTick>
 8005522:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e167      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	f040 815a 	bne.w	8005804 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	441a      	add	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005560:	429a      	cmp	r2, r3
 8005562:	d907      	bls.n	8005574 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005568:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e14e      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2203      	movs	r2, #3
 8005578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	2b01      	cmp	r3, #1
 800558a:	d002      	beq.n	8005592 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	025b      	lsls	r3, r3, #9
 800559c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800559e:	2390      	movs	r3, #144	; 0x90
 80055a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80055a2:	2302      	movs	r3, #2
 80055a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f107 0214 	add.w	r2, r7, #20
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f003 fbc5 	bl	8008d48 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055cc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d90a      	bls.n	80055ea <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2202      	movs	r2, #2
 80055d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e0:	4618      	mov	r0, r3
 80055e2:	f003 fc23 	bl	8008e2c <SDMMC_CmdReadMultiBlock>
 80055e6:	6478      	str	r0, [r7, #68]	; 0x44
 80055e8:	e009      	b.n	80055fe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055f6:	4618      	mov	r0, r3
 80055f8:	f003 fbf5 	bl	8008de6 <SDMMC_CmdReadSingleBlock>
 80055fc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80055fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a84      	ldr	r2, [pc, #528]	; (800581c <HAL_SD_ReadBlocks+0x30c>)
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005612:	431a      	orrs	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0f3      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800562e:	e058      	b.n	80056e2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d033      	beq.n	80056a6 <HAL_SD_ReadBlocks+0x196>
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	2b1f      	cmp	r3, #31
 8005642:	d930      	bls.n	80056a6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005644:	2300      	movs	r3, #0
 8005646:	643b      	str	r3, [r7, #64]	; 0x40
 8005648:	e027      	b.n	800569a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f003 faf2 	bl	8008c38 <SDMMC_ReadFIFO>
 8005654:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	b2da      	uxtb	r2, r3
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800565e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005660:	3301      	adds	r3, #1
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	3301      	adds	r3, #1
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	3301      	adds	r3, #1
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	0e1b      	lsrs	r3, r3, #24
 8005688:	b2da      	uxtb	r2, r3
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	3301      	adds	r3, #1
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005696:	3301      	adds	r3, #1
 8005698:	643b      	str	r3, [r7, #64]	; 0x40
 800569a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569c:	2b07      	cmp	r3, #7
 800569e:	d9d4      	bls.n	800564a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	3b20      	subs	r3, #32
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80056a6:	f7fc f855 	bl	8001754 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d902      	bls.n	80056bc <HAL_SD_ReadBlocks+0x1ac>
 80056b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d112      	bne.n	80056e2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a56      	ldr	r2, [pc, #344]	; (800581c <HAL_SD_ReadBlocks+0x30c>)
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e097      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d09f      	beq.n	8005630 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d022      	beq.n	8005754 <HAL_SD_ReadBlocks+0x244>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d91f      	bls.n	8005754 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	2b03      	cmp	r3, #3
 800571a:	d01b      	beq.n	8005754 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f003 fbed 	bl	8008f00 <SDMMC_CmdStopTransfer>
 8005726:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572a:	2b00      	cmp	r3, #0
 800572c:	d012      	beq.n	8005754 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3a      	ldr	r2, [pc, #232]	; (800581c <HAL_SD_ReadBlocks+0x30c>)
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e05e      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d012      	beq.n	8005788 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2d      	ldr	r2, [pc, #180]	; (800581c <HAL_SD_ReadBlocks+0x30c>)
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	f043 0208 	orr.w	r2, r3, #8
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e044      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d012      	beq.n	80057bc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a20      	ldr	r2, [pc, #128]	; (800581c <HAL_SD_ReadBlocks+0x30c>)
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f043 0202 	orr.w	r2, r3, #2
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e02a      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d012      	beq.n	80057f0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <HAL_SD_ReadBlocks+0x30c>)
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	f043 0220 	orr.w	r2, r3, #32
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e010      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <HAL_SD_ReadBlocks+0x310>)
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e006      	b.n	8005812 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3748      	adds	r7, #72	; 0x48
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	1fe00fff 	.word	0x1fe00fff
 8005820:	18000f3a 	.word	0x18000f3a

08005824 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b092      	sub	sp, #72	; 0x48
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005832:	f7fb ff8f 	bl	8001754 <HAL_GetTick>
 8005836:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e16b      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	f040 815e 	bne.w	8005b20 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800586a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	429a      	cmp	r2, r3
 8005876:	d907      	bls.n	8005888 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e152      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2203      	movs	r2, #3
 800588c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2200      	movs	r2, #0
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	2b01      	cmp	r3, #1
 800589e:	d002      	beq.n	80058a6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	025b      	lsls	r3, r3, #9
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80058b2:	2390      	movs	r3, #144	; 0x90
 80058b4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80058be:	2300      	movs	r3, #0
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f107 0218 	add.w	r2, r7, #24
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f003 fa3b 	bl	8008d48 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d90a      	bls.n	80058fe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058f4:	4618      	mov	r0, r3
 80058f6:	f003 fadf 	bl	8008eb8 <SDMMC_CmdWriteMultiBlock>
 80058fa:	6478      	str	r0, [r7, #68]	; 0x44
 80058fc:	e009      	b.n	8005912 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2210      	movs	r2, #16
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800590a:	4618      	mov	r0, r3
 800590c:	f003 fab1 	bl	8008e72 <SDMMC_CmdWriteSingleBlock>
 8005910:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a86      	ldr	r2, [pc, #536]	; (8005b38 <HAL_SD_WriteBlocks+0x314>)
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	431a      	orrs	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0f7      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005942:	e05c      	b.n	80059fe <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d037      	beq.n	80059c2 <HAL_SD_WriteBlocks+0x19e>
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	2b1f      	cmp	r3, #31
 8005956:	d934      	bls.n	80059c2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005958:	2300      	movs	r3, #0
 800595a:	643b      	str	r3, [r7, #64]	; 0x40
 800595c:	e02b      	b.n	80059b6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	3301      	adds	r3, #1
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	3301      	adds	r3, #1
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	041a      	lsls	r2, r3, #16
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	3301      	adds	r3, #1
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	061a      	lsls	r2, r3, #24
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	3301      	adds	r3, #1
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f107 0214 	add.w	r2, r7, #20
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f003 f951 	bl	8008c52 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80059b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b2:	3301      	adds	r3, #1
 80059b4:	643b      	str	r3, [r7, #64]	; 0x40
 80059b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	d9d0      	bls.n	800595e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80059bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059be:	3b20      	subs	r3, #32
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80059c2:	f7fb fec7 	bl	8001754 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d902      	bls.n	80059d8 <HAL_SD_WriteBlocks+0x1b4>
 80059d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d112      	bne.n	80059fe <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a56      	ldr	r2, [pc, #344]	; (8005b38 <HAL_SD_WriteBlocks+0x314>)
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e097      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a04:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d09b      	beq.n	8005944 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d022      	beq.n	8005a70 <HAL_SD_WriteBlocks+0x24c>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d91f      	bls.n	8005a70 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d01b      	beq.n	8005a70 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 fa5f 	bl	8008f00 <SDMMC_CmdStopTransfer>
 8005a42:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3a      	ldr	r2, [pc, #232]	; (8005b38 <HAL_SD_WriteBlocks+0x314>)
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e05e      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d012      	beq.n	8005aa4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <HAL_SD_WriteBlocks+0x314>)
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8a:	f043 0208 	orr.w	r2, r3, #8
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e044      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d012      	beq.n	8005ad8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <HAL_SD_WriteBlocks+0x314>)
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	f043 0202 	orr.w	r2, r3, #2
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e02a      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d012      	beq.n	8005b0c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <HAL_SD_WriteBlocks+0x314>)
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f043 0210 	orr.w	r2, r3, #16
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e010      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <HAL_SD_WriteBlocks+0x318>)
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e006      	b.n	8005b2e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3748      	adds	r7, #72	; 0x48
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	1fe00fff 	.word	0x1fe00fff
 8005b3c:	18000f3a 	.word	0x18000f3a

08005b40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_SD_IRQHandler+0x2e>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 f924 	bl	8006db4 <SD_Read_IT>
 8005b6c:	e19a      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80ac 	beq.w	8005cd6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b9d      	ldr	r3, [pc, #628]	; (8005e08 <HAL_SD_IRQHandler+0x2c8>)
 8005b94:	400b      	ands	r3, r1
 8005b96:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d038      	beq.n	8005c34 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <HAL_SD_IRQHandler+0x96>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d011      	beq.n	8005bfa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 f990 	bl	8008f00 <SDMMC_CmdStopTransfer>
 8005be0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f959 	bl	8005eac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a83      	ldr	r2, [pc, #524]	; (8005e0c <HAL_SD_IRQHandler+0x2cc>)
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_SD_IRQHandler+0xe4>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f003 fe4b 	bl	80098c0 <HAL_SD_RxCpltCallback>
 8005c2a:	e13b      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f003 fe3d 	bl	80098ac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c32:	e137      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8132 	beq.w	8005ea4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_SD_IRQHandler+0x12c>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d011      	beq.n	8005c90 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f003 f945 	bl	8008f00 <SDMMC_CmdStopTransfer>
 8005c76:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f90e 	bl	8005eac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <HAL_SD_IRQHandler+0x172>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f003 fdfa 	bl	80098ac <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <HAL_SD_IRQHandler+0x18e>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80eb 	beq.w	8005ea4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f003 fdf6 	bl	80098c0 <HAL_SD_RxCpltCallback>
}
 8005cd4:	e0e6      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_SD_IRQHandler+0x1b6>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 f8a6 	bl	8006e40 <SD_Write_IT>
 8005cf4:	e0d6      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80a2 	beq.w	8005e4a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	f043 0202 	orr.w	r2, r3, #2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	f043 0208 	orr.w	r2, r3, #8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	f043 0210 	orr.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <HAL_SD_IRQHandler+0x2cc>)
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d94:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005db4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f003 f8a0 	bl	8008f00 <SDMMC_CmdStopTransfer>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dda:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00f      	beq.n	8005e10 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f854 	bl	8005eac <HAL_SD_ErrorCallback>
}
 8005e04:	e04e      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
 8005e06:	bf00      	nop
 8005e08:	ffff3ec5 	.word	0xffff3ec5
 8005e0c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d044      	beq.n	8005ea4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d040      	beq.n	8005ea4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e30:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f832 	bl	8005eac <HAL_SD_ErrorCallback>
}
 8005e48:	e02c      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d025      	beq.n	8005ea4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10c      	bne.n	8005e8a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 f848 	bl	8006f10 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005e80:	e010      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f830 	bl	8006ee8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005e88:	e00c      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 f831 	bl	8006efc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8005e9a:	e003      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 f819 	bl	8006ed4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005ea2:	e7ff      	b.n	8005ea4 <HAL_SD_IRQHandler+0x364>
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ece:	0f9b      	lsrs	r3, r3, #30
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eda:	0e9b      	lsrs	r3, r3, #26
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	0e1b      	lsrs	r3, r3, #24
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f20:	0d1b      	lsrs	r3, r3, #20
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3e:	0bdb      	lsrs	r3, r3, #15
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	0b9b      	lsrs	r3, r3, #14
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f62:	0b5b      	lsrs	r3, r3, #13
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f74:	0b1b      	lsrs	r3, r3, #12
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2200      	movs	r2, #0
 8005f86:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d163      	bne.n	8006058 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f94:	009a      	lsls	r2, r3, #2
 8005f96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005fa0:	0f92      	lsrs	r2, r2, #30
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fac:	0edb      	lsrs	r3, r3, #27
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fbe:	0e1b      	lsrs	r3, r3, #24
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd0:	0d5b      	lsrs	r3, r3, #21
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe2:	0c9b      	lsrs	r3, r3, #18
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff4:	0bdb      	lsrs	r3, r3, #15
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	7e1b      	ldrb	r3, [r3, #24]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	3302      	adds	r3, #2
 8006018:	2201      	movs	r2, #1
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006022:	fb02 f203 	mul.w	r2, r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	7a1b      	ldrb	r3, [r3, #8]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006044:	0a52      	lsrs	r2, r2, #9
 8006046:	fb02 f203 	mul.w	r2, r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
 8006056:	e031      	b.n	80060bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	2b01      	cmp	r3, #1
 800605e:	d11d      	bne.n	800609c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606e:	0c1b      	lsrs	r3, r3, #16
 8006070:	431a      	orrs	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	3301      	adds	r3, #1
 800607c:	029a      	lsls	r2, r3, #10
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006090:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
 800609a:	e00f      	b.n	80060bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a58      	ldr	r2, [pc, #352]	; (8006204 <HAL_SD_GetCardCSD+0x344>)
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e09d      	b.n	80061f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c0:	0b9b      	lsrs	r3, r3, #14
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f4:	0fdb      	lsrs	r3, r3, #31
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006100:	0f5b      	lsrs	r3, r3, #29
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	b2da      	uxtb	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006112:	0e9b      	lsrs	r3, r3, #26
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	b2da      	uxtb	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006124:	0d9b      	lsrs	r3, r3, #22
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	b2da      	uxtb	r2, r3
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006136:	0d5b      	lsrs	r3, r3, #21
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006166:	0bdb      	lsrs	r3, r3, #15
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800617a:	0b9b      	lsrs	r3, r3, #14
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	b2da      	uxtb	r2, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618e:	0b5b      	lsrs	r3, r3, #13
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a2:	0b1b      	lsrs	r3, r3, #12
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b6:	0a9b      	lsrs	r3, r3, #10
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	1fe00fff 	.word	0x1fe00fff

08006208 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b094      	sub	sp, #80	; 0x50
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b03      	cmp	r3, #3
 8006222:	d101      	bne.n	8006228 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0a7      	b.n	8006378 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fb62 	bl	80068f8 <SD_SendSDStatus>
 8006234:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006238:	2b00      	cmp	r3, #0
 800623a:	d011      	beq.n	8006260 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a4f      	ldr	r2, [pc, #316]	; (8006380 <HAL_SD_GetCardStatus+0x178>)
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800625e:	e070      	b.n	8006342 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	b2da      	uxtb	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	b29b      	uxth	r3, r3
 8006286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800628a:	b29a      	uxth	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	0e1b      	lsrs	r3, r3, #24
 8006290:	b29b      	uxth	r3, r3
 8006292:	4313      	orrs	r3, r2
 8006294:	b29a      	uxth	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	061a      	lsls	r2, r3, #24
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80062b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	0e1b      	lsrs	r3, r3, #24
 80062b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	0d1b      	lsrs	r3, r3, #20
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	0a9b      	lsrs	r3, r3, #10
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006304:	b2da      	uxtb	r2, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	b2da      	uxtb	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	b2da      	uxtb	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	b2da      	uxtb	r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	0e1b      	lsrs	r3, r3, #24
 800633c:	b2da      	uxtb	r2, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800634a:	4618      	mov	r0, r3
 800634c:	f002 fd28 	bl	8008da0 <SDMMC_CmdBlockLength>
 8006350:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a08      	ldr	r2, [pc, #32]	; (8006380 <HAL_SD_GetCardStatus+0x178>)
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006364:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006374:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006378:	4618      	mov	r0, r3
 800637a:	3750      	adds	r7, #80	; 0x50
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	1fe00fff 	.word	0x1fe00fff

08006384 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80063dc:	b590      	push	{r4, r7, lr}
 80063de:	b08d      	sub	sp, #52	; 0x34
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2203      	movs	r2, #3
 80063f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d02e      	beq.n	800645e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006406:	d106      	bne.n	8006416 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	635a      	str	r2, [r3, #52]	; 0x34
 8006414:	e029      	b.n	800646a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800641c:	d10a      	bne.n	8006434 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fb62 	bl	8006ae8 <SD_WideBus_Enable>
 8006424:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	635a      	str	r2, [r3, #52]	; 0x34
 8006432:	e01a      	b.n	800646a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fb9f 	bl	8006b7e <SD_WideBus_Disable>
 8006440:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	635a      	str	r2, [r3, #52]	; 0x34
 800644e:	e00c      	b.n	800646a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	635a      	str	r2, [r3, #52]	; 0x34
 800645c:	e005      	b.n	800646a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a5e      	ldr	r2, [pc, #376]	; (80065f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006480:	e094      	b.n	80065ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006482:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006486:	f7fd fd91 	bl	8003fac <HAL_RCCEx_GetPeriphCLKFreq>
 800648a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8083 	beq.w	800659a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695a      	ldr	r2, [r3, #20]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	4950      	ldr	r1, [pc, #320]	; (80065f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80064b2:	fba1 1303 	umull	r1, r3, r1, r3
 80064b6:	0e1b      	lsrs	r3, r3, #24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d303      	bcc.n	80064c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e05a      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064cc:	d103      	bne.n	80064d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	e051      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064de:	d126      	bne.n	800652e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10e      	bne.n	8006506 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	4a43      	ldr	r2, [pc, #268]	; (80065f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d906      	bls.n	80064fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	4a40      	ldr	r2, [pc, #256]	; (80065f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	0e5b      	lsrs	r3, r3, #25
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e03d      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e039      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	4a39      	ldr	r2, [pc, #228]	; (80065f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d906      	bls.n	8006526 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	4a36      	ldr	r2, [pc, #216]	; (80065f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	0e5b      	lsrs	r3, r3, #25
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e029      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e025      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10e      	bne.n	8006554 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	4a30      	ldr	r2, [pc, #192]	; (80065fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d906      	bls.n	800654c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	0e1b      	lsrs	r3, r3, #24
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e016      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	e012      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	6a3a      	ldr	r2, [r7, #32]
 800655c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_SD_ConfigWideBusOperation+0x220>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d906      	bls.n	8006574 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0e1b      	lsrs	r3, r3, #24
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	e002      	b.n	800657a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681c      	ldr	r4, [r3, #0]
 800657e:	466a      	mov	r2, sp
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006588:	e882 0003 	stmia.w	r2, {r0, r1}
 800658c:	f107 0308 	add.w	r3, r7, #8
 8006590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006592:	4620      	mov	r0, r4
 8006594:	f002 fb26 	bl	8008be4 <SDMMC_Init>
 8006598:	e008      	b.n	80065ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065b4:	4618      	mov	r0, r3
 80065b6:	f002 fbf3 	bl	8008da0 <SDMMC_CmdBlockLength>
 80065ba:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80065e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	372c      	adds	r7, #44	; 0x2c
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd90      	pop	{r4, r7, pc}
 80065f0:	1fe00fff 	.word	0x1fe00fff
 80065f4:	55e63b89 	.word	0x55e63b89
 80065f8:	02faf080 	.word	0x02faf080
 80065fc:	017d7840 	.word	0x017d7840

08006600 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800660c:	f107 030c 	add.w	r3, r7, #12
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa40 	bl	8006a98 <SD_SendStatus>
 8006618:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	0a5b      	lsrs	r3, r3, #9
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006636:	693b      	ldr	r3, [r7, #16]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b090      	sub	sp, #64	; 0x40
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800664c:	f7fb f882 	bl	8001754 <HAL_GetTick>
 8006650:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f002 fb1d 	bl	8008c96 <SDMMC_GetPowerState>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006662:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006666:	e0b5      	b.n	80067d4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	2b03      	cmp	r3, #3
 800666e:	d02e      	beq.n	80066ce <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f002 fd68 	bl	800914a <SDMMC_CmdSendCID>
 800667a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <SD_InitCard+0x46>
    {
      return errorstate;
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	e0a6      	b.n	80067d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f002 fb48 	bl	8008d22 <SDMMC_GetResponse>
 8006692:	4602      	mov	r2, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2104      	movs	r1, #4
 800669e:	4618      	mov	r0, r3
 80066a0:	f002 fb3f 	bl	8008d22 <SDMMC_GetResponse>
 80066a4:	4602      	mov	r2, r0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2108      	movs	r1, #8
 80066b0:	4618      	mov	r0, r3
 80066b2:	f002 fb36 	bl	8008d22 <SDMMC_GetResponse>
 80066b6:	4602      	mov	r2, r0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	210c      	movs	r1, #12
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 fb2d 	bl	8008d22 <SDMMC_GetResponse>
 80066c8:	4602      	mov	r2, r0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d01d      	beq.n	8006712 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80066d6:	e019      	b.n	800670c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f107 020a 	add.w	r2, r7, #10
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f002 fd70 	bl	80091c8 <SDMMC_CmdSetRelAdd>
 80066e8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <SD_InitCard+0xb4>
      {
        return errorstate;
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	e06f      	b.n	80067d4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80066f4:	f7fb f82e 	bl	8001754 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8006702:	4293      	cmp	r3, r2
 8006704:	d902      	bls.n	800670c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006706:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800670a:	e063      	b.n	80067d4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800670c:	897b      	ldrh	r3, [r7, #10]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0e2      	beq.n	80066d8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	2b03      	cmp	r3, #3
 8006718:	d036      	beq.n	8006788 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	461a      	mov	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	041b      	lsls	r3, r3, #16
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f002 fd2a 	bl	8009188 <SDMMC_CmdSendCSD>
 8006734:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <SD_InitCard+0x100>
    {
      return errorstate;
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	e049      	b.n	80067d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f002 faeb 	bl	8008d22 <SDMMC_GetResponse>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2104      	movs	r1, #4
 8006758:	4618      	mov	r0, r3
 800675a:	f002 fae2 	bl	8008d22 <SDMMC_GetResponse>
 800675e:	4602      	mov	r2, r0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2108      	movs	r1, #8
 800676a:	4618      	mov	r0, r3
 800676c:	f002 fad9 	bl	8008d22 <SDMMC_GetResponse>
 8006770:	4602      	mov	r2, r0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	210c      	movs	r1, #12
 800677c:	4618      	mov	r0, r3
 800677e:	f002 fad0 	bl	8008d22 <SDMMC_GetResponse>
 8006782:	4602      	mov	r2, r0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2104      	movs	r1, #4
 800678e:	4618      	mov	r0, r3
 8006790:	f002 fac7 	bl	8008d22 <SDMMC_GetResponse>
 8006794:	4603      	mov	r3, r0
 8006796:	0d1a      	lsrs	r2, r3, #20
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800679c:	f107 030c 	add.w	r3, r7, #12
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fb8c 	bl	8005ec0 <HAL_SD_GetCardCSD>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80067b2:	e00f      	b.n	80067d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	041b      	lsls	r3, r3, #16
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f002 fbd9 	bl	8008f78 <SDMMC_CmdSelDesel>
 80067c6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <SD_InitCard+0x192>
  {
    return errorstate;
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	e000      	b.n	80067d4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3740      	adds	r7, #64	; 0x40
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f002 fbe2 	bl	8008fbe <SDMMC_CmdGoIdleState>
 80067fa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	e072      	b.n	80068ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f002 fbf5 	bl	8008ffa <SDMMC_CmdOperCond>
 8006810:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006818:	d10d      	bne.n	8006836 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f002 fbca 	bl	8008fbe <SDMMC_CmdGoIdleState>
 800682a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <SD_PowerON+0x60>
    {
      return errorstate;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	e05a      	b.n	80068ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d137      	bne.n	80068b4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f002 fbf5 	bl	800903a <SDMMC_CmdAppCommand>
 8006850:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d02d      	beq.n	80068b4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800685c:	e046      	b.n	80068ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f002 fbe8 	bl	800903a <SDMMC_CmdAppCommand>
 800686a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <SD_PowerON+0x9a>
    {
      return errorstate;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	e03a      	b.n	80068ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	491e      	ldr	r1, [pc, #120]	; (80068f4 <SD_PowerON+0x118>)
 800687c:	4618      	mov	r0, r3
 800687e:	f002 fbff 	bl	8009080 <SDMMC_CmdAppOperCommand>
 8006882:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800688a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800688e:	e02d      	b.n	80068ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f002 fa43 	bl	8008d22 <SDMMC_GetResponse>
 800689c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	0fdb      	lsrs	r3, r3, #31
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <SD_PowerON+0xce>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <SD_PowerON+0xd0>
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]

    count++;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d802      	bhi.n	80068c4 <SD_PowerON+0xe8>
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0cc      	beq.n	800685e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d902      	bls.n	80068d4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80068ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068d2:	e00b      	b.n	80068ec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	c1100000 	.word	0xc1100000

080068f8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08c      	sub	sp, #48	; 0x30
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006902:	f7fa ff27 	bl	8001754 <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f002 fa05 	bl	8008d22 <SDMMC_GetResponse>
 8006918:	4603      	mov	r3, r0
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006922:	d102      	bne.n	800692a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006928:	e0b0      	b.n	8006a8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2140      	movs	r1, #64	; 0x40
 8006930:	4618      	mov	r0, r3
 8006932:	f002 fa35 	bl	8008da0 <SDMMC_CmdBlockLength>
 8006936:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	e0a0      	b.n	8006a8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f002 fb6f 	bl	800903a <SDMMC_CmdAppCommand>
 800695c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	e08d      	b.n	8006a8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006976:	2340      	movs	r3, #64	; 0x40
 8006978:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800697a:	2360      	movs	r3, #96	; 0x60
 800697c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800697e:	2302      	movs	r3, #2
 8006980:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006986:	2301      	movs	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f107 0208 	add.w	r2, r7, #8
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f002 f9d7 	bl	8008d48 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 fc57 	bl	8009252 <SDMMC_CmdStatusRegister>
 80069a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d02b      	beq.n	8006a04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	e069      	b.n	8006a8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d013      	beq.n	80069ee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80069c6:	2300      	movs	r3, #0
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ca:	e00d      	b.n	80069e8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f002 f931 	bl	8008c38 <SDMMC_ReadFIFO>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	601a      	str	r2, [r3, #0]
        pData++;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	3304      	adds	r3, #4
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	3301      	adds	r3, #1
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	2b07      	cmp	r3, #7
 80069ec:	d9ee      	bls.n	80069cc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80069ee:	f7fa feb1 	bl	8001754 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d102      	bne.n	8006a04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80069fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a02:	e043      	b.n	8006a8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0d2      	beq.n	80069b8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a20:	2308      	movs	r3, #8
 8006a22:	e033      	b.n	8006a8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a32:	2302      	movs	r3, #2
 8006a34:	e02a      	b.n	8006a8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d017      	beq.n	8006a74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006a44:	2320      	movs	r3, #32
 8006a46:	e021      	b.n	8006a8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f002 f8f3 	bl	8008c38 <SDMMC_ReadFIFO>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	601a      	str	r2, [r3, #0]
    pData++;
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a5e:	f7fa fe79 	bl	8001754 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d102      	bne.n	8006a74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006a6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a72:	e00b      	b.n	8006a8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e2      	bne.n	8006a48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a03      	ldr	r2, [pc, #12]	; (8006a94 <SD_SendSDStatus+0x19c>)
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3730      	adds	r7, #48	; 0x30
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	18000f3a 	.word	0x18000f3a

08006a98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aac:	e018      	b.n	8006ae0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f002 fba6 	bl	800920c <SDMMC_CmdSendStatus>
 8006ac0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	e009      	b.n	8006ae0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 f925 	bl	8008d22 <SDMMC_GetResponse>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 f90f 	bl	8008d22 <SDMMC_GetResponse>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b0e:	d102      	bne.n	8006b16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b14:	e02f      	b.n	8006b76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f879 	bl	8006c14 <SD_FindSCR>
 8006b22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	e023      	b.n	8006b76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01c      	beq.n	8006b72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f002 fa78 	bl	800903a <SDMMC_CmdAppCommand>
 8006b4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e00f      	b.n	8006b76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f002 faaf 	bl	80090c0 <SDMMC_CmdBusWidth>
 8006b62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	e003      	b.n	8006b76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e001      	b.n	8006b76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f002 f8c4 	bl	8008d22 <SDMMC_GetResponse>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba4:	d102      	bne.n	8006bac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006baa:	e02f      	b.n	8006c0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006bac:	f107 030c 	add.w	r3, r7, #12
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f82e 	bl	8006c14 <SD_FindSCR>
 8006bb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	e023      	b.n	8006c0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01c      	beq.n	8006c08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f002 fa2d 	bl	800903a <SDMMC_CmdAppCommand>
 8006be0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	e00f      	b.n	8006c0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f002 fa64 	bl	80090c0 <SDMMC_CmdBusWidth>
 8006bf8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	e003      	b.n	8006c0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e001      	b.n	8006c0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	; 0x38
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c1e:	f7fa fd99 	bl	8001754 <HAL_GetTick>
 8006c22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2108      	movs	r1, #8
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f002 f8b0 	bl	8008da0 <SDMMC_CmdBlockLength>
 8006c40:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	e0ad      	b.n	8006da8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	041b      	lsls	r3, r3, #16
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f002 f9ee 	bl	800903a <SDMMC_CmdAppCommand>
 8006c5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	e09e      	b.n	8006da8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006c70:	2308      	movs	r3, #8
 8006c72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006c74:	2330      	movs	r3, #48	; 0x30
 8006c76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f107 0210 	add.w	r2, r7, #16
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f002 f85a 	bl	8008d48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f002 fa34 	bl	8009106 <SDMMC_CmdSendSCR>
 8006c9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d027      	beq.n	8006cf6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	e07e      	b.n	8006da8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d113      	bne.n	8006ce0 <SD_FindSCR+0xcc>
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d110      	bne.n	8006ce0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 ffb8 	bl	8008c38 <SDMMC_ReadFIFO>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 ffb1 	bl	8008c38 <SDMMC_ReadFIFO>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	60fb      	str	r3, [r7, #12]
      index++;
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	3301      	adds	r3, #1
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ce0:	f7fa fd38 	bl	8001754 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d102      	bne.n	8006cf6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006cf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cf4:	e058      	b.n	8006da8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cfc:	f240 532a 	movw	r3, #1322	; 0x52a
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0d1      	beq.n	8006caa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	e043      	b.n	8006da8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2202      	movs	r2, #2
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d36:	2302      	movs	r3, #2
 8006d38:	e036      	b.n	8006da8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006d50:	2320      	movs	r3, #32
 8006d52:	e029      	b.n	8006da8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <SD_FindSCR+0x19c>)
 8006d5a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	061a      	lsls	r2, r3, #24
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006d72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	601a      	str	r2, [r3, #0]
    scr++;
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	3304      	adds	r3, #4
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	061a      	lsls	r2, r3, #24
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	0a1b      	lsrs	r3, r3, #8
 8006d96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006d9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	0e1b      	lsrs	r3, r3, #24
 8006da0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3738      	adds	r7, #56	; 0x38
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	18000f3a 	.word	0x18000f3a

08006db4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	2b1f      	cmp	r3, #31
 8006dc8:	d936      	bls.n	8006e38 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e027      	b.n	8006e20 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 ff2f 	bl	8008c38 <SDMMC_ReadFIFO>
 8006dda:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	3301      	adds	r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	3301      	adds	r3, #1
 8006df8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3301      	adds	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	0e1b      	lsrs	r3, r3, #24
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	3301      	adds	r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b07      	cmp	r3, #7
 8006e24:	d9d4      	bls.n	8006dd0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f1a3 0220 	sub.w	r2, r3, #32
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006e38:	bf00      	nop
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	2b1f      	cmp	r3, #31
 8006e54:	d93a      	bls.n	8006ecc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	e02b      	b.n	8006eb4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	021a      	lsls	r2, r3, #8
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3301      	adds	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	041a      	lsls	r2, r3, #16
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	061a      	lsls	r2, r3, #24
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f107 020c 	add.w	r2, r7, #12
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 fed2 	bl	8008c52 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	d9d0      	bls.n	8006e5c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f1a3 0220 	sub.w	r2, r3, #32
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]
  }
}
 8006ecc:	bf00      	nop
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e054      	b.n	8006fe0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d111      	bne.n	8006f66 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fbc2 	bl	80076d4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a23      	ldr	r2, [pc, #140]	; (8006fe8 <HAL_TIM_Base_Init+0xc4>)
 8006f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f000 fb05 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	08001329 	.word	0x08001329

08006fec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d001      	beq.n	8007004 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e056      	b.n	80070b2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <HAL_TIM_Base_Start+0xd4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d02c      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d027      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <HAL_TIM_Base_Start+0xd8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d022      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <HAL_TIM_Base_Start+0xdc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d01d      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a24      	ldr	r2, [pc, #144]	; (80070cc <HAL_TIM_Base_Start+0xe0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d018      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a23      	ldr	r2, [pc, #140]	; (80070d0 <HAL_TIM_Base_Start+0xe4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a21      	ldr	r2, [pc, #132]	; (80070d4 <HAL_TIM_Base_Start+0xe8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a20      	ldr	r2, [pc, #128]	; (80070d8 <HAL_TIM_Base_Start+0xec>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d009      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1e      	ldr	r2, [pc, #120]	; (80070dc <HAL_TIM_Base_Start+0xf0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_TIM_Base_Start+0x84>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <HAL_TIM_Base_Start+0xf4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d115      	bne.n	800709c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <HAL_TIM_Base_Start+0xf8>)
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b06      	cmp	r3, #6
 8007080:	d015      	beq.n	80070ae <HAL_TIM_Base_Start+0xc2>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007088:	d011      	beq.n	80070ae <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f042 0201 	orr.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709a:	e008      	b.n	80070ae <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e000      	b.n	80070b0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40001800 	.word	0x40001800
 80070d8:	40014000 	.word	0x40014000
 80070dc:	4000e000 	.word	0x4000e000
 80070e0:	4000e400 	.word	0x4000e400
 80070e4:	00010007 	.word	0x00010007

080070e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d001      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e05e      	b.n	80071be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <HAL_TIM_Base_Start_IT+0xe4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d02c      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d027      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a27      	ldr	r2, [pc, #156]	; (80071d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d022      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <HAL_TIM_Base_Start_IT+0xec>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d01d      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a24      	ldr	r2, [pc, #144]	; (80071d8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d018      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a23      	ldr	r2, [pc, #140]	; (80071dc <HAL_TIM_Base_Start_IT+0xf4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a21      	ldr	r2, [pc, #132]	; (80071e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00e      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a20      	ldr	r2, [pc, #128]	; (80071e4 <HAL_TIM_Base_Start_IT+0xfc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d009      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <HAL_TIM_Base_Start_IT+0x100>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x94>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <HAL_TIM_Base_Start_IT+0x104>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d115      	bne.n	80071a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <HAL_TIM_Base_Start_IT+0x108>)
 8007184:	4013      	ands	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b06      	cmp	r3, #6
 800718c:	d015      	beq.n	80071ba <HAL_TIM_Base_Start_IT+0xd2>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007194:	d011      	beq.n	80071ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0201 	orr.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a6:	e008      	b.n	80071ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e000      	b.n	80071bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800
 80071d8:	40000c00 	.word	0x40000c00
 80071dc:	40010400 	.word	0x40010400
 80071e0:	40001800 	.word	0x40001800
 80071e4:	40014000 	.word	0x40014000
 80071e8:	4000e000 	.word	0x4000e000
 80071ec:	4000e400 	.word	0x4000e400
 80071f0:	00010007 	.word	0x00010007

080071f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	f241 1311 	movw	r3, #4369	; 0x1111
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10f      	bne.n	800723c <HAL_TIM_Base_Stop_IT+0x48>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	f240 4344 	movw	r3, #1092	; 0x444
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d107      	bne.n	800723c <HAL_TIM_Base_Stop_IT+0x48>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0201 	bic.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d128      	bne.n	80072ba <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b02      	cmp	r3, #2
 8007274:	d121      	bne.n	80072ba <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0202 	mvn.w	r2, #2
 800727e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	e009      	b.n	80072b4 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d128      	bne.n	800731a <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d121      	bne.n	800731a <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f06f 0204 	mvn.w	r2, #4
 80072de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
 80072fe:	e009      	b.n	8007314 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b08      	cmp	r3, #8
 8007326:	d128      	bne.n	800737a <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b08      	cmp	r3, #8
 8007334:	d121      	bne.n	800737a <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f06f 0208 	mvn.w	r2, #8
 800733e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2204      	movs	r2, #4
 8007344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	e009      	b.n	8007374 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b10      	cmp	r3, #16
 8007386:	d128      	bne.n	80073da <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	2b10      	cmp	r3, #16
 8007394:	d121      	bne.n	80073da <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f06f 0210 	mvn.w	r2, #16
 800739e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2208      	movs	r2, #8
 80073a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	e009      	b.n	80073d4 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d110      	bne.n	800740a <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d109      	bne.n	800740a <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f06f 0201 	mvn.w	r2, #1
 80073fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d110      	bne.n	800743a <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	2b80      	cmp	r3, #128	; 0x80
 8007424:	d109      	bne.n	800743a <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800742e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007448:	d110      	bne.n	800746c <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d109      	bne.n	800746c <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d110      	bne.n	800749c <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d109      	bne.n	800749c <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d110      	bne.n	80074cc <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0220 	mvn.w	r2, #32
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a44      	ldr	r2, [pc, #272]	; (80076ac <TIM_Base_SetConfig+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d013      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a6:	d00f      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a41      	ldr	r2, [pc, #260]	; (80076b0 <TIM_Base_SetConfig+0x128>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a40      	ldr	r2, [pc, #256]	; (80076b4 <TIM_Base_SetConfig+0x12c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a3f      	ldr	r2, [pc, #252]	; (80076b8 <TIM_Base_SetConfig+0x130>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a3e      	ldr	r2, [pc, #248]	; (80076bc <TIM_Base_SetConfig+0x134>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a33      	ldr	r2, [pc, #204]	; (80076ac <TIM_Base_SetConfig+0x124>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d023      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a30      	ldr	r2, [pc, #192]	; (80076b0 <TIM_Base_SetConfig+0x128>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01f      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2f      	ldr	r2, [pc, #188]	; (80076b4 <TIM_Base_SetConfig+0x12c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d01b      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a2e      	ldr	r2, [pc, #184]	; (80076b8 <TIM_Base_SetConfig+0x130>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d017      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2d      	ldr	r2, [pc, #180]	; (80076bc <TIM_Base_SetConfig+0x134>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2c      	ldr	r2, [pc, #176]	; (80076c0 <TIM_Base_SetConfig+0x138>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00f      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2b      	ldr	r2, [pc, #172]	; (80076c4 <TIM_Base_SetConfig+0x13c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a2a      	ldr	r2, [pc, #168]	; (80076c8 <TIM_Base_SetConfig+0x140>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a29      	ldr	r2, [pc, #164]	; (80076cc <TIM_Base_SetConfig+0x144>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a28      	ldr	r2, [pc, #160]	; (80076d0 <TIM_Base_SetConfig+0x148>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d108      	bne.n	8007644 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a10      	ldr	r2, [pc, #64]	; (80076ac <TIM_Base_SetConfig+0x124>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00f      	beq.n	8007690 <TIM_Base_SetConfig+0x108>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a12      	ldr	r2, [pc, #72]	; (80076bc <TIM_Base_SetConfig+0x134>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00b      	beq.n	8007690 <TIM_Base_SetConfig+0x108>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <TIM_Base_SetConfig+0x138>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d007      	beq.n	8007690 <TIM_Base_SetConfig+0x108>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <TIM_Base_SetConfig+0x13c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d003      	beq.n	8007690 <TIM_Base_SetConfig+0x108>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a0f      	ldr	r2, [pc, #60]	; (80076c8 <TIM_Base_SetConfig+0x140>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	615a      	str	r2, [r3, #20]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40010400 	.word	0x40010400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800
 80076cc:	4000e000 	.word	0x4000e000
 80076d0:	4000e400 	.word	0x4000e400

080076d4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <TIM_ResetCallback+0x84>)
 80076e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1d      	ldr	r2, [pc, #116]	; (800775c <TIM_ResetCallback+0x88>)
 80076e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1c      	ldr	r2, [pc, #112]	; (8007760 <TIM_ResetCallback+0x8c>)
 80076f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1b      	ldr	r2, [pc, #108]	; (8007764 <TIM_ResetCallback+0x90>)
 80076f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a1a      	ldr	r2, [pc, #104]	; (8007768 <TIM_ResetCallback+0x94>)
 8007700:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a19      	ldr	r2, [pc, #100]	; (800776c <TIM_ResetCallback+0x98>)
 8007708:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a18      	ldr	r2, [pc, #96]	; (8007770 <TIM_ResetCallback+0x9c>)
 8007710:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a17      	ldr	r2, [pc, #92]	; (8007774 <TIM_ResetCallback+0xa0>)
 8007718:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a16      	ldr	r2, [pc, #88]	; (8007778 <TIM_ResetCallback+0xa4>)
 8007720:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a15      	ldr	r2, [pc, #84]	; (800777c <TIM_ResetCallback+0xa8>)
 8007728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a14      	ldr	r2, [pc, #80]	; (8007780 <TIM_ResetCallback+0xac>)
 8007730:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a13      	ldr	r2, [pc, #76]	; (8007784 <TIM_ResetCallback+0xb0>)
 8007738:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a12      	ldr	r2, [pc, #72]	; (8007788 <TIM_ResetCallback+0xb4>)
 8007740:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a11      	ldr	r2, [pc, #68]	; (800778c <TIM_ResetCallback+0xb8>)
 8007748:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	0800117d 	.word	0x0800117d
 800775c:	080074d5 	.word	0x080074d5
 8007760:	0800754d 	.word	0x0800754d
 8007764:	08007561 	.word	0x08007561
 8007768:	080074fd 	.word	0x080074fd
 800776c:	08007511 	.word	0x08007511
 8007770:	080074e9 	.word	0x080074e9
 8007774:	08007525 	.word	0x08007525
 8007778:	08007539 	.word	0x08007539
 800777c:	08007575 	.word	0x08007575
 8007780:	080078c9 	.word	0x080078c9
 8007784:	080078dd 	.word	0x080078dd
 8007788:	080078f1 	.word	0x080078f1
 800778c:	08007905 	.word	0x08007905

08007790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e077      	b.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a35      	ldr	r2, [pc, #212]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a34      	ldr	r2, [pc, #208]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d108      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a25      	ldr	r2, [pc, #148]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d02c      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d027      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a22      	ldr	r2, [pc, #136]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d022      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d01d      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d018      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1a      	ldr	r2, [pc, #104]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d013      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00e      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d009      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d004      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a17      	ldr	r2, [pc, #92]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d10c      	bne.n	8007886 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40010400 	.word	0x40010400
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40000800 	.word	0x40000800
 80078b4:	40000c00 	.word	0x40000c00
 80078b8:	40001800 	.word	0x40001800
 80078bc:	40014000 	.word	0x40014000
 80078c0:	4000e000 	.word	0x4000e000
 80078c4:	4000e400 	.word	0x4000e400

080078c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e042      	b.n	80079b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7f9 fd33 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2224      	movs	r2, #36	; 0x24
 8007946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0201 	bic.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f82c 	bl	80079b8 <UART_SetConfig>
 8007960:	4603      	mov	r3, r0
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e022      	b.n	80079b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fe7e 	bl	8008674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 ff05 	bl	80087b8 <UART_CheckIdleState>
 80079ae:	4603      	mov	r3, r0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b8:	b5b0      	push	{r4, r5, r7, lr}
 80079ba:	b08e      	sub	sp, #56	; 0x38
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	4313      	orrs	r3, r2
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4bbf      	ldr	r3, [pc, #764]	; (8007ce4 <UART_SetConfig+0x32c>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079ee:	430b      	orrs	r3, r1
 80079f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4ab5      	ldr	r2, [pc, #724]	; (8007ce8 <UART_SetConfig+0x330>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	4bb0      	ldr	r3, [pc, #704]	; (8007cec <UART_SetConfig+0x334>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a32:	430b      	orrs	r3, r1
 8007a34:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f023 010f 	bic.w	r1, r3, #15
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4aa7      	ldr	r2, [pc, #668]	; (8007cf0 <UART_SetConfig+0x338>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d176      	bne.n	8007b44 <UART_SetConfig+0x18c>
 8007a56:	4ba7      	ldr	r3, [pc, #668]	; (8007cf4 <UART_SetConfig+0x33c>)
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a5e:	2b28      	cmp	r3, #40	; 0x28
 8007a60:	d86c      	bhi.n	8007b3c <UART_SetConfig+0x184>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <UART_SetConfig+0xb0>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007b0d 	.word	0x08007b0d
 8007a6c:	08007b3d 	.word	0x08007b3d
 8007a70:	08007b3d 	.word	0x08007b3d
 8007a74:	08007b3d 	.word	0x08007b3d
 8007a78:	08007b3d 	.word	0x08007b3d
 8007a7c:	08007b3d 	.word	0x08007b3d
 8007a80:	08007b3d 	.word	0x08007b3d
 8007a84:	08007b3d 	.word	0x08007b3d
 8007a88:	08007b15 	.word	0x08007b15
 8007a8c:	08007b3d 	.word	0x08007b3d
 8007a90:	08007b3d 	.word	0x08007b3d
 8007a94:	08007b3d 	.word	0x08007b3d
 8007a98:	08007b3d 	.word	0x08007b3d
 8007a9c:	08007b3d 	.word	0x08007b3d
 8007aa0:	08007b3d 	.word	0x08007b3d
 8007aa4:	08007b3d 	.word	0x08007b3d
 8007aa8:	08007b1d 	.word	0x08007b1d
 8007aac:	08007b3d 	.word	0x08007b3d
 8007ab0:	08007b3d 	.word	0x08007b3d
 8007ab4:	08007b3d 	.word	0x08007b3d
 8007ab8:	08007b3d 	.word	0x08007b3d
 8007abc:	08007b3d 	.word	0x08007b3d
 8007ac0:	08007b3d 	.word	0x08007b3d
 8007ac4:	08007b3d 	.word	0x08007b3d
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b3d 	.word	0x08007b3d
 8007ad0:	08007b3d 	.word	0x08007b3d
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007b3d 	.word	0x08007b3d
 8007adc:	08007b3d 	.word	0x08007b3d
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b2d 	.word	0x08007b2d
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007b3d 	.word	0x08007b3d
 8007af4:	08007b3d 	.word	0x08007b3d
 8007af8:	08007b3d 	.word	0x08007b3d
 8007afc:	08007b3d 	.word	0x08007b3d
 8007b00:	08007b3d 	.word	0x08007b3d
 8007b04:	08007b3d 	.word	0x08007b3d
 8007b08:	08007b35 	.word	0x08007b35
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b12:	e326      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1a:	e322      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b22:	e31e      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2a:	e31a      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b2c:	2320      	movs	r3, #32
 8007b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b32:	e316      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b34:	2340      	movs	r3, #64	; 0x40
 8007b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b3a:	e312      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b3c:	2380      	movs	r3, #128	; 0x80
 8007b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b42:	e30e      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a6b      	ldr	r2, [pc, #428]	; (8007cf8 <UART_SetConfig+0x340>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d130      	bne.n	8007bb0 <UART_SetConfig+0x1f8>
 8007b4e:	4b69      	ldr	r3, [pc, #420]	; (8007cf4 <UART_SetConfig+0x33c>)
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d826      	bhi.n	8007ba8 <UART_SetConfig+0x1f0>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0x1a8>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b79 	.word	0x08007b79
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b89 	.word	0x08007b89
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7e:	e2f0      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b86:	e2ec      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b8e:	e2e8      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b96:	e2e4      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9e:	e2e0      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ba6:	e2dc      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bae:	e2d8      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a51      	ldr	r2, [pc, #324]	; (8007cfc <UART_SetConfig+0x344>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d130      	bne.n	8007c1c <UART_SetConfig+0x264>
 8007bba:	4b4e      	ldr	r3, [pc, #312]	; (8007cf4 <UART_SetConfig+0x33c>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d826      	bhi.n	8007c14 <UART_SetConfig+0x25c>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0x214>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be5 	.word	0x08007be5
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	08007bf5 	.word	0x08007bf5
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bea:	e2ba      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e2b6      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfa:	e2b2      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c02:	e2ae      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c04:	2320      	movs	r3, #32
 8007c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0a:	e2aa      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c12:	e2a6      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1a:	e2a2      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a37      	ldr	r2, [pc, #220]	; (8007d00 <UART_SetConfig+0x348>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d130      	bne.n	8007c88 <UART_SetConfig+0x2d0>
 8007c26:	4b33      	ldr	r3, [pc, #204]	; (8007cf4 <UART_SetConfig+0x33c>)
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d826      	bhi.n	8007c80 <UART_SetConfig+0x2c8>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x280>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c61 	.word	0x08007c61
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c56:	e284      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5e:	e280      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c66:	e27c      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6e:	e278      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c70:	2320      	movs	r3, #32
 8007c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c76:	e274      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e270      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c80:	2380      	movs	r3, #128	; 0x80
 8007c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c86:	e26c      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <UART_SetConfig+0x34c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d142      	bne.n	8007d18 <UART_SetConfig+0x360>
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <UART_SetConfig+0x33c>)
 8007c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d838      	bhi.n	8007d10 <UART_SetConfig+0x358>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x2ec>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cbd 	.word	0x08007cbd
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007ccd 	.word	0x08007ccd
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cdd 	.word	0x08007cdd
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc2:	e24e      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cca:	e24a      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ccc:	2308      	movs	r3, #8
 8007cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd2:	e246      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cda:	e242      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007cdc:	2320      	movs	r3, #32
 8007cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce2:	e23e      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ce4:	cfff69f3 	.word	0xcfff69f3
 8007ce8:	58000c00 	.word	0x58000c00
 8007cec:	11fff4ff 	.word	0x11fff4ff
 8007cf0:	40011000 	.word	0x40011000
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	40004400 	.word	0x40004400
 8007cfc:	40004800 	.word	0x40004800
 8007d00:	40004c00 	.word	0x40004c00
 8007d04:	40005000 	.word	0x40005000
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	e228      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d16:	e224      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4ab1      	ldr	r2, [pc, #708]	; (8007fe4 <UART_SetConfig+0x62c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d176      	bne.n	8007e10 <UART_SetConfig+0x458>
 8007d22:	4bb1      	ldr	r3, [pc, #708]	; (8007fe8 <UART_SetConfig+0x630>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d2a:	2b28      	cmp	r3, #40	; 0x28
 8007d2c:	d86c      	bhi.n	8007e08 <UART_SetConfig+0x450>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x37c>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007dd9 	.word	0x08007dd9
 8007d38:	08007e09 	.word	0x08007e09
 8007d3c:	08007e09 	.word	0x08007e09
 8007d40:	08007e09 	.word	0x08007e09
 8007d44:	08007e09 	.word	0x08007e09
 8007d48:	08007e09 	.word	0x08007e09
 8007d4c:	08007e09 	.word	0x08007e09
 8007d50:	08007e09 	.word	0x08007e09
 8007d54:	08007de1 	.word	0x08007de1
 8007d58:	08007e09 	.word	0x08007e09
 8007d5c:	08007e09 	.word	0x08007e09
 8007d60:	08007e09 	.word	0x08007e09
 8007d64:	08007e09 	.word	0x08007e09
 8007d68:	08007e09 	.word	0x08007e09
 8007d6c:	08007e09 	.word	0x08007e09
 8007d70:	08007e09 	.word	0x08007e09
 8007d74:	08007de9 	.word	0x08007de9
 8007d78:	08007e09 	.word	0x08007e09
 8007d7c:	08007e09 	.word	0x08007e09
 8007d80:	08007e09 	.word	0x08007e09
 8007d84:	08007e09 	.word	0x08007e09
 8007d88:	08007e09 	.word	0x08007e09
 8007d8c:	08007e09 	.word	0x08007e09
 8007d90:	08007e09 	.word	0x08007e09
 8007d94:	08007df1 	.word	0x08007df1
 8007d98:	08007e09 	.word	0x08007e09
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007e09 	.word	0x08007e09
 8007da4:	08007e09 	.word	0x08007e09
 8007da8:	08007e09 	.word	0x08007e09
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007df9 	.word	0x08007df9
 8007db8:	08007e09 	.word	0x08007e09
 8007dbc:	08007e09 	.word	0x08007e09
 8007dc0:	08007e09 	.word	0x08007e09
 8007dc4:	08007e09 	.word	0x08007e09
 8007dc8:	08007e09 	.word	0x08007e09
 8007dcc:	08007e09 	.word	0x08007e09
 8007dd0:	08007e09 	.word	0x08007e09
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e1c0      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e1bc      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	e1b8      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df6:	e1b4      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007df8:	2320      	movs	r3, #32
 8007dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfe:	e1b0      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e00:	2340      	movs	r3, #64	; 0x40
 8007e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e06:	e1ac      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e0e:	e1a8      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a75      	ldr	r2, [pc, #468]	; (8007fec <UART_SetConfig+0x634>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d130      	bne.n	8007e7c <UART_SetConfig+0x4c4>
 8007e1a:	4b73      	ldr	r3, [pc, #460]	; (8007fe8 <UART_SetConfig+0x630>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	d826      	bhi.n	8007e74 <UART_SetConfig+0x4bc>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <UART_SetConfig+0x474>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e4d 	.word	0x08007e4d
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4a:	e18a      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e52:	e186      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5a:	e182      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e62:	e17e      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e64:	2320      	movs	r3, #32
 8007e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e6a:	e17a      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e72:	e176      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e7a:	e172      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a5b      	ldr	r2, [pc, #364]	; (8007ff0 <UART_SetConfig+0x638>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d130      	bne.n	8007ee8 <UART_SetConfig+0x530>
 8007e86:	4b58      	ldr	r3, [pc, #352]	; (8007fe8 <UART_SetConfig+0x630>)
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d826      	bhi.n	8007ee0 <UART_SetConfig+0x528>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <UART_SetConfig+0x4e0>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	08007ec1 	.word	0x08007ec1
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ed1 	.word	0x08007ed1
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb6:	e154      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	e150      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec6:	e14c      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ece:	e148      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed6:	e144      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ed8:	2340      	movs	r3, #64	; 0x40
 8007eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ede:	e140      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee6:	e13c      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a41      	ldr	r2, [pc, #260]	; (8007ff4 <UART_SetConfig+0x63c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	f040 8082 	bne.w	8007ff8 <UART_SetConfig+0x640>
 8007ef4:	4b3c      	ldr	r3, [pc, #240]	; (8007fe8 <UART_SetConfig+0x630>)
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007efc:	2b28      	cmp	r3, #40	; 0x28
 8007efe:	d86d      	bhi.n	8007fdc <UART_SetConfig+0x624>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <UART_SetConfig+0x550>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007fad 	.word	0x08007fad
 8007f0c:	08007fdd 	.word	0x08007fdd
 8007f10:	08007fdd 	.word	0x08007fdd
 8007f14:	08007fdd 	.word	0x08007fdd
 8007f18:	08007fdd 	.word	0x08007fdd
 8007f1c:	08007fdd 	.word	0x08007fdd
 8007f20:	08007fdd 	.word	0x08007fdd
 8007f24:	08007fdd 	.word	0x08007fdd
 8007f28:	08007fb5 	.word	0x08007fb5
 8007f2c:	08007fdd 	.word	0x08007fdd
 8007f30:	08007fdd 	.word	0x08007fdd
 8007f34:	08007fdd 	.word	0x08007fdd
 8007f38:	08007fdd 	.word	0x08007fdd
 8007f3c:	08007fdd 	.word	0x08007fdd
 8007f40:	08007fdd 	.word	0x08007fdd
 8007f44:	08007fdd 	.word	0x08007fdd
 8007f48:	08007fbd 	.word	0x08007fbd
 8007f4c:	08007fdd 	.word	0x08007fdd
 8007f50:	08007fdd 	.word	0x08007fdd
 8007f54:	08007fdd 	.word	0x08007fdd
 8007f58:	08007fdd 	.word	0x08007fdd
 8007f5c:	08007fdd 	.word	0x08007fdd
 8007f60:	08007fdd 	.word	0x08007fdd
 8007f64:	08007fdd 	.word	0x08007fdd
 8007f68:	08007fc5 	.word	0x08007fc5
 8007f6c:	08007fdd 	.word	0x08007fdd
 8007f70:	08007fdd 	.word	0x08007fdd
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08007fdd 	.word	0x08007fdd
 8007f80:	08007fdd 	.word	0x08007fdd
 8007f84:	08007fdd 	.word	0x08007fdd
 8007f88:	08007fcd 	.word	0x08007fcd
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	08007fdd 	.word	0x08007fdd
 8007f94:	08007fdd 	.word	0x08007fdd
 8007f98:	08007fdd 	.word	0x08007fdd
 8007f9c:	08007fdd 	.word	0x08007fdd
 8007fa0:	08007fdd 	.word	0x08007fdd
 8007fa4:	08007fdd 	.word	0x08007fdd
 8007fa8:	08007fd5 	.word	0x08007fd5
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb2:	e0d6      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fba:	e0d2      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fbc:	2308      	movs	r3, #8
 8007fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc2:	e0ce      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fca:	e0ca      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fcc:	2320      	movs	r3, #32
 8007fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd2:	e0c6      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fd4:	2340      	movs	r3, #64	; 0x40
 8007fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fda:	e0c2      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fdc:	2380      	movs	r3, #128	; 0x80
 8007fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe2:	e0be      	b.n	8008162 <UART_SetConfig+0x7aa>
 8007fe4:	40011400 	.word	0x40011400
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	40007800 	.word	0x40007800
 8007ff0:	40007c00 	.word	0x40007c00
 8007ff4:	40011800 	.word	0x40011800
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4aad      	ldr	r2, [pc, #692]	; (80082b4 <UART_SetConfig+0x8fc>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d176      	bne.n	80080f0 <UART_SetConfig+0x738>
 8008002:	4bad      	ldr	r3, [pc, #692]	; (80082b8 <UART_SetConfig+0x900>)
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800800a:	2b28      	cmp	r3, #40	; 0x28
 800800c:	d86c      	bhi.n	80080e8 <UART_SetConfig+0x730>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <UART_SetConfig+0x65c>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	080080b9 	.word	0x080080b9
 8008018:	080080e9 	.word	0x080080e9
 800801c:	080080e9 	.word	0x080080e9
 8008020:	080080e9 	.word	0x080080e9
 8008024:	080080e9 	.word	0x080080e9
 8008028:	080080e9 	.word	0x080080e9
 800802c:	080080e9 	.word	0x080080e9
 8008030:	080080e9 	.word	0x080080e9
 8008034:	080080c1 	.word	0x080080c1
 8008038:	080080e9 	.word	0x080080e9
 800803c:	080080e9 	.word	0x080080e9
 8008040:	080080e9 	.word	0x080080e9
 8008044:	080080e9 	.word	0x080080e9
 8008048:	080080e9 	.word	0x080080e9
 800804c:	080080e9 	.word	0x080080e9
 8008050:	080080e9 	.word	0x080080e9
 8008054:	080080c9 	.word	0x080080c9
 8008058:	080080e9 	.word	0x080080e9
 800805c:	080080e9 	.word	0x080080e9
 8008060:	080080e9 	.word	0x080080e9
 8008064:	080080e9 	.word	0x080080e9
 8008068:	080080e9 	.word	0x080080e9
 800806c:	080080e9 	.word	0x080080e9
 8008070:	080080e9 	.word	0x080080e9
 8008074:	080080d1 	.word	0x080080d1
 8008078:	080080e9 	.word	0x080080e9
 800807c:	080080e9 	.word	0x080080e9
 8008080:	080080e9 	.word	0x080080e9
 8008084:	080080e9 	.word	0x080080e9
 8008088:	080080e9 	.word	0x080080e9
 800808c:	080080e9 	.word	0x080080e9
 8008090:	080080e9 	.word	0x080080e9
 8008094:	080080d9 	.word	0x080080d9
 8008098:	080080e9 	.word	0x080080e9
 800809c:	080080e9 	.word	0x080080e9
 80080a0:	080080e9 	.word	0x080080e9
 80080a4:	080080e9 	.word	0x080080e9
 80080a8:	080080e9 	.word	0x080080e9
 80080ac:	080080e9 	.word	0x080080e9
 80080b0:	080080e9 	.word	0x080080e9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e050      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080c0:	2304      	movs	r3, #4
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e04c      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080c8:	2308      	movs	r3, #8
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ce:	e048      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080d0:	2310      	movs	r3, #16
 80080d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d6:	e044      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080d8:	2320      	movs	r3, #32
 80080da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080de:	e040      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080e6:	e03c      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080e8:	2380      	movs	r3, #128	; 0x80
 80080ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ee:	e038      	b.n	8008162 <UART_SetConfig+0x7aa>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a71      	ldr	r2, [pc, #452]	; (80082bc <UART_SetConfig+0x904>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d130      	bne.n	800815c <UART_SetConfig+0x7a4>
 80080fa:	4b6f      	ldr	r3, [pc, #444]	; (80082b8 <UART_SetConfig+0x900>)
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b05      	cmp	r3, #5
 8008104:	d826      	bhi.n	8008154 <UART_SetConfig+0x79c>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <UART_SetConfig+0x754>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008125 	.word	0x08008125
 8008110:	0800812d 	.word	0x0800812d
 8008114:	08008135 	.word	0x08008135
 8008118:	0800813d 	.word	0x0800813d
 800811c:	08008145 	.word	0x08008145
 8008120:	0800814d 	.word	0x0800814d
 8008124:	2302      	movs	r3, #2
 8008126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812a:	e01a      	b.n	8008162 <UART_SetConfig+0x7aa>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008132:	e016      	b.n	8008162 <UART_SetConfig+0x7aa>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813a:	e012      	b.n	8008162 <UART_SetConfig+0x7aa>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008142:	e00e      	b.n	8008162 <UART_SetConfig+0x7aa>
 8008144:	2320      	movs	r3, #32
 8008146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814a:	e00a      	b.n	8008162 <UART_SetConfig+0x7aa>
 800814c:	2340      	movs	r3, #64	; 0x40
 800814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008152:	e006      	b.n	8008162 <UART_SetConfig+0x7aa>
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815a:	e002      	b.n	8008162 <UART_SetConfig+0x7aa>
 800815c:	2380      	movs	r3, #128	; 0x80
 800815e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a55      	ldr	r2, [pc, #340]	; (80082bc <UART_SetConfig+0x904>)
 8008168:	4293      	cmp	r3, r2
 800816a:	f040 80f0 	bne.w	800834e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800816e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008172:	2b20      	cmp	r3, #32
 8008174:	dc46      	bgt.n	8008204 <UART_SetConfig+0x84c>
 8008176:	2b02      	cmp	r3, #2
 8008178:	db75      	blt.n	8008266 <UART_SetConfig+0x8ae>
 800817a:	3b02      	subs	r3, #2
 800817c:	2b1e      	cmp	r3, #30
 800817e:	d872      	bhi.n	8008266 <UART_SetConfig+0x8ae>
 8008180:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <UART_SetConfig+0x7d0>)
 8008182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008186:	bf00      	nop
 8008188:	0800820b 	.word	0x0800820b
 800818c:	08008267 	.word	0x08008267
 8008190:	08008213 	.word	0x08008213
 8008194:	08008267 	.word	0x08008267
 8008198:	08008267 	.word	0x08008267
 800819c:	08008267 	.word	0x08008267
 80081a0:	08008223 	.word	0x08008223
 80081a4:	08008267 	.word	0x08008267
 80081a8:	08008267 	.word	0x08008267
 80081ac:	08008267 	.word	0x08008267
 80081b0:	08008267 	.word	0x08008267
 80081b4:	08008267 	.word	0x08008267
 80081b8:	08008267 	.word	0x08008267
 80081bc:	08008267 	.word	0x08008267
 80081c0:	08008233 	.word	0x08008233
 80081c4:	08008267 	.word	0x08008267
 80081c8:	08008267 	.word	0x08008267
 80081cc:	08008267 	.word	0x08008267
 80081d0:	08008267 	.word	0x08008267
 80081d4:	08008267 	.word	0x08008267
 80081d8:	08008267 	.word	0x08008267
 80081dc:	08008267 	.word	0x08008267
 80081e0:	08008267 	.word	0x08008267
 80081e4:	08008267 	.word	0x08008267
 80081e8:	08008267 	.word	0x08008267
 80081ec:	08008267 	.word	0x08008267
 80081f0:	08008267 	.word	0x08008267
 80081f4:	08008267 	.word	0x08008267
 80081f8:	08008267 	.word	0x08008267
 80081fc:	08008267 	.word	0x08008267
 8008200:	08008259 	.word	0x08008259
 8008204:	2b40      	cmp	r3, #64	; 0x40
 8008206:	d02a      	beq.n	800825e <UART_SetConfig+0x8a6>
 8008208:	e02d      	b.n	8008266 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800820a:	f7fc faf3 	bl	80047f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800820e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008210:	e02f      	b.n	8008272 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008212:	f107 0314 	add.w	r3, r7, #20
 8008216:	4618      	mov	r0, r3
 8008218:	f7fc fb02 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008220:	e027      	b.n	8008272 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008222:	f107 0308 	add.w	r3, r7, #8
 8008226:	4618      	mov	r0, r3
 8008228:	f7fc fc4e 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008230:	e01f      	b.n	8008272 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008232:	4b21      	ldr	r3, [pc, #132]	; (80082b8 <UART_SetConfig+0x900>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800823e:	4b1e      	ldr	r3, [pc, #120]	; (80082b8 <UART_SetConfig+0x900>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <UART_SetConfig+0x908>)
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008250:	e00f      	b.n	8008272 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008252:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <UART_SetConfig+0x908>)
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008256:	e00c      	b.n	8008272 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <UART_SetConfig+0x90c>)
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800825c:	e009      	b.n	8008272 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008264:	e005      	b.n	8008272 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 81e6 	beq.w	8008646 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	4a12      	ldr	r2, [pc, #72]	; (80082c8 <UART_SetConfig+0x910>)
 8008280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008284:	461a      	mov	r2, r3
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008288:	fbb3 f3f2 	udiv	r3, r3, r2
 800828c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	4413      	add	r3, r2
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	429a      	cmp	r2, r3
 800829c:	d305      	bcc.n	80082aa <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082a4:	6a3a      	ldr	r2, [r7, #32]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d910      	bls.n	80082cc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082b0:	e1c9      	b.n	8008646 <UART_SetConfig+0xc8e>
 80082b2:	bf00      	nop
 80082b4:	40011c00 	.word	0x40011c00
 80082b8:	58024400 	.word	0x58024400
 80082bc:	58000c00 	.word	0x58000c00
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	003d0900 	.word	0x003d0900
 80082c8:	0800c7c4 	.word	0x0800c7c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	4618      	mov	r0, r3
 80082d0:	f04f 0100 	mov.w	r1, #0
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	4ac1      	ldr	r2, [pc, #772]	; (80085e0 <UART_SetConfig+0xc28>)
 80082da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082de:	b29a      	uxth	r2, r3
 80082e0:	f04f 0300 	mov.w	r3, #0
 80082e4:	f7f8 f812 	bl	800030c <__aeabi_uldivmod>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4610      	mov	r0, r2
 80082ee:	4619      	mov	r1, r3
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	020b      	lsls	r3, r1, #8
 80082fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082fe:	0202      	lsls	r2, r0, #8
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	6849      	ldr	r1, [r1, #4]
 8008304:	0849      	lsrs	r1, r1, #1
 8008306:	4608      	mov	r0, r1
 8008308:	f04f 0100 	mov.w	r1, #0
 800830c:	1814      	adds	r4, r2, r0
 800830e:	eb43 0501 	adc.w	r5, r3, r1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	461a      	mov	r2, r3
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f7 fff4 	bl	800030c <__aeabi_uldivmod>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4613      	mov	r3, r2
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008332:	d308      	bcc.n	8008346 <UART_SetConfig+0x98e>
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800833a:	d204      	bcs.n	8008346 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008342:	60da      	str	r2, [r3, #12]
 8008344:	e17f      	b.n	8008646 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800834c:	e17b      	b.n	8008646 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008356:	f040 80bd 	bne.w	80084d4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800835a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800835e:	2b20      	cmp	r3, #32
 8008360:	dc48      	bgt.n	80083f4 <UART_SetConfig+0xa3c>
 8008362:	2b00      	cmp	r3, #0
 8008364:	db7b      	blt.n	800845e <UART_SetConfig+0xaa6>
 8008366:	2b20      	cmp	r3, #32
 8008368:	d879      	bhi.n	800845e <UART_SetConfig+0xaa6>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x9b8>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	080083fb 	.word	0x080083fb
 8008374:	08008403 	.word	0x08008403
 8008378:	0800845f 	.word	0x0800845f
 800837c:	0800845f 	.word	0x0800845f
 8008380:	0800840b 	.word	0x0800840b
 8008384:	0800845f 	.word	0x0800845f
 8008388:	0800845f 	.word	0x0800845f
 800838c:	0800845f 	.word	0x0800845f
 8008390:	0800841b 	.word	0x0800841b
 8008394:	0800845f 	.word	0x0800845f
 8008398:	0800845f 	.word	0x0800845f
 800839c:	0800845f 	.word	0x0800845f
 80083a0:	0800845f 	.word	0x0800845f
 80083a4:	0800845f 	.word	0x0800845f
 80083a8:	0800845f 	.word	0x0800845f
 80083ac:	0800845f 	.word	0x0800845f
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	0800845f 	.word	0x0800845f
 80083b8:	0800845f 	.word	0x0800845f
 80083bc:	0800845f 	.word	0x0800845f
 80083c0:	0800845f 	.word	0x0800845f
 80083c4:	0800845f 	.word	0x0800845f
 80083c8:	0800845f 	.word	0x0800845f
 80083cc:	0800845f 	.word	0x0800845f
 80083d0:	0800845f 	.word	0x0800845f
 80083d4:	0800845f 	.word	0x0800845f
 80083d8:	0800845f 	.word	0x0800845f
 80083dc:	0800845f 	.word	0x0800845f
 80083e0:	0800845f 	.word	0x0800845f
 80083e4:	0800845f 	.word	0x0800845f
 80083e8:	0800845f 	.word	0x0800845f
 80083ec:	0800845f 	.word	0x0800845f
 80083f0:	08008451 	.word	0x08008451
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d02e      	beq.n	8008456 <UART_SetConfig+0xa9e>
 80083f8:	e031      	b.n	800845e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083fa:	f7fa feb1 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 80083fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008400:	e033      	b.n	800846a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008402:	f7fa fec3 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8008406:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008408:	e02f      	b.n	800846a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800840a:	f107 0314 	add.w	r3, r7, #20
 800840e:	4618      	mov	r0, r3
 8008410:	f7fc fa06 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008418:	e027      	b.n	800846a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841a:	f107 0308 	add.w	r3, r7, #8
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc fb52 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008428:	e01f      	b.n	800846a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800842a:	4b6e      	ldr	r3, [pc, #440]	; (80085e4 <UART_SetConfig+0xc2c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008436:	4b6b      	ldr	r3, [pc, #428]	; (80085e4 <UART_SetConfig+0xc2c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	08db      	lsrs	r3, r3, #3
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	4a69      	ldr	r2, [pc, #420]	; (80085e8 <UART_SetConfig+0xc30>)
 8008442:	fa22 f303 	lsr.w	r3, r2, r3
 8008446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008448:	e00f      	b.n	800846a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800844a:	4b67      	ldr	r3, [pc, #412]	; (80085e8 <UART_SetConfig+0xc30>)
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800844e:	e00c      	b.n	800846a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008450:	4b66      	ldr	r3, [pc, #408]	; (80085ec <UART_SetConfig+0xc34>)
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008454:	e009      	b.n	800846a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800845c:	e005      	b.n	800846a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80ea 	beq.w	8008646 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	4a5a      	ldr	r2, [pc, #360]	; (80085e0 <UART_SetConfig+0xc28>)
 8008478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800847c:	461a      	mov	r2, r3
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	fbb3 f3f2 	udiv	r3, r3, r2
 8008484:	005a      	lsls	r2, r3, #1
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	441a      	add	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	fbb2 f3f3 	udiv	r3, r2, r3
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	2b0f      	cmp	r3, #15
 800849c:	d916      	bls.n	80084cc <UART_SetConfig+0xb14>
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a4:	d212      	bcs.n	80084cc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f023 030f 	bic.w	r3, r3, #15
 80084ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084be:	4313      	orrs	r3, r2
 80084c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084c8:	60da      	str	r2, [r3, #12]
 80084ca:	e0bc      	b.n	8008646 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084d2:	e0b8      	b.n	8008646 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084d8:	2b20      	cmp	r3, #32
 80084da:	dc4b      	bgt.n	8008574 <UART_SetConfig+0xbbc>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f2c0 8087 	blt.w	80085f0 <UART_SetConfig+0xc38>
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	f200 8084 	bhi.w	80085f0 <UART_SetConfig+0xc38>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0xb38>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	0800857b 	.word	0x0800857b
 80084f4:	08008583 	.word	0x08008583
 80084f8:	080085f1 	.word	0x080085f1
 80084fc:	080085f1 	.word	0x080085f1
 8008500:	0800858b 	.word	0x0800858b
 8008504:	080085f1 	.word	0x080085f1
 8008508:	080085f1 	.word	0x080085f1
 800850c:	080085f1 	.word	0x080085f1
 8008510:	0800859b 	.word	0x0800859b
 8008514:	080085f1 	.word	0x080085f1
 8008518:	080085f1 	.word	0x080085f1
 800851c:	080085f1 	.word	0x080085f1
 8008520:	080085f1 	.word	0x080085f1
 8008524:	080085f1 	.word	0x080085f1
 8008528:	080085f1 	.word	0x080085f1
 800852c:	080085f1 	.word	0x080085f1
 8008530:	080085ab 	.word	0x080085ab
 8008534:	080085f1 	.word	0x080085f1
 8008538:	080085f1 	.word	0x080085f1
 800853c:	080085f1 	.word	0x080085f1
 8008540:	080085f1 	.word	0x080085f1
 8008544:	080085f1 	.word	0x080085f1
 8008548:	080085f1 	.word	0x080085f1
 800854c:	080085f1 	.word	0x080085f1
 8008550:	080085f1 	.word	0x080085f1
 8008554:	080085f1 	.word	0x080085f1
 8008558:	080085f1 	.word	0x080085f1
 800855c:	080085f1 	.word	0x080085f1
 8008560:	080085f1 	.word	0x080085f1
 8008564:	080085f1 	.word	0x080085f1
 8008568:	080085f1 	.word	0x080085f1
 800856c:	080085f1 	.word	0x080085f1
 8008570:	080085d1 	.word	0x080085d1
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	d02e      	beq.n	80085d6 <UART_SetConfig+0xc1e>
 8008578:	e03a      	b.n	80085f0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800857a:	f7fa fdf1 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 800857e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008580:	e03c      	b.n	80085fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008582:	f7fa fe03 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8008586:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008588:	e038      	b.n	80085fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858a:	f107 0314 	add.w	r3, r7, #20
 800858e:	4618      	mov	r0, r3
 8008590:	f7fc f946 	bl	8004820 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008598:	e030      	b.n	80085fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800859a:	f107 0308 	add.w	r3, r7, #8
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fc fa92 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085a8:	e028      	b.n	80085fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085aa:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <UART_SetConfig+0xc2c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <UART_SetConfig+0xc2c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	08db      	lsrs	r3, r3, #3
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	4a09      	ldr	r2, [pc, #36]	; (80085e8 <UART_SetConfig+0xc30>)
 80085c2:	fa22 f303 	lsr.w	r3, r2, r3
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085c8:	e018      	b.n	80085fc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80085ca:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <UART_SetConfig+0xc30>)
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085ce:	e015      	b.n	80085fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <UART_SetConfig+0xc34>)
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085d4:	e012      	b.n	80085fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085dc:	e00e      	b.n	80085fc <UART_SetConfig+0xc44>
 80085de:	bf00      	nop
 80085e0:	0800c7c4 	.word	0x0800c7c4
 80085e4:	58024400 	.word	0x58024400
 80085e8:	03d09000 	.word	0x03d09000
 80085ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80085fa:	bf00      	nop
    }

    if (pclk != 0U)
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d021      	beq.n	8008646 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	4a1a      	ldr	r2, [pc, #104]	; (8008670 <UART_SetConfig+0xcb8>)
 8008608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860c:	461a      	mov	r2, r3
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	fbb3 f2f2 	udiv	r2, r3, r2
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	441a      	add	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	fbb2 f3f3 	udiv	r3, r2, r3
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	2b0f      	cmp	r3, #15
 800862a:	d909      	bls.n	8008640 <UART_SetConfig+0xc88>
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008632:	d205      	bcs.n	8008640 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	e002      	b.n	8008646 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008662:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008666:	4618      	mov	r0, r3
 8008668:	3738      	adds	r7, #56	; 0x38
 800866a:	46bd      	mov	sp, r7
 800866c:	bdb0      	pop	{r4, r5, r7, pc}
 800866e:	bf00      	nop
 8008670:	0800c7c4 	.word	0x0800c7c4

08008674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e6:	f003 0308 	and.w	r3, r3, #8
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01a      	beq.n	800878a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008772:	d10a      	bne.n	800878a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af02      	add	r7, sp, #8
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087c8:	f7f8 ffc4 	bl	8001754 <HAL_GetTick>
 80087cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d10e      	bne.n	80087fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f82f 	bl	800884e <UART_WaitOnFlagUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e025      	b.n	8008846 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b04      	cmp	r3, #4
 8008806:	d10e      	bne.n	8008826 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f819 	bl	800884e <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e00f      	b.n	8008846 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b09c      	sub	sp, #112	; 0x70
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	603b      	str	r3, [r7, #0]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885e:	e0a9      	b.n	80089b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	f000 80a5 	beq.w	80089b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7f8 ff73 	bl	8001754 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <UART_WaitOnFlagUntilTimeout+0x32>
 800887a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800887c:	2b00      	cmp	r3, #0
 800887e:	d140      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800888e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008894:	667b      	str	r3, [r7, #100]	; 0x64
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800889e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e6      	bne.n	8008880 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	f023 0301 	bic.w	r3, r3, #1
 80088c8:	663b      	str	r3, [r7, #96]	; 0x60
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3308      	adds	r3, #8
 80088d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80088d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e5      	bne.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e069      	b.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d051      	beq.n	80089b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800891a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800891e:	d149      	bne.n	80089b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008928:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800893e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
 800894a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800894e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e6      	bne.n	800892a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	613b      	str	r3, [r7, #16]
   return(result);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	66bb      	str	r3, [r7, #104]	; 0x68
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3308      	adds	r3, #8
 800897a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800897c:	623a      	str	r2, [r7, #32]
 800897e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	69f9      	ldr	r1, [r7, #28]
 8008982:	6a3a      	ldr	r2, [r7, #32]
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	61bb      	str	r3, [r7, #24]
   return(result);
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e5      	bne.n	800895c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e010      	b.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69da      	ldr	r2, [r3, #28]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4013      	ands	r3, r2
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	bf0c      	ite	eq
 80089c4:	2301      	moveq	r3, #1
 80089c6:	2300      	movne	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	f43f af46 	beq.w	8008860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3770      	adds	r7, #112	; 0x70
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e027      	b.n	8008a44 <HAL_UARTEx_DisableFifoMode+0x66>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2224      	movs	r2, #36	; 0x24
 8008a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e02d      	b.n	8008ac4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2224      	movs	r2, #36	; 0x24
 8008a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f84f 	bl	8008b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d101      	bne.n	8008ae4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e02d      	b.n	8008b40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2224      	movs	r2, #36	; 0x24
 8008af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0201 	bic.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f811 	bl	8008b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b68:	e031      	b.n	8008bce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b6a:	2310      	movs	r3, #16
 8008b6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b6e:	2310      	movs	r3, #16
 8008b70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	0e5b      	lsrs	r3, r3, #25
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	0f5b      	lsrs	r3, r3, #29
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	7b3a      	ldrb	r2, [r7, #12]
 8008b96:	4911      	ldr	r1, [pc, #68]	; (8008bdc <UARTEx_SetNbDataToProcess+0x94>)
 8008b98:	5c8a      	ldrb	r2, [r1, r2]
 8008b9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b9e:	7b3a      	ldrb	r2, [r7, #12]
 8008ba0:	490f      	ldr	r1, [pc, #60]	; (8008be0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	7b7a      	ldrb	r2, [r7, #13]
 8008bb4:	4909      	ldr	r1, [pc, #36]	; (8008bdc <UARTEx_SetNbDataToProcess+0x94>)
 8008bb6:	5c8a      	ldrb	r2, [r1, r2]
 8008bb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bbc:	7b7a      	ldrb	r2, [r7, #13]
 8008bbe:	4908      	ldr	r1, [pc, #32]	; (8008be0 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	0800c7dc 	.word	0x0800c7dc
 8008be0:	0800c7e4 	.word	0x0800c7e4

08008be4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008be4:	b084      	sub	sp, #16
 8008be6:	b480      	push	{r7}
 8008be8:	b085      	sub	sp, #20
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	f107 001c 	add.w	r0, r7, #28
 8008bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008bfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008bfe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008c02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008c06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008c0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <SDMMC_Init+0x50>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	b004      	add	sp, #16
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	ffc02c00 	.word	0xffc02c00

08008c38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f043 0203 	orr.w	r2, r3, #3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008cd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008cd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008cde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <SDMMC_SendCommand+0x50>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	fffee0c0 	.word	0xfffee0c0

08008d08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	b2db      	uxtb	r3, r3
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	461a      	mov	r2, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	4413      	add	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008d6e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008d74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008d7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0

}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008dae:	2310      	movs	r3, #16
 8008db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff ff73 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd2:	2110      	movs	r1, #16
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa5f 	bl	8009298 <SDMMC_GetCmdResp1>
 8008dda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3720      	adds	r7, #32
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b088      	sub	sp, #32
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008df4:	2311      	movs	r3, #17
 8008df6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e08:	f107 0308 	add.w	r3, r7, #8
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff ff50 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e18:	2111      	movs	r1, #17
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa3c 	bl	8009298 <SDMMC_GetCmdResp1>
 8008e20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e22:	69fb      	ldr	r3, [r7, #28]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e3a:	2312      	movs	r3, #18
 8008e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e44:	2300      	movs	r3, #0
 8008e46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e4e:	f107 0308 	add.w	r3, r7, #8
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff ff2d 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e5e:	2112      	movs	r1, #18
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa19 	bl	8009298 <SDMMC_GetCmdResp1>
 8008e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e68:	69fb      	ldr	r3, [r7, #28]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b088      	sub	sp, #32
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e80:	2318      	movs	r3, #24
 8008e82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff ff0a 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea4:	2118      	movs	r1, #24
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f9f6 	bl	8009298 <SDMMC_GetCmdResp1>
 8008eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eae:	69fb      	ldr	r3, [r7, #28]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008ec6:	2319      	movs	r3, #25
 8008ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eda:	f107 0308 	add.w	r3, r7, #8
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fee7 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eea:	2119      	movs	r1, #25
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f9d3 	bl	8009298 <SDMMC_GetCmdResp1>
 8008ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f0c:	230c      	movs	r3, #12
 8008f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f1e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff feb8 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f44:	4a0b      	ldr	r2, [pc, #44]	; (8008f74 <SDMMC_CmdStopTransfer+0x74>)
 8008f46:	210c      	movs	r1, #12
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f9a5 	bl	8009298 <SDMMC_GetCmdResp1>
 8008f4e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f62:	d101      	bne.n	8008f68 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008f68:	69fb      	ldr	r3, [r7, #28]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	05f5e100 	.word	0x05f5e100

08008f78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f86:	2307      	movs	r3, #7
 8008f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff fe87 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008faa:	2107      	movs	r1, #7
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f973 	bl	8009298 <SDMMC_GetCmdResp1>
 8008fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fdc:	f107 0308 	add.w	r3, r7, #8
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff fe66 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb97 	bl	800971c <SDMMC_GetCmdError>
 8008fee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b088      	sub	sp, #32
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009002:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009008:	2308      	movs	r3, #8
 800900a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800900c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800901a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fe46 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fb29 	bl	8009680 <SDMMC_GetCmdResp7>
 800902e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009030:	69fb      	ldr	r3, [r7, #28]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b088      	sub	sp, #32
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009048:	2337      	movs	r3, #55	; 0x37
 800904a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800904c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800905a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fe26 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009068:	f241 3288 	movw	r2, #5000	; 0x1388
 800906c:	2137      	movs	r1, #55	; 0x37
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f912 	bl	8009298 <SDMMC_GetCmdResp1>
 8009074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800908e:	2329      	movs	r3, #41	; 0x29
 8009090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009098:	2300      	movs	r3, #0
 800909a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800909c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090a2:	f107 0308 	add.w	r3, r7, #8
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff fe03 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa2e 	bl	8009510 <SDMMC_GetCmdResp3>
 80090b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090b6:	69fb      	ldr	r3, [r7, #28]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090ce:	2306      	movs	r3, #6
 80090d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff fde3 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80090f2:	2106      	movs	r1, #6
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f8cf 	bl	8009298 <SDMMC_GetCmdResp1>
 80090fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090fc:	69fb      	ldr	r3, [r7, #28]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b088      	sub	sp, #32
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009112:	2333      	movs	r3, #51	; 0x33
 8009114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800911a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009124:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff fdc1 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009132:	f241 3288 	movw	r2, #5000	; 0x1388
 8009136:	2133      	movs	r1, #51	; 0x33
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f8ad 	bl	8009298 <SDMMC_GetCmdResp1>
 800913e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009140:	69fb      	ldr	r3, [r7, #28]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b088      	sub	sp, #32
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009156:	2302      	movs	r3, #2
 8009158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800915a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800915e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff fd9f 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f980 	bl	800947c <SDMMC_GetCmdResp2>
 800917c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800917e:	69fb      	ldr	r3, [r7, #28]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009196:	2309      	movs	r3, #9
 8009198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800919a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800919e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091a0:	2300      	movs	r3, #0
 80091a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091aa:	f107 0308 	add.w	r3, r7, #8
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff fd7f 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f960 	bl	800947c <SDMMC_GetCmdResp2>
 80091bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091be:	69fb      	ldr	r3, [r7, #28]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3720      	adds	r7, #32
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091d6:	2303      	movs	r3, #3
 80091d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fd5f 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	2103      	movs	r1, #3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9c8 	bl	8009590 <SDMMC_GetCmdResp6>
 8009200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009202:	69fb      	ldr	r3, [r7, #28]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3720      	adds	r7, #32
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800921a:	230d      	movs	r3, #13
 800921c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800921e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7ff fd3d 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800923a:	f241 3288 	movw	r2, #5000	; 0x1388
 800923e:	210d      	movs	r1, #13
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f829 	bl	8009298 <SDMMC_GetCmdResp1>
 8009246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009248:	69fb      	ldr	r3, [r7, #28]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b088      	sub	sp, #32
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800925e:	230d      	movs	r3, #13
 8009260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800926c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff fd1b 	bl	8008cb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800927e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009282:	210d      	movs	r1, #13
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f807 	bl	8009298 <SDMMC_GetCmdResp1>
 800928a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800928c:	69fb      	ldr	r3, [r7, #28]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	460b      	mov	r3, r1
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80092a6:	4b70      	ldr	r3, [pc, #448]	; (8009468 <SDMMC_GetCmdResp1+0x1d0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a70      	ldr	r2, [pc, #448]	; (800946c <SDMMC_GetCmdResp1+0x1d4>)
 80092ac:	fba2 2303 	umull	r2, r3, r2, r3
 80092b0:	0a5a      	lsrs	r2, r3, #9
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	1e5a      	subs	r2, r3, #1
 80092be:	61fa      	str	r2, [r7, #28]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092c8:	e0c9      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	4b67      	ldr	r3, [pc, #412]	; (8009470 <SDMMC_GetCmdResp1+0x1d8>)
 80092d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0ef      	beq.n	80092ba <SDMMC_GetCmdResp1+0x22>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1ea      	bne.n	80092ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2204      	movs	r2, #4
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092f6:	2304      	movs	r3, #4
 80092f8:	e0b1      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800930c:	2301      	movs	r3, #1
 800930e:	e0a6      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4a58      	ldr	r2, [pc, #352]	; (8009474 <SDMMC_GetCmdResp1+0x1dc>)
 8009314:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff fcf6 	bl	8008d08 <SDMMC_GetCommandResponse>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	4293      	cmp	r3, r2
 8009324:	d001      	beq.n	800932a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009326:	2301      	movs	r3, #1
 8009328:	e099      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800932a:	2100      	movs	r1, #0
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff fcf8 	bl	8008d22 <SDMMC_GetResponse>
 8009332:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	4b50      	ldr	r3, [pc, #320]	; (8009478 <SDMMC_GetCmdResp1+0x1e0>)
 8009338:	4013      	ands	r3, r2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	e08d      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	da02      	bge.n	800934e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800934c:	e087      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009358:	2340      	movs	r3, #64	; 0x40
 800935a:	e080      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	e079      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009378:	e071      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009388:	e069      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009398:	e061      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093a8:	e059      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b8:	e051      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093c8:	e049      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80093d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093d8:	e041      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80093e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e8:	e039      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093f8:	e031      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009408:	e029      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009414:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009418:	e021      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009424:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009428:	e019      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009434:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009438:	e011      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009444:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009448:	e009      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009454:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009458:	e001      	b.n	800945e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800945a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800945e:	4618      	mov	r0, r3
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	24000004 	.word	0x24000004
 800946c:	10624dd3 	.word	0x10624dd3
 8009470:	00200045 	.word	0x00200045
 8009474:	002000c5 	.word	0x002000c5
 8009478:	fdffe008 	.word	0xfdffe008

0800947c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009484:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <SDMMC_GetCmdResp2+0x88>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <SDMMC_GetCmdResp2+0x8c>)
 800948a:	fba2 2303 	umull	r2, r3, r2, r3
 800948e:	0a5b      	lsrs	r3, r3, #9
 8009490:	f241 3288 	movw	r2, #5000	; 0x1388
 8009494:	fb02 f303 	mul.w	r3, r2, r3
 8009498:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	1e5a      	subs	r2, r3, #1
 800949e:	60fa      	str	r2, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a8:	e026      	b.n	80094f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0ef      	beq.n	800949a <SDMMC_GetCmdResp2+0x1e>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1ea      	bne.n	800949a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2204      	movs	r2, #4
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094d6:	2304      	movs	r3, #4
 80094d8:	e00e      	b.n	80094f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e003      	b.n	80094f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a06      	ldr	r2, [pc, #24]	; (800950c <SDMMC_GetCmdResp2+0x90>)
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	24000004 	.word	0x24000004
 8009508:	10624dd3 	.word	0x10624dd3
 800950c:	002000c5 	.word	0x002000c5

08009510 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <SDMMC_GetCmdResp3+0x74>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <SDMMC_GetCmdResp3+0x78>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	0a5b      	lsrs	r3, r3, #9
 8009524:	f241 3288 	movw	r2, #5000	; 0x1388
 8009528:	fb02 f303 	mul.w	r3, r2, r3
 800952c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	60fa      	str	r2, [r7, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800953c:	e01b      	b.n	8009576 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0ef      	beq.n	800952e <SDMMC_GetCmdResp3+0x1e>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1ea      	bne.n	800952e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800956a:	2304      	movs	r3, #4
 800956c:	e003      	b.n	8009576 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a06      	ldr	r2, [pc, #24]	; (800958c <SDMMC_GetCmdResp3+0x7c>)
 8009572:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	24000004 	.word	0x24000004
 8009588:	10624dd3 	.word	0x10624dd3
 800958c:	002000c5 	.word	0x002000c5

08009590 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	460b      	mov	r3, r1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800959e:	4b35      	ldr	r3, [pc, #212]	; (8009674 <SDMMC_GetCmdResp6+0xe4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a35      	ldr	r2, [pc, #212]	; (8009678 <SDMMC_GetCmdResp6+0xe8>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	0a5b      	lsrs	r3, r3, #9
 80095aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
 80095b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	1e5a      	subs	r2, r3, #1
 80095b8:	61fa      	str	r2, [r7, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095c2:	e052      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0ef      	beq.n	80095b4 <SDMMC_GetCmdResp6+0x24>
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1ea      	bne.n	80095b4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2204      	movs	r2, #4
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095f0:	2304      	movs	r3, #4
 80095f2:	e03a      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2201      	movs	r2, #1
 8009604:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009606:	2301      	movs	r3, #1
 8009608:	e02f      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff fb7c 	bl	8008d08 <SDMMC_GetCommandResponse>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	4293      	cmp	r3, r2
 8009618:	d001      	beq.n	800961e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800961a:	2301      	movs	r3, #1
 800961c:	e025      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4a16      	ldr	r2, [pc, #88]	; (800967c <SDMMC_GetCmdResp6+0xec>)
 8009622:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009624:	2100      	movs	r1, #0
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7ff fb7b 	bl	8008d22 <SDMMC_GetResponse>
 800962c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	0c1b      	lsrs	r3, r3, #16
 800963c:	b29a      	uxth	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009642:	2300      	movs	r3, #0
 8009644:	e011      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009654:	e009      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009664:	e001      	b.n	800966a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	24000004 	.word	0x24000004
 8009678:	10624dd3 	.word	0x10624dd3
 800967c:	002000c5 	.word	0x002000c5

08009680 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009688:	4b22      	ldr	r3, [pc, #136]	; (8009714 <SDMMC_GetCmdResp7+0x94>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a22      	ldr	r2, [pc, #136]	; (8009718 <SDMMC_GetCmdResp7+0x98>)
 800968e:	fba2 2303 	umull	r2, r3, r2, r3
 8009692:	0a5b      	lsrs	r3, r3, #9
 8009694:	f241 3288 	movw	r2, #5000	; 0x1388
 8009698:	fb02 f303 	mul.w	r3, r2, r3
 800969c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1e5a      	subs	r2, r3, #1
 80096a2:	60fa      	str	r2, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096ac:	e02c      	b.n	8009708 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0ef      	beq.n	800969e <SDMMC_GetCmdResp7+0x1e>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1ea      	bne.n	800969e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2204      	movs	r2, #4
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096da:	2304      	movs	r3, #4
 80096dc:	e014      	b.n	8009708 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e009      	b.n	8009708 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2240      	movs	r2, #64	; 0x40
 8009704:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009706:	2300      	movs	r3, #0

}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	24000004 	.word	0x24000004
 8009718:	10624dd3 	.word	0x10624dd3

0800971c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009724:	4b11      	ldr	r3, [pc, #68]	; (800976c <SDMMC_GetCmdError+0x50>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a11      	ldr	r2, [pc, #68]	; (8009770 <SDMMC_GetCmdError+0x54>)
 800972a:	fba2 2303 	umull	r2, r3, r2, r3
 800972e:	0a5b      	lsrs	r3, r3, #9
 8009730:	f241 3288 	movw	r2, #5000	; 0x1388
 8009734:	fb02 f303 	mul.w	r3, r2, r3
 8009738:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	1e5a      	subs	r2, r3, #1
 800973e:	60fa      	str	r2, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d102      	bne.n	800974a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009744:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009748:	e009      	b.n	800975e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f1      	beq.n	800973a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a06      	ldr	r2, [pc, #24]	; (8009774 <SDMMC_GetCmdError+0x58>)
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	24000004 	.word	0x24000004
 8009770:	10624dd3 	.word	0x10624dd3
 8009774:	002000c5 	.word	0x002000c5

08009778 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800977c:	4904      	ldr	r1, [pc, #16]	; (8009790 <MX_FATFS_Init+0x18>)
 800977e:	4805      	ldr	r0, [pc, #20]	; (8009794 <MX_FATFS_Init+0x1c>)
 8009780:	f002 ff9a 	bl	800c6b8 <FATFS_LinkDriver>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	4b03      	ldr	r3, [pc, #12]	; (8009798 <MX_FATFS_Init+0x20>)
 800978a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800978c:	bf00      	nop
 800978e:	bd80      	pop	{r7, pc}
 8009790:	24000360 	.word	0x24000360
 8009794:	0800c7ec 	.word	0x0800c7ec
 8009798:	2400035c 	.word	0x2400035c

0800979c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80097a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80097b6:	f000 f89b 	bl	80098f0 <BSP_SD_IsDetected>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d001      	beq.n	80097c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80097c0:	2302      	movs	r3, #2
 80097c2:	e012      	b.n	80097ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80097c4:	480b      	ldr	r0, [pc, #44]	; (80097f4 <BSP_SD_Init+0x48>)
 80097c6:	f7fb fd89 	bl	80052dc <HAL_SD_Init>
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d109      	bne.n	80097e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80097d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80097d8:	4806      	ldr	r0, [pc, #24]	; (80097f4 <BSP_SD_Init+0x48>)
 80097da:	f7fc fdff 	bl	80063dc <HAL_SD_ConfigWideBusOperation>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80097e8:	79fb      	ldrb	r3, [r7, #7]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	240000f8 	.word	0x240000f8

080097f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	4806      	ldr	r0, [pc, #24]	; (8009830 <BSP_SD_ReadBlocks+0x38>)
 8009816:	f7fb fe7b 	bl	8005510 <HAL_SD_ReadBlocks>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	240000f8 	.word	0x240000f8

08009834 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	68f9      	ldr	r1, [r7, #12]
 8009850:	4806      	ldr	r0, [pc, #24]	; (800986c <BSP_SD_WriteBlocks+0x38>)
 8009852:	f7fb ffe7 	bl	8005824 <HAL_SD_WriteBlocks>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	240000f8 	.word	0x240000f8

08009870 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009874:	4805      	ldr	r0, [pc, #20]	; (800988c <BSP_SD_GetCardState+0x1c>)
 8009876:	f7fc fec3 	bl	8006600 <HAL_SD_GetCardState>
 800987a:	4603      	mov	r3, r0
 800987c:	2b04      	cmp	r3, #4
 800987e:	bf14      	ite	ne
 8009880:	2301      	movne	r3, #1
 8009882:	2300      	moveq	r3, #0
 8009884:	b2db      	uxtb	r3, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	240000f8 	.word	0x240000f8

08009890 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4803      	ldr	r0, [pc, #12]	; (80098a8 <BSP_SD_GetCardInfo+0x18>)
 800989c:	f7fc fd72 	bl	8006384 <HAL_SD_GetCardInfo>
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	240000f8 	.word	0x240000f8

080098ac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80098b4:	f000 f80e 	bl	80098d4 <BSP_SD_WriteCpltCallback>
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80098c8:	f000 f80b 	bl	80098e2 <BSP_SD_ReadCpltCallback>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80098d4:	b480      	push	{r7}
 80098d6:	af00      	add	r7, sp, #0

}
 80098d8:	bf00      	nop
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80098e2:	b480      	push	{r7}
 80098e4:	af00      	add	r7, sp, #0

}
 80098e6:	bf00      	nop
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80098f6:	2301      	movs	r3, #1
 80098f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80098fa:	f000 f80b 	bl	8009914 <BSP_PlatformIsDetected>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009904:	2300      	movs	r3, #0
 8009906:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	b2db      	uxtb	r3, r3
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800991a:	2301      	movs	r3, #1
 800991c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800991e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009922:	4806      	ldr	r0, [pc, #24]	; (800993c <BSP_PlatformIsDetected+0x28>)
 8009924:	f7f8 f9fe 	bl	8001d24 <HAL_GPIO_ReadPin>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800992e:	2300      	movs	r3, #0
 8009930:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009932:	79fb      	ldrb	r3, [r7, #7]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	58020800 	.word	0x58020800

08009940 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800994a:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <SD_CheckStatus+0x38>)
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009950:	f7ff ff8e 	bl	8009870 <BSP_SD_GetCardState>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d107      	bne.n	800996a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <SD_CheckStatus+0x38>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	b2da      	uxtb	r2, r3
 8009966:	4b04      	ldr	r3, [pc, #16]	; (8009978 <SD_CheckStatus+0x38>)
 8009968:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800996a:	4b03      	ldr	r3, [pc, #12]	; (8009978 <SD_CheckStatus+0x38>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b2db      	uxtb	r3, r3
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	24000011 	.word	0x24000011

0800997c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009986:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <SD_initialize+0x38>)
 8009988:	2201      	movs	r2, #1
 800998a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800998c:	f7ff ff0e 	bl	80097ac <BSP_SD_Init>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d107      	bne.n	80099a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff ffd1 	bl	8009940 <SD_CheckStatus>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <SD_initialize+0x38>)
 80099a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80099a6:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <SD_initialize+0x38>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	b2db      	uxtb	r3, r3
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	24000011 	.word	0x24000011

080099b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff ffbb 	bl	8009940 <SD_CheckStatus>
 80099ca:	4603      	mov	r3, r0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	607a      	str	r2, [r7, #4]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f7ff ff01 	bl	80097f8 <BSP_SD_ReadBlocks>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d107      	bne.n	8009a0c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80099fc:	bf00      	nop
 80099fe:	f7ff ff37 	bl	8009870 <BSP_SD_GetCardState>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1fa      	bne.n	80099fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	68b8      	ldr	r0, [r7, #8]
 8009a34:	f7ff fefe 	bl	8009834 <BSP_SD_WriteBlocks>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d107      	bne.n	8009a4e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009a3e:	bf00      	nop
 8009a40:	f7ff ff16 	bl	8009870 <BSP_SD_GetCardState>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1fa      	bne.n	8009a40 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08c      	sub	sp, #48	; 0x30
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	603a      	str	r2, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
 8009a64:	460b      	mov	r3, r1
 8009a66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009a6e:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <SD_ioctl+0xac>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <SD_ioctl+0x28>
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e03c      	b.n	8009afa <SD_ioctl+0xa2>

  switch (cmd)
 8009a80:	79bb      	ldrb	r3, [r7, #6]
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d834      	bhi.n	8009af0 <SD_ioctl+0x98>
 8009a86:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <SD_ioctl+0x34>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009aa5 	.word	0x08009aa5
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009ad7 	.word	0x08009ad7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009aa2:	e028      	b.n	8009af6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009aa4:	f107 0308 	add.w	r3, r7, #8
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff fef1 	bl	8009890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009aae:	6a3a      	ldr	r2, [r7, #32]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009aba:	e01c      	b.n	8009af6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009abc:	f107 0308 	add.w	r3, r7, #8
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff fee5 	bl	8009890 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ad4:	e00f      	b.n	8009af6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ad6:	f107 0308 	add.w	r3, r7, #8
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff fed8 	bl	8009890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	0a5a      	lsrs	r2, r3, #9
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009aee:	e002      	b.n	8009af6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009af0:	2304      	movs	r3, #4
 8009af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3730      	adds	r7, #48	; 0x30
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	24000011 	.word	0x24000011

08009b08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <disk_status+0x30>)
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	79fa      	ldrb	r2, [r7, #7]
 8009b20:	4905      	ldr	r1, [pc, #20]	; (8009b38 <disk_status+0x30>)
 8009b22:	440a      	add	r2, r1
 8009b24:	7a12      	ldrb	r2, [r2, #8]
 8009b26:	4610      	mov	r0, r2
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	2400005c 	.word	0x2400005c

08009b3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	4a0d      	ldr	r2, [pc, #52]	; (8009b84 <disk_initialize+0x48>)
 8009b4e:	5cd3      	ldrb	r3, [r2, r3]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d111      	bne.n	8009b78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	4a0b      	ldr	r2, [pc, #44]	; (8009b84 <disk_initialize+0x48>)
 8009b58:	2101      	movs	r1, #1
 8009b5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	4a09      	ldr	r2, [pc, #36]	; (8009b84 <disk_initialize+0x48>)
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	4906      	ldr	r1, [pc, #24]	; (8009b84 <disk_initialize+0x48>)
 8009b6c:	440a      	add	r2, r1
 8009b6e:	7a12      	ldrb	r2, [r2, #8]
 8009b70:	4610      	mov	r0, r2
 8009b72:	4798      	blx	r3
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	2400005c 	.word	0x2400005c

08009b88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b88:	b590      	push	{r4, r7, lr}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4a0a      	ldr	r2, [pc, #40]	; (8009bc4 <disk_read+0x3c>)
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	689c      	ldr	r4, [r3, #8]
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
 8009ba6:	4a07      	ldr	r2, [pc, #28]	; (8009bc4 <disk_read+0x3c>)
 8009ba8:	4413      	add	r3, r2
 8009baa:	7a18      	ldrb	r0, [r3, #8]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	47a0      	blx	r4
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd90      	pop	{r4, r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	2400005c 	.word	0x2400005c

08009bc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4a0a      	ldr	r2, [pc, #40]	; (8009c04 <disk_write+0x3c>)
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	68dc      	ldr	r4, [r3, #12]
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	4a07      	ldr	r2, [pc, #28]	; (8009c04 <disk_write+0x3c>)
 8009be8:	4413      	add	r3, r2
 8009bea:	7a18      	ldrb	r0, [r3, #8]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	47a0      	blx	r4
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd90      	pop	{r4, r7, pc}
 8009c02:	bf00      	nop
 8009c04:	2400005c 	.word	0x2400005c

08009c08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	603a      	str	r2, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
 8009c14:	460b      	mov	r3, r1
 8009c16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <disk_ioctl+0x38>)
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	79fa      	ldrb	r2, [r7, #7]
 8009c26:	4906      	ldr	r1, [pc, #24]	; (8009c40 <disk_ioctl+0x38>)
 8009c28:	440a      	add	r2, r1
 8009c2a:	7a10      	ldrb	r0, [r2, #8]
 8009c2c:	79b9      	ldrb	r1, [r7, #6]
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4798      	blx	r3
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	2400005c 	.word	0x2400005c

08009c44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c54:	89fb      	ldrh	r3, [r7, #14]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b21a      	sxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b21b      	sxth	r3, r3
 8009c60:	4313      	orrs	r3, r2
 8009c62:	b21b      	sxth	r3, r3
 8009c64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c66:	89fb      	ldrh	r3, [r7, #14]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	3202      	adds	r2, #2
 8009c8c:	7812      	ldrb	r2, [r2, #0]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	021b      	lsls	r3, r3, #8
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	3201      	adds	r2, #1
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7812      	ldrb	r2, [r2, #0]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cac:	68fb      	ldr	r3, [r7, #12]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	887a      	ldrh	r2, [r7, #2]
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	701a      	strb	r2, [r3, #0]
 8009cd2:	887b      	ldrh	r3, [r7, #2]
 8009cd4:	0a1b      	lsrs	r3, r3, #8
 8009cd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	887a      	ldrh	r2, [r7, #2]
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	0a1b      	lsrs	r3, r3, #8
 8009d0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	b2d2      	uxtb	r2, r2
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00d      	beq.n	8009d7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	1c53      	adds	r3, r2, #1
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	1c59      	adds	r1, r3, #1
 8009d6c:	6179      	str	r1, [r7, #20]
 8009d6e:	7812      	ldrb	r2, [r2, #0]
 8009d70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	607b      	str	r3, [r7, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f1      	bne.n	8009d62 <mem_cpy+0x1a>
	}
}
 8009d7e:	bf00      	nop
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d8a:	b480      	push	{r7}
 8009d8c:	b087      	sub	sp, #28
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	617a      	str	r2, [r7, #20]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	607b      	str	r3, [r7, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1f3      	bne.n	8009d9a <mem_set+0x10>
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009dc0:	b480      	push	{r7}
 8009dc2:	b089      	sub	sp, #36	; 0x24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	61fb      	str	r3, [r7, #28]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	61fa      	str	r2, [r7, #28]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4619      	mov	r1, r3
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	61ba      	str	r2, [r7, #24]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	1acb      	subs	r3, r1, r3
 8009dec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <mem_cmp+0x40>
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0eb      	beq.n	8009dd8 <mem_cmp+0x18>

	return r;
 8009e00:	697b      	ldr	r3, [r7, #20]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3724      	adds	r7, #36	; 0x24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e18:	e002      	b.n	8009e20 <chk_chr+0x12>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <chk_chr+0x26>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d1f2      	bne.n	8009e1a <chk_chr+0xc>
	return *str;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	781b      	ldrb	r3, [r3, #0]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	e029      	b.n	8009eac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e58:	4a27      	ldr	r2, [pc, #156]	; (8009ef8 <chk_lock+0xb4>)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	4413      	add	r3, r2
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01d      	beq.n	8009ea2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e66:	4a24      	ldr	r2, [pc, #144]	; (8009ef8 <chk_lock+0xb4>)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	4413      	add	r3, r2
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d116      	bne.n	8009ea6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <chk_lock+0xb4>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	4413      	add	r3, r2
 8009e80:	3304      	adds	r3, #4
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d10c      	bne.n	8009ea6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e8c:	4a1a      	ldr	r2, [pc, #104]	; (8009ef8 <chk_lock+0xb4>)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	4413      	add	r3, r2
 8009e94:	3308      	adds	r3, #8
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d102      	bne.n	8009ea6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ea0:	e007      	b.n	8009eb2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d9d2      	bls.n	8009e58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d109      	bne.n	8009ecc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <chk_lock+0x80>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d101      	bne.n	8009ec8 <chk_lock+0x84>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e010      	b.n	8009eea <chk_lock+0xa6>
 8009ec8:	2312      	movs	r3, #18
 8009eca:	e00e      	b.n	8009eea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d108      	bne.n	8009ee4 <chk_lock+0xa0>
 8009ed2:	4a09      	ldr	r2, [pc, #36]	; (8009ef8 <chk_lock+0xb4>)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	4413      	add	r3, r2
 8009eda:	330c      	adds	r3, #12
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee2:	d101      	bne.n	8009ee8 <chk_lock+0xa4>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	e000      	b.n	8009eea <chk_lock+0xa6>
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	2400003c 	.word	0x2400003c

08009efc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]
 8009f06:	e002      	b.n	8009f0e <enq_lock+0x12>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	607b      	str	r3, [r7, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d806      	bhi.n	8009f22 <enq_lock+0x26>
 8009f14:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <enq_lock+0x40>)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	4413      	add	r3, r2
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f2      	bne.n	8009f08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	bf14      	ite	ne
 8009f28:	2301      	movne	r3, #1
 8009f2a:	2300      	moveq	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	2400003c 	.word	0x2400003c

08009f40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e01f      	b.n	8009f90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f50:	4a41      	ldr	r2, [pc, #260]	; (800a058 <inc_lock+0x118>)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	4413      	add	r3, r2
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d113      	bne.n	8009f8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f62:	4a3d      	ldr	r2, [pc, #244]	; (800a058 <inc_lock+0x118>)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	4413      	add	r3, r2
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d109      	bne.n	8009f8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f76:	4a38      	ldr	r2, [pc, #224]	; (800a058 <inc_lock+0x118>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3308      	adds	r3, #8
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d006      	beq.n	8009f98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d9dc      	bls.n	8009f50 <inc_lock+0x10>
 8009f96:	e000      	b.n	8009f9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d132      	bne.n	800a006 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	e002      	b.n	8009fac <inc_lock+0x6c>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d806      	bhi.n	8009fc0 <inc_lock+0x80>
 8009fb2:	4a29      	ldr	r2, [pc, #164]	; (800a058 <inc_lock+0x118>)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	4413      	add	r3, r2
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1f2      	bne.n	8009fa6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d101      	bne.n	8009fca <inc_lock+0x8a>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e040      	b.n	800a04c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4922      	ldr	r1, [pc, #136]	; (800a058 <inc_lock+0x118>)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	440b      	add	r3, r1
 8009fd6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	491e      	ldr	r1, [pc, #120]	; (800a058 <inc_lock+0x118>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	695a      	ldr	r2, [r3, #20]
 8009fec:	491a      	ldr	r1, [pc, #104]	; (800a058 <inc_lock+0x118>)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	440b      	add	r3, r1
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ff8:	4a17      	ldr	r2, [pc, #92]	; (800a058 <inc_lock+0x118>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4413      	add	r3, r2
 800a000:	330c      	adds	r3, #12
 800a002:	2200      	movs	r2, #0
 800a004:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d009      	beq.n	800a020 <inc_lock+0xe0>
 800a00c:	4a12      	ldr	r2, [pc, #72]	; (800a058 <inc_lock+0x118>)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	4413      	add	r3, r2
 800a014:	330c      	adds	r3, #12
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <inc_lock+0xe0>
 800a01c:	2300      	movs	r3, #0
 800a01e:	e015      	b.n	800a04c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d108      	bne.n	800a038 <inc_lock+0xf8>
 800a026:	4a0c      	ldr	r2, [pc, #48]	; (800a058 <inc_lock+0x118>)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	4413      	add	r3, r2
 800a02e:	330c      	adds	r3, #12
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	3301      	adds	r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	e001      	b.n	800a03c <inc_lock+0xfc>
 800a038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a03c:	4906      	ldr	r1, [pc, #24]	; (800a058 <inc_lock+0x118>)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	440b      	add	r3, r1
 800a044:	330c      	adds	r3, #12
 800a046:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	2400003c 	.word	0x2400003c

0800a05c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3b01      	subs	r3, #1
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d825      	bhi.n	800a0bc <dec_lock+0x60>
		n = Files[i].ctr;
 800a070:	4a17      	ldr	r2, [pc, #92]	; (800a0d0 <dec_lock+0x74>)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4413      	add	r3, r2
 800a078:	330c      	adds	r3, #12
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a07e:	89fb      	ldrh	r3, [r7, #14]
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	d101      	bne.n	800a08a <dec_lock+0x2e>
 800a086:	2300      	movs	r3, #0
 800a088:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a08a:	89fb      	ldrh	r3, [r7, #14]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <dec_lock+0x3a>
 800a090:	89fb      	ldrh	r3, [r7, #14]
 800a092:	3b01      	subs	r3, #1
 800a094:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a096:	4a0e      	ldr	r2, [pc, #56]	; (800a0d0 <dec_lock+0x74>)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	4413      	add	r3, r2
 800a09e:	330c      	adds	r3, #12
 800a0a0:	89fa      	ldrh	r2, [r7, #14]
 800a0a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d105      	bne.n	800a0b6 <dec_lock+0x5a>
 800a0aa:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <dec_lock+0x74>)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	4413      	add	r3, r2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	737b      	strb	r3, [r7, #13]
 800a0ba:	e001      	b.n	800a0c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0bc:	2302      	movs	r3, #2
 800a0be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	2400003c 	.word	0x2400003c

0800a0d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e010      	b.n	800a104 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0e2:	4a0d      	ldr	r2, [pc, #52]	; (800a118 <clear_lock+0x44>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d105      	bne.n	800a0fe <clear_lock+0x2a>
 800a0f2:	4a09      	ldr	r2, [pc, #36]	; (800a118 <clear_lock+0x44>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d9eb      	bls.n	800a0e2 <clear_lock+0xe>
	}
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	2400003c 	.word	0x2400003c

0800a11c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	78db      	ldrb	r3, [r3, #3]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d034      	beq.n	800a19a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7858      	ldrb	r0, [r3, #1]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a140:	2301      	movs	r3, #1
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	f7ff fd40 	bl	8009bc8 <disk_write>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
 800a152:	e022      	b.n	800a19a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d217      	bcs.n	800a19a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	789b      	ldrb	r3, [r3, #2]
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	e010      	b.n	800a194 <sync_window+0x78>
					wsect += fs->fsize;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4413      	add	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7858      	ldrb	r0, [r3, #1]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a186:	2301      	movs	r3, #1
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	f7ff fd1d 	bl	8009bc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d8eb      	bhi.n	800a172 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d01b      	beq.n	800a1f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff ffad 	bl	800a11c <sync_window>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d113      	bne.n	800a1f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7858      	ldrb	r0, [r3, #1]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	f7ff fcd5 	bl	8009b88 <disk_read>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d004      	beq.n	800a1ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ff87 	bl	800a11c <sync_window>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d158      	bne.n	800a2ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d148      	bne.n	800a2b2 <sync_fs+0xb2>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d144      	bne.n	800a2b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3330      	adds	r3, #48	; 0x30
 800a22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fda9 	bl	8009d8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3330      	adds	r3, #48	; 0x30
 800a23c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a240:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fd38 	bl	8009cba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3330      	adds	r3, #48	; 0x30
 800a24e:	4921      	ldr	r1, [pc, #132]	; (800a2d4 <sync_fs+0xd4>)
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fd4d 	bl	8009cf0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3330      	adds	r3, #48	; 0x30
 800a25a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a25e:	491e      	ldr	r1, [pc, #120]	; (800a2d8 <sync_fs+0xd8>)
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fd45 	bl	8009cf0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3330      	adds	r3, #48	; 0x30
 800a26a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7ff fd3b 	bl	8009cf0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3330      	adds	r3, #48	; 0x30
 800a27e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7ff fd31 	bl	8009cf0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7858      	ldrb	r0, [r3, #1]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f7ff fc8e 	bl	8009bc8 <disk_write>
			fs->fsi_flag = 0;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fca4 	bl	8009c08 <disk_ioctl>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <sync_fs+0xca>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	41615252 	.word	0x41615252
 800a2d8:	61417272 	.word	0x61417272

0800a2dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	3b02      	subs	r3, #2
 800a2ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	3b02      	subs	r3, #2
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d301      	bcc.n	800a2fc <clust2sect+0x20>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e008      	b.n	800a30e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	895b      	ldrh	r3, [r3, #10]
 800a300:	461a      	mov	r2, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	fb03 f202 	mul.w	r2, r3, r2
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	4413      	add	r3, r2
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b086      	sub	sp, #24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d904      	bls.n	800a33a <get_fat+0x20>
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d302      	bcc.n	800a340 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a33a:	2301      	movs	r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	e08f      	b.n	800a460 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d062      	beq.n	800a414 <get_fat+0xfa>
 800a34e:	2b03      	cmp	r3, #3
 800a350:	dc7c      	bgt.n	800a44c <get_fat+0x132>
 800a352:	2b01      	cmp	r3, #1
 800a354:	d002      	beq.n	800a35c <get_fat+0x42>
 800a356:	2b02      	cmp	r3, #2
 800a358:	d042      	beq.n	800a3e0 <get_fat+0xc6>
 800a35a:	e077      	b.n	800a44c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	085b      	lsrs	r3, r3, #1
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6a1a      	ldr	r2, [r3, #32]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	0a5b      	lsrs	r3, r3, #9
 800a372:	4413      	add	r3, r2
 800a374:	4619      	mov	r1, r3
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	f7ff ff14 	bl	800a1a4 <move_window>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d167      	bne.n	800a452 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	60fa      	str	r2, [r7, #12]
 800a388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4413      	add	r3, r2
 800a390:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a394:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6a1a      	ldr	r2, [r3, #32]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	0a5b      	lsrs	r3, r3, #9
 800a39e:	4413      	add	r3, r2
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6938      	ldr	r0, [r7, #16]
 800a3a4:	f7ff fefe 	bl	800a1a4 <move_window>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d153      	bne.n	800a456 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <get_fat+0xbc>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	091b      	lsrs	r3, r3, #4
 800a3d4:	e002      	b.n	800a3dc <get_fat+0xc2>
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3dc:	617b      	str	r3, [r7, #20]
			break;
 800a3de:	e03f      	b.n	800a460 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	4413      	add	r3, r2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6938      	ldr	r0, [r7, #16]
 800a3ee:	f7ff fed9 	bl	800a1a4 <move_window>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d130      	bne.n	800a45a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a406:	4413      	add	r3, r2
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fc1b 	bl	8009c44 <ld_word>
 800a40e:	4603      	mov	r3, r0
 800a410:	617b      	str	r3, [r7, #20]
			break;
 800a412:	e025      	b.n	800a460 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6a1a      	ldr	r2, [r3, #32]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	09db      	lsrs	r3, r3, #7
 800a41c:	4413      	add	r3, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	6938      	ldr	r0, [r7, #16]
 800a422:	f7ff febf 	bl	800a1a4 <move_window>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d118      	bne.n	800a45e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a43a:	4413      	add	r3, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff fc19 	bl	8009c74 <ld_dword>
 800a442:	4603      	mov	r3, r0
 800a444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a448:	617b      	str	r3, [r7, #20]
			break;
 800a44a:	e009      	b.n	800a460 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a44c:	2301      	movs	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	e006      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a452:	bf00      	nop
 800a454:	e004      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a456:	bf00      	nop
 800a458:	e002      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a45a:	bf00      	nop
 800a45c:	e000      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a45e:	bf00      	nop
		}
	}

	return val;
 800a460:	697b      	ldr	r3, [r7, #20]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a46a:	b590      	push	{r4, r7, lr}
 800a46c:	b089      	sub	sp, #36	; 0x24
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a476:	2302      	movs	r3, #2
 800a478:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	f240 80d2 	bls.w	800a626 <put_fat+0x1bc>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	429a      	cmp	r2, r3
 800a48a:	f080 80cc 	bcs.w	800a626 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b03      	cmp	r3, #3
 800a494:	f000 8096 	beq.w	800a5c4 <put_fat+0x15a>
 800a498:	2b03      	cmp	r3, #3
 800a49a:	f300 80cd 	bgt.w	800a638 <put_fat+0x1ce>
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d002      	beq.n	800a4a8 <put_fat+0x3e>
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d06e      	beq.n	800a584 <put_fat+0x11a>
 800a4a6:	e0c7      	b.n	800a638 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	61bb      	str	r3, [r7, #24]
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a1a      	ldr	r2, [r3, #32]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	0a5b      	lsrs	r3, r3, #9
 800a4be:	4413      	add	r3, r2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7ff fe6e 	bl	800a1a4 <move_window>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4cc:	7ffb      	ldrb	r3, [r7, #31]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f040 80ab 	bne.w	800a62a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	1c59      	adds	r1, r3, #1
 800a4de:	61b9      	str	r1, [r7, #24]
 800a4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e4:	4413      	add	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00d      	beq.n	800a50e <put_fat+0xa4>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	b25b      	sxtb	r3, r3
 800a4f8:	f003 030f 	and.w	r3, r3, #15
 800a4fc:	b25a      	sxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	b25b      	sxtb	r3, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	b25b      	sxtb	r3, r3
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	e001      	b.n	800a512 <put_fat+0xa8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a1a      	ldr	r2, [r3, #32]
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	0a5b      	lsrs	r3, r3, #9
 800a524:	4413      	add	r3, r2
 800a526:	4619      	mov	r1, r3
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fe3b 	bl	800a1a4 <move_window>
 800a52e:	4603      	mov	r3, r0
 800a530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a532:	7ffb      	ldrb	r3, [r7, #31]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d17a      	bne.n	800a62e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a544:	4413      	add	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <put_fat+0xf0>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	091b      	lsrs	r3, r3, #4
 800a556:	b2db      	uxtb	r3, r3
 800a558:	e00e      	b.n	800a578 <put_fat+0x10e>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b25b      	sxtb	r3, r3
 800a560:	f023 030f 	bic.w	r3, r3, #15
 800a564:	b25a      	sxtb	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	0a1b      	lsrs	r3, r3, #8
 800a56a:	b25b      	sxtb	r3, r3
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	b25b      	sxtb	r3, r3
 800a572:	4313      	orrs	r3, r2
 800a574:	b25b      	sxtb	r3, r3
 800a576:	b2db      	uxtb	r3, r3
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	70da      	strb	r2, [r3, #3]
			break;
 800a582:	e059      	b.n	800a638 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a1a      	ldr	r2, [r3, #32]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	4413      	add	r3, r2
 800a58e:	4619      	mov	r1, r3
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff fe07 	bl	800a1a4 <move_window>
 800a596:	4603      	mov	r3, r0
 800a598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d148      	bne.n	800a632 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5ae:	4413      	add	r3, r2
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	b292      	uxth	r2, r2
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fb7f 	bl	8009cba <st_word>
			fs->wflag = 1;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	70da      	strb	r2, [r3, #3]
			break;
 800a5c2:	e039      	b.n	800a638 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a1a      	ldr	r2, [r3, #32]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	09db      	lsrs	r3, r3, #7
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f7ff fde7 	bl	800a1a4 <move_window>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5da:	7ffb      	ldrb	r3, [r7, #31]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d12a      	bne.n	800a636 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5f4:	4413      	add	r3, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fb3c 	bl	8009c74 <ld_dword>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a602:	4323      	orrs	r3, r4
 800a604:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a614:	4413      	add	r3, r2
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff fb69 	bl	8009cf0 <st_dword>
			fs->wflag = 1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	70da      	strb	r2, [r3, #3]
			break;
 800a624:	e008      	b.n	800a638 <put_fat+0x1ce>
		}
	}
 800a626:	bf00      	nop
 800a628:	e006      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a62a:	bf00      	nop
 800a62c:	e004      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a62e:	bf00      	nop
 800a630:	e002      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a636:	bf00      	nop
	return res;
 800a638:	7ffb      	ldrb	r3, [r7, #31]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3724      	adds	r7, #36	; 0x24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd90      	pop	{r4, r7, pc}

0800a642 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b088      	sub	sp, #32
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d904      	bls.n	800a668 <remove_chain+0x26>
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d301      	bcc.n	800a66c <remove_chain+0x2a>
 800a668:	2302      	movs	r3, #2
 800a66a:	e04b      	b.n	800a704 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a672:	f04f 32ff 	mov.w	r2, #4294967295
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	69b8      	ldr	r0, [r7, #24]
 800a67a:	f7ff fef6 	bl	800a46a <put_fat>
 800a67e:	4603      	mov	r3, r0
 800a680:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a682:	7ffb      	ldrb	r3, [r7, #31]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <remove_chain+0x4a>
 800a688:	7ffb      	ldrb	r3, [r7, #31]
 800a68a:	e03b      	b.n	800a704 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff fe43 	bl	800a31a <get_fat>
 800a694:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d031      	beq.n	800a700 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <remove_chain+0x64>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02e      	b.n	800a704 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d101      	bne.n	800a6b2 <remove_chain+0x70>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e028      	b.n	800a704 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	69b8      	ldr	r0, [r7, #24]
 800a6b8:	f7ff fed7 	bl	800a46a <put_fat>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <remove_chain+0x88>
 800a6c6:	7ffb      	ldrb	r3, [r7, #31]
 800a6c8:	e01c      	b.n	800a704 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	691a      	ldr	r2, [r3, #16]
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	3b02      	subs	r3, #2
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d20b      	bcs.n	800a6f0 <remove_chain+0xae>
			fs->free_clst++;
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d3c6      	bcc.n	800a68c <remove_chain+0x4a>
 800a6fe:	e000      	b.n	800a702 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a700:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10d      	bne.n	800a73e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <create_chain+0x2c>
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d31b      	bcc.n	800a770 <create_chain+0x64>
 800a738:	2301      	movs	r3, #1
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e018      	b.n	800a770 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fdea 	bl	800a31a <get_fat>
 800a746:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d801      	bhi.n	800a752 <create_chain+0x46>
 800a74e:	2301      	movs	r3, #1
 800a750:	e070      	b.n	800a834 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d101      	bne.n	800a75e <create_chain+0x52>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e06a      	b.n	800a834 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d201      	bcs.n	800a76c <create_chain+0x60>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e063      	b.n	800a834 <create_chain+0x128>
		scl = clst;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	3301      	adds	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	429a      	cmp	r2, r3
 800a782:	d307      	bcc.n	800a794 <create_chain+0x88>
				ncl = 2;
 800a784:	2302      	movs	r3, #2
 800a786:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d901      	bls.n	800a794 <create_chain+0x88>
 800a790:	2300      	movs	r3, #0
 800a792:	e04f      	b.n	800a834 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a794:	69f9      	ldr	r1, [r7, #28]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fdbf 	bl	800a31a <get_fat>
 800a79c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00e      	beq.n	800a7c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <create_chain+0xa6>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d101      	bne.n	800a7b6 <create_chain+0xaa>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	e03e      	b.n	800a834 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d1da      	bne.n	800a774 <create_chain+0x68>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e038      	b.n	800a834 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	69f9      	ldr	r1, [r7, #28]
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7ff fe4d 	bl	800a46a <put_fat>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <create_chain+0xe2>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d006      	beq.n	800a7ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7ff fe40 	bl	800a46a <put_fat>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d116      	bne.n	800a822 <create_chain+0x116>
		fs->last_clst = ncl;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	691a      	ldr	r2, [r3, #16]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	3b02      	subs	r3, #2
 800a804:	429a      	cmp	r2, r3
 800a806:	d804      	bhi.n	800a812 <create_chain+0x106>
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	1e5a      	subs	r2, r3, #1
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	711a      	strb	r2, [r3, #4]
 800a820:	e007      	b.n	800a832 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d102      	bne.n	800a82e <create_chain+0x122>
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	e000      	b.n	800a830 <create_chain+0x124>
 800a82e:	2301      	movs	r3, #1
 800a830:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	3304      	adds	r3, #4
 800a852:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	0a5b      	lsrs	r3, r3, #9
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	8952      	ldrh	r2, [r2, #10]
 800a85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a860:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1d1a      	adds	r2, r3, #4
 800a866:	613a      	str	r2, [r7, #16]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <clmt_clust+0x3a>
 800a872:	2300      	movs	r3, #0
 800a874:	e010      	b.n	800a898 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d307      	bcc.n	800a88e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	3304      	adds	r3, #4
 800a88a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a88c:	e7e9      	b.n	800a862 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a88e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
}
 800a898:	4618      	mov	r0, r3
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ba:	d204      	bcs.n	800a8c6 <dir_sdi+0x22>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f003 031f 	and.w	r3, r3, #31
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e063      	b.n	800a992 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <dir_sdi+0x46>
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d902      	bls.n	800a8ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10c      	bne.n	800a90a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	8912      	ldrh	r2, [r2, #8]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d301      	bcc.n	800a900 <dir_sdi+0x5c>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e048      	b.n	800a992 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	61da      	str	r2, [r3, #28]
 800a908:	e029      	b.n	800a95e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	895b      	ldrh	r3, [r3, #10]
 800a90e:	025b      	lsls	r3, r3, #9
 800a910:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a912:	e019      	b.n	800a948 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fcfe 	bl	800a31a <get_fat>
 800a91e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d101      	bne.n	800a92c <dir_sdi+0x88>
 800a928:	2301      	movs	r3, #1
 800a92a:	e032      	b.n	800a992 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d904      	bls.n	800a93c <dir_sdi+0x98>
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d301      	bcc.n	800a940 <dir_sdi+0x9c>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e028      	b.n	800a992 <dir_sdi+0xee>
			ofs -= csz;
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d2e1      	bcs.n	800a914 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a950:	6979      	ldr	r1, [r7, #20]
 800a952:	6938      	ldr	r0, [r7, #16]
 800a954:	f7ff fcc2 	bl	800a2dc <clust2sect>
 800a958:	4602      	mov	r2, r0
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <dir_sdi+0xcc>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e010      	b.n	800a992 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	69da      	ldr	r2, [r3, #28]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	0a5b      	lsrs	r3, r3, #9
 800a978:	441a      	add	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98a:	441a      	add	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	3320      	adds	r3, #32
 800a9b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <dir_next+0x28>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c0:	d301      	bcc.n	800a9c6 <dir_next+0x2c>
 800a9c2:	2304      	movs	r3, #4
 800a9c4:	e0aa      	b.n	800ab1c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 8098 	bne.w	800ab02 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	8912      	ldrh	r2, [r2, #8]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	f0c0 8088 	bcc.w	800ab02 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	61da      	str	r2, [r3, #28]
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	e08f      	b.n	800ab1c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	0a5b      	lsrs	r3, r3, #9
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	8952      	ldrh	r2, [r2, #10]
 800aa04:	3a01      	subs	r2, #1
 800aa06:	4013      	ands	r3, r2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d17a      	bne.n	800ab02 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7ff fc80 	bl	800a31a <get_fat>
 800aa1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d801      	bhi.n	800aa26 <dir_next+0x8c>
 800aa22:	2302      	movs	r3, #2
 800aa24:	e07a      	b.n	800ab1c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d101      	bne.n	800aa32 <dir_next+0x98>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e074      	b.n	800ab1c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d358      	bcc.n	800aaee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	61da      	str	r2, [r3, #28]
 800aa48:	2304      	movs	r3, #4
 800aa4a:	e067      	b.n	800ab1c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7ff fe59 	bl	800a70c <create_chain>
 800aa5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <dir_next+0xcc>
 800aa62:	2307      	movs	r3, #7
 800aa64:	e05a      	b.n	800ab1c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <dir_next+0xd6>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e055      	b.n	800ab1c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa76:	d101      	bne.n	800aa7c <dir_next+0xe2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e04f      	b.n	800ab1c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fb4d 	bl	800a11c <sync_window>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <dir_next+0xf2>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e047      	b.n	800ab1c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3330      	adds	r3, #48	; 0x30
 800aa90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff f977 	bl	8009d8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	6979      	ldr	r1, [r7, #20]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff fc1a 	bl	800a2dc <clust2sect>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	62da      	str	r2, [r3, #44]	; 0x2c
 800aaae:	e012      	b.n	800aad6 <dir_next+0x13c>
						fs->wflag = 1;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2201      	movs	r2, #1
 800aab4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fb30 	bl	800a11c <sync_window>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <dir_next+0x12c>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e02a      	b.n	800ab1c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3301      	adds	r3, #1
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	895b      	ldrh	r3, [r3, #10]
 800aada:	461a      	mov	r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4293      	cmp	r3, r2
 800aae0:	d3e6      	bcc.n	800aab0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aaf4:	6979      	ldr	r1, [r7, #20]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff fbf0 	bl	800a2dc <clust2sect>
 800aafc:	4602      	mov	r2, r0
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab14:	441a      	add	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab34:	2100      	movs	r1, #0
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff feb4 	bl	800a8a4 <dir_sdi>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d12b      	bne.n	800ab9e <dir_alloc+0x7a>
		n = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff fb27 	bl	800a1a4 <move_window>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11d      	bne.n	800ab9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2be5      	cmp	r3, #229	; 0xe5
 800ab68:	d004      	beq.n	800ab74 <dir_alloc+0x50>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d107      	bne.n	800ab84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	3301      	adds	r3, #1
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d102      	bne.n	800ab88 <dir_alloc+0x64>
 800ab82:	e00c      	b.n	800ab9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab84:	2300      	movs	r3, #0
 800ab86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab88:	2101      	movs	r1, #1
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff ff05 	bl	800a99a <dir_next>
 800ab90:	4603      	mov	r3, r0
 800ab92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0d7      	beq.n	800ab4a <dir_alloc+0x26>
 800ab9a:	e000      	b.n	800ab9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d101      	bne.n	800aba8 <dir_alloc+0x84>
 800aba4:	2307      	movs	r3, #7
 800aba6:	75fb      	strb	r3, [r7, #23]
	return res;
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	331a      	adds	r3, #26
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff f83f 	bl	8009c44 <ld_word>
 800abc6:	4603      	mov	r3, r0
 800abc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d109      	bne.n	800abe6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	3314      	adds	r3, #20
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f834 	bl	8009c44 <ld_word>
 800abdc:	4603      	mov	r3, r0
 800abde:	041b      	lsls	r3, r3, #16
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	331a      	adds	r3, #26
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	b292      	uxth	r2, r2
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff f857 	bl	8009cba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d109      	bne.n	800ac28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f103 0214 	add.w	r2, r3, #20
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7ff f849 	bl	8009cba <st_word>
	}
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac3e:	2100      	movs	r1, #0
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff fe2f 	bl	800a8a4 <dir_sdi>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <dir_find+0x24>
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
 800ac52:	e03e      	b.n	800acd2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f7ff faa2 	bl	800a1a4 <move_window>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d12f      	bne.n	800acca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <dir_find+0x4e>
 800ac78:	2304      	movs	r3, #4
 800ac7a:	75fb      	strb	r3, [r7, #23]
 800ac7c:	e028      	b.n	800acd0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	330b      	adds	r3, #11
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	330b      	adds	r3, #11
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 0308 	and.w	r3, r3, #8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <dir_find+0x86>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a18      	ldr	r0, [r3, #32]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3324      	adds	r3, #36	; 0x24
 800aca8:	220b      	movs	r2, #11
 800acaa:	4619      	mov	r1, r3
 800acac:	f7ff f888 	bl	8009dc0 <mem_cmp>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800acb6:	2100      	movs	r1, #0
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff fe6e 	bl	800a99a <dir_next>
 800acbe:	4603      	mov	r3, r0
 800acc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d0c5      	beq.n	800ac54 <dir_find+0x24>
 800acc8:	e002      	b.n	800acd0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800acca:	bf00      	nop
 800accc:	e000      	b.n	800acd0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800acce:	bf00      	nop

	return res;
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ace8:	2101      	movs	r1, #1
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff ff1a 	bl	800ab24 <dir_alloc>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d11c      	bne.n	800ad34 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	4619      	mov	r1, r3
 800ad00:	68b8      	ldr	r0, [r7, #8]
 800ad02:	f7ff fa4f 	bl	800a1a4 <move_window>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d111      	bne.n	800ad34 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	2220      	movs	r2, #32
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff f836 	bl	8009d8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a18      	ldr	r0, [r3, #32]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3324      	adds	r3, #36	; 0x24
 800ad26:	220b      	movs	r2, #11
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f7ff f80d 	bl	8009d48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2201      	movs	r2, #1
 800ad32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3324      	adds	r3, #36	; 0x24
 800ad54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ad56:	220b      	movs	r2, #11
 800ad58:	2120      	movs	r1, #32
 800ad5a:	68b8      	ldr	r0, [r7, #8]
 800ad5c:	f7ff f815 	bl	8009d8a <mem_set>
	si = i = 0; ni = 8;
 800ad60:	2300      	movs	r3, #0
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	61fb      	str	r3, [r7, #28]
 800ad68:	2308      	movs	r3, #8
 800ad6a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	61fa      	str	r2, [r7, #28]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4413      	add	r3, r2
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad7a:	7efb      	ldrb	r3, [r7, #27]
 800ad7c:	2b20      	cmp	r3, #32
 800ad7e:	d94e      	bls.n	800ae1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad80:	7efb      	ldrb	r3, [r7, #27]
 800ad82:	2b2f      	cmp	r3, #47	; 0x2f
 800ad84:	d006      	beq.n	800ad94 <create_name+0x54>
 800ad86:	7efb      	ldrb	r3, [r7, #27]
 800ad88:	2b5c      	cmp	r3, #92	; 0x5c
 800ad8a:	d110      	bne.n	800adae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad8c:	e002      	b.n	800ad94 <create_name+0x54>
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	3301      	adds	r3, #1
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	4413      	add	r3, r2
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ad9e:	d0f6      	beq.n	800ad8e <create_name+0x4e>
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4413      	add	r3, r2
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b5c      	cmp	r3, #92	; 0x5c
 800adaa:	d0f0      	beq.n	800ad8e <create_name+0x4e>
			break;
 800adac:	e038      	b.n	800ae20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800adae:	7efb      	ldrb	r3, [r7, #27]
 800adb0:	2b2e      	cmp	r3, #46	; 0x2e
 800adb2:	d003      	beq.n	800adbc <create_name+0x7c>
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d30c      	bcc.n	800add6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2b0b      	cmp	r3, #11
 800adc0:	d002      	beq.n	800adc8 <create_name+0x88>
 800adc2:	7efb      	ldrb	r3, [r7, #27]
 800adc4:	2b2e      	cmp	r3, #46	; 0x2e
 800adc6:	d001      	beq.n	800adcc <create_name+0x8c>
 800adc8:	2306      	movs	r3, #6
 800adca:	e044      	b.n	800ae56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800adcc:	2308      	movs	r3, #8
 800adce:	613b      	str	r3, [r7, #16]
 800add0:	230b      	movs	r3, #11
 800add2:	617b      	str	r3, [r7, #20]
			continue;
 800add4:	e022      	b.n	800ae1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800add6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adda:	2b00      	cmp	r3, #0
 800addc:	da04      	bge.n	800ade8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800adde:	7efb      	ldrb	r3, [r7, #27]
 800ade0:	3b80      	subs	r3, #128	; 0x80
 800ade2:	4a1f      	ldr	r2, [pc, #124]	; (800ae60 <create_name+0x120>)
 800ade4:	5cd3      	ldrb	r3, [r2, r3]
 800ade6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ade8:	7efb      	ldrb	r3, [r7, #27]
 800adea:	4619      	mov	r1, r3
 800adec:	481d      	ldr	r0, [pc, #116]	; (800ae64 <create_name+0x124>)
 800adee:	f7ff f80e 	bl	8009e0e <chk_chr>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <create_name+0xbc>
 800adf8:	2306      	movs	r3, #6
 800adfa:	e02c      	b.n	800ae56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800adfc:	7efb      	ldrb	r3, [r7, #27]
 800adfe:	2b60      	cmp	r3, #96	; 0x60
 800ae00:	d905      	bls.n	800ae0e <create_name+0xce>
 800ae02:	7efb      	ldrb	r3, [r7, #27]
 800ae04:	2b7a      	cmp	r3, #122	; 0x7a
 800ae06:	d802      	bhi.n	800ae0e <create_name+0xce>
 800ae08:	7efb      	ldrb	r3, [r7, #27]
 800ae0a:	3b20      	subs	r3, #32
 800ae0c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	613a      	str	r2, [r7, #16]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	4413      	add	r3, r2
 800ae18:	7efa      	ldrb	r2, [r7, #27]
 800ae1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ae1c:	e7a6      	b.n	800ad6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	441a      	add	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <create_name+0xf4>
 800ae30:	2306      	movs	r3, #6
 800ae32:	e010      	b.n	800ae56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2be5      	cmp	r3, #229	; 0xe5
 800ae3a:	d102      	bne.n	800ae42 <create_name+0x102>
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2205      	movs	r2, #5
 800ae40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ae42:	7efb      	ldrb	r3, [r7, #27]
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d801      	bhi.n	800ae4c <create_name+0x10c>
 800ae48:	2204      	movs	r2, #4
 800ae4a:	e000      	b.n	800ae4e <create_name+0x10e>
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	330b      	adds	r3, #11
 800ae52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ae54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	0800c800 	.word	0x0800c800
 800ae64:	0800c770 	.word	0x0800c770

0800ae68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae7c:	e002      	b.n	800ae84 <follow_path+0x1c>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	3301      	adds	r3, #1
 800ae82:	603b      	str	r3, [r7, #0]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b2f      	cmp	r3, #47	; 0x2f
 800ae8a:	d0f8      	beq.n	800ae7e <follow_path+0x16>
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b5c      	cmp	r3, #92	; 0x5c
 800ae92:	d0f4      	beq.n	800ae7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2200      	movs	r2, #0
 800ae98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b1f      	cmp	r3, #31
 800aea0:	d80a      	bhi.n	800aeb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2280      	movs	r2, #128	; 0x80
 800aea6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fcf9 	bl	800a8a4 <dir_sdi>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]
 800aeb6:	e043      	b.n	800af40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aeb8:	463b      	mov	r3, r7
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7ff ff3f 	bl	800ad40 <create_name>
 800aec2:	4603      	mov	r3, r0
 800aec4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d134      	bne.n	800af36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff feaf 	bl	800ac30 <dir_find>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aedc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00a      	beq.n	800aefa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d127      	bne.n	800af3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d122      	bne.n	800af3a <follow_path+0xd2>
 800aef4:	2305      	movs	r3, #5
 800aef6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aef8:	e01f      	b.n	800af3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aefa:	7afb      	ldrb	r3, [r7, #11]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d11c      	bne.n	800af3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	799b      	ldrb	r3, [r3, #6]
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af10:	2305      	movs	r3, #5
 800af12:	75fb      	strb	r3, [r7, #23]
 800af14:	e014      	b.n	800af40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af24:	4413      	add	r3, r2
 800af26:	4619      	mov	r1, r3
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff fe42 	bl	800abb2 <ld_clust>
 800af2e:	4602      	mov	r2, r0
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af34:	e7c0      	b.n	800aeb8 <follow_path+0x50>
			if (res != FR_OK) break;
 800af36:	bf00      	nop
 800af38:	e002      	b.n	800af40 <follow_path+0xd8>
				break;
 800af3a:	bf00      	nop
 800af3c:	e000      	b.n	800af40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af3e:	bf00      	nop
			}
		}
	}

	return res;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b087      	sub	sp, #28
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af52:	f04f 33ff 	mov.w	r3, #4294967295
 800af56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d031      	beq.n	800afc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	e002      	b.n	800af6e <get_ldnumber+0x24>
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	3301      	adds	r3, #1
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b20      	cmp	r3, #32
 800af74:	d903      	bls.n	800af7e <get_ldnumber+0x34>
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b3a      	cmp	r3, #58	; 0x3a
 800af7c:	d1f4      	bne.n	800af68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b3a      	cmp	r3, #58	; 0x3a
 800af84:	d11c      	bne.n	800afc0 <get_ldnumber+0x76>
			tp = *path;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	60fa      	str	r2, [r7, #12]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	3b30      	subs	r3, #48	; 0x30
 800af96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b09      	cmp	r3, #9
 800af9c:	d80e      	bhi.n	800afbc <get_ldnumber+0x72>
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d10a      	bne.n	800afbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d107      	bne.n	800afbc <get_ldnumber+0x72>
					vol = (int)i;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	3301      	adds	r3, #1
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	e002      	b.n	800afc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800afc0:	2300      	movs	r3, #0
 800afc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800afc4:	693b      	ldr	r3, [r7, #16]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
	...

0800afd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	70da      	strb	r2, [r3, #3]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f04f 32ff 	mov.w	r2, #4294967295
 800afea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff f8d8 	bl	800a1a4 <move_window>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <check_fs+0x2a>
 800affa:	2304      	movs	r3, #4
 800affc:	e038      	b.n	800b070 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3330      	adds	r3, #48	; 0x30
 800b002:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fe1c 	bl	8009c44 <ld_word>
 800b00c:	4603      	mov	r3, r0
 800b00e:	461a      	mov	r2, r3
 800b010:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b014:	429a      	cmp	r2, r3
 800b016:	d001      	beq.n	800b01c <check_fs+0x48>
 800b018:	2303      	movs	r3, #3
 800b01a:	e029      	b.n	800b070 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b022:	2be9      	cmp	r3, #233	; 0xe9
 800b024:	d009      	beq.n	800b03a <check_fs+0x66>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b02c:	2beb      	cmp	r3, #235	; 0xeb
 800b02e:	d11e      	bne.n	800b06e <check_fs+0x9a>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b036:	2b90      	cmp	r3, #144	; 0x90
 800b038:	d119      	bne.n	800b06e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	3330      	adds	r3, #48	; 0x30
 800b03e:	3336      	adds	r3, #54	; 0x36
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe fe17 	bl	8009c74 <ld_dword>
 800b046:	4603      	mov	r3, r0
 800b048:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b04c:	4a0a      	ldr	r2, [pc, #40]	; (800b078 <check_fs+0xa4>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d101      	bne.n	800b056 <check_fs+0x82>
 800b052:	2300      	movs	r3, #0
 800b054:	e00c      	b.n	800b070 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3330      	adds	r3, #48	; 0x30
 800b05a:	3352      	adds	r3, #82	; 0x52
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fe09 	bl	8009c74 <ld_dword>
 800b062:	4603      	mov	r3, r0
 800b064:	4a05      	ldr	r2, [pc, #20]	; (800b07c <check_fs+0xa8>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d101      	bne.n	800b06e <check_fs+0x9a>
 800b06a:	2300      	movs	r3, #0
 800b06c:	e000      	b.n	800b070 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b06e:	2302      	movs	r3, #2
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	00544146 	.word	0x00544146
 800b07c:	33544146 	.word	0x33544146

0800b080 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b096      	sub	sp, #88	; 0x58
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7ff ff58 	bl	800af4a <get_ldnumber>
 800b09a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	da01      	bge.n	800b0a6 <find_volume+0x26>
 800b0a2:	230b      	movs	r3, #11
 800b0a4:	e22e      	b.n	800b504 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b0a6:	4aa8      	ldr	r2, [pc, #672]	; (800b348 <find_volume+0x2c8>)
 800b0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <find_volume+0x3a>
 800b0b6:	230c      	movs	r3, #12
 800b0b8:	e224      	b.n	800b504 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	f023 0301 	bic.w	r3, r3, #1
 800b0c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01a      	beq.n	800b106 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe fd17 	bl	8009b08 <disk_status>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b0e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10c      	bne.n	800b106 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d007      	beq.n	800b102 <find_volume+0x82>
 800b0f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b0fe:	230a      	movs	r3, #10
 800b100:	e200      	b.n	800b504 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b102:	2300      	movs	r3, #0
 800b104:	e1fe      	b.n	800b504 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	2200      	movs	r2, #0
 800b10a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe fd0f 	bl	8009b3c <disk_initialize>
 800b11e:	4603      	mov	r3, r0
 800b120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b130:	2303      	movs	r3, #3
 800b132:	e1e7      	b.n	800b504 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d007      	beq.n	800b14a <find_volume+0xca>
 800b13a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b13e:	f003 0304 	and.w	r3, r3, #4
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b146:	230a      	movs	r3, #10
 800b148:	e1dc      	b.n	800b504 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b14e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b152:	f7ff ff3f 	bl	800afd4 <check_fs>
 800b156:	4603      	mov	r3, r0
 800b158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b15c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b160:	2b02      	cmp	r3, #2
 800b162:	d14b      	bne.n	800b1fc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b164:	2300      	movs	r3, #0
 800b166:	643b      	str	r3, [r7, #64]	; 0x40
 800b168:	e01f      	b.n	800b1aa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b178:	4413      	add	r3, r2
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	3304      	adds	r3, #4
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d006      	beq.n	800b194 <find_volume+0x114>
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	3308      	adds	r3, #8
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fd72 	bl	8009c74 <ld_dword>
 800b190:	4602      	mov	r2, r0
 800b192:	e000      	b.n	800b196 <find_volume+0x116>
 800b194:	2200      	movs	r2, #0
 800b196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b19e:	440b      	add	r3, r1
 800b1a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	643b      	str	r3, [r7, #64]	; 0x40
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d9dc      	bls.n	800b16a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <find_volume+0x140>
 800b1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b1ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <find_volume+0x162>
 800b1d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1da:	f7ff fefb 	bl	800afd4 <check_fs>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	e000      	b.n	800b1e4 <find_volume+0x164>
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d905      	bls.n	800b1fc <find_volume+0x17c>
 800b1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d9e1      	bls.n	800b1c0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b200:	2b04      	cmp	r3, #4
 800b202:	d101      	bne.n	800b208 <find_volume+0x188>
 800b204:	2301      	movs	r3, #1
 800b206:	e17d      	b.n	800b504 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d901      	bls.n	800b214 <find_volume+0x194>
 800b210:	230d      	movs	r3, #13
 800b212:	e177      	b.n	800b504 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	3330      	adds	r3, #48	; 0x30
 800b218:	330b      	adds	r3, #11
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe fd12 	bl	8009c44 <ld_word>
 800b220:	4603      	mov	r3, r0
 800b222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b226:	d001      	beq.n	800b22c <find_volume+0x1ac>
 800b228:	230d      	movs	r3, #13
 800b22a:	e16b      	b.n	800b504 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	3330      	adds	r3, #48	; 0x30
 800b230:	3316      	adds	r3, #22
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe fd06 	bl	8009c44 <ld_word>
 800b238:	4603      	mov	r3, r0
 800b23a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <find_volume+0x1d0>
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	3330      	adds	r3, #48	; 0x30
 800b246:	3324      	adds	r3, #36	; 0x24
 800b248:	4618      	mov	r0, r3
 800b24a:	f7fe fd13 	bl	8009c74 <ld_dword>
 800b24e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b254:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	789b      	ldrb	r3, [r3, #2]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d005      	beq.n	800b274 <find_volume+0x1f4>
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	789b      	ldrb	r3, [r3, #2]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d001      	beq.n	800b274 <find_volume+0x1f4>
 800b270:	230d      	movs	r3, #13
 800b272:	e147      	b.n	800b504 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	789b      	ldrb	r3, [r3, #2]
 800b278:	461a      	mov	r2, r3
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	fb02 f303 	mul.w	r3, r2, r3
 800b280:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b288:	b29a      	uxth	r2, r3
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	895b      	ldrh	r3, [r3, #10]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d008      	beq.n	800b2a8 <find_volume+0x228>
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	895b      	ldrh	r3, [r3, #10]
 800b29a:	461a      	mov	r2, r3
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	895b      	ldrh	r3, [r3, #10]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <find_volume+0x22c>
 800b2a8:	230d      	movs	r3, #13
 800b2aa:	e12b      	b.n	800b504 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	3330      	adds	r3, #48	; 0x30
 800b2b0:	3311      	adds	r3, #17
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fcc6 	bl	8009c44 <ld_word>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	891b      	ldrh	r3, [r3, #8]
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <find_volume+0x252>
 800b2ce:	230d      	movs	r3, #13
 800b2d0:	e118      	b.n	800b504 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	3330      	adds	r3, #48	; 0x30
 800b2d6:	3313      	adds	r3, #19
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fcb3 	bl	8009c44 <ld_word>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d106      	bne.n	800b2f6 <find_volume+0x276>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	3330      	adds	r3, #48	; 0x30
 800b2ec:	3320      	adds	r3, #32
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fcc0 	bl	8009c74 <ld_dword>
 800b2f4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	3330      	adds	r3, #48	; 0x30
 800b2fa:	330e      	adds	r3, #14
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe fca1 	bl	8009c44 <ld_word>
 800b302:	4603      	mov	r3, r0
 800b304:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <find_volume+0x290>
 800b30c:	230d      	movs	r3, #13
 800b30e:	e0f9      	b.n	800b504 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b310:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b314:	4413      	add	r3, r2
 800b316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b318:	8912      	ldrh	r2, [r2, #8]
 800b31a:	0912      	lsrs	r2, r2, #4
 800b31c:	b292      	uxth	r2, r2
 800b31e:	4413      	add	r3, r2
 800b320:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	429a      	cmp	r2, r3
 800b328:	d201      	bcs.n	800b32e <find_volume+0x2ae>
 800b32a:	230d      	movs	r3, #13
 800b32c:	e0ea      	b.n	800b504 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b336:	8952      	ldrh	r2, [r2, #10]
 800b338:	fbb3 f3f2 	udiv	r3, r3, r2
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	2b00      	cmp	r3, #0
 800b342:	d103      	bne.n	800b34c <find_volume+0x2cc>
 800b344:	230d      	movs	r3, #13
 800b346:	e0dd      	b.n	800b504 <find_volume+0x484>
 800b348:	24000034 	.word	0x24000034
		fmt = FS_FAT32;
 800b34c:	2303      	movs	r3, #3
 800b34e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b358:	4293      	cmp	r3, r2
 800b35a:	d802      	bhi.n	800b362 <find_volume+0x2e2>
 800b35c:	2302      	movs	r3, #2
 800b35e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b368:	4293      	cmp	r3, r2
 800b36a:	d802      	bhi.n	800b372 <find_volume+0x2f2>
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b374:	1c9a      	adds	r2, r3, #2
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b37e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b380:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b384:	441a      	add	r2, r3
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b38a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	441a      	add	r2, r3
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d11e      	bne.n	800b3da <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	3330      	adds	r3, #48	; 0x30
 800b3a0:	332a      	adds	r3, #42	; 0x2a
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fc4e 	bl	8009c44 <ld_word>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <find_volume+0x332>
 800b3ae:	230d      	movs	r3, #13
 800b3b0:	e0a8      	b.n	800b504 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	891b      	ldrh	r3, [r3, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <find_volume+0x33e>
 800b3ba:	230d      	movs	r3, #13
 800b3bc:	e0a2      	b.n	800b504 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	3330      	adds	r3, #48	; 0x30
 800b3c2:	332c      	adds	r3, #44	; 0x2c
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fe fc55 	bl	8009c74 <ld_dword>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3d8:	e01f      	b.n	800b41a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	891b      	ldrh	r3, [r3, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <find_volume+0x366>
 800b3e2:	230d      	movs	r3, #13
 800b3e4:	e08e      	b.n	800b504 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e8:	6a1a      	ldr	r2, [r3, #32]
 800b3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ec:	441a      	add	r2, r3
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d103      	bne.n	800b402 <find_volume+0x382>
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	e00a      	b.n	800b418 <find_volume+0x398>
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	695a      	ldr	r2, [r3, #20]
 800b406:	4613      	mov	r3, r2
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	085a      	lsrs	r2, r3, #1
 800b40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b418:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	699a      	ldr	r2, [r3, #24]
 800b41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b420:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b424:	0a5b      	lsrs	r3, r3, #9
 800b426:	429a      	cmp	r2, r3
 800b428:	d201      	bcs.n	800b42e <find_volume+0x3ae>
 800b42a:	230d      	movs	r3, #13
 800b42c:	e06a      	b.n	800b504 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	611a      	str	r2, [r3, #16]
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b440:	2280      	movs	r2, #128	; 0x80
 800b442:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b448:	2b03      	cmp	r3, #3
 800b44a:	d149      	bne.n	800b4e0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	3330      	adds	r3, #48	; 0x30
 800b450:	3330      	adds	r3, #48	; 0x30
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fbf6 	bl	8009c44 <ld_word>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d140      	bne.n	800b4e0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b460:	3301      	adds	r3, #1
 800b462:	4619      	mov	r1, r3
 800b464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b466:	f7fe fe9d 	bl	800a1a4 <move_window>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d137      	bne.n	800b4e0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	2200      	movs	r2, #0
 800b474:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	3330      	adds	r3, #48	; 0x30
 800b47a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fbe0 	bl	8009c44 <ld_word>
 800b484:	4603      	mov	r3, r0
 800b486:	461a      	mov	r2, r3
 800b488:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d127      	bne.n	800b4e0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b492:	3330      	adds	r3, #48	; 0x30
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe fbed 	bl	8009c74 <ld_dword>
 800b49a:	4603      	mov	r3, r0
 800b49c:	4a1b      	ldr	r2, [pc, #108]	; (800b50c <find_volume+0x48c>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d11e      	bne.n	800b4e0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	3330      	adds	r3, #48	; 0x30
 800b4a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fe fbe2 	bl	8009c74 <ld_dword>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	4a17      	ldr	r2, [pc, #92]	; (800b510 <find_volume+0x490>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d113      	bne.n	800b4e0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	3330      	adds	r3, #48	; 0x30
 800b4bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fe fbd7 	bl	8009c74 <ld_dword>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	3330      	adds	r3, #48	; 0x30
 800b4d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fbcd 	bl	8009c74 <ld_dword>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b4e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <find_volume+0x494>)
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	4b08      	ldr	r3, [pc, #32]	; (800b514 <find_volume+0x494>)
 800b4f2:	801a      	strh	r2, [r3, #0]
 800b4f4:	4b07      	ldr	r3, [pc, #28]	; (800b514 <find_volume+0x494>)
 800b4f6:	881a      	ldrh	r2, [r3, #0]
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4fe:	f7fe fde9 	bl	800a0d4 <clear_lock>
#endif
	return FR_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3758      	adds	r7, #88	; 0x58
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	41615252 	.word	0x41615252
 800b510:	61417272 	.word	0x61417272
 800b514:	24000038 	.word	0x24000038

0800b518 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b522:	2309      	movs	r3, #9
 800b524:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d01c      	beq.n	800b566 <validate+0x4e>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d018      	beq.n	800b566 <validate+0x4e>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d013      	beq.n	800b566 <validate+0x4e>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	889a      	ldrh	r2, [r3, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	88db      	ldrh	r3, [r3, #6]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d10c      	bne.n	800b566 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fad8 	bl	8009b08 <disk_status>
 800b558:	4603      	mov	r3, r0
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <validate+0x4e>
			res = FR_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b566:	7bfb      	ldrb	r3, [r7, #15]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <validate+0x5a>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	e000      	b.n	800b574 <validate+0x5c>
 800b572:	2300      	movs	r3, #0
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	6013      	str	r3, [r2, #0]
	return res;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b596:	f107 0310 	add.w	r3, r7, #16
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff fcd5 	bl	800af4a <get_ldnumber>
 800b5a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da01      	bge.n	800b5ac <f_mount+0x28>
 800b5a8:	230b      	movs	r3, #11
 800b5aa:	e02b      	b.n	800b604 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b5ac:	4a17      	ldr	r2, [pc, #92]	; (800b60c <f_mount+0x88>)
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b5bc:	69b8      	ldr	r0, [r7, #24]
 800b5be:	f7fe fd89 	bl	800a0d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	490d      	ldr	r1, [pc, #52]	; (800b60c <f_mount+0x88>)
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <f_mount+0x66>
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d001      	beq.n	800b5ee <f_mount+0x6a>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	e00a      	b.n	800b604 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5ee:	f107 010c 	add.w	r1, r7, #12
 800b5f2:	f107 0308 	add.w	r3, r7, #8
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff fd41 	bl	800b080 <find_volume>
 800b5fe:	4603      	mov	r3, r0
 800b600:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b602:	7dfb      	ldrb	r3, [r7, #23]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3720      	adds	r7, #32
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	24000034 	.word	0x24000034

0800b610 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b098      	sub	sp, #96	; 0x60
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	4613      	mov	r3, r2
 800b61c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <f_open+0x18>
 800b624:	2309      	movs	r3, #9
 800b626:	e1ad      	b.n	800b984 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b62e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b630:	79fa      	ldrb	r2, [r7, #7]
 800b632:	f107 0110 	add.w	r1, r7, #16
 800b636:	f107 0308 	add.w	r3, r7, #8
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fd20 	bl	800b080 <find_volume>
 800b640:	4603      	mov	r3, r0
 800b642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 8191 	bne.w	800b972 <f_open+0x362>
		dj.obj.fs = fs;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	f107 0314 	add.w	r3, r7, #20
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff fc03 	bl	800ae68 <follow_path>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d11a      	bne.n	800b6a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b670:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b674:	b25b      	sxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	da03      	bge.n	800b682 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b67a:	2306      	movs	r3, #6
 800b67c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b680:	e011      	b.n	800b6a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	f023 0301 	bic.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	bf14      	ite	ne
 800b68c:	2301      	movne	r3, #1
 800b68e:	2300      	moveq	r3, #0
 800b690:	b2db      	uxtb	r3, r3
 800b692:	461a      	mov	r2, r3
 800b694:	f107 0314 	add.w	r3, r7, #20
 800b698:	4611      	mov	r1, r2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe fbd2 	bl	8009e44 <chk_lock>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b6a6:	79fb      	ldrb	r3, [r7, #7]
 800b6a8:	f003 031c 	and.w	r3, r3, #28
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d07f      	beq.n	800b7b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b6b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d017      	beq.n	800b6e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b6b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d10e      	bne.n	800b6de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b6c0:	f7fe fc1c 	bl	8009efc <enq_lock>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <f_open+0xc8>
 800b6ca:	f107 0314 	add.w	r3, r7, #20
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff fb03 	bl	800acda <dir_register>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	e000      	b.n	800b6da <f_open+0xca>
 800b6d8:	2312      	movs	r3, #18
 800b6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	f043 0308 	orr.w	r3, r3, #8
 800b6e4:	71fb      	strb	r3, [r7, #7]
 800b6e6:	e010      	b.n	800b70a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b6e8:	7ebb      	ldrb	r3, [r7, #26]
 800b6ea:	f003 0311 	and.w	r3, r3, #17
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <f_open+0xea>
					res = FR_DENIED;
 800b6f2:	2307      	movs	r3, #7
 800b6f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b6f8:	e007      	b.n	800b70a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	f003 0304 	and.w	r3, r3, #4
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <f_open+0xfa>
 800b704:	2308      	movs	r3, #8
 800b706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b70a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d168      	bne.n	800b7e4 <f_open+0x1d4>
 800b712:	79fb      	ldrb	r3, [r7, #7]
 800b714:	f003 0308 	and.w	r3, r3, #8
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d063      	beq.n	800b7e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b71c:	f7fe f83e 	bl	800979c <get_fattime>
 800b720:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b724:	330e      	adds	r3, #14
 800b726:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fae1 	bl	8009cf0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b730:	3316      	adds	r3, #22
 800b732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe fadb 	bl	8009cf0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	330b      	adds	r3, #11
 800b73e:	2220      	movs	r2, #32
 800b740:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fa32 	bl	800abb2 <ld_clust>
 800b74e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b754:	2200      	movs	r2, #0
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff fa4a 	bl	800abf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75e:	331c      	adds	r3, #28
 800b760:	2100      	movs	r1, #0
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe fac4 	bl	8009cf0 <st_dword>
					fs->wflag = 1;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2201      	movs	r2, #1
 800b76c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b770:	2b00      	cmp	r3, #0
 800b772:	d037      	beq.n	800b7e4 <f_open+0x1d4>
						dw = fs->winsect;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b77a:	f107 0314 	add.w	r3, r7, #20
 800b77e:	2200      	movs	r2, #0
 800b780:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe ff5d 	bl	800a642 <remove_chain>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b78e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b792:	2b00      	cmp	r3, #0
 800b794:	d126      	bne.n	800b7e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe fd02 	bl	800a1a4 <move_window>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7aa:	3a01      	subs	r2, #1
 800b7ac:	60da      	str	r2, [r3, #12]
 800b7ae:	e019      	b.n	800b7e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d115      	bne.n	800b7e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b7b8:	7ebb      	ldrb	r3, [r7, #26]
 800b7ba:	f003 0310 	and.w	r3, r3, #16
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <f_open+0x1ba>
					res = FR_NO_FILE;
 800b7c2:	2304      	movs	r3, #4
 800b7c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7c8:	e00c      	b.n	800b7e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <f_open+0x1d4>
 800b7d4:	7ebb      	ldrb	r3, [r7, #26]
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <f_open+0x1d4>
						res = FR_DENIED;
 800b7de:	2307      	movs	r3, #7
 800b7e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b7e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d128      	bne.n	800b83e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	f023 0301 	bic.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	bf14      	ite	ne
 800b816:	2301      	movne	r3, #1
 800b818:	2300      	moveq	r3, #0
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	461a      	mov	r2, r3
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fb8b 	bl	8009f40 <inc_lock>
 800b82a:	4602      	mov	r2, r0
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <f_open+0x22e>
 800b838:	2302      	movs	r3, #2
 800b83a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b83e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b842:	2b00      	cmp	r3, #0
 800b844:	f040 8095 	bne.w	800b972 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7ff f9af 	bl	800abb2 <ld_clust>
 800b854:	4602      	mov	r2, r0
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85c:	331c      	adds	r3, #28
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fa08 	bl	8009c74 <ld_dword>
 800b864:	4602      	mov	r2, r0
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	88da      	ldrh	r2, [r3, #6]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	79fa      	ldrb	r2, [r7, #7]
 800b882:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3330      	adds	r3, #48	; 0x30
 800b89a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b89e:	2100      	movs	r1, #0
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe fa72 	bl	8009d8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	f003 0320 	and.w	r3, r3, #32
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d060      	beq.n	800b972 <f_open+0x362>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d05c      	beq.n	800b972 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	895b      	ldrh	r3, [r3, #10]
 800b8c4:	025b      	lsls	r3, r3, #9
 800b8c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8d4:	e016      	b.n	800b904 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fd1d 	bl	800a31a <get_fat>
 800b8e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b8e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d802      	bhi.n	800b8ee <f_open+0x2de>
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b8ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d102      	bne.n	800b8fc <f_open+0x2ec>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	657b      	str	r3, [r7, #84]	; 0x54
 800b904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d103      	bne.n	800b914 <f_open+0x304>
 800b90c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b910:	429a      	cmp	r2, r3
 800b912:	d8e0      	bhi.n	800b8d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b918:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b91a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d127      	bne.n	800b972 <f_open+0x362>
 800b922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d022      	beq.n	800b972 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fcd3 	bl	800a2dc <clust2sect>
 800b936:	6478      	str	r0, [r7, #68]	; 0x44
 800b938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d103      	bne.n	800b946 <f_open+0x336>
						res = FR_INT_ERR;
 800b93e:	2302      	movs	r3, #2
 800b940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b944:	e015      	b.n	800b972 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b948:	0a5a      	lsrs	r2, r3, #9
 800b94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94c:	441a      	add	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	7858      	ldrb	r0, [r3, #1]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a1a      	ldr	r2, [r3, #32]
 800b960:	2301      	movs	r3, #1
 800b962:	f7fe f911 	bl	8009b88 <disk_read>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <f_open+0x362>
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <f_open+0x370>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b984:	4618      	mov	r0, r3
 800b986:	3760      	adds	r7, #96	; 0x60
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08c      	sub	sp, #48	; 0x30
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f107 0210 	add.w	r2, r7, #16
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fdb3 	bl	800b518 <validate>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d107      	bne.n	800b9d0 <f_write+0x44>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	7d5b      	ldrb	r3, [r3, #21]
 800b9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b9c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <f_write+0x4a>
 800b9d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9d4:	e14b      	b.n	800bc6e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	7d1b      	ldrb	r3, [r3, #20]
 800b9da:	f003 0302 	and.w	r3, r3, #2
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <f_write+0x5a>
 800b9e2:	2307      	movs	r3, #7
 800b9e4:	e143      	b.n	800bc6e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	699a      	ldr	r2, [r3, #24]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	441a      	add	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	f080 812d 	bcs.w	800bc52 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba00:	e127      	b.n	800bc52 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f040 80e3 	bne.w	800bbd6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	0a5b      	lsrs	r3, r3, #9
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	8952      	ldrh	r2, [r2, #10]
 800ba1a:	3a01      	subs	r2, #1
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d143      	bne.n	800baae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10c      	bne.n	800ba48 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d11a      	bne.n	800ba70 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fe64 	bl	800a70c <create_chain>
 800ba44:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba46:	e013      	b.n	800ba70 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d007      	beq.n	800ba60 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	4619      	mov	r1, r3
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7fe fef0 	bl	800a83c <clmt_clust>
 800ba5c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba5e:	e007      	b.n	800ba70 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	4619      	mov	r1, r3
 800ba68:	4610      	mov	r0, r2
 800ba6a:	f7fe fe4f 	bl	800a70c <create_chain>
 800ba6e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 80f2 	beq.w	800bc5c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d104      	bne.n	800ba88 <f_write+0xfc>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2202      	movs	r2, #2
 800ba82:	755a      	strb	r2, [r3, #21]
 800ba84:	2302      	movs	r3, #2
 800ba86:	e0f2      	b.n	800bc6e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d104      	bne.n	800ba9a <f_write+0x10e>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	755a      	strb	r2, [r3, #21]
 800ba96:	2301      	movs	r3, #1
 800ba98:	e0e9      	b.n	800bc6e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba9e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d102      	bne.n	800baae <f_write+0x122>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	7d1b      	ldrb	r3, [r3, #20]
 800bab2:	b25b      	sxtb	r3, r3
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da18      	bge.n	800baea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	7858      	ldrb	r0, [r3, #1]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6a1a      	ldr	r2, [r3, #32]
 800bac6:	2301      	movs	r3, #1
 800bac8:	f7fe f87e 	bl	8009bc8 <disk_write>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d004      	beq.n	800badc <f_write+0x150>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	755a      	strb	r2, [r3, #21]
 800bad8:	2301      	movs	r3, #1
 800bada:	e0c8      	b.n	800bc6e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	7d1b      	ldrb	r3, [r3, #20]
 800bae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	4619      	mov	r1, r3
 800baf2:	4610      	mov	r0, r2
 800baf4:	f7fe fbf2 	bl	800a2dc <clust2sect>
 800baf8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d104      	bne.n	800bb0a <f_write+0x17e>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2202      	movs	r2, #2
 800bb04:	755a      	strb	r2, [r3, #21]
 800bb06:	2302      	movs	r3, #2
 800bb08:	e0b1      	b.n	800bc6e <f_write+0x2e2>
			sect += csect;
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	4413      	add	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	0a5b      	lsrs	r3, r3, #9
 800bb16:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d03c      	beq.n	800bb98 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	4413      	add	r3, r2
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	8952      	ldrh	r2, [r2, #10]
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d905      	bls.n	800bb38 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	895b      	ldrh	r3, [r3, #10]
 800bb30:	461a      	mov	r2, r3
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	7858      	ldrb	r0, [r3, #1]
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	69f9      	ldr	r1, [r7, #28]
 800bb42:	f7fe f841 	bl	8009bc8 <disk_write>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d004      	beq.n	800bb56 <f_write+0x1ca>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	755a      	strb	r2, [r3, #21]
 800bb52:	2301      	movs	r3, #1
 800bb54:	e08b      	b.n	800bc6e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1a      	ldr	r2, [r3, #32]
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	6a3a      	ldr	r2, [r7, #32]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d915      	bls.n	800bb90 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6a1a      	ldr	r2, [r3, #32]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	025b      	lsls	r3, r3, #9
 800bb74:	69fa      	ldr	r2, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	f7fe f8e3 	bl	8009d48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7d1b      	ldrb	r3, [r3, #20]
 800bb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	025b      	lsls	r3, r3, #9
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bb96:	e03f      	b.n	800bc18 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d016      	beq.n	800bbd0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	699a      	ldr	r2, [r3, #24]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d210      	bcs.n	800bbd0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	7858      	ldrb	r0, [r3, #1]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbb8:	2301      	movs	r3, #1
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	f7fd ffe4 	bl	8009b88 <disk_read>
 800bbc0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d004      	beq.n	800bbd0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	755a      	strb	r2, [r3, #21]
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e04e      	b.n	800bc6e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbde:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bbe2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d901      	bls.n	800bbf0 <f_write+0x264>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfe:	4413      	add	r3, r2
 800bc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc02:	69f9      	ldr	r1, [r7, #28]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe f89f 	bl	8009d48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	7d1b      	ldrb	r3, [r3, #20]
 800bc0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	4413      	add	r3, r2
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	699a      	ldr	r2, [r3, #24]
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	441a      	add	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	619a      	str	r2, [r3, #24]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	bf38      	it	cc
 800bc38:	461a      	movcc	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	60da      	str	r2, [r3, #12]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	441a      	add	r2, r3
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f47f aed4 	bne.w	800ba02 <f_write+0x76>
 800bc5a:	e000      	b.n	800bc5e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc5c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	7d1b      	ldrb	r3, [r3, #20]
 800bc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3730      	adds	r7, #48	; 0x30
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f107 0208 	add.w	r2, r7, #8
 800bc84:	4611      	mov	r1, r2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fc46 	bl	800b518 <validate>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d168      	bne.n	800bd68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7d1b      	ldrb	r3, [r3, #20]
 800bc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d062      	beq.n	800bd68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	7d1b      	ldrb	r3, [r3, #20]
 800bca6:	b25b      	sxtb	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da15      	bge.n	800bcd8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	7858      	ldrb	r0, [r3, #1]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a1a      	ldr	r2, [r3, #32]
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f7fd ff84 	bl	8009bc8 <disk_write>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <f_sync+0x54>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e04f      	b.n	800bd6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7d1b      	ldrb	r3, [r3, #20]
 800bcce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bcd8:	f7fd fd60 	bl	800979c <get_fattime>
 800bcdc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	4619      	mov	r1, r3
 800bce6:	4610      	mov	r0, r2
 800bce8:	f7fe fa5c 	bl	800a1a4 <move_window>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d138      	bne.n	800bd68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	330b      	adds	r3, #11
 800bd00:	781a      	ldrb	r2, [r3, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	330b      	adds	r3, #11
 800bd06:	f042 0220 	orr.w	r2, r2, #32
 800bd0a:	b2d2      	uxtb	r2, r2
 800bd0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	461a      	mov	r2, r3
 800bd18:	68f9      	ldr	r1, [r7, #12]
 800bd1a:	f7fe ff69 	bl	800abf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f103 021c 	add.w	r2, r3, #28
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fd ffe0 	bl	8009cf0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3316      	adds	r3, #22
 800bd34:	6939      	ldr	r1, [r7, #16]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fd ffda 	bl	8009cf0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	3312      	adds	r3, #18
 800bd40:	2100      	movs	r1, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd ffb9 	bl	8009cba <st_word>
					fs->wflag = 1;
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fe fa55 	bl	800a200 <sync_fs>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	7d1b      	ldrb	r3, [r3, #20]
 800bd5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff ff7b 	bl	800bc76 <f_sync>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d118      	bne.n	800bdbc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f107 0208 	add.w	r2, r7, #8
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fbc0 	bl	800b518 <validate>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10c      	bne.n	800bdbc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe f958 	bl	800a05c <dec_lock>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d102      	bne.n	800bdbc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
	...

0800bdc8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b09d      	sub	sp, #116	; 0x74
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	603b      	str	r3, [r7, #0]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bdd8:	2301      	movs	r3, #1
 800bdda:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bde2:	f107 030c 	add.w	r3, r7, #12
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff f8af 	bl	800af4a <get_ldnumber>
 800bdec:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	da02      	bge.n	800bdfa <f_mkfs+0x32>
 800bdf4:	230b      	movs	r3, #11
 800bdf6:	f000 bc0d 	b.w	800c614 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bdfa:	4a94      	ldr	r2, [pc, #592]	; (800c04c <f_mkfs+0x284>)
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <f_mkfs+0x4a>
 800be06:	4a91      	ldr	r2, [pc, #580]	; (800c04c <f_mkfs+0x284>)
 800be08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be0e:	2200      	movs	r2, #0
 800be10:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800be12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800be18:	2300      	movs	r3, #0
 800be1a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800be1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800be22:	4618      	mov	r0, r3
 800be24:	f7fd fe8a 	bl	8009b3c <disk_initialize>
 800be28:	4603      	mov	r3, r0
 800be2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800be2e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <f_mkfs+0x76>
 800be3a:	2303      	movs	r3, #3
 800be3c:	e3ea      	b.n	800c614 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800be3e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800be42:	f003 0304 	and.w	r3, r3, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <f_mkfs+0x86>
 800be4a:	230a      	movs	r3, #10
 800be4c:	e3e2      	b.n	800c614 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800be4e:	f107 0214 	add.w	r2, r7, #20
 800be52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800be56:	2103      	movs	r1, #3
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fd fed5 	bl	8009c08 <disk_ioctl>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10c      	bne.n	800be7e <f_mkfs+0xb6>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d009      	beq.n	800be7e <f_mkfs+0xb6>
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be70:	d805      	bhi.n	800be7e <f_mkfs+0xb6>
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	1e5a      	subs	r2, r3, #1
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	4013      	ands	r3, r2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <f_mkfs+0xba>
 800be7e:	2301      	movs	r3, #1
 800be80:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800be82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be86:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <f_mkfs+0xce>
 800be8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	429a      	cmp	r2, r3
 800be94:	d309      	bcc.n	800beaa <f_mkfs+0xe2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be9c:	d805      	bhi.n	800beaa <f_mkfs+0xe2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	1e5a      	subs	r2, r3, #1
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4013      	ands	r3, r2
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <f_mkfs+0xe6>
 800beaa:	2313      	movs	r3, #19
 800beac:	e3b2      	b.n	800c614 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800beae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bec8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	fb02 f303 	mul.w	r3, r2, r3
 800bed0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <f_mkfs+0x114>
 800bed8:	230e      	movs	r3, #14
 800beda:	e39b      	b.n	800c614 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bedc:	f107 0210 	add.w	r2, r7, #16
 800bee0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bee4:	2101      	movs	r1, #1
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fd fe8e 	bl	8009c08 <disk_ioctl>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <f_mkfs+0x12e>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e38e      	b.n	800c614 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bef6:	7afb      	ldrb	r3, [r7, #11]
 800bef8:	f003 0308 	and.w	r3, r3, #8
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <f_mkfs+0x13c>
 800bf00:	2300      	movs	r3, #0
 800bf02:	e000      	b.n	800bf06 <f_mkfs+0x13e>
 800bf04:	233f      	movs	r3, #63	; 0x3f
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d901      	bls.n	800bf14 <f_mkfs+0x14c>
 800bf10:	230e      	movs	r3, #14
 800bf12:	e37f      	b.n	800c614 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf20:	d801      	bhi.n	800bf26 <f_mkfs+0x15e>
 800bf22:	230e      	movs	r3, #14
 800bf24:	e376      	b.n	800c614 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b80      	cmp	r3, #128	; 0x80
 800bf2a:	d901      	bls.n	800bf30 <f_mkfs+0x168>
 800bf2c:	2313      	movs	r3, #19
 800bf2e:	e371      	b.n	800c614 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bf30:	7afb      	ldrb	r3, [r7, #11]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00d      	beq.n	800bf56 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bf3a:	7afb      	ldrb	r3, [r7, #11]
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d004      	beq.n	800bf4e <f_mkfs+0x186>
 800bf44:	7afb      	ldrb	r3, [r7, #11]
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d103      	bne.n	800bf56 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf54:	e009      	b.n	800bf6a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bf56:	7afb      	ldrb	r3, [r7, #11]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <f_mkfs+0x19c>
 800bf60:	2313      	movs	r3, #19
 800bf62:	e357      	b.n	800c614 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bf64:	2302      	movs	r3, #2
 800bf66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bf6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d13c      	bne.n	800bff0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d11b      	bne.n	800bfb4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	0c5b      	lsrs	r3, r3, #17
 800bf80:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bf82:	2300      	movs	r3, #0
 800bf84:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf86:	2301      	movs	r3, #1
 800bf88:	653b      	str	r3, [r7, #80]	; 0x50
 800bf8a:	e005      	b.n	800bf98 <f_mkfs+0x1d0>
 800bf8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf8e:	3301      	adds	r3, #1
 800bf90:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	653b      	str	r3, [r7, #80]	; 0x50
 800bf98:	4a2d      	ldr	r2, [pc, #180]	; (800c050 <f_mkfs+0x288>)
 800bf9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d007      	beq.n	800bfb4 <f_mkfs+0x1ec>
 800bfa4:	4a2a      	ldr	r2, [pc, #168]	; (800c050 <f_mkfs+0x288>)
 800bfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfac:	461a      	mov	r2, r3
 800bfae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d2eb      	bcs.n	800bf8c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfbc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	3302      	adds	r3, #2
 800bfc2:	009a      	lsls	r2, r3, #2
 800bfc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfc6:	4413      	add	r3, r2
 800bfc8:	1e5a      	subs	r2, r3, #1
 800bfca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bfd2:	2320      	movs	r3, #32
 800bfd4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d903      	bls.n	800bfec <f_mkfs+0x224>
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	4a1b      	ldr	r2, [pc, #108]	; (800c054 <f_mkfs+0x28c>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d952      	bls.n	800c092 <f_mkfs+0x2ca>
 800bfec:	230e      	movs	r3, #14
 800bfee:	e311      	b.n	800c614 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d11b      	bne.n	800c02e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	0b1b      	lsrs	r3, r3, #12
 800bffa:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bffc:	2300      	movs	r3, #0
 800bffe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c000:	2301      	movs	r3, #1
 800c002:	653b      	str	r3, [r7, #80]	; 0x50
 800c004:	e005      	b.n	800c012 <f_mkfs+0x24a>
 800c006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c008:	3301      	adds	r3, #1
 800c00a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	653b      	str	r3, [r7, #80]	; 0x50
 800c012:	4a11      	ldr	r2, [pc, #68]	; (800c058 <f_mkfs+0x290>)
 800c014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d007      	beq.n	800c02e <f_mkfs+0x266>
 800c01e:	4a0e      	ldr	r2, [pc, #56]	; (800c058 <f_mkfs+0x290>)
 800c020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c026:	461a      	mov	r2, r3
 800c028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d2eb      	bcs.n	800c006 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c032:	fbb2 f3f3 	udiv	r3, r2, r3
 800c036:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c03e:	4293      	cmp	r3, r2
 800c040:	d90c      	bls.n	800c05c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	3302      	adds	r3, #2
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c04a:	e012      	b.n	800c072 <f_mkfs+0x2aa>
 800c04c:	24000034 	.word	0x24000034
 800c050:	0800c880 	.word	0x0800c880
 800c054:	0ffffff5 	.word	0x0ffffff5
 800c058:	0800c890 	.word	0x0800c890
				} else {
					fmt = FS_FAT12;
 800c05c:	2301      	movs	r3, #1
 800c05e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800c062:	6a3a      	ldr	r2, [r7, #32]
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	3301      	adds	r3, #1
 800c06c:	085b      	lsrs	r3, r3, #1
 800c06e:	3303      	adds	r3, #3
 800c070:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800c072:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c076:	4413      	add	r3, r2
 800c078:	1e5a      	subs	r2, r3, #1
 800c07a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c080:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800c082:	2301      	movs	r3, #1
 800c084:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800c086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c088:	015a      	lsls	r2, r3, #5
 800c08a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c08c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c090:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800c092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c096:	4413      	add	r3, r2
 800c098:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800c09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c09c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c09e:	fb02 f203 	mul.w	r2, r2, r3
 800c0a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0a4:	4413      	add	r3, r2
 800c0a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0a8:	4413      	add	r3, r2
 800c0aa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	1e5a      	subs	r2, r3, #1
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	425b      	negs	r3, r3
 800c0b8:	401a      	ands	r2, r3
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800c0c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d108      	bne.n	800c0da <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800c0c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0cc:	4413      	add	r3, r2
 800c0ce:	657b      	str	r3, [r7, #84]	; 0x54
 800c0d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0d4:	4413      	add	r3, r2
 800c0d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0d8:	e006      	b.n	800c0e8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800c0da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0e4:	4413      	add	r3, r2
 800c0e6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800c0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ea:	011a      	lsls	r2, r3, #4
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	441a      	add	r2, r3
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	1ad2      	subs	r2, r2, r3
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d901      	bls.n	800c0fe <f_mkfs+0x336>
 800c0fa:	230e      	movs	r3, #14
 800c0fc:	e28a      	b.n	800c614 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c108:	fb01 f303 	mul.w	r3, r1, r3
 800c10c:	1ad2      	subs	r2, r2, r3
 800c10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c110:	1ad2      	subs	r2, r2, r3
 800c112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c114:	fbb2 f3f3 	udiv	r3, r2, r3
 800c118:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800c11a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c11e:	2b03      	cmp	r3, #3
 800c120:	d10f      	bne.n	800c142 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c128:	4293      	cmp	r3, r2
 800c12a:	d80a      	bhi.n	800c142 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <f_mkfs+0x376>
 800c132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c134:	085b      	lsrs	r3, r3, #1
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d144      	bne.n	800c1c8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800c13e:	230e      	movs	r3, #14
 800c140:	e268      	b.n	800c614 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800c142:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c146:	2b02      	cmp	r3, #2
 800c148:	d133      	bne.n	800c1b2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c150:	4293      	cmp	r3, r2
 800c152:	d91e      	bls.n	800c192 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d107      	bne.n	800c16a <f_mkfs+0x3a2>
 800c15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	2b40      	cmp	r3, #64	; 0x40
 800c160:	d803      	bhi.n	800c16a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800c162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	607b      	str	r3, [r7, #4]
 800c168:	e033      	b.n	800c1d2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800c16a:	7afb      	ldrb	r3, [r7, #11]
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800c174:	2303      	movs	r3, #3
 800c176:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c17a:	e02a      	b.n	800c1d2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d105      	bne.n	800c18e <f_mkfs+0x3c6>
 800c182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	607b      	str	r3, [r7, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b80      	cmp	r3, #128	; 0x80
 800c18c:	d91e      	bls.n	800c1cc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800c18e:	230e      	movs	r3, #14
 800c190:	e240      	b.n	800c614 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800c192:	6a3b      	ldr	r3, [r7, #32]
 800c194:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c198:	4293      	cmp	r3, r2
 800c19a:	d80a      	bhi.n	800c1b2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d105      	bne.n	800c1ae <f_mkfs+0x3e6>
 800c1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	607b      	str	r3, [r7, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b80      	cmp	r3, #128	; 0x80
 800c1ac:	d910      	bls.n	800c1d0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800c1ae:	230e      	movs	r3, #14
 800c1b0:	e230      	b.n	800c614 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800c1b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d10c      	bne.n	800c1d4 <f_mkfs+0x40c>
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d907      	bls.n	800c1d4 <f_mkfs+0x40c>
 800c1c4:	230e      	movs	r3, #14
 800c1c6:	e225      	b.n	800c614 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c1c8:	bf00      	nop
 800c1ca:	e6ce      	b.n	800bf6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c1cc:	bf00      	nop
 800c1ce:	e6cc      	b.n	800bf6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c1d0:	bf00      	nop
			pau = au;
 800c1d2:	e6ca      	b.n	800bf6a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800c1d4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800c1d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1d8:	461a      	mov	r2, r3
 800c1da:	2100      	movs	r1, #0
 800c1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1de:	f7fd fdd4 	bl	8009d8a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800c1e2:	220b      	movs	r2, #11
 800c1e4:	49bc      	ldr	r1, [pc, #752]	; (800c4d8 <f_mkfs+0x710>)
 800c1e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e8:	f7fd fdae 	bl	8009d48 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	330b      	adds	r3, #11
 800c1f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fd fd60 	bl	8009cba <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	330d      	adds	r3, #13
 800c1fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c200:	b2d2      	uxtb	r2, r2
 800c202:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	330e      	adds	r3, #14
 800c208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c20a:	b292      	uxth	r2, r2
 800c20c:	4611      	mov	r1, r2
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fd fd53 	bl	8009cba <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	3310      	adds	r3, #16
 800c218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	f103 0211 	add.w	r2, r3, #17
 800c224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d002      	beq.n	800c232 <f_mkfs+0x46a>
 800c22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c22e:	b29b      	uxth	r3, r3
 800c230:	e000      	b.n	800c234 <f_mkfs+0x46c>
 800c232:	2300      	movs	r3, #0
 800c234:	4619      	mov	r1, r3
 800c236:	4610      	mov	r0, r2
 800c238:	f7fd fd3f 	bl	8009cba <st_word>
		if (sz_vol < 0x10000) {
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c242:	d208      	bcs.n	800c256 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	3313      	adds	r3, #19
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	b292      	uxth	r2, r2
 800c24c:	4611      	mov	r1, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fd fd33 	bl	8009cba <st_word>
 800c254:	e006      	b.n	800c264 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	3320      	adds	r3, #32
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd fd46 	bl	8009cf0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	3315      	adds	r3, #21
 800c268:	22f8      	movs	r2, #248	; 0xf8
 800c26a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	3318      	adds	r3, #24
 800c270:	213f      	movs	r1, #63	; 0x3f
 800c272:	4618      	mov	r0, r3
 800c274:	f7fd fd21 	bl	8009cba <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	331a      	adds	r3, #26
 800c27c:	21ff      	movs	r1, #255	; 0xff
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fd fd1b 	bl	8009cba <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	331c      	adds	r3, #28
 800c288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd fd30 	bl	8009cf0 <st_dword>
		if (fmt == FS_FAT32) {
 800c290:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c294:	2b03      	cmp	r3, #3
 800c296:	d131      	bne.n	800c2fc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c29e:	f7fd fa7d 	bl	800979c <get_fattime>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f7fd fd22 	bl	8009cf0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ae:	3324      	adds	r3, #36	; 0x24
 800c2b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fd fd1c 	bl	8009cf0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	332c      	adds	r3, #44	; 0x2c
 800c2bc:	2102      	movs	r1, #2
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fd fd16 	bl	8009cf0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	3330      	adds	r3, #48	; 0x30
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd fcf5 	bl	8009cba <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	3332      	adds	r3, #50	; 0x32
 800c2d4:	2106      	movs	r1, #6
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd fcef 	bl	8009cba <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	3340      	adds	r3, #64	; 0x40
 800c2e0:	2280      	movs	r2, #128	; 0x80
 800c2e2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	3342      	adds	r3, #66	; 0x42
 800c2e8:	2229      	movs	r2, #41	; 0x29
 800c2ea:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	3347      	adds	r3, #71	; 0x47
 800c2f0:	2213      	movs	r2, #19
 800c2f2:	497a      	ldr	r1, [pc, #488]	; (800c4dc <f_mkfs+0x714>)
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fd fd27 	bl	8009d48 <mem_cpy>
 800c2fa:	e020      	b.n	800c33e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c302:	f7fd fa4b 	bl	800979c <get_fattime>
 800c306:	4603      	mov	r3, r0
 800c308:	4619      	mov	r1, r3
 800c30a:	4620      	mov	r0, r4
 800c30c:	f7fd fcf0 	bl	8009cf0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	3316      	adds	r3, #22
 800c314:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c316:	b292      	uxth	r2, r2
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fd fccd 	bl	8009cba <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	3324      	adds	r3, #36	; 0x24
 800c324:	2280      	movs	r2, #128	; 0x80
 800c326:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	3326      	adds	r3, #38	; 0x26
 800c32c:	2229      	movs	r2, #41	; 0x29
 800c32e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	332b      	adds	r3, #43	; 0x2b
 800c334:	2213      	movs	r2, #19
 800c336:	496a      	ldr	r1, [pc, #424]	; (800c4e0 <f_mkfs+0x718>)
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fd fd05 	bl	8009d48 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c344:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fd fcb6 	bl	8009cba <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c34e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c352:	2301      	movs	r3, #1
 800c354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c358:	f7fd fc36 	bl	8009bc8 <disk_write>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <f_mkfs+0x59e>
 800c362:	2301      	movs	r3, #1
 800c364:	e156      	b.n	800c614 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c366:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d140      	bne.n	800c3f0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c370:	1d9a      	adds	r2, r3, #6
 800c372:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c376:	2301      	movs	r3, #1
 800c378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c37a:	f7fd fc25 	bl	8009bc8 <disk_write>
			mem_set(buf, 0, ss);
 800c37e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c380:	461a      	mov	r2, r3
 800c382:	2100      	movs	r1, #0
 800c384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c386:	f7fd fd00 	bl	8009d8a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c38a:	4956      	ldr	r1, [pc, #344]	; (800c4e4 <f_mkfs+0x71c>)
 800c38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c38e:	f7fd fcaf 	bl	8009cf0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c398:	4953      	ldr	r1, [pc, #332]	; (800c4e8 <f_mkfs+0x720>)
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fd fca8 	bl	8009cf0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	f7fd fc9f 	bl	8009cf0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c3b8:	2102      	movs	r1, #2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fd fc98 	bl	8009cf0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fd fc75 	bl	8009cba <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	1dda      	adds	r2, r3, #7
 800c3d4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3d8:	2301      	movs	r3, #1
 800c3da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3dc:	f7fd fbf4 	bl	8009bc8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3ec:	f7fd fbec 	bl	8009bc8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3f6:	f7fd fcc8 	bl	8009d8a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c3fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3fc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c3fe:	2300      	movs	r3, #0
 800c400:	64bb      	str	r3, [r7, #72]	; 0x48
 800c402:	e04b      	b.n	800c49c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c404:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d113      	bne.n	800c434 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c40c:	f06f 0107 	mvn.w	r1, #7
 800c410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c412:	f7fd fc6d 	bl	8009cf0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	3304      	adds	r3, #4
 800c41a:	f04f 31ff 	mov.w	r1, #4294967295
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fd fc66 	bl	8009cf0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	3308      	adds	r3, #8
 800c428:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fd fc5f 	bl	8009cf0 <st_dword>
 800c432:	e00b      	b.n	800c44c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <f_mkfs+0x678>
 800c43c:	4b2b      	ldr	r3, [pc, #172]	; (800c4ec <f_mkfs+0x724>)
 800c43e:	e001      	b.n	800c444 <f_mkfs+0x67c>
 800c440:	f06f 0307 	mvn.w	r3, #7
 800c444:	4619      	mov	r1, r3
 800c446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c448:	f7fd fc52 	bl	8009cf0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c44c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c44e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	4293      	cmp	r3, r2
 800c456:	bf28      	it	cs
 800c458:	4613      	movcs	r3, r2
 800c45a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c45c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c462:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c466:	f7fd fbaf 	bl	8009bc8 <disk_write>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <f_mkfs+0x6ac>
 800c470:	2301      	movs	r3, #1
 800c472:	e0cf      	b.n	800c614 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c474:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c476:	461a      	mov	r2, r3
 800c478:	2100      	movs	r1, #0
 800c47a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c47c:	f7fd fc85 	bl	8009d8a <mem_set>
				sect += n; nsect -= n;
 800c480:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c484:	4413      	add	r3, r2
 800c486:	667b      	str	r3, [r7, #100]	; 0x64
 800c488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c48a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1dc      	bne.n	800c450 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c498:	3301      	adds	r3, #1
 800c49a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c49c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d3af      	bcc.n	800c404 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c4a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d101      	bne.n	800c4b0 <f_mkfs+0x6e8>
 800c4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ae:	e000      	b.n	800c4b2 <f_mkfs+0x6ea>
 800c4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c4b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	bf28      	it	cs
 800c4bc:	4613      	movcs	r3, r2
 800c4be:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c4c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4ca:	f7fd fb7d 	bl	8009bc8 <disk_write>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00d      	beq.n	800c4f0 <f_mkfs+0x728>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e09d      	b.n	800c614 <f_mkfs+0x84c>
 800c4d8:	0800c780 	.word	0x0800c780
 800c4dc:	0800c78c 	.word	0x0800c78c
 800c4e0:	0800c7a0 	.word	0x0800c7a0
 800c4e4:	41615252 	.word	0x41615252
 800c4e8:	61417272 	.word	0x61417272
 800c4ec:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c4f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4f4:	4413      	add	r3, r2
 800c4f6:	667b      	str	r3, [r7, #100]	; 0x64
 800c4f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1d6      	bne.n	800c4b4 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c506:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d103      	bne.n	800c516 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c50e:	230c      	movs	r3, #12
 800c510:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c514:	e010      	b.n	800c538 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c51c:	d303      	bcc.n	800c526 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c51e:	2306      	movs	r3, #6
 800c520:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c524:	e008      	b.n	800c538 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c526:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d101      	bne.n	800c532 <f_mkfs+0x76a>
 800c52e:	2304      	movs	r3, #4
 800c530:	e000      	b.n	800c534 <f_mkfs+0x76c>
 800c532:	2301      	movs	r3, #1
 800c534:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c538:	7afb      	ldrb	r3, [r7, #11]
 800c53a:	f003 0308 	and.w	r3, r3, #8
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d15b      	bne.n	800c5fa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c542:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c544:	461a      	mov	r2, r3
 800c546:	2100      	movs	r1, #0
 800c548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c54a:	f7fd fc1e 	bl	8009d8a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c554:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fd fbae 	bl	8009cba <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c564:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	3301      	adds	r3, #1
 800c570:	2201      	movs	r2, #1
 800c572:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	3302      	adds	r3, #2
 800c578:	2201      	movs	r2, #1
 800c57a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	3303      	adds	r3, #3
 800c580:	2200      	movs	r2, #0
 800c582:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	3304      	adds	r3, #4
 800c588:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c58c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	441a      	add	r2, r3
 800c594:	4b21      	ldr	r3, [pc, #132]	; (800c61c <f_mkfs+0x854>)
 800c596:	fba3 1302 	umull	r1, r3, r3, r2
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	0852      	lsrs	r2, r2, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	0b5b      	lsrs	r3, r3, #13
 800c5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	3305      	adds	r3, #5
 800c5a8:	22fe      	movs	r2, #254	; 0xfe
 800c5aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c5ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ae:	089b      	lsrs	r3, r3, #2
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	3306      	adds	r3, #6
 800c5b6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c5ba:	b2d2      	uxtb	r2, r2
 800c5bc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	3307      	adds	r3, #7
 800c5c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fd fb8e 	bl	8009cf0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	330c      	adds	r3, #12
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fd fb87 	bl	8009cf0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c5e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5ec:	f7fd faec 	bl	8009bc8 <disk_write>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <f_mkfs+0x832>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e00c      	b.n	800c614 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c5fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f7fd fb00 	bl	8009c08 <disk_ioctl>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <f_mkfs+0x84a>
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <f_mkfs+0x84c>

	return FR_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3774      	adds	r7, #116	; 0x74
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd90      	pop	{r4, r7, pc}
 800c61c:	0515565b 	.word	0x0515565b

0800c620 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c62e:	2301      	movs	r3, #1
 800c630:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c636:	4b1f      	ldr	r3, [pc, #124]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c638:	7a5b      	ldrb	r3, [r3, #9]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d131      	bne.n	800c6a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c640:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c642:	7a5b      	ldrb	r3, [r3, #9]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	461a      	mov	r2, r3
 800c648:	4b1a      	ldr	r3, [pc, #104]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c64a:	2100      	movs	r1, #0
 800c64c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c64e:	4b19      	ldr	r3, [pc, #100]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c650:	7a5b      	ldrb	r3, [r3, #9]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c65e:	4b15      	ldr	r3, [pc, #84]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c660:	7a5b      	ldrb	r3, [r3, #9]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	461a      	mov	r2, r3
 800c666:	4b13      	ldr	r3, [pc, #76]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c668:	4413      	add	r3, r2
 800c66a:	79fa      	ldrb	r2, [r7, #7]
 800c66c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c66e:	4b11      	ldr	r3, [pc, #68]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c670:	7a5b      	ldrb	r3, [r3, #9]
 800c672:	b2db      	uxtb	r3, r3
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	b2d1      	uxtb	r1, r2
 800c678:	4a0e      	ldr	r2, [pc, #56]	; (800c6b4 <FATFS_LinkDriverEx+0x94>)
 800c67a:	7251      	strb	r1, [r2, #9]
 800c67c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c67e:	7dbb      	ldrb	r3, [r7, #22]
 800c680:	3330      	adds	r3, #48	; 0x30
 800c682:	b2da      	uxtb	r2, r3
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	3301      	adds	r3, #1
 800c68c:	223a      	movs	r2, #58	; 0x3a
 800c68e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	3302      	adds	r3, #2
 800c694:	222f      	movs	r2, #47	; 0x2f
 800c696:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	3303      	adds	r3, #3
 800c69c:	2200      	movs	r2, #0
 800c69e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	2400005c 	.word	0x2400005c

0800c6b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff ffaa 	bl	800c620 <FATFS_LinkDriverEx>
 800c6cc:	4603      	mov	r3, r0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <__libc_init_array>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	4d0d      	ldr	r5, [pc, #52]	; (800c710 <__libc_init_array+0x38>)
 800c6dc:	4c0d      	ldr	r4, [pc, #52]	; (800c714 <__libc_init_array+0x3c>)
 800c6de:	1b64      	subs	r4, r4, r5
 800c6e0:	10a4      	asrs	r4, r4, #2
 800c6e2:	2600      	movs	r6, #0
 800c6e4:	42a6      	cmp	r6, r4
 800c6e6:	d109      	bne.n	800c6fc <__libc_init_array+0x24>
 800c6e8:	4d0b      	ldr	r5, [pc, #44]	; (800c718 <__libc_init_array+0x40>)
 800c6ea:	4c0c      	ldr	r4, [pc, #48]	; (800c71c <__libc_init_array+0x44>)
 800c6ec:	f000 f82e 	bl	800c74c <_init>
 800c6f0:	1b64      	subs	r4, r4, r5
 800c6f2:	10a4      	asrs	r4, r4, #2
 800c6f4:	2600      	movs	r6, #0
 800c6f6:	42a6      	cmp	r6, r4
 800c6f8:	d105      	bne.n	800c706 <__libc_init_array+0x2e>
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c700:	4798      	blx	r3
 800c702:	3601      	adds	r6, #1
 800c704:	e7ee      	b.n	800c6e4 <__libc_init_array+0xc>
 800c706:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70a:	4798      	blx	r3
 800c70c:	3601      	adds	r6, #1
 800c70e:	e7f2      	b.n	800c6f6 <__libc_init_array+0x1e>
 800c710:	0800c8a8 	.word	0x0800c8a8
 800c714:	0800c8a8 	.word	0x0800c8a8
 800c718:	0800c8a8 	.word	0x0800c8a8
 800c71c:	0800c8ac 	.word	0x0800c8ac

0800c720 <memcpy>:
 800c720:	440a      	add	r2, r1
 800c722:	4291      	cmp	r1, r2
 800c724:	f100 33ff 	add.w	r3, r0, #4294967295
 800c728:	d100      	bne.n	800c72c <memcpy+0xc>
 800c72a:	4770      	bx	lr
 800c72c:	b510      	push	{r4, lr}
 800c72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c736:	4291      	cmp	r1, r2
 800c738:	d1f9      	bne.n	800c72e <memcpy+0xe>
 800c73a:	bd10      	pop	{r4, pc}

0800c73c <memset>:
 800c73c:	4402      	add	r2, r0
 800c73e:	4603      	mov	r3, r0
 800c740:	4293      	cmp	r3, r2
 800c742:	d100      	bne.n	800c746 <memset+0xa>
 800c744:	4770      	bx	lr
 800c746:	f803 1b01 	strb.w	r1, [r3], #1
 800c74a:	e7f9      	b.n	800c740 <memset+0x4>

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
